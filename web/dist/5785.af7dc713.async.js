/*! For license information please see 5785.af7dc713.async.js.LICENSE.txt */
(self.webpackChunk = self.webpackChunk || []).push([
  [5785],
  {
    48689: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return l;
        },
      });
      var r = n(87462),
        i = n(62435),
        o = {
          icon: {
            tag: 'svg',
            attrs: { viewBox: '64 64 896 896', focusable: 'false' },
            children: [
              {
                tag: 'path',
                attrs: {
                  d: 'M360 184h-8c4.4 0 8-3.6 8-8v8h304v-8c0 4.4 3.6 8 8 8h-8v72h72v-80c0-35.3-28.7-64-64-64H352c-35.3 0-64 28.7-64 64v80h72v-72zm504 72H160c-17.7 0-32 14.3-32 32v32c0 4.4 3.6 8 8 8h60.4l24.7 523c1.6 34.1 29.8 61 63.9 61h454c34.2 0 62.3-26.8 63.9-61l24.7-523H888c4.4 0 8-3.6 8-8v-32c0-17.7-14.3-32-32-32zM731.3 840H292.7l-24.2-512h487l-24.2 512z',
                },
              },
            ],
          },
          name: 'delete',
          theme: 'outlined',
        },
        a = n(84089),
        s = function (e, t) {
          return i.createElement(a.Z, (0, r.Z)({}, e, { ref: t, icon: o }));
        };
      var l = i.forwardRef(s);
    },
    3089: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return l;
        },
      });
      var r = n(87462),
        i = n(62435),
        o = {
          icon: {
            tag: 'svg',
            attrs: { viewBox: '64 64 896 896', focusable: 'false' },
            children: [
              {
                tag: 'path',
                attrs: {
                  d: 'M696 480H328c-4.4 0-8 3.6-8 8v48c0 4.4 3.6 8 8 8h368c4.4 0 8-3.6 8-8v-48c0-4.4-3.6-8-8-8z',
                },
              },
              {
                tag: 'path',
                attrs: {
                  d: 'M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm0 820c-205.4 0-372-166.6-372-372s166.6-372 372-372 372 166.6 372 372-166.6 372-372 372z',
                },
              },
            ],
          },
          name: 'minus-circle',
          theme: 'outlined',
        },
        a = n(84089),
        s = function (e, t) {
          return i.createElement(a.Z, (0, r.Z)({}, e, { ref: t, icon: o }));
        };
      var l = i.forwardRef(s);
    },
    81643: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return r;
        },
      });
      const r = (e) => (e ? ('function' == typeof e ? e() : e) : null);
    },
    57838: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return i;
        },
      });
      var r = n(62435);
      function i() {
        const [, e] = r.useReducer((e) => e + 1, 0);
        return e;
      }
    },
    38925: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return L;
        },
      });
      var r = n(62435),
        i = n(89739),
        o = n(4340),
        a = n(97937),
        s = n(21640),
        l = n(78860),
        c = n(93967),
        h = n.n(c),
        u = n(82225),
        d = n(64217),
        p = n(96159),
        f = n(53124),
        g = n(54548),
        m = n(14747),
        v = n(91945);
      const b = (e, t, n, r, i) => ({
          background: e,
          border: `${(0, g.bf)(r.lineWidth)} ${r.lineType} ${t}`,
          [`${i}-icon`]: { color: n },
        }),
        y = (e) => {
          const {
            componentCls: t,
            motionDurationSlow: n,
            marginXS: r,
            marginSM: i,
            fontSize: o,
            fontSizeLG: a,
            lineHeight: s,
            borderRadiusLG: l,
            motionEaseInOutCirc: c,
            withDescriptionIconSize: h,
            colorText: u,
            colorTextHeading: d,
            withDescriptionPadding: p,
            defaultPadding: f,
          } = e;
          return {
            [t]: Object.assign(Object.assign({}, (0, m.Wf)(e)), {
              position: 'relative',
              display: 'flex',
              alignItems: 'center',
              padding: f,
              wordWrap: 'break-word',
              borderRadius: l,
              [`&${t}-rtl`]: { direction: 'rtl' },
              [`${t}-content`]: { flex: 1, minWidth: 0 },
              [`${t}-icon`]: { marginInlineEnd: r, lineHeight: 0 },
              '&-description': { display: 'none', fontSize: o, lineHeight: s },
              '&-message': { color: d },
              [`&${t}-motion-leave`]: {
                overflow: 'hidden',
                opacity: 1,
                transition: `max-height ${n} ${c}, opacity ${n} ${c},\n        padding-top ${n} ${c}, padding-bottom ${n} ${c},\n        margin-bottom ${n} ${c}`,
              },
              [`&${t}-motion-leave-active`]: {
                maxHeight: 0,
                marginBottom: '0 !important',
                paddingTop: 0,
                paddingBottom: 0,
                opacity: 0,
              },
            }),
            [`${t}-with-description`]: {
              alignItems: 'flex-start',
              padding: p,
              [`${t}-icon`]: { marginInlineEnd: i, fontSize: h, lineHeight: 0 },
              [`${t}-message`]: {
                display: 'block',
                marginBottom: r,
                color: d,
                fontSize: a,
              },
              [`${t}-description`]: { display: 'block', color: u },
            },
            [`${t}-banner`]: {
              marginBottom: 0,
              border: '0 !important',
              borderRadius: 0,
            },
          };
        },
        _ = (e) => {
          const {
            componentCls: t,
            colorSuccess: n,
            colorSuccessBorder: r,
            colorSuccessBg: i,
            colorWarning: o,
            colorWarningBorder: a,
            colorWarningBg: s,
            colorError: l,
            colorErrorBorder: c,
            colorErrorBg: h,
            colorInfo: u,
            colorInfoBorder: d,
            colorInfoBg: p,
          } = e;
          return {
            [t]: {
              '&-success': b(i, r, n, e, t),
              '&-info': b(p, d, u, e, t),
              '&-warning': b(s, a, o, e, t),
              '&-error': Object.assign(Object.assign({}, b(h, c, l, e, t)), {
                [`${t}-description > pre`]: { margin: 0, padding: 0 },
              }),
            },
          };
        },
        w = (e) => {
          const {
            componentCls: t,
            iconCls: n,
            motionDurationMid: r,
            marginXS: i,
            fontSizeIcon: o,
            colorIcon: a,
            colorIconHover: s,
          } = e;
          return {
            [t]: {
              '&-action': { marginInlineStart: i },
              [`${t}-close-icon`]: {
                marginInlineStart: i,
                padding: 0,
                overflow: 'hidden',
                fontSize: o,
                lineHeight: (0, g.bf)(o),
                backgroundColor: 'transparent',
                border: 'none',
                outline: 'none',
                cursor: 'pointer',
                [`${n}-close`]: {
                  color: a,
                  transition: `color ${r}`,
                  '&:hover': { color: s },
                },
              },
              '&-close-text': {
                color: a,
                transition: `color ${r}`,
                '&:hover': { color: s },
              },
            },
          };
        };
      var S = (0, v.I$)(
          'Alert',
          (e) => [y(e), _(e), w(e)],
          (e) => ({
            withDescriptionIconSize: e.fontSizeHeading3,
            defaultPadding: `${e.paddingContentVerticalSM}px 12px`,
            withDescriptionPadding: `${e.paddingMD}px ${e.paddingContentHorizontalLG}px`,
          }),
        ),
        A = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const x = { success: i.Z, info: l.Z, error: o.Z, warning: s.Z },
        P = (e) => {
          const { icon: t, prefixCls: n, type: i } = e,
            o = x[i] || null;
          return t
            ? (0, p.wm)(
                t,
                r.createElement('span', { className: `${n}-icon` }, t),
                () => ({
                  className: h()(`${n}-icon`, {
                    [t.props.className]: t.props.className,
                  }),
                }),
              )
            : r.createElement(o, { className: `${n}-icon` });
        },
        E = (e) => {
          const {
              isClosable: t,
              prefixCls: n,
              closeIcon: i,
              handleClose: o,
            } = e,
            s = !0 === i || void 0 === i ? r.createElement(a.Z, null) : i;
          return t
            ? r.createElement(
                'button',
                {
                  type: 'button',
                  onClick: o,
                  className: `${n}-close-icon`,
                  tabIndex: 0,
                },
                s,
              )
            : null;
        };
      var C = (e) => {
          const {
              description: t,
              prefixCls: n,
              message: i,
              banner: o,
              className: a,
              rootClassName: s,
              style: l,
              onMouseEnter: c,
              onMouseLeave: p,
              onClick: g,
              afterClose: m,
              showIcon: v,
              closable: b,
              closeText: y,
              closeIcon: _,
              action: w,
            } = e,
            x = A(e, [
              'description',
              'prefixCls',
              'message',
              'banner',
              'className',
              'rootClassName',
              'style',
              'onMouseEnter',
              'onMouseLeave',
              'onClick',
              'afterClose',
              'showIcon',
              'closable',
              'closeText',
              'closeIcon',
              'action',
            ]),
            [C, T] = r.useState(!1);
          const k = r.useRef(null),
            { getPrefixCls: M, direction: R, alert: O } = r.useContext(f.E_),
            D = M('alert', n),
            [I, L, F] = S(D),
            N = (t) => {
              var n;
              T(!0), null === (n = e.onClose) || void 0 === n || n.call(e, t);
            },
            j = r.useMemo(
              () => (void 0 !== e.type ? e.type : o ? 'warning' : 'info'),
              [e.type, o],
            ),
            B = r.useMemo(
              () => !!y || ('boolean' == typeof b ? b : !1 !== _ && null != _),
              [y, _, b],
            ),
            W = !(!o || void 0 !== v) || v,
            z = h()(
              D,
              `${D}-${j}`,
              {
                [`${D}-with-description`]: !!t,
                [`${D}-no-icon`]: !W,
                [`${D}-banner`]: !!o,
                [`${D}-rtl`]: 'rtl' === R,
              },
              null == O ? void 0 : O.className,
              a,
              s,
              F,
              L,
            ),
            $ = (0, d.Z)(x, { aria: !0, data: !0 });
          return I(
            r.createElement(
              u.ZP,
              {
                visible: !C,
                motionName: `${D}-motion`,
                motionAppear: !1,
                motionEnter: !1,
                onLeaveStart: (e) => ({ maxHeight: e.offsetHeight }),
                onLeaveEnd: m,
              },
              (n) => {
                let { className: o, style: a } = n;
                return r.createElement(
                  'div',
                  Object.assign(
                    {
                      ref: k,
                      'data-show': !C,
                      className: h()(z, o),
                      style: Object.assign(
                        Object.assign(
                          Object.assign({}, null == O ? void 0 : O.style),
                          l,
                        ),
                        a,
                      ),
                      onMouseEnter: c,
                      onMouseLeave: p,
                      onClick: g,
                      role: 'alert',
                    },
                    $,
                  ),
                  W
                    ? r.createElement(P, {
                        description: t,
                        icon: e.icon,
                        prefixCls: D,
                        type: j,
                      })
                    : null,
                  r.createElement(
                    'div',
                    { className: `${D}-content` },
                    i
                      ? r.createElement('div', { className: `${D}-message` }, i)
                      : null,
                    t
                      ? r.createElement(
                          'div',
                          { className: `${D}-description` },
                          t,
                        )
                      : null,
                  ),
                  w
                    ? r.createElement('div', { className: `${D}-action` }, w)
                    : null,
                  r.createElement(E, {
                    isClosable: B,
                    prefixCls: D,
                    closeIcon: y || _,
                    handleClose: N,
                  }),
                );
              },
            ),
          );
        },
        T = n(15671),
        k = n(43144),
        M = n(60136),
        R = n(29388);
      let O = (function (e) {
        (0, M.Z)(n, e);
        var t = (0, R.Z)(n);
        function n() {
          var e;
          return (
            (0, T.Z)(this, n),
            ((e = t.apply(this, arguments)).state = {
              error: void 0,
              info: { componentStack: '' },
            }),
            e
          );
        }
        return (
          (0, k.Z)(n, [
            {
              key: 'componentDidCatch',
              value: function (e, t) {
                this.setState({ error: e, info: t });
              },
            },
            {
              key: 'render',
              value: function () {
                const { message: e, description: t, children: n } = this.props,
                  { error: i, info: o } = this.state,
                  a = o && o.componentStack ? o.componentStack : null,
                  s = void 0 === e ? (i || '').toString() : e,
                  l = void 0 === t ? a : t;
                return i
                  ? r.createElement(C, {
                      type: 'error',
                      message: s,
                      description: r.createElement(
                        'pre',
                        { style: { fontSize: '0.9em', overflowX: 'auto' } },
                        l,
                      ),
                    })
                  : n;
              },
            },
          ]),
          n
        );
      })(r.Component);
      var D = O;
      const I = C;
      I.ErrorBoundary = D;
      var L = I;
    },
    4393: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return O;
        },
      });
      var r = n(62435),
        i = n(93967),
        o = n.n(i),
        a = n(98423),
        s = n(53124),
        l = n(98675),
        c = n(21687),
        h = n(92398),
        u = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      var d = (e) => {
          var { prefixCls: t, className: n, hoverable: i = !0 } = e,
            a = u(e, ['prefixCls', 'className', 'hoverable']);
          const { getPrefixCls: l } = r.useContext(s.E_),
            c = l('card', t),
            h = o()(`${c}-grid`, n, { [`${c}-grid-hoverable`]: i });
          return r.createElement('div', Object.assign({}, a, { className: h }));
        },
        p = n(54548),
        f = n(14747),
        g = n(91945),
        m = n(45503);
      const v = (e) => {
          const {
            antCls: t,
            componentCls: n,
            headerHeight: r,
            cardPaddingBase: i,
            tabsMarginBottom: o,
          } = e;
          return Object.assign(
            Object.assign(
              {
                display: 'flex',
                justifyContent: 'center',
                flexDirection: 'column',
                minHeight: r,
                marginBottom: -1,
                padding: `0 ${(0, p.bf)(i)}`,
                color: e.colorTextHeading,
                fontWeight: e.fontWeightStrong,
                fontSize: e.headerFontSize,
                background: e.headerBg,
                borderBottom: `${(0, p.bf)(e.lineWidth)} ${e.lineType} ${e.colorBorderSecondary}`,
                borderRadius: `${(0, p.bf)(e.borderRadiusLG)} ${(0, p.bf)(e.borderRadiusLG)} 0 0`,
              },
              (0, f.dF)(),
            ),
            {
              '&-wrapper': {
                width: '100%',
                display: 'flex',
                alignItems: 'center',
              },
              '&-title': Object.assign(
                Object.assign({ display: 'inline-block', flex: 1 }, f.vS),
                {
                  [`\n          > ${n}-typography,\n          > ${n}-typography-edit-content\n        `]:
                    { insetInlineStart: 0, marginTop: 0, marginBottom: 0 },
                },
              ),
              [`${t}-tabs-top`]: {
                clear: 'both',
                marginBottom: o,
                color: e.colorText,
                fontWeight: 'normal',
                fontSize: e.fontSize,
                '&-bar': {
                  borderBottom: `${(0, p.bf)(e.lineWidth)} ${e.lineType} ${e.colorBorderSecondary}`,
                },
              },
            },
          );
        },
        b = (e) => {
          const {
            cardPaddingBase: t,
            colorBorderSecondary: n,
            cardShadow: r,
            lineWidth: i,
          } = e;
          return {
            width: '33.33%',
            padding: t,
            border: 0,
            borderRadius: 0,
            boxShadow: `\n      ${(0, p.bf)(i)} 0 0 0 ${n},\n      0 ${(0, p.bf)(i)} 0 0 ${n},\n      ${(0, p.bf)(i)} ${(0, p.bf)(i)} 0 0 ${n},\n      ${(0, p.bf)(i)} 0 0 0 ${n} inset,\n      0 ${(0, p.bf)(i)} 0 0 ${n} inset;\n    `,
            transition: `all ${e.motionDurationMid}`,
            '&-hoverable:hover': {
              position: 'relative',
              zIndex: 1,
              boxShadow: r,
            },
          };
        },
        y = (e) => {
          const {
            componentCls: t,
            iconCls: n,
            actionsLiMargin: r,
            cardActionsIconSize: i,
            colorBorderSecondary: o,
            actionsBg: a,
          } = e;
          return Object.assign(
            Object.assign(
              {
                margin: 0,
                padding: 0,
                listStyle: 'none',
                background: a,
                borderTop: `${(0, p.bf)(e.lineWidth)} ${e.lineType} ${o}`,
                display: 'flex',
                borderRadius: `0 0 ${(0, p.bf)(e.borderRadiusLG)} ${(0, p.bf)(e.borderRadiusLG)}`,
              },
              (0, f.dF)(),
            ),
            {
              '& > li': {
                margin: r,
                color: e.colorTextDescription,
                textAlign: 'center',
                '> span': {
                  position: 'relative',
                  display: 'block',
                  minWidth: e.calc(e.cardActionsIconSize).mul(2).equal(),
                  fontSize: e.fontSize,
                  lineHeight: e.lineHeight,
                  cursor: 'pointer',
                  '&:hover': {
                    color: e.colorPrimary,
                    transition: `color ${e.motionDurationMid}`,
                  },
                  [`a:not(${t}-btn), > ${n}`]: {
                    display: 'inline-block',
                    width: '100%',
                    color: e.colorTextDescription,
                    lineHeight: (0, p.bf)(e.fontHeight),
                    transition: `color ${e.motionDurationMid}`,
                    '&:hover': { color: e.colorPrimary },
                  },
                  [`> ${n}`]: {
                    fontSize: i,
                    lineHeight: (0, p.bf)(e.calc(i).mul(e.lineHeight).equal()),
                  },
                },
                '&:not(:last-child)': {
                  borderInlineEnd: `${(0, p.bf)(e.lineWidth)} ${e.lineType} ${o}`,
                },
              },
            },
          );
        },
        _ = (e) =>
          Object.assign(
            Object.assign(
              {
                margin: `${(0, p.bf)(e.calc(e.marginXXS).mul(-1).equal())} 0`,
                display: 'flex',
              },
              (0, f.dF)(),
            ),
            {
              '&-avatar': { paddingInlineEnd: e.padding },
              '&-detail': {
                overflow: 'hidden',
                flex: 1,
                '> div:not(:last-child)': { marginBottom: e.marginXS },
              },
              '&-title': Object.assign(
                {
                  color: e.colorTextHeading,
                  fontWeight: e.fontWeightStrong,
                  fontSize: e.fontSizeLG,
                },
                f.vS,
              ),
              '&-description': { color: e.colorTextDescription },
            },
          ),
        w = (e) => {
          const { componentCls: t, cardPaddingBase: n, colorFillAlter: r } = e;
          return {
            [`${t}-head`]: {
              padding: `0 ${(0, p.bf)(n)}`,
              background: r,
              '&-title': { fontSize: e.fontSize },
            },
            [`${t}-body`]: {
              padding: `${(0, p.bf)(e.padding)} ${(0, p.bf)(n)}`,
            },
          };
        },
        S = (e) => {
          const { componentCls: t } = e;
          return { overflow: 'hidden', [`${t}-body`]: { userSelect: 'none' } };
        },
        A = (e) => {
          const {
            antCls: t,
            componentCls: n,
            cardShadow: r,
            cardHeadPadding: i,
            colorBorderSecondary: o,
            boxShadowTertiary: a,
            cardPaddingBase: s,
            extraColor: l,
          } = e;
          return {
            [n]: Object.assign(Object.assign({}, (0, f.Wf)(e)), {
              position: 'relative',
              background: e.colorBgContainer,
              borderRadius: e.borderRadiusLG,
              [`&:not(${n}-bordered)`]: { boxShadow: a },
              [`${n}-head`]: v(e),
              [`${n}-extra`]: {
                marginInlineStart: 'auto',
                color: l,
                fontWeight: 'normal',
                fontSize: e.fontSize,
              },
              [`${n}-body`]: Object.assign(
                {
                  padding: s,
                  borderRadius: ` 0 0 ${(0, p.bf)(e.borderRadiusLG)} ${(0, p.bf)(e.borderRadiusLG)}`,
                },
                (0, f.dF)(),
              ),
              [`${n}-grid`]: b(e),
              [`${n}-cover`]: {
                '> *': { display: 'block', width: '100%' },
                [`img, img + ${t}-image-mask`]: {
                  borderRadius: `${(0, p.bf)(e.borderRadiusLG)} ${(0, p.bf)(e.borderRadiusLG)} 0 0`,
                },
              },
              [`${n}-actions`]: y(e),
              [`${n}-meta`]: _(e),
            }),
            [`${n}-bordered`]: {
              border: `${(0, p.bf)(e.lineWidth)} ${e.lineType} ${o}`,
              [`${n}-cover`]: {
                marginTop: -1,
                marginInlineStart: -1,
                marginInlineEnd: -1,
              },
            },
            [`${n}-hoverable`]: {
              cursor: 'pointer',
              transition: `box-shadow ${e.motionDurationMid}, border-color ${e.motionDurationMid}`,
              '&:hover': { borderColor: 'transparent', boxShadow: r },
            },
            [`${n}-contain-grid`]: {
              borderRadius: `${(0, p.bf)(e.borderRadiusLG)} ${(0, p.bf)(e.borderRadiusLG)} 0 0 `,
              [`${n}-body`]: { display: 'flex', flexWrap: 'wrap' },
              [`&:not(${n}-loading) ${n}-body`]: {
                marginBlockStart: e.calc(e.lineWidth).mul(-1).equal(),
                marginInlineStart: e.calc(e.lineWidth).mul(-1).equal(),
                padding: 0,
              },
            },
            [`${n}-contain-tabs`]: {
              [`> ${n}-head`]: {
                minHeight: 0,
                [`${n}-head-title, ${n}-extra`]: { paddingTop: i },
              },
            },
            [`${n}-type-inner`]: w(e),
            [`${n}-loading`]: S(e),
            [`${n}-rtl`]: { direction: 'rtl' },
          };
        },
        x = (e) => {
          const {
            componentCls: t,
            cardPaddingSM: n,
            headerHeightSM: r,
            headerFontSizeSM: i,
          } = e;
          return {
            [`${t}-small`]: {
              [`> ${t}-head`]: {
                minHeight: r,
                padding: `0 ${(0, p.bf)(n)}`,
                fontSize: i,
                [`> ${t}-head-wrapper`]: {
                  [`> ${t}-extra`]: { fontSize: e.fontSize },
                },
              },
              [`> ${t}-body`]: { padding: n },
            },
            [`${t}-small${t}-contain-tabs`]: {
              [`> ${t}-head`]: {
                [`${t}-head-title, ${t}-extra`]: {
                  paddingTop: 0,
                  display: 'flex',
                  alignItems: 'center',
                },
              },
            },
          };
        };
      var P = (0, g.I$)(
          'Card',
          (e) => {
            const t = (0, m.TS)(e, {
              cardShadow: e.boxShadowCard,
              cardHeadPadding: e.padding,
              cardPaddingBase: e.paddingLG,
              cardActionsIconSize: e.fontSize,
              cardPaddingSM: 12,
            });
            return [A(t), x(t)];
          },
          (e) => ({
            headerBg: 'transparent',
            headerFontSize: e.fontSizeLG,
            headerFontSizeSM: e.fontSize,
            headerHeight: e.fontSizeLG * e.lineHeightLG + 2 * e.padding,
            headerHeightSM: e.fontSize * e.lineHeight + 2 * e.paddingXS,
            actionsBg: e.colorBgContainer,
            actionsLiMargin: `${e.paddingSM}px 0`,
            tabsMarginBottom: -e.padding - e.lineWidth,
            extraColor: e.colorText,
          }),
        ),
        E = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const C = (e) => {
          const { prefixCls: t, actions: n = [] } = e;
          return r.createElement(
            'ul',
            { className: `${t}-actions` },
            n.map((e, t) => {
              const i = `action-${t}`;
              return r.createElement(
                'li',
                { style: { width: 100 / n.length + '%' }, key: i },
                r.createElement('span', null, e),
              );
            }),
          );
        },
        T = r.forwardRef((e, t) => {
          const {
              prefixCls: n,
              className: i,
              rootClassName: u,
              style: p,
              extra: f,
              headStyle: g = {},
              bodyStyle: m = {},
              title: v,
              loading: b,
              bordered: y = !0,
              size: _,
              type: w,
              cover: S,
              actions: A,
              tabList: x,
              children: T,
              activeTabKey: k,
              defaultActiveTabKey: M,
              tabBarExtraContent: R,
              hoverable: O,
              tabProps: D = {},
            } = e,
            I = E(e, [
              'prefixCls',
              'className',
              'rootClassName',
              'style',
              'extra',
              'headStyle',
              'bodyStyle',
              'title',
              'loading',
              'bordered',
              'size',
              'type',
              'cover',
              'actions',
              'tabList',
              'children',
              'activeTabKey',
              'defaultActiveTabKey',
              'tabBarExtraContent',
              'hoverable',
              'tabProps',
            ]),
            { getPrefixCls: L, direction: F, card: N } = r.useContext(s.E_),
            j = r.useMemo(() => {
              let e = !1;
              return (
                r.Children.forEach(T, (t) => {
                  t && t.type && t.type === d && (e = !0);
                }),
                e
              );
            }, [T]),
            B = L('card', n),
            [W, z, $] = P(B),
            U = r.createElement(
              c.Z,
              { loading: !0, active: !0, paragraph: { rows: 4 }, title: !1 },
              T,
            ),
            H = void 0 !== k,
            V = Object.assign(Object.assign({}, D), {
              [H ? 'activeKey' : 'defaultActiveKey']: H ? k : M,
              tabBarExtraContent: R,
            });
          let q;
          const G = (0, l.Z)(_),
            X = G && 'default' !== G ? G : 'large',
            Y = x
              ? r.createElement(
                  h.Z,
                  Object.assign({ size: X }, V, {
                    className: `${B}-head-tabs`,
                    onChange: (t) => {
                      var n;
                      null === (n = e.onTabChange) ||
                        void 0 === n ||
                        n.call(e, t);
                    },
                    items: x.map((e) => {
                      var { tab: t } = e,
                        n = E(e, ['tab']);
                      return Object.assign({ label: t }, n);
                    }),
                  }),
                )
              : null;
          (v || f || Y) &&
            (q = r.createElement(
              'div',
              { className: `${B}-head`, style: g },
              r.createElement(
                'div',
                { className: `${B}-head-wrapper` },
                v &&
                  r.createElement('div', { className: `${B}-head-title` }, v),
                f && r.createElement('div', { className: `${B}-extra` }, f),
              ),
              Y,
            ));
          const K = S
              ? r.createElement('div', { className: `${B}-cover` }, S)
              : null,
            Z = r.createElement(
              'div',
              { className: `${B}-body`, style: m },
              b ? U : T,
            ),
            Q =
              A && A.length
                ? r.createElement(C, { prefixCls: B, actions: A })
                : null,
            J = (0, a.Z)(I, ['onTabChange']),
            ee = o()(
              B,
              null == N ? void 0 : N.className,
              {
                [`${B}-loading`]: b,
                [`${B}-bordered`]: y,
                [`${B}-hoverable`]: O,
                [`${B}-contain-grid`]: j,
                [`${B}-contain-tabs`]: x && x.length,
                [`${B}-${G}`]: G,
                [`${B}-type-${w}`]: !!w,
                [`${B}-rtl`]: 'rtl' === F,
              },
              i,
              u,
              z,
              $,
            ),
            te = Object.assign(
              Object.assign({}, null == N ? void 0 : N.style),
              p,
            );
          return W(
            r.createElement(
              'div',
              Object.assign({ ref: t }, J, { className: ee, style: te }),
              q,
              K,
              Z,
              Q,
            ),
          );
        });
      var k = function (e, t) {
        var n = {};
        for (var r in e)
          Object.prototype.hasOwnProperty.call(e, r) &&
            t.indexOf(r) < 0 &&
            (n[r] = e[r]);
        if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
          var i = 0;
          for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
            t.indexOf(r[i]) < 0 &&
              Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
              (n[r[i]] = e[r[i]]);
        }
        return n;
      };
      var M = (e) => {
        const {
            prefixCls: t,
            className: n,
            avatar: i,
            title: a,
            description: l,
          } = e,
          c = k(e, [
            'prefixCls',
            'className',
            'avatar',
            'title',
            'description',
          ]),
          { getPrefixCls: h } = r.useContext(s.E_),
          u = h('card', t),
          d = o()(`${u}-meta`, n),
          p = i
            ? r.createElement('div', { className: `${u}-meta-avatar` }, i)
            : null,
          f = a
            ? r.createElement('div', { className: `${u}-meta-title` }, a)
            : null,
          g = l
            ? r.createElement('div', { className: `${u}-meta-description` }, l)
            : null,
          m =
            f || g
              ? r.createElement('div', { className: `${u}-meta-detail` }, f, g)
              : null;
        return r.createElement(
          'div',
          Object.assign({}, c, { className: d }),
          p,
          m,
        );
      };
      const R = T;
      (R.Grid = d), (R.Meta = M);
      var O = R;
    },
    84567: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return P;
        },
      });
      var r = n(62435),
        i = n(93967),
        o = n.n(i),
        a = n(50132),
        s = n(45353),
        l = n(17415),
        c = n(53124),
        h = n(98866),
        u = n(35792),
        d = n(65223);
      var p = r.createContext(null),
        f = n(63185),
        g = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const m = (e, t) => {
        var n;
        const {
            prefixCls: i,
            className: m,
            rootClassName: v,
            children: b,
            indeterminate: y = !1,
            style: _,
            onMouseEnter: w,
            onMouseLeave: S,
            skipGroup: A = !1,
            disabled: x,
          } = e,
          P = g(e, [
            'prefixCls',
            'className',
            'rootClassName',
            'children',
            'indeterminate',
            'style',
            'onMouseEnter',
            'onMouseLeave',
            'skipGroup',
            'disabled',
          ]),
          { getPrefixCls: E, direction: C, checkbox: T } = r.useContext(c.E_),
          k = r.useContext(p),
          { isFormItemInput: M } = r.useContext(d.aM),
          R = r.useContext(h.Z),
          O =
            null !== (n = (null == k ? void 0 : k.disabled) || x) &&
            void 0 !== n
              ? n
              : R,
          D = r.useRef(P.value);
        r.useEffect(() => {
          null == k || k.registerValue(P.value);
        }, []),
          r.useEffect(() => {
            if (!A)
              return (
                P.value !== D.current &&
                  (null == k || k.cancelValue(D.current),
                  null == k || k.registerValue(P.value),
                  (D.current = P.value)),
                () => (null == k ? void 0 : k.cancelValue(P.value))
              );
          }, [P.value]);
        const I = E('checkbox', i),
          L = (0, u.Z)(I),
          [F, N, j] = (0, f.ZP)(I, L),
          B = Object.assign({}, P);
        k &&
          !A &&
          ((B.onChange = function () {
            P.onChange && P.onChange.apply(P, arguments),
              k.toggleOption && k.toggleOption({ label: b, value: P.value });
          }),
          (B.name = k.name),
          (B.checked = k.value.includes(P.value)));
        const W = o()(
            `${I}-wrapper`,
            {
              [`${I}-rtl`]: 'rtl' === C,
              [`${I}-wrapper-checked`]: B.checked,
              [`${I}-wrapper-disabled`]: O,
              [`${I}-wrapper-in-form-item`]: M,
            },
            null == T ? void 0 : T.className,
            m,
            v,
            j,
            L,
            N,
          ),
          z = o()({ [`${I}-indeterminate`]: y }, l.A, N),
          $ = y ? 'mixed' : void 0;
        return F(
          r.createElement(
            s.Z,
            { component: 'Checkbox', disabled: O },
            r.createElement(
              'label',
              {
                className: W,
                style: Object.assign(
                  Object.assign({}, null == T ? void 0 : T.style),
                  _,
                ),
                onMouseEnter: w,
                onMouseLeave: S,
              },
              r.createElement(
                a.Z,
                Object.assign({ 'aria-checked': $ }, B, {
                  prefixCls: I,
                  className: z,
                  disabled: O,
                  ref: t,
                }),
              ),
              void 0 !== b && r.createElement('span', null, b),
            ),
          ),
        );
      };
      var v = r.forwardRef(m),
        b = n(74902),
        y = n(98423),
        _ = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const w = (e, t) => {
          const {
              defaultValue: n,
              children: i,
              options: a = [],
              prefixCls: s,
              className: l,
              rootClassName: h,
              style: d,
              onChange: g,
            } = e,
            m = _(e, [
              'defaultValue',
              'children',
              'options',
              'prefixCls',
              'className',
              'rootClassName',
              'style',
              'onChange',
            ]),
            { getPrefixCls: w, direction: S } = r.useContext(c.E_),
            [A, x] = r.useState(m.value || n || []),
            [P, E] = r.useState([]);
          r.useEffect(() => {
            'value' in m && x(m.value || []);
          }, [m.value]);
          const C = r.useMemo(
              () =>
                a.map((e) =>
                  'string' == typeof e || 'number' == typeof e
                    ? { label: e, value: e }
                    : e,
                ),
              [a],
            ),
            T = w('checkbox', s),
            k = `${T}-group`,
            M = (0, u.Z)(T),
            [R, O, D] = (0, f.ZP)(T, M),
            I = (0, y.Z)(m, ['value', 'disabled']),
            L = a.length
              ? C.map((e) =>
                  r.createElement(
                    v,
                    {
                      prefixCls: T,
                      key: e.value.toString(),
                      disabled: 'disabled' in e ? e.disabled : m.disabled,
                      value: e.value,
                      checked: A.includes(e.value),
                      onChange: e.onChange,
                      className: `${k}-item`,
                      style: e.style,
                      title: e.title,
                      id: e.id,
                      required: e.required,
                    },
                    e.label,
                  ),
                )
              : i,
            F = {
              toggleOption: (e) => {
                const t = A.indexOf(e.value),
                  n = (0, b.Z)(A);
                -1 === t ? n.push(e.value) : n.splice(t, 1),
                  'value' in m || x(n),
                  null == g ||
                    g(
                      n
                        .filter((e) => P.includes(e))
                        .sort(
                          (e, t) =>
                            C.findIndex((t) => t.value === e) -
                            C.findIndex((e) => e.value === t),
                        ),
                    );
              },
              value: A,
              disabled: m.disabled,
              name: m.name,
              registerValue: (e) => {
                E((t) => [].concat((0, b.Z)(t), [e]));
              },
              cancelValue: (e) => {
                E((t) => t.filter((t) => t !== e));
              },
            },
            N = o()(k, { [`${k}-rtl`]: 'rtl' === S }, l, h, D, M, O);
          return R(
            r.createElement(
              'div',
              Object.assign({ className: N, style: d }, I, { ref: t }),
              r.createElement(p.Provider, { value: F }, L),
            ),
          );
        },
        S = r.forwardRef(w);
      var A = r.memo(S);
      const x = v;
      (x.Group = A), (x.__ANT_CHECKBOX = !0);
      var P = x;
    },
    63185: function (e, t, n) {
      'use strict';
      n.d(t, {
        C2: function () {
          return l;
        },
      });
      var r = n(54548),
        i = n(14747),
        o = n(45503),
        a = n(91945);
      const s = (e) => {
        const { checkboxCls: t } = e,
          n = `${t}-wrapper`;
        return [
          {
            [`${t}-group`]: Object.assign(Object.assign({}, (0, i.Wf)(e)), {
              display: 'inline-flex',
              flexWrap: 'wrap',
              columnGap: e.marginXS,
              [`> ${e.antCls}-row`]: { flex: 1 },
            }),
            [n]: Object.assign(Object.assign({}, (0, i.Wf)(e)), {
              display: 'inline-flex',
              alignItems: 'baseline',
              cursor: 'pointer',
              '&:after': {
                display: 'inline-block',
                width: 0,
                overflow: 'hidden',
                content: "'\\a0'",
              },
              [`& + ${n}`]: { marginInlineStart: 0 },
              [`&${n}-in-form-item`]: {
                'input[type="checkbox"]': { width: 14, height: 14 },
              },
            }),
            [t]: Object.assign(Object.assign({}, (0, i.Wf)(e)), {
              position: 'relative',
              whiteSpace: 'nowrap',
              lineHeight: 1,
              cursor: 'pointer',
              borderRadius: e.borderRadiusSM,
              alignSelf: 'center',
              [`${t}-input`]: {
                position: 'absolute',
                inset: 0,
                zIndex: 1,
                cursor: 'pointer',
                opacity: 0,
                margin: 0,
                [`&:focus-visible + ${t}-inner`]: Object.assign(
                  {},
                  (0, i.oN)(e),
                ),
              },
              [`${t}-inner`]: {
                boxSizing: 'border-box',
                display: 'block',
                width: e.checkboxSize,
                height: e.checkboxSize,
                direction: 'ltr',
                backgroundColor: e.colorBgContainer,
                border: `${(0, r.bf)(e.lineWidth)} ${e.lineType} ${e.colorBorder}`,
                borderRadius: e.borderRadiusSM,
                borderCollapse: 'separate',
                transition: `all ${e.motionDurationSlow}`,
                '&:after': {
                  boxSizing: 'border-box',
                  position: 'absolute',
                  top: '50%',
                  insetInlineStart: '25%',
                  display: 'table',
                  width: e.calc(e.checkboxSize).div(14).mul(5).equal(),
                  height: e.calc(e.checkboxSize).div(14).mul(8).equal(),
                  border: `${(0, r.bf)(e.lineWidthBold)} solid ${e.colorWhite}`,
                  borderTop: 0,
                  borderInlineStart: 0,
                  transform: 'rotate(45deg) scale(0) translate(-50%,-50%)',
                  opacity: 0,
                  content: '""',
                  transition: `all ${e.motionDurationFast} ${e.motionEaseInBack}, opacity ${e.motionDurationFast}`,
                },
              },
              '& + span': {
                paddingInlineStart: e.paddingXS,
                paddingInlineEnd: e.paddingXS,
              },
            }),
          },
          {
            [`\n        ${n}:not(${n}-disabled),\n        ${t}:not(${t}-disabled)\n      `]:
              { [`&:hover ${t}-inner`]: { borderColor: e.colorPrimary } },
            [`${n}:not(${n}-disabled)`]: {
              [`&:hover ${t}-checked:not(${t}-disabled) ${t}-inner`]: {
                backgroundColor: e.colorPrimaryHover,
                borderColor: 'transparent',
              },
              [`&:hover ${t}-checked:not(${t}-disabled):after`]: {
                borderColor: e.colorPrimaryHover,
              },
            },
          },
          {
            [`${t}-checked`]: {
              [`${t}-inner`]: {
                backgroundColor: e.colorPrimary,
                borderColor: e.colorPrimary,
                '&:after': {
                  opacity: 1,
                  transform: 'rotate(45deg) scale(1) translate(-50%,-50%)',
                  transition: `all ${e.motionDurationMid} ${e.motionEaseOutBack} ${e.motionDurationFast}`,
                },
              },
            },
            [`\n        ${n}-checked:not(${n}-disabled),\n        ${t}-checked:not(${t}-disabled)\n      `]:
              {
                [`&:hover ${t}-inner`]: {
                  backgroundColor: e.colorPrimaryHover,
                  borderColor: 'transparent',
                },
              },
          },
          {
            [t]: {
              '&-indeterminate': {
                [`${t}-inner`]: {
                  backgroundColor: e.colorBgContainer,
                  borderColor: e.colorBorder,
                  '&:after': {
                    top: '50%',
                    insetInlineStart: '50%',
                    width: e.calc(e.fontSizeLG).div(2).equal(),
                    height: e.calc(e.fontSizeLG).div(2).equal(),
                    backgroundColor: e.colorPrimary,
                    border: 0,
                    transform: 'translate(-50%, -50%) scale(1)',
                    opacity: 1,
                    content: '""',
                  },
                },
              },
            },
          },
          {
            [`${n}-disabled`]: { cursor: 'not-allowed' },
            [`${t}-disabled`]: {
              [`&, ${t}-input`]: {
                cursor: 'not-allowed',
                pointerEvents: 'none',
              },
              [`${t}-inner`]: {
                background: e.colorBgContainerDisabled,
                borderColor: e.colorBorder,
                '&:after': { borderColor: e.colorTextDisabled },
              },
              '&:after': { display: 'none' },
              '& + span': { color: e.colorTextDisabled },
              [`&${t}-indeterminate ${t}-inner::after`]: {
                background: e.colorTextDisabled,
              },
            },
          },
        ];
      };
      function l(e, t) {
        const n = (0, o.TS)(t, {
          checkboxCls: `.${e}`,
          checkboxSize: t.controlInteractiveSize,
        });
        return [s(n)];
      }
      t.ZP = (0, a.I$)('Checkbox', (e, t) => {
        let { prefixCls: n } = t;
        return [l(n, e)];
      });
    },
    25378: function (e, t, n) {
      'use strict';
      var r = n(62435),
        i = n(8410),
        o = n(57838),
        a = n(74443);
      t.Z = function () {
        let e =
          !(arguments.length > 0 && void 0 !== arguments[0]) || arguments[0];
        const t = (0, r.useRef)({}),
          n = (0, o.Z)(),
          s = (0, a.ZP)();
        return (
          (0, i.Z)(() => {
            const r = s.subscribe((r) => {
              (t.current = r), e && n();
            });
            return () => s.unsubscribe(r);
          }, []),
          t.current
        );
      };
    },
    66330: function (e, t, n) {
      'use strict';
      var r = n(93967),
        i = n.n(r),
        o = n(92419),
        a = n(62435),
        s = n(53124),
        l = n(81643),
        c = n(20136),
        h = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const u = (e) => {
        const {
          hashId: t,
          prefixCls: n,
          className: r,
          style: s,
          placement: c = 'top',
          title: h,
          content: u,
          children: d,
        } = e;
        return a.createElement(
          'div',
          {
            className: i()(t, n, `${n}-pure`, `${n}-placement-${c}`, r),
            style: s,
          },
          a.createElement('div', { className: `${n}-arrow` }),
          a.createElement(
            o.G,
            Object.assign({}, e, { className: t, prefixCls: n }),
            d ||
              ((e, t, n) => {
                if (t || n)
                  return a.createElement(
                    a.Fragment,
                    null,
                    t &&
                      a.createElement(
                        'div',
                        { className: `${e}-title` },
                        (0, l.Z)(t),
                      ),
                    a.createElement(
                      'div',
                      { className: `${e}-inner-content` },
                      (0, l.Z)(n),
                    ),
                  );
              })(n, h, u),
          ),
        );
      };
      t.ZP = (e) => {
        const { prefixCls: t, className: n } = e,
          r = h(e, ['prefixCls', 'className']),
          { getPrefixCls: o } = a.useContext(s.E_),
          l = o('popover', t),
          [d, p, f] = (0, c.Z)(l);
        return d(
          a.createElement(
            u,
            Object.assign({}, r, {
              prefixCls: l,
              hashId: p,
              className: i()(n, f),
            }),
          ),
        );
      };
    },
    55241: function (e, t, n) {
      'use strict';
      var r = n(62435),
        i = n(93967),
        o = n.n(i),
        a = n(81643),
        s = n(33603),
        l = n(53124),
        c = n(83062),
        h = n(66330),
        u = n(20136),
        d = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const p = (e) => {
          let { title: t, content: n, prefixCls: i } = e;
          return r.createElement(
            r.Fragment,
            null,
            t &&
              r.createElement('div', { className: `${i}-title` }, (0, a.Z)(t)),
            r.createElement(
              'div',
              { className: `${i}-inner-content` },
              (0, a.Z)(n),
            ),
          );
        },
        f = r.forwardRef((e, t) => {
          const {
              prefixCls: n,
              title: i,
              content: a,
              overlayClassName: h,
              placement: f = 'top',
              trigger: g = 'hover',
              mouseEnterDelay: m = 0.1,
              mouseLeaveDelay: v = 0.1,
              overlayStyle: b = {},
            } = e,
            y = d(e, [
              'prefixCls',
              'title',
              'content',
              'overlayClassName',
              'placement',
              'trigger',
              'mouseEnterDelay',
              'mouseLeaveDelay',
              'overlayStyle',
            ]),
            { getPrefixCls: _ } = r.useContext(l.E_),
            w = _('popover', n),
            [S, A, x] = (0, u.Z)(w),
            P = _(),
            E = o()(h, A, x);
          return S(
            r.createElement(
              c.Z,
              Object.assign(
                {
                  placement: f,
                  trigger: g,
                  mouseEnterDelay: m,
                  mouseLeaveDelay: v,
                  overlayStyle: b,
                },
                y,
                {
                  prefixCls: w,
                  overlayClassName: E,
                  ref: t,
                  overlay:
                    i || a
                      ? r.createElement(p, {
                          prefixCls: w,
                          title: i,
                          content: a,
                        })
                      : null,
                  transitionName: (0, s.m)(P, 'zoom-big', y.transitionName),
                  'data-popover-inject': !0,
                },
              ),
            ),
          );
        });
      (f._InternalPanelDoNotUseOrYouWillBeFired = h.ZP), (t.Z = f);
    },
    20136: function (e, t, n) {
      'use strict';
      var r = n(14747),
        i = n(50438),
        o = n(97414),
        a = n(8796),
        s = n(91945),
        l = n(45503),
        c = n(79511);
      const h = (e) => {
          const {
            componentCls: t,
            popoverColor: n,
            titleMinWidth: i,
            fontWeightStrong: a,
            innerPadding: s,
            boxShadowSecondary: l,
            colorTextHeading: c,
            borderRadiusLG: h,
            zIndexPopup: u,
            titleMarginBottom: d,
            colorBgElevated: p,
            popoverBg: f,
            titleBorderBottom: g,
            innerContentPadding: m,
            titlePadding: v,
          } = e;
          return [
            {
              [t]: Object.assign(Object.assign({}, (0, r.Wf)(e)), {
                position: 'absolute',
                top: 0,
                left: { _skip_check_: !0, value: 0 },
                zIndex: u,
                fontWeight: 'normal',
                whiteSpace: 'normal',
                textAlign: 'start',
                cursor: 'auto',
                userSelect: 'text',
                transformOrigin: 'var(--arrow-x, 50%) var(--arrow-y, 50%)',
                '--antd-arrow-background-color': p,
                '&-rtl': { direction: 'rtl' },
                '&-hidden': { display: 'none' },
                [`${t}-content`]: { position: 'relative' },
                [`${t}-inner`]: {
                  backgroundColor: f,
                  backgroundClip: 'padding-box',
                  borderRadius: h,
                  boxShadow: l,
                  padding: s,
                },
                [`${t}-title`]: {
                  minWidth: i,
                  marginBottom: d,
                  color: c,
                  fontWeight: a,
                  borderBottom: g,
                  padding: v,
                },
                [`${t}-inner-content`]: { color: n, padding: m },
              }),
            },
            (0, o.ZP)(e, 'var(--antd-arrow-background-color)'),
            {
              [`${t}-pure`]: {
                position: 'relative',
                maxWidth: 'none',
                margin: e.sizePopupArrow,
                display: 'inline-block',
                [`${t}-content`]: { display: 'inline-block' },
              },
            },
          ];
        },
        u = (e) => {
          const { componentCls: t } = e;
          return {
            [t]: a.i.map((n) => {
              const r = e[`${n}6`];
              return {
                [`&${t}-${n}`]: {
                  '--antd-arrow-background-color': r,
                  [`${t}-inner`]: { backgroundColor: r },
                  [`${t}-arrow`]: { background: 'transparent' },
                },
              };
            }),
          };
        };
      t.Z = (0, s.I$)(
        'Popover',
        (e) => {
          const { colorBgElevated: t, colorText: n } = e,
            r = (0, l.TS)(e, { popoverBg: t, popoverColor: n });
          return [h(r), u(r), (0, i._y)(r, 'zoom-big')];
        },
        (e) => {
          const {
              lineWidth: t,
              controlHeight: n,
              fontHeight: r,
              padding: i,
              wireframe: a,
              zIndexPopupBase: s,
              borderRadiusLG: l,
              marginXS: h,
              lineType: u,
              colorSplit: d,
              paddingSM: p,
            } = e,
            f = n - r,
            g = f / 2,
            m = f / 2 - t,
            v = i;
          return Object.assign(
            Object.assign(
              Object.assign(
                { titleMinWidth: 177, zIndexPopup: s + 30 },
                (0, c.w)(e),
              ),
              (0, o.wZ)({ contentRadius: l, limitVerticalRadius: !0 }),
            ),
            {
              innerPadding: a ? 0 : 12,
              titleMarginBottom: a ? 0 : h,
              titlePadding: a ? `${g}px ${v}px ${m}px` : 0,
              titleBorderBottom: a ? `${t}px ${u} ${d}` : 'none',
              innerContentPadding: a ? `${p}px ${v}px` : 0,
            },
          );
        },
        {
          resetStyle: !1,
          deprecatedTokens: [
            ['width', 'titleMinWidth'],
            ['minWidth', 'titleMinWidth'],
          ],
        },
      );
    },
    72269: function (e, t, n) {
      'use strict';
      n.d(t, {
        Z: function () {
          return D;
        },
      });
      var r = n(62435),
        i = n(50888),
        o = n(93967),
        a = n.n(o),
        s = n(87462),
        l = n(4942),
        c = n(97685),
        h = n(45987),
        u = n(21770),
        d = n(15105),
        p = [
          'prefixCls',
          'className',
          'checked',
          'defaultChecked',
          'disabled',
          'loadingIcon',
          'checkedChildren',
          'unCheckedChildren',
          'onClick',
          'onChange',
          'onKeyDown',
        ],
        f = r.forwardRef(function (e, t) {
          var n,
            i = e.prefixCls,
            o = void 0 === i ? 'rc-switch' : i,
            f = e.className,
            g = e.checked,
            m = e.defaultChecked,
            v = e.disabled,
            b = e.loadingIcon,
            y = e.checkedChildren,
            _ = e.unCheckedChildren,
            w = e.onClick,
            S = e.onChange,
            A = e.onKeyDown,
            x = (0, h.Z)(e, p),
            P = (0, u.Z)(!1, { value: g, defaultValue: m }),
            E = (0, c.Z)(P, 2),
            C = E[0],
            T = E[1];
          function k(e, t) {
            var n = C;
            return v || (T((n = e)), null == S || S(n, t)), n;
          }
          var M = a()(
            o,
            f,
            ((n = {}),
            (0, l.Z)(n, ''.concat(o, '-checked'), C),
            (0, l.Z)(n, ''.concat(o, '-disabled'), v),
            n),
          );
          return r.createElement(
            'button',
            (0, s.Z)({}, x, {
              type: 'button',
              role: 'switch',
              'aria-checked': C,
              disabled: v,
              className: M,
              ref: t,
              onKeyDown: function (e) {
                e.which === d.Z.LEFT
                  ? k(!1, e)
                  : e.which === d.Z.RIGHT && k(!0, e),
                  null == A || A(e);
              },
              onClick: function (e) {
                var t = k(!C, e);
                null == w || w(t, e);
              },
            }),
            b,
            r.createElement(
              'span',
              { className: ''.concat(o, '-inner') },
              r.createElement(
                'span',
                { className: ''.concat(o, '-inner-checked') },
                y,
              ),
              r.createElement(
                'span',
                { className: ''.concat(o, '-inner-unchecked') },
                _,
              ),
            ),
          );
        });
      f.displayName = 'Switch';
      var g = f,
        m = n(45353),
        v = n(53124),
        b = n(98866),
        y = n(98675),
        _ = n(54548),
        w = n(10274),
        S = n(14747),
        A = n(91945),
        x = n(45503);
      const P = (e) => {
          const {
              componentCls: t,
              trackHeightSM: n,
              trackPadding: r,
              trackMinWidthSM: i,
              innerMinMarginSM: o,
              innerMaxMarginSM: a,
              handleSizeSM: s,
              calc: l,
            } = e,
            c = `${t}-inner`,
            h = (0, _.bf)(l(s).add(l(r).mul(2)).equal()),
            u = (0, _.bf)(l(a).mul(2).equal());
          return {
            [t]: {
              [`&${t}-small`]: {
                minWidth: i,
                height: n,
                lineHeight: (0, _.bf)(n),
                [`${t}-inner`]: {
                  paddingInlineStart: a,
                  paddingInlineEnd: o,
                  [`${c}-checked`]: {
                    marginInlineStart: `calc(-100% + ${h} - ${u})`,
                    marginInlineEnd: `calc(100% - ${h} + ${u})`,
                  },
                  [`${c}-unchecked`]: {
                    marginTop: l(n).mul(-1).equal(),
                    marginInlineStart: 0,
                    marginInlineEnd: 0,
                  },
                },
                [`${t}-handle`]: { width: s, height: s },
                [`${t}-loading-icon`]: {
                  top: l(l(s).sub(e.switchLoadingIconSize)).div(2).equal(),
                  fontSize: e.switchLoadingIconSize,
                },
                [`&${t}-checked`]: {
                  [`${t}-inner`]: {
                    paddingInlineStart: o,
                    paddingInlineEnd: a,
                    [`${c}-checked`]: {
                      marginInlineStart: 0,
                      marginInlineEnd: 0,
                    },
                    [`${c}-unchecked`]: {
                      marginInlineStart: `calc(100% - ${h} + ${u})`,
                      marginInlineEnd: `calc(-100% + ${h} - ${u})`,
                    },
                  },
                  [`${t}-handle`]: {
                    insetInlineStart: `calc(100% - ${(0, _.bf)(l(s).add(r).equal())})`,
                  },
                },
                [`&:not(${t}-disabled):active`]: {
                  [`&:not(${t}-checked) ${c}`]: {
                    [`${c}-unchecked`]: {
                      marginInlineStart: l(e.marginXXS).div(2).equal(),
                      marginInlineEnd: l(e.marginXXS).mul(-1).div(2).equal(),
                    },
                  },
                  [`&${t}-checked ${c}`]: {
                    [`${c}-checked`]: {
                      marginInlineStart: l(e.marginXXS).mul(-1).div(2).equal(),
                      marginInlineEnd: l(e.marginXXS).div(2).equal(),
                    },
                  },
                },
              },
            },
          };
        },
        E = (e) => {
          const { componentCls: t, handleSize: n, calc: r } = e;
          return {
            [t]: {
              [`${t}-loading-icon${e.iconCls}`]: {
                position: 'relative',
                top: r(r(n).sub(e.fontSize)).div(2).equal(),
                color: e.switchLoadingIconColor,
                verticalAlign: 'top',
              },
              [`&${t}-checked ${t}-loading-icon`]: { color: e.switchColor },
            },
          };
        },
        C = (e) => {
          const {
              componentCls: t,
              trackPadding: n,
              handleBg: r,
              handleShadow: i,
              handleSize: o,
              calc: a,
            } = e,
            s = `${t}-handle`;
          return {
            [t]: {
              [s]: {
                position: 'absolute',
                top: n,
                insetInlineStart: n,
                width: o,
                height: o,
                transition: `all ${e.switchDuration} ease-in-out`,
                '&::before': {
                  position: 'absolute',
                  top: 0,
                  insetInlineEnd: 0,
                  bottom: 0,
                  insetInlineStart: 0,
                  backgroundColor: r,
                  borderRadius: a(o).div(2).equal(),
                  boxShadow: i,
                  transition: `all ${e.switchDuration} ease-in-out`,
                  content: '""',
                },
              },
              [`&${t}-checked ${s}`]: {
                insetInlineStart: `calc(100% - ${(0, _.bf)(a(o).add(n).equal())})`,
              },
              [`&:not(${t}-disabled):active`]: {
                [`${s}::before`]: {
                  insetInlineEnd: e.switchHandleActiveInset,
                  insetInlineStart: 0,
                },
                [`&${t}-checked ${s}::before`]: {
                  insetInlineEnd: 0,
                  insetInlineStart: e.switchHandleActiveInset,
                },
              },
            },
          };
        },
        T = (e) => {
          const {
              componentCls: t,
              trackHeight: n,
              trackPadding: r,
              innerMinMargin: i,
              innerMaxMargin: o,
              handleSize: a,
              calc: s,
            } = e,
            l = `${t}-inner`,
            c = (0, _.bf)(s(a).add(s(r).mul(2)).equal()),
            h = (0, _.bf)(s(o).mul(2).equal());
          return {
            [t]: {
              [l]: {
                display: 'block',
                overflow: 'hidden',
                borderRadius: 100,
                height: '100%',
                paddingInlineStart: o,
                paddingInlineEnd: i,
                transition: `padding-inline-start ${e.switchDuration} ease-in-out, padding-inline-end ${e.switchDuration} ease-in-out`,
                [`${l}-checked, ${l}-unchecked`]: {
                  display: 'block',
                  color: e.colorTextLightSolid,
                  fontSize: e.fontSizeSM,
                  transition: `margin-inline-start ${e.switchDuration} ease-in-out, margin-inline-end ${e.switchDuration} ease-in-out`,
                  pointerEvents: 'none',
                },
                [`${l}-checked`]: {
                  marginInlineStart: `calc(-100% + ${c} - ${h})`,
                  marginInlineEnd: `calc(100% - ${c} + ${h})`,
                },
                [`${l}-unchecked`]: {
                  marginTop: s(n).mul(-1).equal(),
                  marginInlineStart: 0,
                  marginInlineEnd: 0,
                },
              },
              [`&${t}-checked ${l}`]: {
                paddingInlineStart: i,
                paddingInlineEnd: o,
                [`${l}-checked`]: { marginInlineStart: 0, marginInlineEnd: 0 },
                [`${l}-unchecked`]: {
                  marginInlineStart: `calc(100% - ${c} + ${h})`,
                  marginInlineEnd: `calc(-100% + ${c} - ${h})`,
                },
              },
              [`&:not(${t}-disabled):active`]: {
                [`&:not(${t}-checked) ${l}`]: {
                  [`${l}-unchecked`]: {
                    marginInlineStart: s(r).mul(2).equal(),
                    marginInlineEnd: s(r).mul(-1).mul(2).equal(),
                  },
                },
                [`&${t}-checked ${l}`]: {
                  [`${l}-checked`]: {
                    marginInlineStart: s(r).mul(-1).mul(2).equal(),
                    marginInlineEnd: s(r).mul(2).equal(),
                  },
                },
              },
            },
          };
        },
        k = (e) => {
          const { componentCls: t, trackHeight: n, trackMinWidth: r } = e;
          return {
            [t]: Object.assign(
              Object.assign(
                Object.assign(Object.assign({}, (0, S.Wf)(e)), {
                  position: 'relative',
                  display: 'inline-block',
                  boxSizing: 'border-box',
                  minWidth: r,
                  height: n,
                  lineHeight: `${(0, _.bf)(n)}`,
                  verticalAlign: 'middle',
                  background: e.colorTextQuaternary,
                  border: '0',
                  borderRadius: 100,
                  cursor: 'pointer',
                  transition: `all ${e.motionDurationMid}`,
                  userSelect: 'none',
                  [`&:hover:not(${t}-disabled)`]: {
                    background: e.colorTextTertiary,
                  },
                }),
                (0, S.Qy)(e),
              ),
              {
                [`&${t}-checked`]: {
                  background: e.switchColor,
                  [`&:hover:not(${t}-disabled)`]: {
                    background: e.colorPrimaryHover,
                  },
                },
                [`&${t}-loading, &${t}-disabled`]: {
                  cursor: 'not-allowed',
                  opacity: e.switchDisabledOpacity,
                  '*': { boxShadow: 'none', cursor: 'not-allowed' },
                },
                [`&${t}-rtl`]: { direction: 'rtl' },
              },
            ),
          };
        };
      var M = (0, A.I$)(
          'Switch',
          (e) => {
            const t = (0, x.TS)(e, {
              switchDuration: e.motionDurationMid,
              switchColor: e.colorPrimary,
              switchDisabledOpacity: e.opacityLoading,
              switchLoadingIconSize: e.calc(e.fontSizeIcon).mul(0.75).equal(),
              switchLoadingIconColor: `rgba(0, 0, 0, ${e.opacityLoading})`,
              switchHandleActiveInset: '-30%',
            });
            return [k(t), T(t), C(t), E(t), P(t)];
          },
          (e) => {
            const {
                fontSize: t,
                lineHeight: n,
                controlHeight: r,
                colorWhite: i,
              } = e,
              o = t * n,
              a = r / 2,
              s = o - 4,
              l = a - 4;
            return {
              trackHeight: o,
              trackHeightSM: a,
              trackMinWidth: 2 * s + 8,
              trackMinWidthSM: 2 * l + 4,
              trackPadding: 2,
              handleBg: i,
              handleSize: s,
              handleSizeSM: l,
              handleShadow: `0 2px 4px 0 ${new w.C('#00230b').setAlpha(0.2).toRgbString()}`,
              innerMinMargin: s / 2,
              innerMaxMargin: s + 2 + 4,
              innerMinMarginSM: l / 2,
              innerMaxMarginSM: l + 2 + 4,
            };
          },
        ),
        R = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      const O = r.forwardRef((e, t) => {
        const {
            prefixCls: n,
            size: o,
            disabled: s,
            loading: l,
            className: c,
            rootClassName: h,
            style: d,
            checked: p,
            value: f,
            defaultChecked: _,
            defaultValue: w,
            onChange: S,
          } = e,
          A = R(e, [
            'prefixCls',
            'size',
            'disabled',
            'loading',
            'className',
            'rootClassName',
            'style',
            'checked',
            'value',
            'defaultChecked',
            'defaultValue',
            'onChange',
          ]),
          [x, P] = (0, u.Z)(!1, {
            value: null != p ? p : f,
            defaultValue: null != _ ? _ : w,
          }),
          { getPrefixCls: E, direction: C, switch: T } = r.useContext(v.E_),
          k = r.useContext(b.Z),
          O = (null != s ? s : k) || l,
          D = E('switch', n),
          I = r.createElement(
            'div',
            { className: `${D}-handle` },
            l && r.createElement(i.Z, { className: `${D}-loading-icon` }),
          ),
          [L, F, N] = M(D),
          j = (0, y.Z)(o),
          B = a()(
            null == T ? void 0 : T.className,
            {
              [`${D}-small`]: 'small' === j,
              [`${D}-loading`]: l,
              [`${D}-rtl`]: 'rtl' === C,
            },
            c,
            h,
            F,
            N,
          ),
          W = Object.assign(Object.assign({}, null == T ? void 0 : T.style), d);
        return L(
          r.createElement(
            m.Z,
            { component: 'Switch' },
            r.createElement(
              g,
              Object.assign({}, A, {
                checked: x,
                onChange: function () {
                  P(arguments.length <= 0 ? void 0 : arguments[0]),
                    null == S || S.apply(void 0, arguments);
                },
                prefixCls: D,
                className: B,
                style: W,
                disabled: O,
                ref: t,
                loadingIcon: I,
              }),
            ),
          ),
        );
      });
      O.__ANT_SWITCH = !0;
      var D = O;
    },
    90733: function (e) {
      e.exports = (function () {
        'use strict';
        function e(e) {
          var t = new d(),
            n = Array.from(e);
          if (
            !n.every(function (e) {
              return !Number.isNaN(e);
            })
          )
            throw TypeError('CSSMatrix: "' + e + '" must only have numbers.');
          if (16 === n.length) {
            var r = n[0],
              i = n[1],
              o = n[2],
              a = n[3],
              s = n[4],
              l = n[5],
              c = n[6],
              h = n[7],
              u = n[8],
              p = n[9],
              f = n[10],
              g = n[11],
              m = n[12],
              v = n[13],
              b = n[14],
              y = n[15];
            (t.m11 = r),
              (t.a = r),
              (t.m21 = s),
              (t.c = s),
              (t.m31 = u),
              (t.m41 = m),
              (t.e = m),
              (t.m12 = i),
              (t.b = i),
              (t.m22 = l),
              (t.d = l),
              (t.m32 = p),
              (t.m42 = v),
              (t.f = v),
              (t.m13 = o),
              (t.m23 = c),
              (t.m33 = f),
              (t.m43 = b),
              (t.m14 = a),
              (t.m24 = h),
              (t.m34 = g),
              (t.m44 = y);
          } else {
            if (6 !== n.length)
              throw new TypeError(
                'CSSMatrix: expecting an Array of 6/16 values.',
              );
            var _ = n[0],
              w = n[1],
              S = n[2],
              A = n[3],
              x = n[4],
              P = n[5];
            (t.m11 = _),
              (t.a = _),
              (t.m12 = w),
              (t.b = w),
              (t.m21 = S),
              (t.c = S),
              (t.m22 = A),
              (t.d = A),
              (t.m41 = x),
              (t.e = x),
              (t.m42 = P),
              (t.f = P);
          }
          return t;
        }
        function t(t) {
          var n = Object.keys(new d());
          if (
            'object' == typeof t &&
            n.every(function (e) {
              return e in t;
            })
          )
            return e([
              t.m11,
              t.m12,
              t.m13,
              t.m14,
              t.m21,
              t.m22,
              t.m23,
              t.m24,
              t.m31,
              t.m32,
              t.m33,
              t.m34,
              t.m41,
              t.m42,
              t.m43,
              t.m44,
            ]);
          throw TypeError(
            'CSSMatrix: "' +
              JSON.stringify(t) +
              '" is not a DOMMatrix / CSSMatrix / JSON compatible object.',
          );
        }
        function n(t) {
          if ('string' != typeof t)
            throw TypeError('CSSMatrix: "' + t + '" is not a string.');
          var n = String(t).replace(/\s/g, ''),
            r = new d(),
            i = 'CSSMatrix: invalid transform string "' + t + '"';
          return (
            n
              .split(')')
              .filter(function (e) {
                return e;
              })
              .forEach(function (t) {
                var n = t.split('('),
                  o = n[0],
                  a = n[1];
                if (!a) throw TypeError(i);
                var s = a.split(',').map(function (e) {
                    return e.includes('rad')
                      ? parseFloat(e) * (180 / Math.PI)
                      : parseFloat(e);
                  }),
                  l = s[0],
                  c = s[1],
                  h = s[2],
                  u = s[3],
                  d = [l, c, h],
                  p = [l, c, h, u];
                if (
                  'perspective' === o &&
                  l &&
                  [c, h].every(function (e) {
                    return void 0 === e;
                  })
                )
                  r.m34 = -1 / l;
                else if (
                  o.includes('matrix') &&
                  [6, 16].includes(s.length) &&
                  s.every(function (e) {
                    return !Number.isNaN(+e);
                  })
                ) {
                  var f = s.map(function (e) {
                    return Math.abs(e) < 1e-6 ? 0 : e;
                  });
                  r = r.multiply(e(f));
                } else if (
                  'translate3d' === o &&
                  d.every(function (e) {
                    return !Number.isNaN(+e);
                  })
                )
                  r = r.translate(l, c, h);
                else if ('translate' === o && l && void 0 === h)
                  r = r.translate(l, c || 0, 0);
                else if (
                  'rotate3d' === o &&
                  p.every(function (e) {
                    return !Number.isNaN(+e);
                  }) &&
                  u
                )
                  r = r.rotateAxisAngle(l, c, h, u);
                else if (
                  'rotate' === o &&
                  l &&
                  [c, h].every(function (e) {
                    return void 0 === e;
                  })
                )
                  r = r.rotate(0, 0, l);
                else if (
                  'scale3d' === o &&
                  d.every(function (e) {
                    return !Number.isNaN(+e);
                  }) &&
                  d.some(function (e) {
                    return 1 !== e;
                  })
                )
                  r = r.scale(l, c, h);
                else if (
                  'scale' !== o ||
                  Number.isNaN(l) ||
                  1 === l ||
                  void 0 !== h
                )
                  if (
                    'skew' === o &&
                    (l || (!Number.isNaN(l) && c)) &&
                    void 0 === h
                  )
                    r = r.skew(l, c || 0);
                  else {
                    if (
                      !(
                        /[XYZ]/.test(o) &&
                        l &&
                        [c, h].every(function (e) {
                          return void 0 === e;
                        }) &&
                        ['translate', 'rotate', 'scale', 'skew'].some(
                          function (e) {
                            return o.includes(e);
                          },
                        )
                      )
                    )
                      throw TypeError(i);
                    if (['skewX', 'skewY'].includes(o)) r = r[o](l);
                    else {
                      var g = o.replace(/[XYZ]/, ''),
                        m = o.replace(g, ''),
                        v = ['X', 'Y', 'Z'].indexOf(m),
                        b = 'scale' === g ? 1 : 0,
                        y = [0 === v ? l : b, 1 === v ? l : b, 2 === v ? l : b];
                      r = r[g].apply(r, y);
                    }
                  }
                else {
                  var _ = Number.isNaN(+c) ? l : c;
                  r = r.scale(l, _, 1);
                }
              }),
            r
          );
        }
        function r(e, t) {
          return t
            ? [e.a, e.b, e.c, e.d, e.e, e.f]
            : [
                e.m11,
                e.m12,
                e.m13,
                e.m14,
                e.m21,
                e.m22,
                e.m23,
                e.m24,
                e.m31,
                e.m32,
                e.m33,
                e.m34,
                e.m41,
                e.m42,
                e.m43,
                e.m44,
              ];
        }
        function i(e, t, n) {
          var r = new d();
          return (r.m41 = e), (r.e = e), (r.m42 = t), (r.f = t), (r.m43 = n), r;
        }
        function o(e, t, n) {
          var r = new d(),
            i = Math.PI / 180,
            o = e * i,
            a = t * i,
            s = n * i,
            l = Math.cos(o),
            c = -Math.sin(o),
            h = Math.cos(a),
            u = -Math.sin(a),
            p = Math.cos(s),
            f = -Math.sin(s),
            g = h * p,
            m = -h * f;
          (r.m11 = g), (r.a = g), (r.m12 = m), (r.b = m), (r.m13 = u);
          var v = c * u * p + l * f;
          (r.m21 = v), (r.c = v);
          var b = l * p - c * u * f;
          return (
            (r.m22 = b),
            (r.d = b),
            (r.m23 = -c * h),
            (r.m31 = c * f - l * u * p),
            (r.m32 = c * p + l * u * f),
            (r.m33 = l * h),
            r
          );
        }
        function a(e, t, n, r) {
          var i = new d(),
            o = Math.sqrt(e * e + t * t + n * n);
          if (0 === o) return i;
          var a = e / o,
            s = t / o,
            l = n / o,
            c = r * (Math.PI / 360),
            h = Math.sin(c),
            u = Math.cos(c),
            p = h * h,
            f = a * a,
            g = s * s,
            m = l * l,
            v = 1 - 2 * (g + m) * p;
          (i.m11 = v), (i.a = v);
          var b = 2 * (a * s * p + l * h * u);
          (i.m12 = b), (i.b = b), (i.m13 = 2 * (a * l * p - s * h * u));
          var y = 2 * (s * a * p - l * h * u);
          (i.m21 = y), (i.c = y);
          var _ = 1 - 2 * (m + f) * p;
          return (
            (i.m22 = _),
            (i.d = _),
            (i.m23 = 2 * (s * l * p + a * h * u)),
            (i.m31 = 2 * (l * a * p + s * h * u)),
            (i.m32 = 2 * (l * s * p - a * h * u)),
            (i.m33 = 1 - 2 * (f + g) * p),
            i
          );
        }
        function s(e, t, n) {
          var r = new d();
          return (r.m11 = e), (r.a = e), (r.m22 = t), (r.d = t), (r.m33 = n), r;
        }
        function l(e, t) {
          var n = new d();
          if (e) {
            var r = (e * Math.PI) / 180,
              i = Math.tan(r);
            (n.m21 = i), (n.c = i);
          }
          if (t) {
            var o = (t * Math.PI) / 180,
              a = Math.tan(o);
            (n.m12 = a), (n.b = a);
          }
          return n;
        }
        function c(e) {
          return l(e, 0);
        }
        function h(e) {
          return l(0, e);
        }
        function u(t, n) {
          return e([
            n.m11 * t.m11 + n.m12 * t.m21 + n.m13 * t.m31 + n.m14 * t.m41,
            n.m11 * t.m12 + n.m12 * t.m22 + n.m13 * t.m32 + n.m14 * t.m42,
            n.m11 * t.m13 + n.m12 * t.m23 + n.m13 * t.m33 + n.m14 * t.m43,
            n.m11 * t.m14 + n.m12 * t.m24 + n.m13 * t.m34 + n.m14 * t.m44,
            n.m21 * t.m11 + n.m22 * t.m21 + n.m23 * t.m31 + n.m24 * t.m41,
            n.m21 * t.m12 + n.m22 * t.m22 + n.m23 * t.m32 + n.m24 * t.m42,
            n.m21 * t.m13 + n.m22 * t.m23 + n.m23 * t.m33 + n.m24 * t.m43,
            n.m21 * t.m14 + n.m22 * t.m24 + n.m23 * t.m34 + n.m24 * t.m44,
            n.m31 * t.m11 + n.m32 * t.m21 + n.m33 * t.m31 + n.m34 * t.m41,
            n.m31 * t.m12 + n.m32 * t.m22 + n.m33 * t.m32 + n.m34 * t.m42,
            n.m31 * t.m13 + n.m32 * t.m23 + n.m33 * t.m33 + n.m34 * t.m43,
            n.m31 * t.m14 + n.m32 * t.m24 + n.m33 * t.m34 + n.m34 * t.m44,
            n.m41 * t.m11 + n.m42 * t.m21 + n.m43 * t.m31 + n.m44 * t.m41,
            n.m41 * t.m12 + n.m42 * t.m22 + n.m43 * t.m32 + n.m44 * t.m42,
            n.m41 * t.m13 + n.m42 * t.m23 + n.m43 * t.m33 + n.m44 * t.m43,
            n.m41 * t.m14 + n.m42 * t.m24 + n.m43 * t.m34 + n.m44 * t.m44,
          ]);
        }
        var d = function () {
            for (var e = [], t = arguments.length; t--; ) e[t] = arguments[t];
            var n = this;
            if (
              ((n.a = 1),
              (n.b = 0),
              (n.c = 0),
              (n.d = 1),
              (n.e = 0),
              (n.f = 0),
              (n.m11 = 1),
              (n.m12 = 0),
              (n.m13 = 0),
              (n.m14 = 0),
              (n.m21 = 0),
              (n.m22 = 1),
              (n.m23 = 0),
              (n.m24 = 0),
              (n.m31 = 0),
              (n.m32 = 0),
              (n.m33 = 1),
              (n.m34 = 0),
              (n.m41 = 0),
              (n.m42 = 0),
              (n.m43 = 0),
              (n.m44 = 1),
              e.length)
            ) {
              var r = [16, 6].some(function (t) {
                return t === e.length;
              })
                ? e
                : e[0];
              return n.setMatrixValue(r);
            }
            return n;
          },
          p = { isIdentity: { configurable: !0 }, is2D: { configurable: !0 } };
        (p.isIdentity.get = function () {
          var e = this;
          return (
            1 === e.m11 &&
            0 === e.m12 &&
            0 === e.m13 &&
            0 === e.m14 &&
            0 === e.m21 &&
            1 === e.m22 &&
            0 === e.m23 &&
            0 === e.m24 &&
            0 === e.m31 &&
            0 === e.m32 &&
            1 === e.m33 &&
            0 === e.m34 &&
            0 === e.m41 &&
            0 === e.m42 &&
            0 === e.m43 &&
            1 === e.m44
          );
        }),
          (p.is2D.get = function () {
            var e = this;
            return (
              0 === e.m31 &&
              0 === e.m32 &&
              1 === e.m33 &&
              0 === e.m34 &&
              0 === e.m43 &&
              1 === e.m44
            );
          }),
          (d.prototype.setMatrixValue = function (r) {
            var i = this;
            return 'string' == typeof r && r.length && 'none' !== r
              ? n(r)
              : [Array, Float64Array, Float32Array].some(function (e) {
                    return r instanceof e;
                  })
                ? e(r)
                : [d, DOMMatrix, Object].some(function (e) {
                      return r instanceof e;
                    })
                  ? t(r)
                  : i;
          }),
          (d.prototype.toFloat32Array = function (e) {
            return Float32Array.from(r(this, e));
          }),
          (d.prototype.toFloat64Array = function (e) {
            return Float64Array.from(r(this, e));
          }),
          (d.prototype.toString = function () {
            var e = this,
              t = e.is2D;
            return (
              (t ? 'matrix' : 'matrix3d') +
              '(' +
              e.toFloat64Array(t).join(', ') +
              ')'
            );
          }),
          (d.prototype.toJSON = function () {
            var e = this,
              t = e.is2D,
              n = e.isIdentity;
            return Object.assign({}, e, { is2D: t, isIdentity: n });
          }),
          (d.prototype.multiply = function (e) {
            return u(this, e);
          }),
          (d.prototype.translate = function (e, t, n) {
            var r = t,
              o = n;
            return (
              void 0 === r && (r = 0),
              void 0 === o && (o = 0),
              u(this, i(e, r, o))
            );
          }),
          (d.prototype.scale = function (e, t, n) {
            var r = t,
              i = n;
            return (
              void 0 === r && (r = e),
              void 0 === i && (i = 1),
              u(this, s(e, r, i))
            );
          }),
          (d.prototype.rotate = function (e, t, n) {
            var r = e,
              i = t || 0,
              a = n || 0;
            return (
              'number' == typeof e &&
                void 0 === t &&
                void 0 === n &&
                ((a = r), (r = 0), (i = 0)),
              u(this, o(r, i, a))
            );
          }),
          (d.prototype.rotateAxisAngle = function (e, t, n, r) {
            if (
              [e, t, n, r].some(function (e) {
                return Number.isNaN(+e);
              })
            )
              throw new TypeError('CSSMatrix: expecting 4 values');
            return u(this, a(e, t, n, r));
          }),
          (d.prototype.skewX = function (e) {
            return u(this, c(e));
          }),
          (d.prototype.skewY = function (e) {
            return u(this, h(e));
          }),
          (d.prototype.skew = function (e, t) {
            return u(this, l(e, t));
          }),
          (d.prototype.transformPoint = function (e) {
            var t = this,
              n = t.m11 * e.x + t.m21 * e.y + t.m31 * e.z + t.m41 * e.w,
              r = t.m12 * e.x + t.m22 * e.y + t.m32 * e.z + t.m42 * e.w,
              i = t.m13 * e.x + t.m23 * e.y + t.m33 * e.z + t.m43 * e.w,
              o = t.m14 * e.x + t.m24 * e.y + t.m34 * e.z + t.m44 * e.w;
            return e instanceof DOMPoint
              ? new DOMPoint(n, r, i, o)
              : { x: n, y: r, z: i, w: o };
          }),
          Object.defineProperties(d.prototype, p),
          Object.assign(d, {
            Translate: i,
            Rotate: o,
            RotateAxisAngle: a,
            Scale: s,
            SkewX: c,
            SkewY: h,
            Skew: l,
            Multiply: u,
            fromArray: e,
            fromMatrix: t,
            fromString: n,
            toArray: r,
          });
        var f = '1.0.3';
        return Object.assign(d, { Version: f }), d;
      })();
    },
    53316: function (e) {
      function t(e, t, n, r) {
        var i,
          o =
            null == (i = r) || 'number' == typeof i || 'boolean' == typeof i
              ? r
              : n(r),
          a = t.get(o);
        return void 0 === a && ((a = e.call(this, r)), t.set(o, a)), a;
      }
      function n(e, t, n) {
        var r = Array.prototype.slice.call(arguments, 3),
          i = n(r),
          o = t.get(i);
        return void 0 === o && ((o = e.apply(this, r)), t.set(i, o)), o;
      }
      function r(e, t, n, r, i) {
        return n.bind(t, e, r, i);
      }
      function i(e, i) {
        return r(
          e,
          this,
          1 === e.length ? t : n,
          i.cache.create(),
          i.serializer,
        );
      }
      function o() {
        return JSON.stringify(arguments);
      }
      function a() {
        this.cache = Object.create(null);
      }
      (a.prototype.has = function (e) {
        return e in this.cache;
      }),
        (a.prototype.get = function (e) {
          return this.cache[e];
        }),
        (a.prototype.set = function (e, t) {
          this.cache[e] = t;
        });
      var s = {
        create: function () {
          return new a();
        },
      };
      (e.exports = function (e, t) {
        var n = t && t.cache ? t.cache : s,
          r = t && t.serializer ? t.serializer : o;
        return (t && t.strategy ? t.strategy : i)(e, {
          cache: n,
          serializer: r,
        });
      }),
        (e.exports.strategies = {
          variadic: function (e, t) {
            return r(e, this, n, t.cache.create(), t.serializer);
          },
          monadic: function (e, n) {
            return r(e, this, t, n.cache.create(), n.serializer);
          },
        });
    },
    91296: function (e, t, n) {
      var r = /^\s+|\s+$/g,
        i = /^[-+]0x[0-9a-f]+$/i,
        o = /^0b[01]+$/i,
        a = /^0o[0-7]+$/i,
        s = parseInt,
        l = 'object' == typeof n.g && n.g && n.g.Object === Object && n.g,
        c = 'object' == typeof self && self && self.Object === Object && self,
        h = l || c || Function('return this')(),
        u = Object.prototype.toString,
        d = Math.max,
        p = Math.min,
        f = function () {
          return h.Date.now();
        };
      function g(e) {
        var t = typeof e;
        return !!e && ('object' == t || 'function' == t);
      }
      function m(e) {
        if ('number' == typeof e) return e;
        if (
          (function (e) {
            return (
              'symbol' == typeof e ||
              ((function (e) {
                return !!e && 'object' == typeof e;
              })(e) &&
                '[object Symbol]' == u.call(e))
            );
          })(e)
        )
          return NaN;
        if (g(e)) {
          var t = 'function' == typeof e.valueOf ? e.valueOf() : e;
          e = g(t) ? t + '' : t;
        }
        if ('string' != typeof e) return 0 === e ? e : +e;
        e = e.replace(r, '');
        var n = o.test(e);
        return n || a.test(e) ? s(e.slice(2), n ? 2 : 8) : i.test(e) ? NaN : +e;
      }
      e.exports = function (e, t, n) {
        var r,
          i,
          o,
          a,
          s,
          l,
          c = 0,
          h = !1,
          u = !1,
          v = !0;
        if ('function' != typeof e) throw new TypeError('Expected a function');
        function b(t) {
          var n = r,
            o = i;
          return (r = i = void 0), (c = t), (a = e.apply(o, n));
        }
        function y(e) {
          var n = e - l;
          return void 0 === l || n >= t || n < 0 || (u && e - c >= o);
        }
        function _() {
          var e = f();
          if (y(e)) return w(e);
          s = setTimeout(
            _,
            (function (e) {
              var n = t - (e - l);
              return u ? p(n, o - (e - c)) : n;
            })(e),
          );
        }
        function w(e) {
          return (s = void 0), v && r ? b(e) : ((r = i = void 0), a);
        }
        function S() {
          var e = f(),
            n = y(e);
          if (((r = arguments), (i = this), (l = e), n)) {
            if (void 0 === s)
              return (function (e) {
                return (c = e), (s = setTimeout(_, t)), h ? b(e) : a;
              })(l);
            if (u) return (s = setTimeout(_, t)), b(l);
          }
          return void 0 === s && (s = setTimeout(_, t)), a;
        }
        return (
          (t = m(t) || 0),
          g(n) &&
            ((h = !!n.leading),
            (o = (u = 'maxWait' in n) ? d(m(n.maxWait) || 0, t) : o),
            (v = 'trailing' in n ? !!n.trailing : v)),
          (S.cancel = function () {
            void 0 !== s && clearTimeout(s), (c = 0), (r = l = i = s = void 0);
          }),
          (S.flush = function () {
            return void 0 === s ? a : w(f());
          }),
          S
        );
      };
    },
    75668: function (e, t, n) {
      'use strict';
      function r(e) {
        return (
          (r =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function (e) {
                  return typeof e;
                }
              : function (e) {
                  return e &&
                    'function' == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? 'symbol'
                    : typeof e;
                }),
          r(e)
        );
      }
      Object.defineProperty(t, '__esModule', { value: !0 }),
        Object.defineProperty(t, 'DraggableCore', {
          enumerable: !0,
          get: function () {
            return u.default;
          },
        }),
        (t.default = void 0);
      var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ('object' !== r(e) && 'function' != typeof e))
            return { default: e };
          var n = g(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ('default' !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var s = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              s && (s.get || s.set)
                ? Object.defineProperty(i, a, s)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(62435)),
        o = f(n(45697)),
        a = f(n(61254)),
        s = f(n(18946)),
        l = n(81825),
        c = n(2849),
        h = n(9280),
        u = f(n(80783)),
        d = f(n(55904)),
        p = [
          'axis',
          'bounds',
          'children',
          'defaultPosition',
          'defaultClassName',
          'defaultClassNameDragging',
          'defaultClassNameDragged',
          'position',
          'positionOffset',
          'scale',
        ];
      function f(e) {
        return e && e.__esModule ? e : { default: e };
      }
      function g(e) {
        if ('function' != typeof WeakMap) return null;
        var t = new WeakMap(),
          n = new WeakMap();
        return (g = function (e) {
          return e ? n : t;
        })(e);
      }
      function m() {
        return (
          (m =
            Object.assign ||
            function (e) {
              for (var t = 1; t < arguments.length; t++) {
                var n = arguments[t];
                for (var r in n)
                  Object.prototype.hasOwnProperty.call(n, r) && (e[r] = n[r]);
              }
              return e;
            }),
          m.apply(this, arguments)
        );
      }
      function v(e, t) {
        if (null == e) return {};
        var n,
          r,
          i = (function (e, t) {
            if (null == e) return {};
            var n,
              r,
              i = {},
              o = Object.keys(e);
            for (r = 0; r < o.length; r++)
              (n = o[r]), t.indexOf(n) >= 0 || (i[n] = e[n]);
            return i;
          })(e, t);
        if (Object.getOwnPropertySymbols) {
          var o = Object.getOwnPropertySymbols(e);
          for (r = 0; r < o.length; r++)
            (n = o[r]),
              t.indexOf(n) >= 0 ||
                (Object.prototype.propertyIsEnumerable.call(e, n) &&
                  (i[n] = e[n]));
        }
        return i;
      }
      function b(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var r = Object.getOwnPropertySymbols(e);
          t &&
            (r = r.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            n.push.apply(n, r);
        }
        return n;
      }
      function y(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? b(Object(n), !0).forEach(function (t) {
                C(e, t, n[t]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
              : b(Object(n)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(n, t),
                  );
                });
        }
        return e;
      }
      function _(e, t) {
        return (
          (function (e) {
            if (Array.isArray(e)) return e;
          })(e) ||
          (function (e, t) {
            var n =
              null == e
                ? null
                : ('undefined' != typeof Symbol && e[Symbol.iterator]) ||
                  e['@@iterator'];
            if (null == n) return;
            var r,
              i,
              o = [],
              a = !0,
              s = !1;
            try {
              for (
                n = n.call(e);
                !(a = (r = n.next()).done) &&
                (o.push(r.value), !t || o.length !== t);
                a = !0
              );
            } catch (e) {
              (s = !0), (i = e);
            } finally {
              try {
                a || null == n.return || n.return();
              } finally {
                if (s) throw i;
              }
            }
            return o;
          })(e, t) ||
          (function (e, t) {
            if (!e) return;
            if ('string' == typeof e) return w(e, t);
            var n = Object.prototype.toString.call(e).slice(8, -1);
            'Object' === n && e.constructor && (n = e.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(e);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return w(e, t);
          })(e, t) ||
          (function () {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
            );
          })()
        );
      }
      function w(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
        return r;
      }
      function S(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          (r.enumerable = r.enumerable || !1),
            (r.configurable = !0),
            'value' in r && (r.writable = !0),
            Object.defineProperty(e, r.key, r);
        }
      }
      function A(e, t) {
        return (
          (A =
            Object.setPrototypeOf ||
            function (e, t) {
              return (e.__proto__ = t), e;
            }),
          A(e, t)
        );
      }
      function x(e) {
        var t = (function () {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {}),
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function () {
          var n,
            i = E(e);
          if (t) {
            var o = E(this).constructor;
            n = Reflect.construct(i, arguments, o);
          } else n = i.apply(this, arguments);
          return (function (e, t) {
            if (t && ('object' === r(t) || 'function' == typeof t)) return t;
            if (void 0 !== t)
              throw new TypeError(
                'Derived constructors may only return object or undefined',
              );
            return P(e);
          })(this, n);
        };
      }
      function P(e) {
        if (void 0 === e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called",
          );
        return e;
      }
      function E(e) {
        return (
          (E = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              }),
          E(e)
        );
      }
      function C(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = n),
          e
        );
      }
      var T = (function (e) {
        !(function (e, t) {
          if ('function' != typeof t && null !== t)
            throw new TypeError(
              'Super expression must either be null or a function',
            );
          (e.prototype = Object.create(t && t.prototype, {
            constructor: { value: e, writable: !0, configurable: !0 },
          })),
            Object.defineProperty(e, 'prototype', { writable: !1 }),
            t && A(e, t);
        })(h, e);
        var t,
          n,
          r,
          o = x(h);
        function h(e) {
          var t;
          return (
            (function (e, t) {
              if (!(e instanceof t))
                throw new TypeError('Cannot call a class as a function');
            })(this, h),
            C(P((t = o.call(this, e))), 'onDragStart', function (e, n) {
              if (
                ((0, d.default)('Draggable: onDragStart: %j', n),
                !1 === t.props.onStart(e, (0, c.createDraggableData)(P(t), n)))
              )
                return !1;
              t.setState({ dragging: !0, dragged: !0 });
            }),
            C(P(t), 'onDrag', function (e, n) {
              if (!t.state.dragging) return !1;
              (0, d.default)('Draggable: onDrag: %j', n);
              var r = (0, c.createDraggableData)(P(t), n),
                i = { x: r.x, y: r.y };
              if (t.props.bounds) {
                var o = i.x,
                  a = i.y;
                (i.x += t.state.slackX), (i.y += t.state.slackY);
                var s = _((0, c.getBoundPosition)(P(t), i.x, i.y), 2),
                  l = s[0],
                  h = s[1];
                (i.x = l),
                  (i.y = h),
                  (i.slackX = t.state.slackX + (o - i.x)),
                  (i.slackY = t.state.slackY + (a - i.y)),
                  (r.x = i.x),
                  (r.y = i.y),
                  (r.deltaX = i.x - t.state.x),
                  (r.deltaY = i.y - t.state.y);
              }
              if (!1 === t.props.onDrag(e, r)) return !1;
              t.setState(i);
            }),
            C(P(t), 'onDragStop', function (e, n) {
              if (!t.state.dragging) return !1;
              if (!1 === t.props.onStop(e, (0, c.createDraggableData)(P(t), n)))
                return !1;
              (0, d.default)('Draggable: onDragStop: %j', n);
              var r = { dragging: !1, slackX: 0, slackY: 0 };
              if (Boolean(t.props.position)) {
                var i = t.props.position,
                  o = i.x,
                  a = i.y;
                (r.x = o), (r.y = a);
              }
              t.setState(r);
            }),
            (t.state = {
              dragging: !1,
              dragged: !1,
              x: e.position ? e.position.x : e.defaultPosition.x,
              y: e.position ? e.position.y : e.defaultPosition.y,
              prevPropsPosition: y({}, e.position),
              slackX: 0,
              slackY: 0,
              isElementSVG: !1,
            }),
            !e.position ||
              e.onDrag ||
              e.onStop ||
              console.warn(
                'A `position` was applied to this <Draggable>, without drag handlers. This will make this component effectively undraggable. Please attach `onDrag` or `onStop` handlers so you can adjust the `position` of this element.',
              ),
            t
          );
        }
        return (
          (t = h),
          (r = [
            {
              key: 'getDerivedStateFromProps',
              value: function (e, t) {
                var n = e.position,
                  r = t.prevPropsPosition;
                return !n || (r && n.x === r.x && n.y === r.y)
                  ? null
                  : ((0, d.default)('Draggable: getDerivedStateFromProps %j', {
                      position: n,
                      prevPropsPosition: r,
                    }),
                    { x: n.x, y: n.y, prevPropsPosition: y({}, n) });
              },
            },
          ]),
          (n = [
            {
              key: 'componentDidMount',
              value: function () {
                void 0 !== window.SVGElement &&
                  this.findDOMNode() instanceof window.SVGElement &&
                  this.setState({ isElementSVG: !0 });
              },
            },
            {
              key: 'componentWillUnmount',
              value: function () {
                this.setState({ dragging: !1 });
              },
            },
            {
              key: 'findDOMNode',
              value: function () {
                var e, t, n;
                return null !==
                  (e =
                    null === (t = this.props) ||
                    void 0 === t ||
                    null === (n = t.nodeRef) ||
                    void 0 === n
                      ? void 0
                      : n.current) && void 0 !== e
                  ? e
                  : a.default.findDOMNode(this);
              },
            },
            {
              key: 'render',
              value: function () {
                var e,
                  t = this.props,
                  n = (t.axis, t.bounds, t.children),
                  r = t.defaultPosition,
                  o = t.defaultClassName,
                  a = t.defaultClassNameDragging,
                  h = t.defaultClassNameDragged,
                  d = t.position,
                  f = t.positionOffset,
                  g = (t.scale, v(t, p)),
                  b = {},
                  _ = null,
                  w = !Boolean(d) || this.state.dragging,
                  S = d || r,
                  A = {
                    x: (0, c.canDragX)(this) && w ? this.state.x : S.x,
                    y: (0, c.canDragY)(this) && w ? this.state.y : S.y,
                  };
                this.state.isElementSVG
                  ? (_ = (0, l.createSVGTransform)(A, f))
                  : (b = (0, l.createCSSTransform)(A, f));
                var x = (0, s.default)(
                  n.props.className || '',
                  o,
                  (C((e = {}), a, this.state.dragging),
                  C(e, h, this.state.dragged),
                  e),
                );
                return i.createElement(
                  u.default,
                  m({}, g, {
                    onStart: this.onDragStart,
                    onDrag: this.onDrag,
                    onStop: this.onDragStop,
                  }),
                  i.cloneElement(i.Children.only(n), {
                    className: x,
                    style: y(y({}, n.props.style), b),
                    transform: _,
                  }),
                );
              },
            },
          ]) && S(t.prototype, n),
          r && S(t, r),
          Object.defineProperty(t, 'prototype', { writable: !1 }),
          h
        );
      })(i.Component);
      (t.default = T),
        C(T, 'displayName', 'Draggable'),
        C(
          T,
          'propTypes',
          y(
            y({}, u.default.propTypes),
            {},
            {
              axis: o.default.oneOf(['both', 'x', 'y', 'none']),
              bounds: o.default.oneOfType([
                o.default.shape({
                  left: o.default.number,
                  right: o.default.number,
                  top: o.default.number,
                  bottom: o.default.number,
                }),
                o.default.string,
                o.default.oneOf([!1]),
              ]),
              defaultClassName: o.default.string,
              defaultClassNameDragging: o.default.string,
              defaultClassNameDragged: o.default.string,
              defaultPosition: o.default.shape({
                x: o.default.number,
                y: o.default.number,
              }),
              positionOffset: o.default.shape({
                x: o.default.oneOfType([o.default.number, o.default.string]),
                y: o.default.oneOfType([o.default.number, o.default.string]),
              }),
              position: o.default.shape({
                x: o.default.number,
                y: o.default.number,
              }),
              className: h.dontSetMe,
              style: h.dontSetMe,
              transform: h.dontSetMe,
            },
          ),
        ),
        C(
          T,
          'defaultProps',
          y(
            y({}, u.default.defaultProps),
            {},
            {
              axis: 'both',
              bounds: !1,
              defaultClassName: 'react-draggable',
              defaultClassNameDragging: 'react-draggable-dragging',
              defaultClassNameDragged: 'react-draggable-dragged',
              defaultPosition: { x: 0, y: 0 },
              scale: 1,
            },
          ),
        );
    },
    80783: function (e, t, n) {
      'use strict';
      function r(e) {
        return (
          (r =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function (e) {
                  return typeof e;
                }
              : function (e) {
                  return e &&
                    'function' == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? 'symbol'
                    : typeof e;
                }),
          r(e)
        );
      }
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.default = void 0);
      var i = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ('object' !== r(e) && 'function' != typeof e))
            return { default: e };
          var n = d(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var a in e)
            if ('default' !== a && Object.prototype.hasOwnProperty.call(e, a)) {
              var s = o ? Object.getOwnPropertyDescriptor(e, a) : null;
              s && (s.get || s.set)
                ? Object.defineProperty(i, a, s)
                : (i[a] = e[a]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(62435)),
        o = u(n(45697)),
        a = u(n(61254)),
        s = n(81825),
        l = n(2849),
        c = n(9280),
        h = u(n(55904));
      function u(e) {
        return e && e.__esModule ? e : { default: e };
      }
      function d(e) {
        if ('function' != typeof WeakMap) return null;
        var t = new WeakMap(),
          n = new WeakMap();
        return (d = function (e) {
          return e ? n : t;
        })(e);
      }
      function p(e, t) {
        return (
          (function (e) {
            if (Array.isArray(e)) return e;
          })(e) ||
          (function (e, t) {
            var n =
              null == e
                ? null
                : ('undefined' != typeof Symbol && e[Symbol.iterator]) ||
                  e['@@iterator'];
            if (null == n) return;
            var r,
              i,
              o = [],
              a = !0,
              s = !1;
            try {
              for (
                n = n.call(e);
                !(a = (r = n.next()).done) &&
                (o.push(r.value), !t || o.length !== t);
                a = !0
              );
            } catch (e) {
              (s = !0), (i = e);
            } finally {
              try {
                a || null == n.return || n.return();
              } finally {
                if (s) throw i;
              }
            }
            return o;
          })(e, t) ||
          (function (e, t) {
            if (!e) return;
            if ('string' == typeof e) return f(e, t);
            var n = Object.prototype.toString.call(e).slice(8, -1);
            'Object' === n && e.constructor && (n = e.constructor.name);
            if ('Map' === n || 'Set' === n) return Array.from(e);
            if (
              'Arguments' === n ||
              /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)
            )
              return f(e, t);
          })(e, t) ||
          (function () {
            throw new TypeError(
              'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.',
            );
          })()
        );
      }
      function f(e, t) {
        (null == t || t > e.length) && (t = e.length);
        for (var n = 0, r = new Array(t); n < t; n++) r[n] = e[n];
        return r;
      }
      function g(e, t) {
        for (var n = 0; n < t.length; n++) {
          var r = t[n];
          (r.enumerable = r.enumerable || !1),
            (r.configurable = !0),
            'value' in r && (r.writable = !0),
            Object.defineProperty(e, r.key, r);
        }
      }
      function m(e, t) {
        return (
          (m =
            Object.setPrototypeOf ||
            function (e, t) {
              return (e.__proto__ = t), e;
            }),
          m(e, t)
        );
      }
      function v(e) {
        var t = (function () {
          if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
          if (Reflect.construct.sham) return !1;
          if ('function' == typeof Proxy) return !0;
          try {
            return (
              Boolean.prototype.valueOf.call(
                Reflect.construct(Boolean, [], function () {}),
              ),
              !0
            );
          } catch (e) {
            return !1;
          }
        })();
        return function () {
          var n,
            i = y(e);
          if (t) {
            var o = y(this).constructor;
            n = Reflect.construct(i, arguments, o);
          } else n = i.apply(this, arguments);
          return (function (e, t) {
            if (t && ('object' === r(t) || 'function' == typeof t)) return t;
            if (void 0 !== t)
              throw new TypeError(
                'Derived constructors may only return object or undefined',
              );
            return b(e);
          })(this, n);
        };
      }
      function b(e) {
        if (void 0 === e)
          throw new ReferenceError(
            "this hasn't been initialised - super() hasn't been called",
          );
        return e;
      }
      function y(e) {
        return (
          (y = Object.setPrototypeOf
            ? Object.getPrototypeOf
            : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              }),
          y(e)
        );
      }
      function _(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = n),
          e
        );
      }
      var w = { start: 'touchstart', move: 'touchmove', stop: 'touchend' },
        S = { start: 'mousedown', move: 'mousemove', stop: 'mouseup' },
        A = S,
        x = (function (e) {
          !(function (e, t) {
            if ('function' != typeof t && null !== t)
              throw new TypeError(
                'Super expression must either be null or a function',
              );
            (e.prototype = Object.create(t && t.prototype, {
              constructor: { value: e, writable: !0, configurable: !0 },
            })),
              Object.defineProperty(e, 'prototype', { writable: !1 }),
              t && m(e, t);
          })(c, e);
          var t,
            n,
            r,
            o = v(c);
          function c() {
            var e;
            !(function (e, t) {
              if (!(e instanceof t))
                throw new TypeError('Cannot call a class as a function');
            })(this, c);
            for (var t = arguments.length, n = new Array(t), r = 0; r < t; r++)
              n[r] = arguments[r];
            return (
              _(b((e = o.call.apply(o, [this].concat(n)))), 'state', {
                dragging: !1,
                lastX: NaN,
                lastY: NaN,
                touchIdentifier: null,
              }),
              _(b(e), 'mounted', !1),
              _(b(e), 'handleDragStart', function (t) {
                if (
                  (e.props.onMouseDown(t),
                  !e.props.allowAnyClick &&
                    'number' == typeof t.button &&
                    0 !== t.button)
                )
                  return !1;
                var n = e.findDOMNode();
                if (!n || !n.ownerDocument || !n.ownerDocument.body)
                  throw new Error('<DraggableCore> not mounted on DragStart!');
                var r = n.ownerDocument;
                if (
                  !(
                    e.props.disabled ||
                    !(t.target instanceof r.defaultView.Node) ||
                    (e.props.handle &&
                      !(0, s.matchesSelectorAndParentsTo)(
                        t.target,
                        e.props.handle,
                        n,
                      )) ||
                    (e.props.cancel &&
                      (0, s.matchesSelectorAndParentsTo)(
                        t.target,
                        e.props.cancel,
                        n,
                      ))
                  )
                ) {
                  'touchstart' === t.type && t.preventDefault();
                  var i = (0, s.getTouchIdentifier)(t);
                  e.setState({ touchIdentifier: i });
                  var o = (0, l.getControlPosition)(t, i, b(e));
                  if (null != o) {
                    var a = o.x,
                      c = o.y,
                      u = (0, l.createCoreData)(b(e), a, c);
                    (0, h.default)('DraggableCore: handleDragStart: %j', u),
                      (0, h.default)('calling', e.props.onStart),
                      !1 !== e.props.onStart(t, u) &&
                        !1 !== e.mounted &&
                        (e.props.enableUserSelectHack &&
                          (0, s.addUserSelectStyles)(r),
                        e.setState({ dragging: !0, lastX: a, lastY: c }),
                        (0, s.addEvent)(r, A.move, e.handleDrag),
                        (0, s.addEvent)(r, A.stop, e.handleDragStop));
                  }
                }
              }),
              _(b(e), 'handleDrag', function (t) {
                var n = (0, l.getControlPosition)(
                  t,
                  e.state.touchIdentifier,
                  b(e),
                );
                if (null != n) {
                  var r = n.x,
                    i = n.y;
                  if (Array.isArray(e.props.grid)) {
                    var o = r - e.state.lastX,
                      a = i - e.state.lastY,
                      s = p((0, l.snapToGrid)(e.props.grid, o, a), 2);
                    if (((o = s[0]), (a = s[1]), !o && !a)) return;
                    (r = e.state.lastX + o), (i = e.state.lastY + a);
                  }
                  var c = (0, l.createCoreData)(b(e), r, i);
                  if (
                    ((0, h.default)('DraggableCore: handleDrag: %j', c),
                    !1 !== e.props.onDrag(t, c) && !1 !== e.mounted)
                  )
                    e.setState({ lastX: r, lastY: i });
                  else
                    try {
                      e.handleDragStop(new MouseEvent('mouseup'));
                    } catch (t) {
                      var u = document.createEvent('MouseEvents');
                      u.initMouseEvent(
                        'mouseup',
                        !0,
                        !0,
                        window,
                        0,
                        0,
                        0,
                        0,
                        0,
                        !1,
                        !1,
                        !1,
                        !1,
                        0,
                        null,
                      ),
                        e.handleDragStop(u);
                    }
                }
              }),
              _(b(e), 'handleDragStop', function (t) {
                if (e.state.dragging) {
                  var n = (0, l.getControlPosition)(
                    t,
                    e.state.touchIdentifier,
                    b(e),
                  );
                  if (null != n) {
                    var r = n.x,
                      i = n.y;
                    if (Array.isArray(e.props.grid)) {
                      var o = r - e.state.lastX || 0,
                        a = i - e.state.lastY || 0,
                        c = p((0, l.snapToGrid)(e.props.grid, o, a), 2);
                      (o = c[0]),
                        (a = c[1]),
                        (r = e.state.lastX + o),
                        (i = e.state.lastY + a);
                    }
                    var u = (0, l.createCoreData)(b(e), r, i);
                    if (!1 === e.props.onStop(t, u) || !1 === e.mounted)
                      return !1;
                    var d = e.findDOMNode();
                    d &&
                      e.props.enableUserSelectHack &&
                      (0, s.removeUserSelectStyles)(d.ownerDocument),
                      (0, h.default)('DraggableCore: handleDragStop: %j', u),
                      e.setState({ dragging: !1, lastX: NaN, lastY: NaN }),
                      d &&
                        ((0, h.default)('DraggableCore: Removing handlers'),
                        (0, s.removeEvent)(
                          d.ownerDocument,
                          A.move,
                          e.handleDrag,
                        ),
                        (0, s.removeEvent)(
                          d.ownerDocument,
                          A.stop,
                          e.handleDragStop,
                        ));
                  }
                }
              }),
              _(b(e), 'onMouseDown', function (t) {
                return (A = S), e.handleDragStart(t);
              }),
              _(b(e), 'onMouseUp', function (t) {
                return (A = S), e.handleDragStop(t);
              }),
              _(b(e), 'onTouchStart', function (t) {
                return (A = w), e.handleDragStart(t);
              }),
              _(b(e), 'onTouchEnd', function (t) {
                return (A = w), e.handleDragStop(t);
              }),
              e
            );
          }
          return (
            (t = c),
            (n = [
              {
                key: 'componentDidMount',
                value: function () {
                  this.mounted = !0;
                  var e = this.findDOMNode();
                  e &&
                    (0, s.addEvent)(e, w.start, this.onTouchStart, {
                      passive: !1,
                    });
                },
              },
              {
                key: 'componentWillUnmount',
                value: function () {
                  this.mounted = !1;
                  var e = this.findDOMNode();
                  if (e) {
                    var t = e.ownerDocument;
                    (0, s.removeEvent)(t, S.move, this.handleDrag),
                      (0, s.removeEvent)(t, w.move, this.handleDrag),
                      (0, s.removeEvent)(t, S.stop, this.handleDragStop),
                      (0, s.removeEvent)(t, w.stop, this.handleDragStop),
                      (0, s.removeEvent)(e, w.start, this.onTouchStart, {
                        passive: !1,
                      }),
                      this.props.enableUserSelectHack &&
                        (0, s.removeUserSelectStyles)(t);
                  }
                },
              },
              {
                key: 'findDOMNode',
                value: function () {
                  var e, t, n;
                  return null !== (e = this.props) && void 0 !== e && e.nodeRef
                    ? null === (t = this.props) ||
                      void 0 === t ||
                      null === (n = t.nodeRef) ||
                      void 0 === n
                      ? void 0
                      : n.current
                    : a.default.findDOMNode(this);
                },
              },
              {
                key: 'render',
                value: function () {
                  return i.cloneElement(i.Children.only(this.props.children), {
                    onMouseDown: this.onMouseDown,
                    onMouseUp: this.onMouseUp,
                    onTouchEnd: this.onTouchEnd,
                  });
                },
              },
            ]) && g(t.prototype, n),
            r && g(t, r),
            Object.defineProperty(t, 'prototype', { writable: !1 }),
            c
          );
        })(i.Component);
      (t.default = x),
        _(x, 'displayName', 'DraggableCore'),
        _(x, 'propTypes', {
          allowAnyClick: o.default.bool,
          disabled: o.default.bool,
          enableUserSelectHack: o.default.bool,
          offsetParent: function (e, t) {
            if (e[t] && 1 !== e[t].nodeType)
              throw new Error("Draggable's offsetParent must be a DOM Node.");
          },
          grid: o.default.arrayOf(o.default.number),
          handle: o.default.string,
          cancel: o.default.string,
          nodeRef: o.default.object,
          onStart: o.default.func,
          onDrag: o.default.func,
          onStop: o.default.func,
          onMouseDown: o.default.func,
          scale: o.default.number,
          className: c.dontSetMe,
          style: c.dontSetMe,
          transform: c.dontSetMe,
        }),
        _(x, 'defaultProps', {
          allowAnyClick: !1,
          disabled: !1,
          enableUserSelectHack: !0,
          onStart: function () {},
          onDrag: function () {},
          onStop: function () {},
          onMouseDown: function () {},
          scale: 1,
        });
    },
    61193: function (e, t, n) {
      'use strict';
      var r = n(75668),
        i = r.default,
        o = r.DraggableCore;
      (e.exports = i), (e.exports.default = i), (e.exports.DraggableCore = o);
    },
    81825: function (e, t, n) {
      'use strict';
      function r(e) {
        return (
          (r =
            'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
              ? function (e) {
                  return typeof e;
                }
              : function (e) {
                  return e &&
                    'function' == typeof Symbol &&
                    e.constructor === Symbol &&
                    e !== Symbol.prototype
                    ? 'symbol'
                    : typeof e;
                }),
          r(e)
        );
      }
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.addClassName = p),
        (t.addEvent = function (e, t, n, r) {
          if (!e) return;
          var i = l({ capture: !0 }, r);
          e.addEventListener
            ? e.addEventListener(t, n, i)
            : e.attachEvent
              ? e.attachEvent('on' + t, n)
              : (e['on' + t] = n);
        }),
        (t.addUserSelectStyles = function (e) {
          if (!e) return;
          var t = e.getElementById('react-draggable-style-el');
          t ||
            (((t = e.createElement('style')).type = 'text/css'),
            (t.id = 'react-draggable-style-el'),
            (t.innerHTML =
              '.react-draggable-transparent-selection *::-moz-selection {all: inherit;}\n'),
            (t.innerHTML +=
              '.react-draggable-transparent-selection *::selection {all: inherit;}\n'),
            e.getElementsByTagName('head')[0].appendChild(t));
          e.body && p(e.body, 'react-draggable-transparent-selection');
        }),
        (t.createCSSTransform = function (e, t) {
          var n = d(e, t, 'px');
          return c({}, (0, o.browserPrefixToKey)('transform', o.default), n);
        }),
        (t.createSVGTransform = function (e, t) {
          return d(e, t, '');
        }),
        (t.getTouch = function (e, t) {
          return (
            (e.targetTouches &&
              (0, i.findInArray)(e.targetTouches, function (e) {
                return t === e.identifier;
              })) ||
            (e.changedTouches &&
              (0, i.findInArray)(e.changedTouches, function (e) {
                return t === e.identifier;
              }))
          );
        }),
        (t.getTouchIdentifier = function (e) {
          if (e.targetTouches && e.targetTouches[0])
            return e.targetTouches[0].identifier;
          if (e.changedTouches && e.changedTouches[0])
            return e.changedTouches[0].identifier;
        }),
        (t.getTranslation = d),
        (t.innerHeight = function (e) {
          var t = e.clientHeight,
            n = e.ownerDocument.defaultView.getComputedStyle(e);
          return (
            (t -= (0, i.int)(n.paddingTop)), (t -= (0, i.int)(n.paddingBottom))
          );
        }),
        (t.innerWidth = function (e) {
          var t = e.clientWidth,
            n = e.ownerDocument.defaultView.getComputedStyle(e);
          return (
            (t -= (0, i.int)(n.paddingLeft)), (t -= (0, i.int)(n.paddingRight))
          );
        }),
        (t.matchesSelector = u),
        (t.matchesSelectorAndParentsTo = function (e, t, n) {
          var r = e;
          do {
            if (u(r, t)) return !0;
            if (r === n) return !1;
            r = r.parentNode;
          } while (r);
          return !1;
        }),
        (t.offsetXYFromParent = function (e, t, n) {
          var r =
              t === t.ownerDocument.body
                ? { left: 0, top: 0 }
                : t.getBoundingClientRect(),
            i = (e.clientX + t.scrollLeft - r.left) / n,
            o = (e.clientY + t.scrollTop - r.top) / n;
          return { x: i, y: o };
        }),
        (t.outerHeight = function (e) {
          var t = e.clientHeight,
            n = e.ownerDocument.defaultView.getComputedStyle(e);
          return (
            (t += (0, i.int)(n.borderTopWidth)),
            (t += (0, i.int)(n.borderBottomWidth))
          );
        }),
        (t.outerWidth = function (e) {
          var t = e.clientWidth,
            n = e.ownerDocument.defaultView.getComputedStyle(e);
          return (
            (t += (0, i.int)(n.borderLeftWidth)),
            (t += (0, i.int)(n.borderRightWidth))
          );
        }),
        (t.removeClassName = f),
        (t.removeEvent = function (e, t, n, r) {
          if (!e) return;
          var i = l({ capture: !0 }, r);
          e.removeEventListener
            ? e.removeEventListener(t, n, i)
            : e.detachEvent
              ? e.detachEvent('on' + t, n)
              : (e['on' + t] = null);
        }),
        (t.removeUserSelectStyles = function (e) {
          if (!e) return;
          try {
            if (
              (e.body && f(e.body, 'react-draggable-transparent-selection'),
              e.selection)
            )
              e.selection.empty();
            else {
              var t = (e.defaultView || window).getSelection();
              t && 'Caret' !== t.type && t.removeAllRanges();
            }
          } catch (e) {}
        });
      var i = n(9280),
        o = (function (e, t) {
          if (!t && e && e.__esModule) return e;
          if (null === e || ('object' !== r(e) && 'function' != typeof e))
            return { default: e };
          var n = a(t);
          if (n && n.has(e)) return n.get(e);
          var i = {},
            o = Object.defineProperty && Object.getOwnPropertyDescriptor;
          for (var s in e)
            if ('default' !== s && Object.prototype.hasOwnProperty.call(e, s)) {
              var l = o ? Object.getOwnPropertyDescriptor(e, s) : null;
              l && (l.get || l.set)
                ? Object.defineProperty(i, s, l)
                : (i[s] = e[s]);
            }
          (i.default = e), n && n.set(e, i);
          return i;
        })(n(38650));
      function a(e) {
        if ('function' != typeof WeakMap) return null;
        var t = new WeakMap(),
          n = new WeakMap();
        return (a = function (e) {
          return e ? n : t;
        })(e);
      }
      function s(e, t) {
        var n = Object.keys(e);
        if (Object.getOwnPropertySymbols) {
          var r = Object.getOwnPropertySymbols(e);
          t &&
            (r = r.filter(function (t) {
              return Object.getOwnPropertyDescriptor(e, t).enumerable;
            })),
            n.push.apply(n, r);
        }
        return n;
      }
      function l(e) {
        for (var t = 1; t < arguments.length; t++) {
          var n = null != arguments[t] ? arguments[t] : {};
          t % 2
            ? s(Object(n), !0).forEach(function (t) {
                c(e, t, n[t]);
              })
            : Object.getOwnPropertyDescriptors
              ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(n))
              : s(Object(n)).forEach(function (t) {
                  Object.defineProperty(
                    e,
                    t,
                    Object.getOwnPropertyDescriptor(n, t),
                  );
                });
        }
        return e;
      }
      function c(e, t, n) {
        return (
          t in e
            ? Object.defineProperty(e, t, {
                value: n,
                enumerable: !0,
                configurable: !0,
                writable: !0,
              })
            : (e[t] = n),
          e
        );
      }
      var h = '';
      function u(e, t) {
        return (
          h ||
            (h = (0, i.findInArray)(
              [
                'matches',
                'webkitMatchesSelector',
                'mozMatchesSelector',
                'msMatchesSelector',
                'oMatchesSelector',
              ],
              function (t) {
                return (0, i.isFunction)(e[t]);
              },
            )),
          !!(0, i.isFunction)(e[h]) && e[h](t)
        );
      }
      function d(e, t, n) {
        var r = e.x,
          i = e.y,
          o = 'translate('.concat(r).concat(n, ',').concat(i).concat(n, ')');
        if (t) {
          var a = ''.concat('string' == typeof t.x ? t.x : t.x + n),
            s = ''.concat('string' == typeof t.y ? t.y : t.y + n);
          o = 'translate('.concat(a, ', ').concat(s, ')') + o;
        }
        return o;
      }
      function p(e, t) {
        e.classList
          ? e.classList.add(t)
          : e.className.match(new RegExp('(?:^|\\s)'.concat(t, '(?!\\S)'))) ||
            (e.className += ' '.concat(t));
      }
      function f(e, t) {
        e.classList
          ? e.classList.remove(t)
          : (e.className = e.className.replace(
              new RegExp('(?:^|\\s)'.concat(t, '(?!\\S)'), 'g'),
              '',
            ));
      }
    },
    38650: function (e, t) {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.browserPrefixToKey = i),
        (t.browserPrefixToStyle = function (e, t) {
          return t ? '-'.concat(t.toLowerCase(), '-').concat(e) : e;
        }),
        (t.default = void 0),
        (t.getPrefix = r);
      var n = ['Moz', 'Webkit', 'O', 'ms'];
      function r() {
        var e,
          t,
          r =
            arguments.length > 0 && void 0 !== arguments[0]
              ? arguments[0]
              : 'transform';
        if ('undefined' == typeof window) return '';
        var o =
          null === (e = window.document) ||
          void 0 === e ||
          null === (t = e.documentElement) ||
          void 0 === t
            ? void 0
            : t.style;
        if (!o) return '';
        if (r in o) return '';
        for (var a = 0; a < n.length; a++) if (i(r, n[a]) in o) return n[a];
        return '';
      }
      function i(e, t) {
        return t
          ? ''.concat(t).concat(
              (function (e) {
                for (var t = '', n = !0, r = 0; r < e.length; r++)
                  n
                    ? ((t += e[r].toUpperCase()), (n = !1))
                    : '-' === e[r]
                      ? (n = !0)
                      : (t += e[r]);
                return t;
              })(e),
            )
          : e;
      }
      var o = r();
      t.default = o;
    },
    55904: function (e, t) {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.default = function () {
          0;
        });
    },
    2849: function (e, t, n) {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.canDragX = function (e) {
          return 'both' === e.props.axis || 'x' === e.props.axis;
        }),
        (t.canDragY = function (e) {
          return 'both' === e.props.axis || 'y' === e.props.axis;
        }),
        (t.createCoreData = function (e, t, n) {
          var i = e.state,
            a = !(0, r.isNum)(i.lastX),
            s = o(e);
          return a
            ? { node: s, deltaX: 0, deltaY: 0, lastX: t, lastY: n, x: t, y: n }
            : {
                node: s,
                deltaX: t - i.lastX,
                deltaY: n - i.lastY,
                lastX: i.lastX,
                lastY: i.lastY,
                x: t,
                y: n,
              };
        }),
        (t.createDraggableData = function (e, t) {
          var n = e.props.scale;
          return {
            node: t.node,
            x: e.state.x + t.deltaX / n,
            y: e.state.y + t.deltaY / n,
            deltaX: t.deltaX / n,
            deltaY: t.deltaY / n,
            lastX: e.state.x,
            lastY: e.state.y,
          };
        }),
        (t.getBoundPosition = function (e, t, n) {
          if (!e.props.bounds) return [t, n];
          var a = e.props.bounds;
          a =
            'string' == typeof a
              ? a
              : (function (e) {
                  return {
                    left: e.left,
                    top: e.top,
                    right: e.right,
                    bottom: e.bottom,
                  };
                })(a);
          var s = o(e);
          if ('string' == typeof a) {
            var l,
              c = s.ownerDocument,
              h = c.defaultView;
            if (
              !(
                (l =
                  'parent' === a ? s.parentNode : c.querySelector(a)) instanceof
                h.HTMLElement
              )
            )
              throw new Error(
                'Bounds selector "' + a + '" could not find an element.',
              );
            var u = l,
              d = h.getComputedStyle(s),
              p = h.getComputedStyle(u);
            a = {
              left:
                -s.offsetLeft +
                (0, r.int)(p.paddingLeft) +
                (0, r.int)(d.marginLeft),
              top:
                -s.offsetTop +
                (0, r.int)(p.paddingTop) +
                (0, r.int)(d.marginTop),
              right:
                (0, i.innerWidth)(u) -
                (0, i.outerWidth)(s) -
                s.offsetLeft +
                (0, r.int)(p.paddingRight) -
                (0, r.int)(d.marginRight),
              bottom:
                (0, i.innerHeight)(u) -
                (0, i.outerHeight)(s) -
                s.offsetTop +
                (0, r.int)(p.paddingBottom) -
                (0, r.int)(d.marginBottom),
            };
          }
          (0, r.isNum)(a.right) && (t = Math.min(t, a.right));
          (0, r.isNum)(a.bottom) && (n = Math.min(n, a.bottom));
          (0, r.isNum)(a.left) && (t = Math.max(t, a.left));
          (0, r.isNum)(a.top) && (n = Math.max(n, a.top));
          return [t, n];
        }),
        (t.getControlPosition = function (e, t, n) {
          var r = 'number' == typeof t ? (0, i.getTouch)(e, t) : null;
          if ('number' == typeof t && !r) return null;
          var a = o(n),
            s = n.props.offsetParent || a.offsetParent || a.ownerDocument.body;
          return (0, i.offsetXYFromParent)(r || e, s, n.props.scale);
        }),
        (t.snapToGrid = function (e, t, n) {
          var r = Math.round(t / e[0]) * e[0],
            i = Math.round(n / e[1]) * e[1];
          return [r, i];
        });
      var r = n(9280),
        i = n(81825);
      function o(e) {
        var t = e.findDOMNode();
        if (!t) throw new Error('<DraggableCore>: Unmounted during event!');
        return t;
      }
    },
    9280: function (e, t) {
      'use strict';
      Object.defineProperty(t, '__esModule', { value: !0 }),
        (t.dontSetMe = function (e, t, n) {
          if (e[t])
            return new Error(
              'Invalid prop '
                .concat(t, ' passed to ')
                .concat(n, ' - do not set this, set it on the child.'),
            );
        }),
        (t.findInArray = function (e, t) {
          for (var n = 0, r = e.length; n < r; n++)
            if (t.apply(t, [e[n], n, e])) return e[n];
        }),
        (t.int = function (e) {
          return parseInt(e, 10);
        }),
        (t.isFunction = function (e) {
          return (
            'function' == typeof e ||
            '[object Function]' === Object.prototype.toString.call(e)
          );
        }),
        (t.isNum = function (e) {
          return 'number' == typeof e && !isNaN(e);
        });
    },
    18946: function (e, t, n) {
      'use strict';
      function r(e) {
        var t,
          n,
          i = '';
        if ('string' == typeof e || 'number' == typeof e) i += e;
        else if ('object' == typeof e)
          if (Array.isArray(e))
            for (t = 0; t < e.length; t++)
              e[t] && (n = r(e[t])) && (i && (i += ' '), (i += n));
          else for (t in e) e[t] && (i && (i += ' '), (i += t));
        return i;
      }
      function i() {
        for (var e, t, n = 0, i = ''; n < arguments.length; )
          (e = arguments[n++]) && (t = r(e)) && (i && (i += ' '), (i += t));
        return i;
      }
      n.r(t),
        n.d(t, {
          clsx: function () {
            return i;
          },
        }),
        (t.default = i);
    },
    49723: function (e, t, n) {
      'use strict';
      n.d(t, {
        PD: function () {
          return ue;
        },
        y$: function () {
          return R;
        },
        Nb: function () {
          return M;
        },
        Hz: function () {
          return pe;
        },
        GI: function () {
          return L;
        },
      });
      var r = n(97950),
        i = n(62435);
      const o = (e) => (e || {}).ownerDocument || document,
        a = (e) => (o(e) || {}).defaultView || window,
        s = (e) => e instanceof HTMLElement || e instanceof a(e).HTMLElement,
        l = (e) => {
          const t = e.closest('.page');
          if (!t || !s(t)) return null;
          return { node: t, number: Number(t.dataset.pageNumber) };
        },
        c = (e, { width: t, height: n }) => ({
          x1: e.left,
          y1: e.top,
          x2: e.left + e.width,
          y2: e.top + e.height,
          width: t,
          height: n,
          pageNumber: e.pageNumber,
        }),
        h = (e, t, n = !1) => {
          const { width: r, height: i } = t;
          if (n)
            return ((e, t) => {
              const [n, r, i, o] = t.convertToViewportRectangle([
                e.x1,
                e.y1,
                e.x2,
                e.y2,
              ]);
              return {
                left: Math.min(n, i),
                top: Math.min(r, o),
                width: Math.abs(i - n),
                height: Math.abs(r - o),
                pageNumber: e.pageNumber,
              };
            })(e, t);
          if (void 0 === e.x1)
            throw new Error('You are using old position format, please update');
          const o = (r * e.x1) / e.width,
            a = (i * e.y1) / e.height;
          return {
            left: o,
            top: a,
            width: (r * e.x2) / e.width - o,
            height: (i * e.y2) / e.height - a,
            pageNumber: e.pageNumber,
          };
        };
      class u extends i.Component {
        constructor() {
          super(...arguments),
            (this.state = { locked: !1, start: null, end: null }),
            (this.reset = () => {
              const { onDragEnd: e } = this.props;
              e(), this.setState({ start: null, end: null, locked: !1 });
            });
        }
        getBoundingRect(e, t) {
          return {
            left: Math.min(t.x, e.x),
            top: Math.min(t.y, e.y),
            width: Math.abs(t.x - e.x),
            height: Math.abs(t.y - e.y),
          };
        }
        componentDidUpdate() {
          const { onChange: e } = this.props,
            { start: t, end: n } = this.state;
          e(Boolean(t && n));
        }
        componentDidMount() {
          if (!this.root) return;
          const e = this,
            {
              onSelection: t,
              onDragStart: n,
              onDragEnd: r,
              shouldStart: i,
            } = this.props,
            o = this.root.parentElement;
          if (!s(o)) return;
          let a = null;
          const l = (e, t) => (
            a || (a = o.getBoundingClientRect()),
            {
              x: e - a.left + o.scrollLeft,
              y: t - a.top + o.scrollTop - window.scrollY,
            }
          );
          o.addEventListener('mousemove', (t) => {
            const { start: n, locked: r } = this.state;
            n &&
              !r &&
              e.setState(
                Object.assign(Object.assign({}, this.state), {
                  end: l(t.pageX, t.pageY),
                }),
              );
          }),
            o.addEventListener('mousedown', (a) => {
              if (!i(a)) return void this.reset();
              const c = a.target;
              if (!s(c)) return;
              n(),
                this.setState({
                  start: l(a.pageX, a.pageY),
                  end: null,
                  locked: !1,
                });
              const h = (n) => {
                  var i;
                  null === (i = n.currentTarget) ||
                    void 0 === i ||
                    i.removeEventListener('mouseup', h);
                  const { start: a } = this.state;
                  if (!a) return;
                  const u = l(n.pageX, n.pageY),
                    d = e.getBoundingRect(a, u);
                  s(n.target) && o.contains(n.target) && e.shouldRender(d)
                    ? e.setState({ end: u, locked: !0 }, () => {
                        const { start: i, end: o } = e.state;
                        i && o && s(n.target) && (t(c, d, e.reset), r());
                      })
                    : e.reset();
                },
                { ownerDocument: u } = o;
              u.body && u.body.addEventListener('mouseup', h);
            });
        }
        shouldRender(e) {
          return e.width >= 1 && e.height >= 1;
        }
        render() {
          const { start: e, end: t } = this.state;
          return i.createElement(
            'div',
            {
              className: 'MouseSelection-container',
              ref: (e) => {
                e && (this.root = e);
              },
            },
            e && t
              ? i.createElement('div', {
                  className: 'MouseSelection',
                  style: this.getBoundingRect(e, t),
                })
              : null,
          );
        }
      }
      var d = u;
      class p extends i.Component {
        constructor() {
          super(...arguments),
            (this.state = { height: 0, width: 0 }),
            (this.node = null),
            (this.updatePosition = () => {
              if (!this.node) return;
              const { offsetHeight: e, offsetWidth: t } = this.node;
              this.setState({ height: e, width: t });
            });
        }
        componentDidUpdate(e) {
          this.props.children !== e.children && this.updatePosition();
        }
        componentDidMount() {
          setTimeout(this.updatePosition, 0);
        }
        render() {
          const {
              children: e,
              style: t,
              scrollTop: n,
              pageBoundingRect: r,
            } = this.props,
            { height: o, width: a } = this.state,
            s = 0 === a && 0 === o,
            l = t.top - o - 5 < n,
            c = l ? t.bottom + 5 : t.top - o - 5,
            h = ((e, t, n) => Math.min(Math.max(e, t), n))(
              t.left - a / 2,
              0,
              r.width - a,
            ),
            u = i.Children.map(e, (e) =>
              i.cloneElement(e, {
                onUpdate: () => {
                  this.setState({ width: 0, height: 0 }, () => {
                    setTimeout(this.updatePosition, 0);
                  });
                },
                popup: { position: l ? 'below' : 'above' },
              }),
            );
          return i.createElement(
            'div',
            {
              className: 'PdfHighlighter__tip-container',
              style: { visibility: s ? 'hidden' : 'visible', top: c, left: h },
              ref: (e) => {
                this.node = e;
              },
            },
            u,
          );
        }
      }
      var f = p,
        g = n(6915),
        m = n(91296),
        v = n.n(m);
      var b = (e, t) => {
        const { left: n, top: r, width: i, height: o } = t,
          s = e ? e.ownerDocument : null,
          l = s && s.createElement('canvas');
        if (
          !(
            l &&
            ((c = l),
            c instanceof HTMLCanvasElement ||
              c instanceof a(c).HTMLCanvasElement)
          )
        )
          return '';
        var c;
        (l.width = i), (l.height = o);
        const h = l.getContext('2d');
        if (!h || !e) return '';
        const u = window.devicePixelRatio;
        return (
          h.drawImage(e, n * u, r * u, i * u, o * u, 0, 0, i, o),
          l.toDataURL('image/png')
        );
      };
      var y = (e) => {
        const t = Array.from(e).map((e) => {
          const { left: t, top: n, width: r, height: i, pageNumber: o } = e;
          return { X0: t, X1: t + r, Y0: n, Y1: n + i, pageNumber: o };
        });
        let n = Number.MAX_SAFE_INTEGER;
        t.forEach((e) => {
          var t;
          n = Math.min(n, null !== (t = e.pageNumber) && void 0 !== t ? t : n);
        });
        const r = t.filter(
            (e) =>
              (e.X0 > 0 || e.X1 > 0 || e.Y0 > 0 || e.Y1 > 0) &&
              e.pageNumber === n,
          ),
          i = r.reduce(
            (e, t) => ({
              X0: Math.min(e.X0, t.X0),
              X1: Math.max(e.X1, t.X1),
              Y0: Math.min(e.Y0, t.Y0),
              Y1: Math.max(e.Y1, t.Y1),
              pageNumber: n,
            }),
            r[0],
          ),
          { X0: o, X1: a, Y0: s, Y1: l, pageNumber: c } = i;
        return { left: o, top: s, width: a - o, height: l - s, pageNumber: c };
      };
      const _ = (e, t) =>
          e.pageNumber === t.pageNumber &&
          e.left <= t.left &&
          t.left <= e.left + e.width,
        w = (e, t, n = 5) =>
          e.pageNumber === t.pageNumber &&
          Math.abs(e.top - t.top) < n &&
          Math.abs(e.height - t.height) < n,
        S = (e, t, n = 10) => {
          const r = e.left + e.width,
            i = t.left + t.width;
          return (
            e.pageNumber === t.pageNumber &&
            e.left <= t.left &&
            r <= i &&
            t.left - r <= n
          );
        },
        A = (e, t) => {
          e.width = Math.max(t.width - e.left + t.left, e.width);
        };
      var x = (e) => {
        const t = ((e) =>
            e.sort((e, t) => {
              const n =
                (e.pageNumber || 0) * e.top - (t.pageNumber || 0) * t.top;
              return 0 === n ? e.left - t.left : n;
            }))(e),
          n = new Set(),
          r = t.filter((e) =>
            t.every((t) => {
              return (
                (r = t),
                !(
                  (n = e).pageNumber === r.pageNumber &&
                  n.top > r.top &&
                  n.left > r.left &&
                  n.top + n.height < r.top + r.height &&
                  n.left + n.width < r.left + r.width
                )
              );
              var n, r;
            }),
          );
        let i = 0;
        for (; i <= 2; )
          r.forEach((e) => {
            r.forEach((t) => {
              e === t ||
                n.has(e) ||
                n.has(t) ||
                (w(e, t) &&
                  (_(e, t) &&
                    (A(e, t),
                    (e.height = Math.max(e.height, t.height)),
                    n.add(t)),
                  S(e, t) && (A(e, t), n.add(t))));
            });
          }),
            (i += 1);
        return r.filter((e) => !n.has(e));
      };
      const P = (e, t) =>
        !(e.top < t.top) &&
        !(e.bottom > t.bottom) &&
        !(e.right > t.right) &&
        !(e.left < t.left);
      var E = (e, t, n = !0) => {
          const r = Array.from(e.getClientRects()),
            i = [];
          for (const e of r)
            for (const n of t) {
              const t = n.node.getBoundingClientRect();
              if (
                P(e, t) &&
                e.width > 0 &&
                e.height > 0 &&
                e.width < t.width &&
                e.height < t.height
              ) {
                const r = {
                  top: e.top + n.node.scrollTop - t.top,
                  left: e.left + n.node.scrollLeft - t.left,
                  width: e.width,
                  height: e.height,
                  pageNumber: n.number,
                };
                i.push(r);
              }
            }
          return n ? x(i) : i;
        },
        C = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      function T({
        highlightsByPage: e,
        scaledPositionToViewport: t,
        pageNumber: n,
        scrolledToHighlightId: r,
        highlightTransform: o,
        tip: a,
        hideTipAndSelection: s,
        viewer: l,
        screenshot: h,
        showTip: u,
        setState: d,
      }) {
        const p = e[String(n)] || [];
        return i.createElement(
          'div',
          null,
          p.map((e, i) => {
            var { position: p, id: f } = e,
              g = C(e, ['position', 'id']);
            const m = Object.assign({ id: f, position: t(p) }, g);
            a && a.highlight.id === String(f) && u(a.highlight, a.callback(m));
            const v = Boolean(r === f);
            return o(
              m,
              i,
              (e, t) => {
                d({ tip: { highlight: e, callback: t } }), u(e, t(e));
              },
              s,
              (e) => {
                const t = l.getPageView(
                  (e.pageNumber || parseInt(n)) - 1,
                ).viewport;
                return c(e, t);
              },
              (e) => h(e, parseInt(n)),
              v,
            );
          }),
        );
      }
      const k = 'empty-id';
      class M extends i.PureComponent {
        constructor(e) {
          super(e),
            (this.state = {
              ghostHighlight: null,
              isCollapsed: !0,
              range: null,
              scrolledToHighlightId: k,
              isAreaSelectionInProgress: !1,
              tip: null,
              tipPosition: null,
              tipChildren: null,
            }),
            (this.eventBus = new r.EventBus()),
            (this.linkService = new r.PDFLinkService({
              eventBus: this.eventBus,
              externalLinkTarget: 2,
            })),
            (this.resizeObserver = null),
            (this.containerNode = null),
            (this.highlightRoots = {}),
            (this.unsubscribe = () => {}),
            (this.attachRef = () => {
              var e;
              const { eventBus: t, resizeObserver: n } = this,
                r = (this.containerNode = this.containerNodeRef.current);
              if ((this.unsubscribe(), r)) {
                const { ownerDocument: i } = r;
                t.on('textlayerrendered', this.onTextLayerRendered),
                  t.on('pagesinit', this.onDocumentReady),
                  i.addEventListener('selectionchange', this.onSelectionChange),
                  i.addEventListener('keydown', this.handleKeyDown),
                  null === (e = i.defaultView) ||
                    void 0 === e ||
                    e.addEventListener('resize', this.debouncedScaleValue),
                  n && n.observe(r),
                  (this.unsubscribe = () => {
                    var e;
                    t.off('pagesinit', this.onDocumentReady),
                      t.off('textlayerrendered', this.onTextLayerRendered),
                      i.removeEventListener(
                        'selectionchange',
                        this.onSelectionChange,
                      ),
                      i.removeEventListener('keydown', this.handleKeyDown),
                      null === (e = i.defaultView) ||
                        void 0 === e ||
                        e.removeEventListener(
                          'resize',
                          this.debouncedScaleValue,
                        ),
                      n && n.disconnect();
                  });
              }
            }),
            (this.hideTipAndSelection = () => {
              this.setState({ tipPosition: null, tipChildren: null }),
                this.setState({ ghostHighlight: null, tip: null }, () =>
                  this.renderHighlightLayers(),
                );
            }),
            (this.renderTip = () => {
              const { tipPosition: e, tipChildren: t } = this.state;
              if (!e) return null;
              const { boundingRect: n, pageNumber: r } = e,
                o = {
                  node: this.viewer.getPageView((n.pageNumber || r) - 1).div,
                  pageNumber: n.pageNumber || r,
                },
                a = o.node.getBoundingClientRect(),
                s = {
                  bottom: a.bottom,
                  height: a.height,
                  left: a.left,
                  right: a.right,
                  top: a.top,
                  width: a.width,
                  x: a.x,
                  y: a.y,
                  pageNumber: o.pageNumber,
                };
              return i.createElement(
                f,
                {
                  scrollTop: this.viewer.container.scrollTop,
                  pageBoundingRect: s,
                  style: {
                    left: o.node.offsetLeft + n.left + n.width / 2,
                    top: n.top + o.node.offsetTop,
                    bottom: n.top + o.node.offsetTop + n.height,
                  },
                },
                t,
              );
            }),
            (this.onTextLayerRendered = () => {
              this.renderHighlightLayers();
            }),
            (this.scrollTo = (e) => {
              const {
                pageNumber: t,
                boundingRect: n,
                usePdfCoordinates: r,
              } = e.position;
              this.viewer.container.removeEventListener(
                'scroll',
                this.onScroll,
              );
              const i = this.viewer.getPageView(t - 1).viewport;
              this.viewer.scrollPageIntoView({
                pageNumber: t,
                destArray: [
                  null,
                  { name: 'XYZ' },
                  ...i.convertToPdfPoint(0, h(n, i, r).top - 10),
                  0,
                ],
              }),
                this.setState({ scrolledToHighlightId: e.id }, () =>
                  this.renderHighlightLayers(),
                ),
                setTimeout(() => {
                  this.viewer.container.addEventListener(
                    'scroll',
                    this.onScroll,
                  );
                }, 100);
            }),
            (this.onDocumentReady = () => {
              const { scrollRef: e } = this.props;
              this.handleScaleValue(), e(this.scrollTo);
            }),
            (this.onSelectionChange = () => {
              const e = this.containerNode,
                t = a(e).getSelection();
              if (!t) return;
              const n = t.rangeCount > 0 ? t.getRangeAt(0) : null;
              t.isCollapsed
                ? this.setState({ isCollapsed: !0 })
                : n &&
                  e &&
                  e.contains(n.commonAncestorContainer) &&
                  (this.setState({ isCollapsed: !1, range: n }),
                  this.debouncedAfterSelection());
            }),
            (this.onScroll = () => {
              const { onScrollChange: e } = this.props;
              e(),
                this.setState({ scrolledToHighlightId: k }, () =>
                  this.renderHighlightLayers(),
                ),
                this.viewer.container.removeEventListener(
                  'scroll',
                  this.onScroll,
                );
            }),
            (this.onMouseDown = (e) => {
              s(e.target) &&
                (e.target.closest('.PdfHighlighter__tip-container') ||
                  this.hideTipAndSelection());
            }),
            (this.handleKeyDown = (e) => {
              'Escape' === e.code && this.hideTipAndSelection();
            }),
            (this.afterSelection = () => {
              const { onSelectionFinished: e } = this.props,
                { isCollapsed: t, range: n } = this.state;
              if (!n || t) return;
              const r = ((e) => {
                const t = e.startContainer.parentElement,
                  n = e.endContainer.parentElement;
                if (!s(t) || !s(n)) return [];
                const r = l(t),
                  i = l(n);
                if (
                  !(null == r ? void 0 : r.number) ||
                  !(null == i ? void 0 : i.number)
                )
                  return [];
                if (r.number === i.number) return [r];
                if (r.number === i.number - 1) return [r, i];
                const o = [];
                let a = r.number;
                const c = r.node.ownerDocument;
                for (; a <= i.number; ) {
                  const e = l(c.querySelector(`[data-page-number='${a}'`));
                  e && o.push(e), a++;
                }
                return o;
              })(n);
              if (!r || 0 === r.length) return;
              const i = E(n, r);
              if (0 === i.length) return;
              const o = {
                  boundingRect: y(i),
                  rects: i,
                  pageNumber: r[0].number,
                },
                a = { text: n.toString() },
                c = this.viewportPositionToScaled(o);
              this.setTip(
                o,
                e(
                  c,
                  a,
                  () => this.hideTipAndSelection(),
                  () =>
                    this.setState({ ghostHighlight: { position: c } }, () =>
                      this.renderHighlightLayers(),
                    ),
                ),
              );
            }),
            (this.debouncedAfterSelection = v()(this.afterSelection, 500)),
            (this.handleScaleValue = () => {
              this.viewer &&
                (this.viewer.currentScaleValue = this.props.pdfScaleValue);
            }),
            (this.debouncedScaleValue = v()(this.handleScaleValue, 500)),
            'undefined' != typeof ResizeObserver &&
              (this.resizeObserver = new ResizeObserver(
                this.debouncedScaleValue,
              )),
            (this.containerNodeRef = i.createRef());
        }
        componentDidMount() {
          this.init();
        }
        componentDidUpdate(e) {
          e.pdfDocument === this.props.pdfDocument
            ? e.highlights !== this.props.highlights &&
              this.renderHighlightLayers()
            : this.init();
        }
        init() {
          const { pdfDocument: e } = this.props;
          this.attachRef(),
            (this.viewer =
              this.viewer ||
              new r.PDFViewer({
                container: this.containerNodeRef.current,
                eventBus: this.eventBus,
                textLayerMode: 2,
                removePageBorders: !0,
                linkService: this.linkService,
                l10n: r.NullL10n,
              })),
            this.linkService.setDocument(e),
            this.linkService.setViewer(this.viewer),
            this.viewer.setDocument(e),
            (window.PdfViewer = this);
        }
        componentWillUnmount() {
          this.unsubscribe();
        }
        findOrCreateHighlightLayer(e) {
          const { textLayer: t } = this.viewer.getPageView(e - 1) || {};
          return t
            ? ((e, t) => {
                const n = o(e);
                let r = e.querySelector(`.${t}`);
                return (
                  r ||
                    ((r = n.createElement('div')),
                    (r.className = t),
                    e.appendChild(r)),
                  r
                );
              })(t.textLayerDiv, 'PdfHighlighter__highlight-layer')
            : null;
        }
        groupHighlightsByPage(e) {
          const { ghostHighlight: t } = this.state,
            n = [...e, t].filter(Boolean),
            r = new Set();
          for (const e of n) {
            r.add(e.position.pageNumber);
            for (const t of e.position.rects)
              t.pageNumber && r.add(t.pageNumber);
          }
          const i = {};
          for (const e of r) {
            i[e] = i[e] || [];
            for (const t of n) {
              const n = Object.assign(Object.assign({}, t), {
                position: {
                  pageNumber: e,
                  boundingRect: t.position.boundingRect,
                  rects: [],
                  usePdfCoordinates: t.position.usePdfCoordinates,
                },
              });
              let r = !1;
              for (const i of t.position.rects)
                e === (i.pageNumber || t.position.pageNumber) &&
                  (n.position.rects.push(i), (r = !0));
              (r || e === t.position.pageNumber) && i[e].push(n);
            }
          }
          return i;
        }
        showTip(e, t) {
          const {
            isCollapsed: n,
            ghostHighlight: r,
            isAreaSelectionInProgress: i,
          } = this.state;
          !n || r || i || this.setTip(e.position, t);
        }
        scaledPositionToViewport({
          pageNumber: e,
          boundingRect: t,
          rects: n,
          usePdfCoordinates: r,
        }) {
          const i = this.viewer.getPageView(e - 1).viewport;
          return {
            boundingRect: h(t, i, r),
            rects: (n || []).map((e) => h(e, i, r)),
            pageNumber: e,
          };
        }
        viewportPositionToScaled({ pageNumber: e, boundingRect: t, rects: n }) {
          const r = this.viewer.getPageView(e - 1).viewport;
          return {
            boundingRect: c(t, r),
            rects: (n || []).map((e) => c(e, r)),
            pageNumber: e,
          };
        }
        screenshot(e, t) {
          const n = this.viewer.getPageView(t - 1).canvas;
          return b(n, e);
        }
        setTip(e, t) {
          this.setState({ tipPosition: e, tipChildren: t });
        }
        toggleTextSelection(e) {
          this.viewer.viewer.classList.toggle(
            'PdfHighlighter--disable-selection',
            e,
          );
        }
        render() {
          const { onSelectionFinished: e, enableAreaSelection: t } = this.props;
          return i.createElement(
            'div',
            { onPointerDown: this.onMouseDown },
            i.createElement(
              'div',
              {
                ref: this.containerNodeRef,
                className: 'PdfHighlighter',
                onContextMenu: (e) => e.preventDefault(),
              },
              i.createElement('div', { className: 'pdfViewer' }),
              this.renderTip(),
              'function' == typeof t
                ? i.createElement(d, {
                    onDragStart: () => this.toggleTextSelection(!0),
                    onDragEnd: () => this.toggleTextSelection(!1),
                    onChange: (e) =>
                      this.setState({ isAreaSelectionInProgress: e }),
                    shouldStart: (e) =>
                      t(e) && s(e.target) && Boolean(e.target.closest('.page')),
                    onSelection: (t, n, r) => {
                      const i = l(t);
                      if (!i) return;
                      const o = Object.assign(Object.assign({}, n), {
                          top: n.top - i.node.offsetTop,
                          left: n.left - i.node.offsetLeft,
                          pageNumber: i.number,
                        }),
                        a = {
                          boundingRect: o,
                          rects: [],
                          pageNumber: i.number,
                        },
                        s = this.viewportPositionToScaled(a),
                        c = this.screenshot(o, o.pageNumber);
                      this.setTip(
                        a,
                        e(
                          s,
                          { image: c },
                          () => this.hideTipAndSelection(),
                          () => {
                            console.log('setting ghost highlight', s),
                              this.setState(
                                {
                                  ghostHighlight: {
                                    position: s,
                                    content: { image: c },
                                  },
                                },
                                () => {
                                  r(), this.renderHighlightLayers();
                                },
                              );
                          },
                        ),
                      );
                    },
                  })
                : null,
            ),
          );
        }
        renderHighlightLayers() {
          const { pdfDocument: e } = this.props;
          for (let t = 1; t <= e.numPages; t++) {
            const e = this.highlightRoots[t];
            if (e && e.container.isConnected)
              this.renderHighlightLayer(e.reactRoot, t);
            else {
              const e = this.findOrCreateHighlightLayer(t);
              if (e) {
                const n = (0, g.createRoot)(e);
                (this.highlightRoots[t] = { reactRoot: n, container: e }),
                  this.renderHighlightLayer(n, t);
              }
            }
          }
        }
        renderHighlightLayer(e, t) {
          const { highlightTransform: n, highlights: r } = this.props,
            { tip: o, scrolledToHighlightId: a } = this.state;
          e.render(
            i.createElement(T, {
              highlightsByPage: this.groupHighlightsByPage(r),
              pageNumber: t.toString(),
              scrolledToHighlightId: a,
              highlightTransform: n,
              tip: o,
              scaledPositionToViewport:
                this.scaledPositionToViewport.bind(this),
              hideTipAndSelection: this.hideTipAndSelection.bind(this),
              viewer: this.viewer,
              screenshot: this.screenshot.bind(this),
              showTip: this.showTip.bind(this),
              setState: this.setState.bind(this),
            }),
          );
        }
      }
      M.defaultProps = { pdfScaleValue: 'auto' };
      class R extends i.Component {
        render() {
          const {
              position: e,
              onClick: t,
              onMouseOver: n,
              onMouseOut: r,
              comment: o,
              isScrolledTo: a,
            } = this.props,
            { rects: s, boundingRect: l } = e;
          return i.createElement(
            'div',
            { className: 'Highlight ' + (a ? 'Highlight--scrolledTo' : '') },
            o
              ? i.createElement(
                  'div',
                  {
                    className: 'Highlight__emoji',
                    style: { left: 20, top: l.top },
                  },
                  o.emoji,
                )
              : null,
            i.createElement(
              'div',
              { className: 'Highlight__parts' },
              s.map((e, o) =>
                i.createElement('div', {
                  onMouseOver: n,
                  onMouseOut: r,
                  onClick: t,
                  key: o,
                  style: e,
                  className: 'Highlight__part',
                }),
              ),
            ),
          );
        }
      }
      var O = function (e, t) {
        var n = {};
        for (var r in e)
          Object.prototype.hasOwnProperty.call(e, r) &&
            t.indexOf(r) < 0 &&
            (n[r] = e[r]);
        if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
          var i = 0;
          for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
            t.indexOf(r[i]) < 0 &&
              Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
              (n[r[i]] = e[r[i]]);
        }
        return n;
      };
      class D extends i.Component {
        constructor() {
          super(...arguments),
            (this.container = null),
            (this.unsubscribe = () => {}),
            (this.onMouseMove = (e) => {
              if (!this.container) return;
              const { onMoveAway: t, paddingX: n, paddingY: r } = this.props,
                { clientX: i, clientY: o } = e,
                {
                  left: a,
                  top: s,
                  width: l,
                  height: c,
                } = this.container.getBoundingClientRect();
              (i > a - n && i < a + l + n && o > s - r && o < s + c + r) || t();
            }),
            (this.attachRef = (e) => {
              if (((this.container = e), this.unsubscribe(), e)) {
                const { ownerDocument: t } = e;
                t.addEventListener('mousemove', this.onMouseMove),
                  (this.unsubscribe = () => {
                    t.removeEventListener('mousemove', this.onMouseMove);
                  });
              }
            });
        }
        render() {
          const e = this.props,
            { onMoveAway: t, paddingX: n, paddingY: r, children: o } = e,
            a = O(e, ['onMoveAway', 'paddingX', 'paddingY', 'children']);
          return i.createElement(
            'div',
            { ref: this.attachRef },
            i.cloneElement(o, a),
          );
        }
      }
      var I = D;
      class L extends i.Component {
        constructor() {
          super(...arguments), (this.state = { mouseIn: !1 });
        }
        render() {
          const { onMouseOver: e, popupContent: t, onMouseOut: n } = this.props;
          return i.createElement(
            'div',
            {
              onMouseOver: () => {
                this.setState({ mouseIn: !0 }),
                  e(
                    i.createElement(I, {
                      onMoveAway: () => {
                        this.state.mouseIn || n();
                      },
                      paddingX: 60,
                      paddingY: 30,
                      children: t,
                    }),
                  );
              },
              onMouseOut: () => {
                this.setState({ mouseIn: !1 });
              },
            },
            this.props.children,
          );
        }
      }
      var F = n(61193),
        N = n.n(F),
        j = (function () {
          var e = function (t, n) {
            return (
              (e =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                  function (e, t) {
                    e.__proto__ = t;
                  }) ||
                function (e, t) {
                  for (var n in t)
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                }),
              e(t, n)
            );
          };
          return function (t, n) {
            function r() {
              this.constructor = t;
            }
            e(t, n),
              (t.prototype =
                null === n
                  ? Object.create(n)
                  : ((r.prototype = n.prototype), new r()));
          };
        })(),
        B = function () {
          return (
            (B =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var i in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }),
            B.apply(this, arguments)
          );
        },
        W = {
          top: {
            width: '100%',
            height: '10px',
            top: '-5px',
            left: '0px',
            cursor: 'row-resize',
          },
          right: {
            width: '10px',
            height: '100%',
            top: '0px',
            right: '-5px',
            cursor: 'col-resize',
          },
          bottom: {
            width: '100%',
            height: '10px',
            bottom: '-5px',
            left: '0px',
            cursor: 'row-resize',
          },
          left: {
            width: '10px',
            height: '100%',
            top: '0px',
            left: '-5px',
            cursor: 'col-resize',
          },
          topRight: {
            width: '20px',
            height: '20px',
            position: 'absolute',
            right: '-10px',
            top: '-10px',
            cursor: 'ne-resize',
          },
          bottomRight: {
            width: '20px',
            height: '20px',
            position: 'absolute',
            right: '-10px',
            bottom: '-10px',
            cursor: 'se-resize',
          },
          bottomLeft: {
            width: '20px',
            height: '20px',
            position: 'absolute',
            left: '-10px',
            bottom: '-10px',
            cursor: 'sw-resize',
          },
          topLeft: {
            width: '20px',
            height: '20px',
            position: 'absolute',
            left: '-10px',
            top: '-10px',
            cursor: 'nw-resize',
          },
        },
        z = (function (e) {
          function t() {
            var t = (null !== e && e.apply(this, arguments)) || this;
            return (
              (t.onMouseDown = function (e) {
                t.props.onResizeStart(e, t.props.direction);
              }),
              (t.onTouchStart = function (e) {
                t.props.onResizeStart(e, t.props.direction);
              }),
              t
            );
          }
          return (
            j(t, e),
            (t.prototype.render = function () {
              return i.createElement(
                'div',
                {
                  className: this.props.className || '',
                  style: B(
                    B(
                      { position: 'absolute', userSelect: 'none' },
                      W[this.props.direction],
                    ),
                    this.props.replaceStyles || {},
                  ),
                  onMouseDown: this.onMouseDown,
                  onTouchStart: this.onTouchStart,
                },
                this.props.children,
              );
            }),
            t
          );
        })(i.PureComponent),
        $ = n(53316),
        U = n.n($),
        H = (function () {
          var e = function (t, n) {
            return (
              (e =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                  function (e, t) {
                    e.__proto__ = t;
                  }) ||
                function (e, t) {
                  for (var n in t)
                    Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
                }),
              e(t, n)
            );
          };
          return function (t, n) {
            function r() {
              this.constructor = t;
            }
            e(t, n),
              (t.prototype =
                null === n
                  ? Object.create(n)
                  : ((r.prototype = n.prototype), new r()));
          };
        })(),
        V = function () {
          return (
            (V =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var i in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
                return e;
              }),
            V.apply(this, arguments)
          );
        },
        q = { width: 'auto', height: 'auto' },
        G = U()(function (e, t, n) {
          return Math.max(Math.min(e, n), t);
        }),
        X = U()(function (e, t) {
          return Math.round(e / t) * t;
        }),
        Y = U()(function (e, t) {
          return new RegExp(e, 'i').test(t);
        }),
        K = function (e) {
          return Boolean(e.touches && e.touches.length);
        },
        Z = U()(function (e, t, n) {
          void 0 === n && (n = 0);
          var r = t.reduce(function (n, r, i) {
              return Math.abs(r - e) < Math.abs(t[n] - e) ? i : n;
            }, 0),
            i = Math.abs(t[r] - e);
          return 0 === n || i < n ? t[r] : e;
        }),
        Q = U()(function (e, t) {
          return e.substr(e.length - t.length, t.length) === t;
        }),
        J = U()(function (e) {
          return 'auto' === (e = e.toString()) ||
            Q(e, 'px') ||
            Q(e, '%') ||
            Q(e, 'vh') ||
            Q(e, 'vw') ||
            Q(e, 'vmax') ||
            Q(e, 'vmin')
            ? e
            : e + 'px';
        }),
        ee = function (e, t, n, r) {
          if (e && 'string' == typeof e) {
            if (Q(e, 'px')) return Number(e.replace('px', ''));
            if (Q(e, '%')) return t * (Number(e.replace('%', '')) / 100);
            if (Q(e, 'vw')) return n * (Number(e.replace('vw', '')) / 100);
            if (Q(e, 'vh')) return r * (Number(e.replace('vh', '')) / 100);
          }
          return e;
        },
        te = U()(function (e, t, n, r, i, o, a) {
          return (
            (r = ee(r, e.width, t, n)),
            (i = ee(i, e.height, t, n)),
            (o = ee(o, e.width, t, n)),
            (a = ee(a, e.height, t, n)),
            {
              maxWidth: void 0 === r ? void 0 : Number(r),
              maxHeight: void 0 === i ? void 0 : Number(i),
              minWidth: void 0 === o ? void 0 : Number(o),
              minHeight: void 0 === a ? void 0 : Number(a),
            }
          );
        }),
        ne = [
          'as',
          'style',
          'className',
          'grid',
          'snap',
          'bounds',
          'boundsByDirection',
          'size',
          'defaultSize',
          'minWidth',
          'minHeight',
          'maxWidth',
          'maxHeight',
          'lockAspectRatio',
          'lockAspectRatioExtraWidth',
          'lockAspectRatioExtraHeight',
          'enable',
          'handleStyles',
          'handleClasses',
          'handleWrapperStyle',
          'handleWrapperClass',
          'children',
          'onResizeStart',
          'onResize',
          'onResizeStop',
          'handleComponent',
          'scale',
          'resizeRatio',
          'snapGap',
        ],
        re = '__resizable_base__',
        ie = (function (e) {
          function t(t) {
            var n = e.call(this, t) || this;
            return (
              (n.ratio = 1),
              (n.resizable = null),
              (n.parentLeft = 0),
              (n.parentTop = 0),
              (n.resizableLeft = 0),
              (n.resizableRight = 0),
              (n.resizableTop = 0),
              (n.resizableBottom = 0),
              (n.targetLeft = 0),
              (n.targetTop = 0),
              (n.appendBase = function () {
                if (!n.resizable || !n.window) return null;
                var e = n.parentNode;
                if (!e) return null;
                var t = n.window.document.createElement('div');
                return (
                  (t.style.width = '100%'),
                  (t.style.height = '100%'),
                  (t.style.position = 'absolute'),
                  (t.style.transform = 'scale(0, 0)'),
                  (t.style.left = '0'),
                  (t.style.flex = '0 0 100%'),
                  t.classList ? t.classList.add(re) : (t.className += re),
                  e.appendChild(t),
                  t
                );
              }),
              (n.removeBase = function (e) {
                var t = n.parentNode;
                t && t.removeChild(e);
              }),
              (n.ref = function (e) {
                e && (n.resizable = e);
              }),
              (n.state = {
                isResizing: !1,
                width:
                  void 0 === (n.propsSize && n.propsSize.width)
                    ? 'auto'
                    : n.propsSize && n.propsSize.width,
                height:
                  void 0 === (n.propsSize && n.propsSize.height)
                    ? 'auto'
                    : n.propsSize && n.propsSize.height,
                direction: 'right',
                original: { x: 0, y: 0, width: 0, height: 0 },
                backgroundStyle: {
                  height: '100%',
                  width: '100%',
                  backgroundColor: 'rgba(0,0,0,0)',
                  cursor: 'auto',
                  opacity: 0,
                  position: 'fixed',
                  zIndex: 9999,
                  top: '0',
                  left: '0',
                  bottom: '0',
                  right: '0',
                },
                flexBasis: void 0,
              }),
              (n.onResizeStart = n.onResizeStart.bind(n)),
              (n.onMouseMove = n.onMouseMove.bind(n)),
              (n.onMouseUp = n.onMouseUp.bind(n)),
              n
            );
          }
          return (
            H(t, e),
            Object.defineProperty(t.prototype, 'parentNode', {
              get: function () {
                return this.resizable ? this.resizable.parentNode : null;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(t.prototype, 'window', {
              get: function () {
                return this.resizable && this.resizable.ownerDocument
                  ? this.resizable.ownerDocument.defaultView
                  : null;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(t.prototype, 'propsSize', {
              get: function () {
                return this.props.size || this.props.defaultSize || q;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(t.prototype, 'size', {
              get: function () {
                var e = 0,
                  t = 0;
                if (this.resizable && this.window) {
                  var n = this.resizable.offsetWidth,
                    r = this.resizable.offsetHeight,
                    i = this.resizable.style.position;
                  'relative' !== i &&
                    (this.resizable.style.position = 'relative'),
                    (e =
                      'auto' !== this.resizable.style.width
                        ? this.resizable.offsetWidth
                        : n),
                    (t =
                      'auto' !== this.resizable.style.height
                        ? this.resizable.offsetHeight
                        : r),
                    (this.resizable.style.position = i);
                }
                return { width: e, height: t };
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(t.prototype, 'sizeStyle', {
              get: function () {
                var e = this,
                  t = this.props.size,
                  n = function (t) {
                    if (void 0 === e.state[t] || 'auto' === e.state[t])
                      return 'auto';
                    if (
                      e.propsSize &&
                      e.propsSize[t] &&
                      Q(e.propsSize[t].toString(), '%')
                    ) {
                      if (Q(e.state[t].toString(), '%'))
                        return e.state[t].toString();
                      var n = e.getParentSize();
                      return (
                        (Number(e.state[t].toString().replace('px', '')) /
                          n[t]) *
                          100 +
                        '%'
                      );
                    }
                    return J(e.state[t]);
                  };
                return {
                  width:
                    t && void 0 !== t.width && !this.state.isResizing
                      ? J(t.width)
                      : n('width'),
                  height:
                    t && void 0 !== t.height && !this.state.isResizing
                      ? J(t.height)
                      : n('height'),
                };
              },
              enumerable: !1,
              configurable: !0,
            }),
            (t.prototype.getParentSize = function () {
              if (!this.parentNode)
                return this.window
                  ? {
                      width: this.window.innerWidth,
                      height: this.window.innerHeight,
                    }
                  : { width: 0, height: 0 };
              var e = this.appendBase();
              if (!e) return { width: 0, height: 0 };
              var t = !1,
                n = this.parentNode.style.flexWrap;
              'wrap' !== n &&
                ((t = !0), (this.parentNode.style.flexWrap = 'wrap')),
                (e.style.position = 'relative'),
                (e.style.minWidth = '100%'),
                (e.style.minHeight = '100%');
              var r = { width: e.offsetWidth, height: e.offsetHeight };
              return (
                t && (this.parentNode.style.flexWrap = n), this.removeBase(e), r
              );
            }),
            (t.prototype.bindEvents = function () {
              this.window &&
                (this.window.addEventListener('mouseup', this.onMouseUp),
                this.window.addEventListener('mousemove', this.onMouseMove),
                this.window.addEventListener('mouseleave', this.onMouseUp),
                this.window.addEventListener('touchmove', this.onMouseMove, {
                  capture: !0,
                  passive: !1,
                }),
                this.window.addEventListener('touchend', this.onMouseUp));
            }),
            (t.prototype.unbindEvents = function () {
              this.window &&
                (this.window.removeEventListener('mouseup', this.onMouseUp),
                this.window.removeEventListener('mousemove', this.onMouseMove),
                this.window.removeEventListener('mouseleave', this.onMouseUp),
                this.window.removeEventListener(
                  'touchmove',
                  this.onMouseMove,
                  !0,
                ),
                this.window.removeEventListener('touchend', this.onMouseUp));
            }),
            (t.prototype.componentDidMount = function () {
              if (this.resizable && this.window) {
                var e = this.window.getComputedStyle(this.resizable);
                this.setState({
                  width: this.state.width || this.size.width,
                  height: this.state.height || this.size.height,
                  flexBasis: 'auto' !== e.flexBasis ? e.flexBasis : void 0,
                });
              }
            }),
            (t.prototype.componentWillUnmount = function () {
              this.window && this.unbindEvents();
            }),
            (t.prototype.createSizeForCssProperty = function (e, t) {
              var n = this.propsSize && this.propsSize[t];
              return 'auto' !== this.state[t] ||
                this.state.original[t] !== e ||
                (void 0 !== n && 'auto' !== n)
                ? e
                : 'auto';
            }),
            (t.prototype.calculateNewMaxFromBoundary = function (e, t) {
              var n,
                r,
                i = this.props.boundsByDirection,
                o = this.state.direction,
                a = i && Y('left', o),
                s = i && Y('top', o);
              if ('parent' === this.props.bounds) {
                var l = this.parentNode;
                l &&
                  ((n = a
                    ? this.resizableRight - this.parentLeft
                    : l.offsetWidth + (this.parentLeft - this.resizableLeft)),
                  (r = s
                    ? this.resizableBottom - this.parentTop
                    : l.offsetHeight + (this.parentTop - this.resizableTop)));
              } else
                'window' === this.props.bounds
                  ? this.window &&
                    ((n = a
                      ? this.resizableRight
                      : this.window.innerWidth - this.resizableLeft),
                    (r = s
                      ? this.resizableBottom
                      : this.window.innerHeight - this.resizableTop))
                  : this.props.bounds &&
                    ((n = a
                      ? this.resizableRight - this.targetLeft
                      : this.props.bounds.offsetWidth +
                        (this.targetLeft - this.resizableLeft)),
                    (r = s
                      ? this.resizableBottom - this.targetTop
                      : this.props.bounds.offsetHeight +
                        (this.targetTop - this.resizableTop)));
              return (
                n && Number.isFinite(n) && (e = e && e < n ? e : n),
                r && Number.isFinite(r) && (t = t && t < r ? t : r),
                { maxWidth: e, maxHeight: t }
              );
            }),
            (t.prototype.calculateNewSizeFromDirection = function (e, t) {
              var n = this.props.scale || 1,
                r = this.props.resizeRatio || 1,
                i = this.state,
                o = i.direction,
                a = i.original,
                s = this.props,
                l = s.lockAspectRatio,
                c = s.lockAspectRatioExtraHeight,
                h = s.lockAspectRatioExtraWidth,
                u = a.width,
                d = a.height,
                p = c || 0,
                f = h || 0;
              return (
                Y('right', o) &&
                  ((u = a.width + ((e - a.x) * r) / n),
                  l && (d = (u - f) / this.ratio + p)),
                Y('left', o) &&
                  ((u = a.width - ((e - a.x) * r) / n),
                  l && (d = (u - f) / this.ratio + p)),
                Y('bottom', o) &&
                  ((d = a.height + ((t - a.y) * r) / n),
                  l && (u = (d - p) * this.ratio + f)),
                Y('top', o) &&
                  ((d = a.height - ((t - a.y) * r) / n),
                  l && (u = (d - p) * this.ratio + f)),
                { newWidth: u, newHeight: d }
              );
            }),
            (t.prototype.calculateNewSizeFromAspectRatio = function (
              e,
              t,
              n,
              r,
            ) {
              var i = this.props,
                o = i.lockAspectRatio,
                a = i.lockAspectRatioExtraHeight,
                s = i.lockAspectRatioExtraWidth,
                l = void 0 === r.width ? 10 : r.width,
                c = void 0 === n.width || n.width < 0 ? e : n.width,
                h = void 0 === r.height ? 10 : r.height,
                u = void 0 === n.height || n.height < 0 ? t : n.height,
                d = a || 0,
                p = s || 0;
              if (o) {
                var f = (h - d) * this.ratio + p,
                  g = (u - d) * this.ratio + p,
                  m = (l - p) / this.ratio + d,
                  v = (c - p) / this.ratio + d,
                  b = Math.max(l, f),
                  y = Math.min(c, g),
                  _ = Math.max(h, m),
                  w = Math.min(u, v);
                (e = G(e, b, y)), (t = G(t, _, w));
              } else (e = G(e, l, c)), (t = G(t, h, u));
              return { newWidth: e, newHeight: t };
            }),
            (t.prototype.setBoundingClientRect = function () {
              if ('parent' === this.props.bounds) {
                var e = this.parentNode;
                if (e) {
                  var t = e.getBoundingClientRect();
                  (this.parentLeft = t.left), (this.parentTop = t.top);
                }
              }
              if (this.props.bounds && 'string' != typeof this.props.bounds) {
                var n = this.props.bounds.getBoundingClientRect();
                (this.targetLeft = n.left), (this.targetTop = n.top);
              }
              if (this.resizable) {
                var r = this.resizable.getBoundingClientRect(),
                  i = r.left,
                  o = r.top,
                  a = r.right,
                  s = r.bottom;
                (this.resizableLeft = i),
                  (this.resizableRight = a),
                  (this.resizableTop = o),
                  (this.resizableBottom = s);
              }
            }),
            (t.prototype.onResizeStart = function (e, t) {
              if (this.resizable && this.window) {
                var n,
                  r = 0,
                  i = 0;
                if (
                  (e.nativeEvent &&
                  (function (e) {
                    return Boolean(
                      (e.clientX || 0 === e.clientX) &&
                        (e.clientY || 0 === e.clientY),
                    );
                  })(e.nativeEvent)
                    ? ((r = e.nativeEvent.clientX), (i = e.nativeEvent.clientY))
                    : e.nativeEvent &&
                      K(e.nativeEvent) &&
                      ((r = e.nativeEvent.touches[0].clientX),
                      (i = e.nativeEvent.touches[0].clientY)),
                  this.props.onResizeStart)
                )
                  if (this.resizable)
                    if (!1 === this.props.onResizeStart(e, t, this.resizable))
                      return;
                this.props.size &&
                  (void 0 !== this.props.size.height &&
                    this.props.size.height !== this.state.height &&
                    this.setState({ height: this.props.size.height }),
                  void 0 !== this.props.size.width &&
                    this.props.size.width !== this.state.width &&
                    this.setState({ width: this.props.size.width })),
                  (this.ratio =
                    'number' == typeof this.props.lockAspectRatio
                      ? this.props.lockAspectRatio
                      : this.size.width / this.size.height);
                var o = this.window.getComputedStyle(this.resizable);
                if ('auto' !== o.flexBasis) {
                  var a = this.parentNode;
                  if (a) {
                    var s = this.window.getComputedStyle(a).flexDirection;
                    (this.flexDir = s.startsWith('row') ? 'row' : 'column'),
                      (n = o.flexBasis);
                  }
                }
                this.setBoundingClientRect(), this.bindEvents();
                var l = {
                  original: {
                    x: r,
                    y: i,
                    width: this.size.width,
                    height: this.size.height,
                  },
                  isResizing: !0,
                  backgroundStyle: V(V({}, this.state.backgroundStyle), {
                    cursor:
                      this.window.getComputedStyle(e.target).cursor || 'auto',
                  }),
                  direction: t,
                  flexBasis: n,
                };
                this.setState(l);
              }
            }),
            (t.prototype.onMouseMove = function (e) {
              if (this.state.isResizing && this.resizable && this.window) {
                if (this.window.TouchEvent && K(e))
                  try {
                    e.preventDefault(), e.stopPropagation();
                  } catch (e) {}
                var t = this.props,
                  n = t.maxWidth,
                  r = t.maxHeight,
                  i = t.minWidth,
                  o = t.minHeight,
                  a = K(e) ? e.touches[0].clientX : e.clientX,
                  s = K(e) ? e.touches[0].clientY : e.clientY,
                  l = this.state,
                  c = l.direction,
                  h = l.original,
                  u = l.width,
                  d = l.height,
                  p = this.getParentSize(),
                  f = te(
                    p,
                    this.window.innerWidth,
                    this.window.innerHeight,
                    n,
                    r,
                    i,
                    o,
                  );
                (n = f.maxWidth),
                  (r = f.maxHeight),
                  (i = f.minWidth),
                  (o = f.minHeight);
                var g = this.calculateNewSizeFromDirection(a, s),
                  m = g.newHeight,
                  v = g.newWidth,
                  b = this.calculateNewMaxFromBoundary(n, r);
                this.props.snap &&
                  this.props.snap.x &&
                  (v = Z(v, this.props.snap.x, this.props.snapGap)),
                  this.props.snap &&
                    this.props.snap.y &&
                    (m = Z(m, this.props.snap.y, this.props.snapGap));
                var y = this.calculateNewSizeFromAspectRatio(
                  v,
                  m,
                  { width: b.maxWidth, height: b.maxHeight },
                  { width: i, height: o },
                );
                if (((v = y.newWidth), (m = y.newHeight), this.props.grid)) {
                  var _ = X(v, this.props.grid[0]),
                    w = X(m, this.props.grid[1]),
                    S = this.props.snapGap || 0;
                  (v = 0 === S || Math.abs(_ - v) <= S ? _ : v),
                    (m = 0 === S || Math.abs(w - m) <= S ? w : m);
                }
                var A = { width: v - h.width, height: m - h.height };
                if (u && 'string' == typeof u)
                  if (Q(u, '%')) v = (v / p.width) * 100 + '%';
                  else if (Q(u, 'vw')) {
                    v = (v / this.window.innerWidth) * 100 + 'vw';
                  } else if (Q(u, 'vh')) {
                    v = (v / this.window.innerHeight) * 100 + 'vh';
                  }
                if (d && 'string' == typeof d)
                  if (Q(d, '%')) m = (m / p.height) * 100 + '%';
                  else if (Q(d, 'vw')) {
                    m = (m / this.window.innerWidth) * 100 + 'vw';
                  } else if (Q(d, 'vh')) {
                    m = (m / this.window.innerHeight) * 100 + 'vh';
                  }
                var x = {
                  width: this.createSizeForCssProperty(v, 'width'),
                  height: this.createSizeForCssProperty(m, 'height'),
                };
                'row' === this.flexDir
                  ? (x.flexBasis = x.width)
                  : 'column' === this.flexDir && (x.flexBasis = x.height),
                  this.setState(x),
                  this.props.onResize &&
                    this.props.onResize(e, c, this.resizable, A);
              }
            }),
            (t.prototype.onMouseUp = function (e) {
              var t = this.state,
                n = t.isResizing,
                r = t.direction,
                i = t.original;
              if (n && this.resizable) {
                var o = {
                  width: this.size.width - i.width,
                  height: this.size.height - i.height,
                };
                this.props.onResizeStop &&
                  this.props.onResizeStop(e, r, this.resizable, o),
                  this.props.size && this.setState(this.props.size),
                  this.unbindEvents(),
                  this.setState({
                    isResizing: !1,
                    backgroundStyle: V(V({}, this.state.backgroundStyle), {
                      cursor: 'auto',
                    }),
                  });
              }
            }),
            (t.prototype.updateSize = function (e) {
              this.setState({ width: e.width, height: e.height });
            }),
            (t.prototype.renderResizer = function () {
              var e = this,
                t = this.props,
                n = t.enable,
                r = t.handleStyles,
                o = t.handleClasses,
                a = t.handleWrapperStyle,
                s = t.handleWrapperClass,
                l = t.handleComponent;
              if (!n) return null;
              var c = Object.keys(n).map(function (t) {
                return !1 !== n[t]
                  ? i.createElement(
                      z,
                      {
                        key: t,
                        direction: t,
                        onResizeStart: e.onResizeStart,
                        replaceStyles: r && r[t],
                        className: o && o[t],
                      },
                      l && l[t] ? l[t] : null,
                    )
                  : null;
              });
              return i.createElement('div', { className: s, style: a }, c);
            }),
            (t.prototype.render = function () {
              var e = this,
                t = Object.keys(this.props).reduce(function (t, n) {
                  return -1 !== ne.indexOf(n) || (t[n] = e.props[n]), t;
                }, {}),
                n = V(
                  V(
                    V(
                      {
                        position: 'relative',
                        userSelect: this.state.isResizing ? 'none' : 'auto',
                      },
                      this.props.style,
                    ),
                    this.sizeStyle,
                  ),
                  {
                    maxWidth: this.props.maxWidth,
                    maxHeight: this.props.maxHeight,
                    minWidth: this.props.minWidth,
                    minHeight: this.props.minHeight,
                    boxSizing: 'border-box',
                    flexShrink: 0,
                  },
                );
              this.state.flexBasis && (n.flexBasis = this.state.flexBasis);
              var r = this.props.as || 'div';
              return i.createElement(
                r,
                V(
                  { ref: this.ref, style: n, className: this.props.className },
                  t,
                ),
                this.state.isResizing &&
                  i.createElement('div', { style: this.state.backgroundStyle }),
                this.props.children,
                this.renderResizer(),
              );
            }),
            (t.defaultProps = {
              as: 'div',
              onResizeStart: function () {},
              onResize: function () {},
              onResizeStop: function () {},
              enable: {
                top: !0,
                right: !0,
                bottom: !0,
                left: !0,
                topRight: !0,
                bottomRight: !0,
                bottomLeft: !0,
                topLeft: !0,
              },
              style: {},
              grid: [1, 1],
              lockAspectRatio: !1,
              lockAspectRatioExtraWidth: 0,
              lockAspectRatioExtraHeight: 0,
              scale: 1,
              resizeRatio: 1,
              snapGap: 0,
            }),
            t
          );
        })(i.PureComponent),
        oe = function (e, t) {
          return (
            (oe =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            oe(e, t)
          );
        };
      var ae = function () {
        return (
          (ae =
            Object.assign ||
            function (e) {
              for (var t, n = 1, r = arguments.length; n < r; n++)
                for (var i in (t = arguments[n]))
                  Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
              return e;
            }),
          ae.apply(this, arguments)
        );
      };
      var se = N(),
        le = {
          width: 'auto',
          height: 'auto',
          display: 'inline-block',
          position: 'absolute',
          top: 0,
          left: 0,
        },
        ce = (function (e) {
          function t(t) {
            var n = e.call(this, t) || this;
            return (
              (n.resizingPosition = { x: 0, y: 0 }),
              (n.offsetFromParent = { left: 0, top: 0 }),
              (n.resizableElement = { current: null }),
              (n.originalPosition = { x: 0, y: 0 }),
              (n.refDraggable = function (e) {
                e && (n.draggable = e);
              }),
              (n.refResizable = function (e) {
                e &&
                  ((n.resizable = e),
                  (n.resizableElement.current = e.resizable));
              }),
              (n.state = {
                resizing: !1,
                bounds: { top: 0, right: 0, bottom: 0, left: 0 },
                maxWidth: t.maxWidth,
                maxHeight: t.maxHeight,
              }),
              (n.onResizeStart = n.onResizeStart.bind(n)),
              (n.onResize = n.onResize.bind(n)),
              (n.onResizeStop = n.onResizeStop.bind(n)),
              (n.onDragStart = n.onDragStart.bind(n)),
              (n.onDrag = n.onDrag.bind(n)),
              (n.onDragStop = n.onDragStop.bind(n)),
              (n.getMaxSizesFromProps = n.getMaxSizesFromProps.bind(n)),
              n
            );
          }
          return (
            (function (e, t) {
              function n() {
                this.constructor = e;
              }
              oe(e, t),
                (e.prototype =
                  null === t
                    ? Object.create(t)
                    : ((n.prototype = t.prototype), new n()));
            })(t, e),
            (t.prototype.componentDidMount = function () {
              this.updateOffsetFromParent();
              var e = this.offsetFromParent,
                t = e.left,
                n = e.top,
                r = this.getDraggablePosition(),
                i = r.x,
                o = r.y;
              this.draggable.setState({ x: i - t, y: o - n }),
                this.forceUpdate();
            }),
            (t.prototype.getDraggablePosition = function () {
              var e = this.draggable.state;
              return { x: e.x, y: e.y };
            }),
            (t.prototype.getParent = function () {
              return this.resizable && this.resizable.parentNode;
            }),
            (t.prototype.getParentSize = function () {
              return this.resizable.getParentSize();
            }),
            (t.prototype.getMaxSizesFromProps = function () {
              return {
                maxWidth:
                  void 0 === this.props.maxWidth
                    ? Number.MAX_SAFE_INTEGER
                    : this.props.maxWidth,
                maxHeight:
                  void 0 === this.props.maxHeight
                    ? Number.MAX_SAFE_INTEGER
                    : this.props.maxHeight,
              };
            }),
            (t.prototype.getSelfElement = function () {
              return this.resizable && this.resizable.resizable;
            }),
            (t.prototype.getOffsetHeight = function (e) {
              var t = this.props.scale;
              switch (this.props.bounds) {
                case 'window':
                  return window.innerHeight / t;
                case 'body':
                  return document.body.offsetHeight / t;
                default:
                  return e.offsetHeight;
              }
            }),
            (t.prototype.getOffsetWidth = function (e) {
              var t = this.props.scale;
              switch (this.props.bounds) {
                case 'window':
                  return window.innerWidth / t;
                case 'body':
                  return document.body.offsetWidth / t;
                default:
                  return e.offsetWidth;
              }
            }),
            (t.prototype.onDragStart = function (e, t) {
              this.props.onDragStart && this.props.onDragStart(e, t);
              var n = this.getDraggablePosition();
              if (((this.originalPosition = n), this.props.bounds)) {
                var r,
                  i = this.getParent(),
                  o = this.props.scale;
                if ('parent' === this.props.bounds) r = i;
                else {
                  if ('body' === this.props.bounds) {
                    var a = i.getBoundingClientRect(),
                      s = a.left,
                      l = a.top,
                      c = document.body.getBoundingClientRect(),
                      h = -(s - i.offsetLeft * o - c.left) / o,
                      u = -(l - i.offsetTop * o - c.top) / o,
                      d =
                        (document.body.offsetWidth -
                          this.resizable.size.width * o) /
                          o +
                        h,
                      p =
                        (document.body.offsetHeight -
                          this.resizable.size.height * o) /
                          o +
                        u;
                    return this.setState({
                      bounds: { top: u, right: d, bottom: p, left: h },
                    });
                  }
                  if ('window' === this.props.bounds) {
                    if (!this.resizable) return;
                    var f = i.getBoundingClientRect(),
                      g = f.left,
                      m = f.top,
                      v = -(g - i.offsetLeft * o) / o,
                      b = -(m - i.offsetTop * o) / o;
                    (d =
                      (window.innerWidth - this.resizable.size.width * o) / o +
                      v),
                      (p =
                        (window.innerHeight - this.resizable.size.height * o) /
                          o +
                        b);
                    return this.setState({
                      bounds: { top: b, right: d, bottom: p, left: v },
                    });
                  }
                  'string' == typeof this.props.bounds
                    ? (r = document.querySelector(this.props.bounds))
                    : this.props.bounds instanceof HTMLElement &&
                      (r = this.props.bounds);
                }
                if (r instanceof HTMLElement && i instanceof HTMLElement) {
                  var y = r.getBoundingClientRect(),
                    _ = y.left,
                    w = y.top,
                    S = i.getBoundingClientRect(),
                    A = (_ - S.left) / o,
                    x = w - S.top;
                  if (this.resizable) {
                    this.updateOffsetFromParent();
                    var P = this.offsetFromParent;
                    this.setState({
                      bounds: {
                        top: x - P.top,
                        right:
                          A +
                          (r.offsetWidth - this.resizable.size.width) -
                          P.left / o,
                        bottom:
                          x +
                          (r.offsetHeight - this.resizable.size.height) -
                          P.top,
                        left: A - P.left / o,
                      },
                    });
                  }
                }
              }
            }),
            (t.prototype.onDrag = function (e, t) {
              if (this.props.onDrag) {
                var n = this.offsetFromParent,
                  r = n.left,
                  i = n.top;
                return this.props.dragAxis && 'both' !== this.props.dragAxis
                  ? 'x' === this.props.dragAxis
                    ? this.props.onDrag(
                        e,
                        ae(ae({}, t), {
                          x: t.x + r,
                          y: this.originalPosition.y + i,
                          deltaY: 0,
                        }),
                      )
                    : 'y' === this.props.dragAxis
                      ? this.props.onDrag(
                          e,
                          ae(ae({}, t), {
                            x: this.originalPosition.x + r,
                            y: t.y + i,
                            deltaX: 0,
                          }),
                        )
                      : void 0
                  : this.props.onDrag(
                      e,
                      ae(ae({}, t), { x: t.x - r, y: t.y - i }),
                    );
              }
            }),
            (t.prototype.onDragStop = function (e, t) {
              if (this.props.onDragStop) {
                var n = this.offsetFromParent,
                  r = n.left,
                  i = n.top;
                return this.props.dragAxis && 'both' !== this.props.dragAxis
                  ? 'x' === this.props.dragAxis
                    ? this.props.onDragStop(
                        e,
                        ae(ae({}, t), {
                          x: t.x + r,
                          y: this.originalPosition.y + i,
                          deltaY: 0,
                        }),
                      )
                    : 'y' === this.props.dragAxis
                      ? this.props.onDragStop(
                          e,
                          ae(ae({}, t), {
                            x: this.originalPosition.x + r,
                            y: t.y + i,
                            deltaX: 0,
                          }),
                        )
                      : void 0
                  : this.props.onDragStop(
                      e,
                      ae(ae({}, t), { x: t.x + r, y: t.y + i }),
                    );
              }
            }),
            (t.prototype.onResizeStart = function (e, t, n) {
              e.stopPropagation(), this.setState({ resizing: !0 });
              var r = this.props.scale,
                i = this.offsetFromParent,
                o = this.getDraggablePosition();
              if (
                ((this.resizingPosition = { x: o.x + i.left, y: o.y + i.top }),
                (this.originalPosition = o),
                this.props.bounds)
              ) {
                var a = this.getParent(),
                  s = void 0;
                'parent' === this.props.bounds
                  ? (s = a)
                  : 'body' === this.props.bounds
                    ? (s = document.body)
                    : 'window' === this.props.bounds
                      ? (s = window)
                      : 'string' == typeof this.props.bounds
                        ? (s = document.querySelector(this.props.bounds))
                        : this.props.bounds instanceof HTMLElement &&
                          (s = this.props.bounds);
                var l = this.getSelfElement();
                if (
                  l instanceof Element &&
                  (s instanceof HTMLElement || s === window) &&
                  a instanceof HTMLElement
                ) {
                  var c = this.getMaxSizesFromProps(),
                    h = c.maxWidth,
                    u = c.maxHeight,
                    d = this.getParentSize();
                  if (h && 'string' == typeof h)
                    if (h.endsWith('%')) {
                      var p = Number(h.replace('%', '')) / 100;
                      h = d.width * p;
                    } else
                      h.endsWith('px') && (h = Number(h.replace('px', '')));
                  if (u && 'string' == typeof u)
                    if (u.endsWith('%')) {
                      p = Number(u.replace('%', '')) / 100;
                      u = d.width * p;
                    } else
                      u.endsWith('px') && (u = Number(u.replace('px', '')));
                  var f = l.getBoundingClientRect(),
                    g = f.left,
                    m = f.top,
                    v =
                      'window' === this.props.bounds
                        ? { left: 0, top: 0 }
                        : s.getBoundingClientRect(),
                    b = v.left,
                    y = v.top,
                    _ = this.getOffsetWidth(s),
                    w = this.getOffsetHeight(s),
                    S = t.toLowerCase().endsWith('left'),
                    A = t.toLowerCase().endsWith('right'),
                    x = t.startsWith('top'),
                    P = t.startsWith('bottom');
                  if ((S || x) && this.resizable) {
                    var E = (g - b) / r + this.resizable.size.width;
                    this.setState({ maxWidth: E > Number(h) ? h : E });
                  }
                  if (A || (this.props.lockAspectRatio && !S && !x)) {
                    E = _ + (b - g) / r;
                    this.setState({ maxWidth: E > Number(h) ? h : E });
                  }
                  if ((x || S) && this.resizable) {
                    E = (m - y) / r + this.resizable.size.height;
                    this.setState({ maxHeight: E > Number(u) ? u : E });
                  }
                  if (P || (this.props.lockAspectRatio && !x && !S)) {
                    E = w + (y - m) / r;
                    this.setState({ maxHeight: E > Number(u) ? u : E });
                  }
                }
              } else
                this.setState({
                  maxWidth: this.props.maxWidth,
                  maxHeight: this.props.maxHeight,
                });
              this.props.onResizeStart && this.props.onResizeStart(e, t, n);
            }),
            (t.prototype.onResize = function (e, t, n, r) {
              var i = {
                  x: this.originalPosition.x,
                  y: this.originalPosition.y,
                },
                o = -r.width,
                a = -r.height;
              -1 !==
                ['top', 'left', 'topLeft', 'bottomLeft', 'topRight'].indexOf(
                  t,
                ) &&
                ('bottomLeft' === t
                  ? (i.x += o)
                  : ('topRight' === t || (i.x += o), (i.y += a))),
                (i.x === this.draggable.state.x &&
                  i.y === this.draggable.state.y) ||
                  this.draggable.setState(i),
                this.updateOffsetFromParent();
              var s = this.offsetFromParent,
                l = this.getDraggablePosition().x + s.left,
                c = this.getDraggablePosition().y + s.top;
              (this.resizingPosition = { x: l, y: c }),
                this.props.onResize &&
                  this.props.onResize(e, t, n, r, { x: l, y: c });
            }),
            (t.prototype.onResizeStop = function (e, t, n, r) {
              this.setState({ resizing: !1 });
              var i = this.getMaxSizesFromProps(),
                o = i.maxWidth,
                a = i.maxHeight;
              this.setState({ maxWidth: o, maxHeight: a }),
                this.props.onResizeStop &&
                  this.props.onResizeStop(e, t, n, r, this.resizingPosition);
            }),
            (t.prototype.updateSize = function (e) {
              this.resizable &&
                this.resizable.updateSize({ width: e.width, height: e.height });
            }),
            (t.prototype.updatePosition = function (e) {
              this.draggable.setState(e);
            }),
            (t.prototype.updateOffsetFromParent = function () {
              var e = this.props.scale,
                t = this.getParent(),
                n = this.getSelfElement();
              if (!t || null === n) return { top: 0, left: 0 };
              var r = t.getBoundingClientRect(),
                i = r.left,
                o = r.top,
                a = n.getBoundingClientRect(),
                s = this.getDraggablePosition(),
                l = t.scrollLeft,
                c = t.scrollTop;
              this.offsetFromParent = {
                left: a.left - i + l - s.x * e,
                top: a.top - o + c - s.y * e,
              };
            }),
            (t.prototype.render = function () {
              var e = this.props,
                t = e.disableDragging,
                n = e.style,
                r = e.dragHandleClassName,
                o = e.position,
                a = e.onMouseDown,
                s = e.onMouseUp,
                l = e.dragAxis,
                c = e.dragGrid,
                h = e.bounds,
                u = e.enableUserSelectHack,
                d = e.cancel,
                p = e.children,
                f =
                  (e.onResizeStart,
                  e.onResize,
                  e.onResizeStop,
                  e.onDragStart,
                  e.onDrag,
                  e.onDragStop,
                  e.resizeHandleStyles),
                g = e.resizeHandleClasses,
                m = e.resizeHandleComponent,
                v = e.enableResizing,
                b = e.resizeGrid,
                y = e.resizeHandleWrapperClass,
                _ = e.resizeHandleWrapperStyle,
                w = e.scale,
                S = e.allowAnyClick,
                A = (function (e, t) {
                  var n = {};
                  for (var r in e)
                    Object.prototype.hasOwnProperty.call(e, r) &&
                      t.indexOf(r) < 0 &&
                      (n[r] = e[r]);
                  if (
                    null != e &&
                    'function' == typeof Object.getOwnPropertySymbols
                  ) {
                    var i = 0;
                    for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
                      t.indexOf(r[i]) < 0 &&
                        Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                        (n[r[i]] = e[r[i]]);
                  }
                  return n;
                })(e, [
                  'disableDragging',
                  'style',
                  'dragHandleClassName',
                  'position',
                  'onMouseDown',
                  'onMouseUp',
                  'dragAxis',
                  'dragGrid',
                  'bounds',
                  'enableUserSelectHack',
                  'cancel',
                  'children',
                  'onResizeStart',
                  'onResize',
                  'onResizeStop',
                  'onDragStart',
                  'onDrag',
                  'onDragStop',
                  'resizeHandleStyles',
                  'resizeHandleClasses',
                  'resizeHandleComponent',
                  'enableResizing',
                  'resizeGrid',
                  'resizeHandleWrapperClass',
                  'resizeHandleWrapperStyle',
                  'scale',
                  'allowAnyClick',
                ]),
                x = this.props.default ? ae({}, this.props.default) : void 0;
              delete A.default;
              var P,
                E = t || r ? { cursor: 'auto' } : { cursor: 'move' },
                C = ae(ae(ae({}, le), E), n),
                T = this.offsetFromParent,
                k = T.left,
                M = T.top;
              o && (P = { x: o.x - k, y: o.y - M });
              var R,
                O = this.state.resizing ? void 0 : P,
                D = this.state.resizing ? 'both' : l;
              return (0, i.createElement)(
                se,
                {
                  ref: this.refDraggable,
                  handle: r ? '.'.concat(r) : void 0,
                  defaultPosition: x,
                  onMouseDown: a,
                  onMouseUp: s,
                  onStart: this.onDragStart,
                  onDrag: this.onDrag,
                  onStop: this.onDragStop,
                  axis: D,
                  disabled: t,
                  grid: c,
                  bounds: h ? this.state.bounds : void 0,
                  position: O,
                  enableUserSelectHack: u,
                  cancel: d,
                  scale: w,
                  allowAnyClick: S,
                  nodeRef: this.resizableElement,
                },
                (0, i.createElement)(
                  ie,
                  ae({}, A, {
                    ref: this.refResizable,
                    defaultSize: x,
                    size: this.props.size,
                    enable:
                      'boolean' == typeof v
                        ? ((R = v),
                          {
                            bottom: R,
                            bottomLeft: R,
                            bottomRight: R,
                            left: R,
                            right: R,
                            top: R,
                            topLeft: R,
                            topRight: R,
                          })
                        : v,
                    onResizeStart: this.onResizeStart,
                    onResize: this.onResize,
                    onResizeStop: this.onResizeStop,
                    style: C,
                    minWidth: this.props.minWidth,
                    minHeight: this.props.minHeight,
                    maxWidth: this.state.resizing
                      ? this.state.maxWidth
                      : this.props.maxWidth,
                    maxHeight: this.state.resizing
                      ? this.state.maxHeight
                      : this.props.maxHeight,
                    grid: b,
                    handleWrapperClass: y,
                    handleWrapperStyle: _,
                    lockAspectRatio: this.props.lockAspectRatio,
                    lockAspectRatioExtraWidth:
                      this.props.lockAspectRatioExtraWidth,
                    lockAspectRatioExtraHeight:
                      this.props.lockAspectRatioExtraHeight,
                    handleStyles: f,
                    handleClasses: g,
                    handleComponent: m,
                    scale: this.props.scale,
                  }),
                  p,
                ),
              );
            }),
            (t.defaultProps = {
              maxWidth: Number.MAX_SAFE_INTEGER,
              maxHeight: Number.MAX_SAFE_INTEGER,
              scale: 1,
              onResizeStart: function () {},
              onResize: function () {},
              onResizeStop: function () {},
              onDragStart: function () {},
              onDrag: function () {},
              onDragStop: function () {},
            }),
            t
          );
        })(i.PureComponent),
        he = function (e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var i = 0;
            for (r = Object.getOwnPropertySymbols(e); i < r.length; i++)
              t.indexOf(r[i]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[i]) &&
                (n[r[i]] = e[r[i]]);
          }
          return n;
        };
      class ue extends i.Component {
        render() {
          const e = this.props,
            { highlight: t, onChange: n, isScrolledTo: r } = e,
            o = he(e, ['highlight', 'onChange', 'isScrolledTo']);
          return i.createElement(
            'div',
            {
              className:
                'AreaHighlight ' + (r ? 'AreaHighlight--scrolledTo' : ''),
            },
            i.createElement(
              ce,
              Object.assign(
                {
                  className: 'AreaHighlight__part',
                  onDragStop: (e, r) => {
                    const i = Object.assign(
                      Object.assign({}, t.position.boundingRect),
                      { top: r.y, left: r.x },
                    );
                    n(i);
                  },
                  onResizeStop: (e, t, r, i, o) => {
                    var a;
                    const s = {
                      top: o.y,
                      left: o.x,
                      width: r.offsetWidth,
                      height: r.offsetHeight,
                      pageNumber:
                        (null === (a = l(r)) || void 0 === a
                          ? void 0
                          : a.number) || -1,
                    };
                    n(s);
                  },
                  position: {
                    x: t.position.boundingRect.left,
                    y: t.position.boundingRect.top,
                  },
                  size: {
                    width: t.position.boundingRect.width,
                    height: t.position.boundingRect.height,
                  },
                  onClick: (e) => {
                    e.stopPropagation(), e.preventDefault();
                  },
                },
                o,
              ),
            ),
          );
        }
      }
      var de = n(66907);
      class pe extends i.Component {
        constructor() {
          super(...arguments),
            (this.state = { pdfDocument: null, error: null }),
            (this.documentRef = i.createRef());
        }
        componentDidMount() {
          this.load();
        }
        componentWillUnmount() {
          const { pdfDocument: e } = this.state;
          e && e.destroy();
        }
        componentDidUpdate({ url: e }) {
          this.props.url !== e && this.load();
        }
        componentDidCatch(e, t) {
          const { onError: n } = this.props;
          n && n(e), this.setState({ pdfDocument: null, error: e });
        }
        load() {
          const { ownerDocument: e = document } =
              this.documentRef.current || {},
            { url: t, cMapUrl: n, cMapPacked: r, workerSrc: i } = this.props,
            { pdfDocument: o } = this.state;
          this.setState({ pdfDocument: null, error: null }),
            'string' == typeof i && (de.GlobalWorkerOptions.workerSrc = i),
            Promise.resolve()
              .then(() => o && o.destroy())
              .then(() => {
                if (t)
                  return (0, de.getDocument)(
                    Object.assign(Object.assign({}, this.props), {
                      ownerDocument: e,
                      cMapUrl: n,
                      cMapPacked: r,
                    }),
                  ).promise.then((e) => {
                    this.setState({ pdfDocument: e });
                  });
              })
              .catch((e) => this.componentDidCatch(e));
        }
        render() {
          const { children: e, beforeLoad: t } = this.props,
            { pdfDocument: n, error: r } = this.state;
          return i.createElement(
            i.Fragment,
            null,
            i.createElement('span', { ref: this.documentRef }),
            r ? this.renderError() : n && e ? e(n) : t,
          );
        }
        renderError() {
          const { errorMessage: e } = this.props;
          return e ? i.cloneElement(e, { error: this.state.error }) : null;
        }
      }
      pe.defaultProps = {
        workerSrc:
          'https://unpkg.com/pdfjs-dist@2.16.105/build/pdf.worker.min.js',
      };
    },
    66907: function (module, __unused_webpack_exports, __webpack_require__) {
      var Buffer = __webpack_require__(48764).lW,
        process = __webpack_require__(34155),
        factory;
      globalThis,
        (factory = () =>
          (() => {
            var __webpack_modules__ = [
                ,
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.VerbosityLevel =
                      t.Util =
                      t.UnknownErrorException =
                      t.UnexpectedResponseException =
                      t.UNSUPPORTED_FEATURES =
                      t.TextRenderingMode =
                      t.StreamType =
                      t.RenderingIntentFlag =
                      t.PermissionFlag =
                      t.PasswordResponses =
                      t.PasswordException =
                      t.PageActionEventType =
                      t.OPS =
                      t.MissingPDFException =
                      t.LINE_FACTOR =
                      t.LINE_DESCENT_FACTOR =
                      t.InvalidPDFException =
                      t.ImageKind =
                      t.IDENTITY_MATRIX =
                      t.FormatError =
                      t.FontType =
                      t.FeatureTest =
                      t.FONT_IDENTITY_MATRIX =
                      t.DocumentActionEventType =
                      t.CMapCompressionType =
                      t.BaseException =
                      t.AnnotationType =
                      t.AnnotationStateModelType =
                      t.AnnotationReviewState =
                      t.AnnotationReplyType =
                      t.AnnotationMode =
                      t.AnnotationMarkedState =
                      t.AnnotationFlag =
                      t.AnnotationFieldFlag =
                      t.AnnotationEditorType =
                      t.AnnotationEditorPrefix =
                      t.AnnotationEditorParamsType =
                      t.AnnotationBorderStyleType =
                      t.AnnotationActionEventType =
                      t.AbortException =
                        void 0),
                    (t.arrayByteLength = h),
                    (t.arraysToBytes = function (e) {
                      const t = e.length;
                      if (1 === t && e[0] instanceof Uint8Array) return e[0];
                      let n = 0;
                      for (let r = 0; r < t; r++) n += h(e[r]);
                      let r = 0;
                      const i = new Uint8Array(n);
                      for (let n = 0; n < t; n++) {
                        let t = e[n];
                        t instanceof Uint8Array ||
                          (t = 'string' == typeof t ? c(t) : new Uint8Array(t));
                        const o = t.byteLength;
                        i.set(t, r), (r += o);
                      }
                      return i;
                    }),
                    (t.assert = function (e, t) {
                      e || a(t);
                    }),
                    (t.bytesToString = function (e) {
                      ('object' == typeof e &&
                        null !== e &&
                        void 0 !== e.length) ||
                        a('Invalid argument for bytesToString');
                      const t = e.length,
                        n = 8192;
                      if (t < n) return String.fromCharCode.apply(null, e);
                      const r = [];
                      for (let i = 0; i < t; i += n) {
                        const o = Math.min(i + n, t),
                          a = e.subarray(i, o);
                        r.push(String.fromCharCode.apply(null, a));
                      }
                      return r.join('');
                    }),
                    (t.createPromiseCapability = function () {
                      const e = Object.create(null);
                      let t = !1;
                      return (
                        Object.defineProperty(e, 'settled', {
                          get() {
                            return t;
                          },
                        }),
                        (e.promise = new Promise(function (n, r) {
                          (e.resolve = function (e) {
                            (t = !0), n(e);
                          }),
                            (e.reject = function (e) {
                              (t = !0), r(e);
                            });
                        })),
                        e
                      );
                    }),
                    (t.createValidAbsoluteUrl = function (e) {
                      let t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null,
                        n =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : null;
                      if (!e) return null;
                      try {
                        if (n && 'string' == typeof e) {
                          if (n.addDefaultProtocol && e.startsWith('www.')) {
                            const t = e.match(/\./g);
                            t && t.length >= 2 && (e = `http://${e}`);
                          }
                          if (n.tryConvertEncoding)
                            try {
                              e = f(e);
                            } catch (e) {}
                        }
                        const r = t ? new URL(e, t) : new URL(e);
                        if (
                          (function (e) {
                            if (!e) return !1;
                            switch (e.protocol) {
                              case 'http:':
                              case 'https:':
                              case 'ftp:':
                              case 'mailto:':
                              case 'tel:':
                                return !0;
                              default:
                                return !1;
                            }
                          })(r)
                        )
                          return r;
                      } catch (e) {}
                      return null;
                    }),
                    (t.escapeString = function (e) {
                      return e.replace(/([()\\\n\r])/g, (e) =>
                        '\n' === e ? '\\n' : '\r' === e ? '\\r' : `\\${e}`,
                      );
                    }),
                    (t.getModificationDate = function () {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : new Date();
                      return [
                        e.getUTCFullYear().toString(),
                        (e.getUTCMonth() + 1).toString().padStart(2, '0'),
                        e.getUTCDate().toString().padStart(2, '0'),
                        e.getUTCHours().toString().padStart(2, '0'),
                        e.getUTCMinutes().toString().padStart(2, '0'),
                        e.getUTCSeconds().toString().padStart(2, '0'),
                      ].join('');
                    }),
                    (t.getVerbosityLevel = function () {
                      return i;
                    }),
                    (t.info = function (e) {
                      i >= r.INFOS && console.log(`Info: ${e}`);
                    }),
                    (t.isArrayBuffer = function (e) {
                      return (
                        'object' == typeof e &&
                        null !== e &&
                        void 0 !== e.byteLength
                      );
                    }),
                    (t.isArrayEqual = function (e, t) {
                      if (e.length !== t.length) return !1;
                      for (let n = 0, r = e.length; n < r; n++)
                        if (e[n] !== t[n]) return !1;
                      return !0;
                    }),
                    (t.isAscii = function (e) {
                      return /^[\x00-\x7F]*$/.test(e);
                    }),
                    (t.objectFromMap = function (e) {
                      const t = Object.create(null);
                      for (const [n, r] of e) t[n] = r;
                      return t;
                    }),
                    (t.objectSize = function (e) {
                      return Object.keys(e).length;
                    }),
                    (t.setVerbosityLevel = function (e) {
                      Number.isInteger(e) && (i = e);
                    }),
                    (t.shadow = s),
                    (t.string32 = function (e) {
                      return String.fromCharCode(
                        (e >> 24) & 255,
                        (e >> 16) & 255,
                        (e >> 8) & 255,
                        255 & e,
                      );
                    }),
                    (t.stringToBytes = c),
                    (t.stringToPDFString = function (e) {
                      if (e[0] >= 'ï') {
                        let t;
                        if (
                          ('þ' === e[0] && 'ÿ' === e[1]
                            ? (t = 'utf-16be')
                            : 'ÿ' === e[0] && 'þ' === e[1]
                              ? (t = 'utf-16le')
                              : 'ï' === e[0] &&
                                '»' === e[1] &&
                                '¿' === e[2] &&
                                (t = 'utf-8'),
                          t)
                        )
                          try {
                            const n = new TextDecoder(t, { fatal: !0 }),
                              r = c(e);
                            return n.decode(r);
                          } catch (e) {
                            o(`stringToPDFString: "${e}".`);
                          }
                      }
                      const t = [];
                      for (let n = 0, r = e.length; n < r; n++) {
                        const r = p[e.charCodeAt(n)];
                        t.push(r ? String.fromCharCode(r) : e.charAt(n));
                      }
                      return t.join('');
                    }),
                    (t.stringToUTF16BEString = function (e) {
                      const t = ['þÿ'];
                      for (let n = 0, r = e.length; n < r; n++) {
                        const r = e.charCodeAt(n);
                        t.push(
                          String.fromCharCode((r >> 8) & 255),
                          String.fromCharCode(255 & r),
                        );
                      }
                      return t.join('');
                    }),
                    (t.stringToUTF8String = f),
                    (t.unreachable = a),
                    (t.utf8StringToString = function (e) {
                      return unescape(encodeURIComponent(e));
                    }),
                    (t.warn = o),
                    n(2),
                    (t.IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0]),
                    (t.FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0]),
                    (t.LINE_FACTOR = 1.35),
                    (t.LINE_DESCENT_FACTOR = 0.35),
                    (t.RenderingIntentFlag = {
                      ANY: 1,
                      DISPLAY: 2,
                      PRINT: 4,
                      ANNOTATIONS_FORMS: 16,
                      ANNOTATIONS_STORAGE: 32,
                      ANNOTATIONS_DISABLE: 64,
                      OPLIST: 256,
                    }),
                    (t.AnnotationMode = {
                      DISABLE: 0,
                      ENABLE: 1,
                      ENABLE_FORMS: 2,
                      ENABLE_STORAGE: 3,
                    }),
                    (t.AnnotationEditorPrefix = 'pdfjs_internal_editor_'),
                    (t.AnnotationEditorType = {
                      DISABLE: -1,
                      NONE: 0,
                      FREETEXT: 3,
                      INK: 15,
                    }),
                    (t.AnnotationEditorParamsType = {
                      FREETEXT_SIZE: 1,
                      FREETEXT_COLOR: 2,
                      FREETEXT_OPACITY: 3,
                      INK_COLOR: 11,
                      INK_THICKNESS: 12,
                      INK_OPACITY: 13,
                    }),
                    (t.PermissionFlag = {
                      PRINT: 4,
                      MODIFY_CONTENTS: 8,
                      COPY: 16,
                      MODIFY_ANNOTATIONS: 32,
                      FILL_INTERACTIVE_FORMS: 256,
                      COPY_FOR_ACCESSIBILITY: 512,
                      ASSEMBLE: 1024,
                      PRINT_HIGH_QUALITY: 2048,
                    }),
                    (t.TextRenderingMode = {
                      FILL: 0,
                      STROKE: 1,
                      FILL_STROKE: 2,
                      INVISIBLE: 3,
                      FILL_ADD_TO_PATH: 4,
                      STROKE_ADD_TO_PATH: 5,
                      FILL_STROKE_ADD_TO_PATH: 6,
                      ADD_TO_PATH: 7,
                      FILL_STROKE_MASK: 3,
                      ADD_TO_PATH_FLAG: 4,
                    }),
                    (t.ImageKind = {
                      GRAYSCALE_1BPP: 1,
                      RGB_24BPP: 2,
                      RGBA_32BPP: 3,
                    }),
                    (t.AnnotationType = {
                      TEXT: 1,
                      LINK: 2,
                      FREETEXT: 3,
                      LINE: 4,
                      SQUARE: 5,
                      CIRCLE: 6,
                      POLYGON: 7,
                      POLYLINE: 8,
                      HIGHLIGHT: 9,
                      UNDERLINE: 10,
                      SQUIGGLY: 11,
                      STRIKEOUT: 12,
                      STAMP: 13,
                      CARET: 14,
                      INK: 15,
                      POPUP: 16,
                      FILEATTACHMENT: 17,
                      SOUND: 18,
                      MOVIE: 19,
                      WIDGET: 20,
                      SCREEN: 21,
                      PRINTERMARK: 22,
                      TRAPNET: 23,
                      WATERMARK: 24,
                      THREED: 25,
                      REDACT: 26,
                    }),
                    (t.AnnotationStateModelType = {
                      MARKED: 'Marked',
                      REVIEW: 'Review',
                    }),
                    (t.AnnotationMarkedState = {
                      MARKED: 'Marked',
                      UNMARKED: 'Unmarked',
                    }),
                    (t.AnnotationReviewState = {
                      ACCEPTED: 'Accepted',
                      REJECTED: 'Rejected',
                      CANCELLED: 'Cancelled',
                      COMPLETED: 'Completed',
                      NONE: 'None',
                    }),
                    (t.AnnotationReplyType = { GROUP: 'Group', REPLY: 'R' }),
                    (t.AnnotationFlag = {
                      INVISIBLE: 1,
                      HIDDEN: 2,
                      PRINT: 4,
                      NOZOOM: 8,
                      NOROTATE: 16,
                      NOVIEW: 32,
                      READONLY: 64,
                      LOCKED: 128,
                      TOGGLENOVIEW: 256,
                      LOCKEDCONTENTS: 512,
                    }),
                    (t.AnnotationFieldFlag = {
                      READONLY: 1,
                      REQUIRED: 2,
                      NOEXPORT: 4,
                      MULTILINE: 4096,
                      PASSWORD: 8192,
                      NOTOGGLETOOFF: 16384,
                      RADIO: 32768,
                      PUSHBUTTON: 65536,
                      COMBO: 131072,
                      EDIT: 262144,
                      SORT: 524288,
                      FILESELECT: 1048576,
                      MULTISELECT: 2097152,
                      DONOTSPELLCHECK: 4194304,
                      DONOTSCROLL: 8388608,
                      COMB: 16777216,
                      RICHTEXT: 33554432,
                      RADIOSINUNISON: 33554432,
                      COMMITONSELCHANGE: 67108864,
                    }),
                    (t.AnnotationBorderStyleType = {
                      SOLID: 1,
                      DASHED: 2,
                      BEVELED: 3,
                      INSET: 4,
                      UNDERLINE: 5,
                    }),
                    (t.AnnotationActionEventType = {
                      E: 'Mouse Enter',
                      X: 'Mouse Exit',
                      D: 'Mouse Down',
                      U: 'Mouse Up',
                      Fo: 'Focus',
                      Bl: 'Blur',
                      PO: 'PageOpen',
                      PC: 'PageClose',
                      PV: 'PageVisible',
                      PI: 'PageInvisible',
                      K: 'Keystroke',
                      F: 'Format',
                      V: 'Validate',
                      C: 'Calculate',
                    }),
                    (t.DocumentActionEventType = {
                      WC: 'WillClose',
                      WS: 'WillSave',
                      DS: 'DidSave',
                      WP: 'WillPrint',
                      DP: 'DidPrint',
                    }),
                    (t.PageActionEventType = { O: 'PageOpen', C: 'PageClose' }),
                    (t.StreamType = {
                      UNKNOWN: 'UNKNOWN',
                      FLATE: 'FLATE',
                      LZW: 'LZW',
                      DCT: 'DCT',
                      JPX: 'JPX',
                      JBIG: 'JBIG',
                      A85: 'A85',
                      AHX: 'AHX',
                      CCF: 'CCF',
                      RLX: 'RLX',
                    }),
                    (t.FontType = {
                      UNKNOWN: 'UNKNOWN',
                      TYPE1: 'TYPE1',
                      TYPE1STANDARD: 'TYPE1STANDARD',
                      TYPE1C: 'TYPE1C',
                      CIDFONTTYPE0: 'CIDFONTTYPE0',
                      CIDFONTTYPE0C: 'CIDFONTTYPE0C',
                      TRUETYPE: 'TRUETYPE',
                      CIDFONTTYPE2: 'CIDFONTTYPE2',
                      TYPE3: 'TYPE3',
                      OPENTYPE: 'OPENTYPE',
                      TYPE0: 'TYPE0',
                      MMTYPE1: 'MMTYPE1',
                    });
                  const r = { ERRORS: 0, WARNINGS: 1, INFOS: 5 };
                  (t.VerbosityLevel = r),
                    (t.CMapCompressionType = { NONE: 0, BINARY: 1, STREAM: 2 }),
                    (t.OPS = {
                      dependency: 1,
                      setLineWidth: 2,
                      setLineCap: 3,
                      setLineJoin: 4,
                      setMiterLimit: 5,
                      setDash: 6,
                      setRenderingIntent: 7,
                      setFlatness: 8,
                      setGState: 9,
                      save: 10,
                      restore: 11,
                      transform: 12,
                      moveTo: 13,
                      lineTo: 14,
                      curveTo: 15,
                      curveTo2: 16,
                      curveTo3: 17,
                      closePath: 18,
                      rectangle: 19,
                      stroke: 20,
                      closeStroke: 21,
                      fill: 22,
                      eoFill: 23,
                      fillStroke: 24,
                      eoFillStroke: 25,
                      closeFillStroke: 26,
                      closeEOFillStroke: 27,
                      endPath: 28,
                      clip: 29,
                      eoClip: 30,
                      beginText: 31,
                      endText: 32,
                      setCharSpacing: 33,
                      setWordSpacing: 34,
                      setHScale: 35,
                      setLeading: 36,
                      setFont: 37,
                      setTextRenderingMode: 38,
                      setTextRise: 39,
                      moveText: 40,
                      setLeadingMoveText: 41,
                      setTextMatrix: 42,
                      nextLine: 43,
                      showText: 44,
                      showSpacedText: 45,
                      nextLineShowText: 46,
                      nextLineSetSpacingShowText: 47,
                      setCharWidth: 48,
                      setCharWidthAndBounds: 49,
                      setStrokeColorSpace: 50,
                      setFillColorSpace: 51,
                      setStrokeColor: 52,
                      setStrokeColorN: 53,
                      setFillColor: 54,
                      setFillColorN: 55,
                      setStrokeGray: 56,
                      setFillGray: 57,
                      setStrokeRGBColor: 58,
                      setFillRGBColor: 59,
                      setStrokeCMYKColor: 60,
                      setFillCMYKColor: 61,
                      shadingFill: 62,
                      beginInlineImage: 63,
                      beginImageData: 64,
                      endInlineImage: 65,
                      paintXObject: 66,
                      markPoint: 67,
                      markPointProps: 68,
                      beginMarkedContent: 69,
                      beginMarkedContentProps: 70,
                      endMarkedContent: 71,
                      beginCompat: 72,
                      endCompat: 73,
                      paintFormXObjectBegin: 74,
                      paintFormXObjectEnd: 75,
                      beginGroup: 76,
                      endGroup: 77,
                      beginAnnotations: 78,
                      endAnnotations: 79,
                      beginAnnotation: 80,
                      endAnnotation: 81,
                      paintJpegXObject: 82,
                      paintImageMaskXObject: 83,
                      paintImageMaskXObjectGroup: 84,
                      paintImageXObject: 85,
                      paintInlineImageXObject: 86,
                      paintInlineImageXObjectGroup: 87,
                      paintImageXObjectRepeat: 88,
                      paintImageMaskXObjectRepeat: 89,
                      paintSolidColorImageMask: 90,
                      constructPath: 91,
                    }),
                    (t.UNSUPPORTED_FEATURES = {
                      unknown: 'unknown',
                      forms: 'forms',
                      javaScript: 'javaScript',
                      signatures: 'signatures',
                      smask: 'smask',
                      shadingPattern: 'shadingPattern',
                      font: 'font',
                      errorTilingPattern: 'errorTilingPattern',
                      errorExtGState: 'errorExtGState',
                      errorXObject: 'errorXObject',
                      errorFontLoadType3: 'errorFontLoadType3',
                      errorFontState: 'errorFontState',
                      errorFontMissing: 'errorFontMissing',
                      errorFontTranslate: 'errorFontTranslate',
                      errorColorSpace: 'errorColorSpace',
                      errorOperatorList: 'errorOperatorList',
                      errorFontToUnicode: 'errorFontToUnicode',
                      errorFontLoadNative: 'errorFontLoadNative',
                      errorFontBuildPath: 'errorFontBuildPath',
                      errorFontGetPath: 'errorFontGetPath',
                      errorMarkedContent: 'errorMarkedContent',
                      errorContentSubStream: 'errorContentSubStream',
                    }),
                    (t.PasswordResponses = {
                      NEED_PASSWORD: 1,
                      INCORRECT_PASSWORD: 2,
                    });
                  let i = r.WARNINGS;
                  function o(e) {
                    i >= r.WARNINGS && console.log(`Warning: ${e}`);
                  }
                  function a(e) {
                    throw new Error(e);
                  }
                  function s(e, t, n) {
                    return (
                      Object.defineProperty(e, t, {
                        value: n,
                        enumerable: !0,
                        configurable: !0,
                        writable: !1,
                      }),
                      n
                    );
                  }
                  const l = (function () {
                    function e(t, n) {
                      this.constructor === e &&
                        a('Cannot initialize BaseException.'),
                        (this.message = t),
                        (this.name = n);
                    }
                    return (e.prototype = new Error()), (e.constructor = e), e;
                  })();
                  function c(e) {
                    'string' != typeof e &&
                      a('Invalid argument for stringToBytes');
                    const t = e.length,
                      n = new Uint8Array(t);
                    for (let r = 0; r < t; ++r) n[r] = 255 & e.charCodeAt(r);
                    return n;
                  }
                  function h(e) {
                    return void 0 !== e.length
                      ? e.length
                      : void 0 !== e.byteLength
                        ? e.byteLength
                        : void a('Invalid argument for arrayByteLength');
                  }
                  (t.BaseException = l),
                    (t.PasswordException = class extends l {
                      constructor(e, t) {
                        super(e, 'PasswordException'), (this.code = t);
                      }
                    }),
                    (t.UnknownErrorException = class extends l {
                      constructor(e, t) {
                        super(e, 'UnknownErrorException'), (this.details = t);
                      }
                    }),
                    (t.InvalidPDFException = class extends l {
                      constructor(e) {
                        super(e, 'InvalidPDFException');
                      }
                    }),
                    (t.MissingPDFException = class extends l {
                      constructor(e) {
                        super(e, 'MissingPDFException');
                      }
                    }),
                    (t.UnexpectedResponseException = class extends l {
                      constructor(e, t) {
                        super(e, 'UnexpectedResponseException'),
                          (this.status = t);
                      }
                    }),
                    (t.FormatError = class extends l {
                      constructor(e) {
                        super(e, 'FormatError');
                      }
                    }),
                    (t.AbortException = class extends l {
                      constructor(e) {
                        super(e, 'AbortException');
                      }
                    }),
                    (t.FeatureTest = class {
                      static get isLittleEndian() {
                        return s(
                          this,
                          'isLittleEndian',
                          (function () {
                            const e = new Uint8Array(4);
                            return (
                              (e[0] = 1),
                              1 === new Uint32Array(e.buffer, 0, 1)[0]
                            );
                          })(),
                        );
                      }
                      static get isEvalSupported() {
                        return s(
                          this,
                          'isEvalSupported',
                          (function () {
                            try {
                              return new Function(''), !0;
                            } catch (e) {
                              return !1;
                            }
                          })(),
                        );
                      }
                      static get isOffscreenCanvasSupported() {
                        return s(
                          this,
                          'isOffscreenCanvasSupported',
                          'undefined' != typeof OffscreenCanvas,
                        );
                      }
                    });
                  const u = [...Array(256).keys()].map((e) =>
                    e.toString(16).padStart(2, '0'),
                  );
                  class d {
                    static makeHexColor(e, t, n) {
                      return `#${u[e]}${u[t]}${u[n]}`;
                    }
                    static scaleMinMax(e, t) {
                      let n;
                      e[0]
                        ? (e[0] < 0 && ((n = t[0]), (t[0] = t[1]), (t[1] = n)),
                          (t[0] *= e[0]),
                          (t[1] *= e[0]),
                          e[3] < 0 && ((n = t[2]), (t[2] = t[3]), (t[3] = n)),
                          (t[2] *= e[3]),
                          (t[3] *= e[3]))
                        : ((n = t[0]),
                          (t[0] = t[2]),
                          (t[2] = n),
                          (n = t[1]),
                          (t[1] = t[3]),
                          (t[3] = n),
                          e[1] < 0 && ((n = t[2]), (t[2] = t[3]), (t[3] = n)),
                          (t[2] *= e[1]),
                          (t[3] *= e[1]),
                          e[2] < 0 && ((n = t[0]), (t[0] = t[1]), (t[1] = n)),
                          (t[0] *= e[2]),
                          (t[1] *= e[2])),
                        (t[0] += e[4]),
                        (t[1] += e[4]),
                        (t[2] += e[5]),
                        (t[3] += e[5]);
                    }
                    static transform(e, t) {
                      return [
                        e[0] * t[0] + e[2] * t[1],
                        e[1] * t[0] + e[3] * t[1],
                        e[0] * t[2] + e[2] * t[3],
                        e[1] * t[2] + e[3] * t[3],
                        e[0] * t[4] + e[2] * t[5] + e[4],
                        e[1] * t[4] + e[3] * t[5] + e[5],
                      ];
                    }
                    static applyTransform(e, t) {
                      return [
                        e[0] * t[0] + e[1] * t[2] + t[4],
                        e[0] * t[1] + e[1] * t[3] + t[5],
                      ];
                    }
                    static applyInverseTransform(e, t) {
                      const n = t[0] * t[3] - t[1] * t[2];
                      return [
                        (e[0] * t[3] -
                          e[1] * t[2] +
                          t[2] * t[5] -
                          t[4] * t[3]) /
                          n,
                        (-e[0] * t[1] +
                          e[1] * t[0] +
                          t[4] * t[1] -
                          t[5] * t[0]) /
                          n,
                      ];
                    }
                    static getAxialAlignedBoundingBox(e, t) {
                      const n = d.applyTransform(e, t),
                        r = d.applyTransform(e.slice(2, 4), t),
                        i = d.applyTransform([e[0], e[3]], t),
                        o = d.applyTransform([e[2], e[1]], t);
                      return [
                        Math.min(n[0], r[0], i[0], o[0]),
                        Math.min(n[1], r[1], i[1], o[1]),
                        Math.max(n[0], r[0], i[0], o[0]),
                        Math.max(n[1], r[1], i[1], o[1]),
                      ];
                    }
                    static inverseTransform(e) {
                      const t = e[0] * e[3] - e[1] * e[2];
                      return [
                        e[3] / t,
                        -e[1] / t,
                        -e[2] / t,
                        e[0] / t,
                        (e[2] * e[5] - e[4] * e[3]) / t,
                        (e[4] * e[1] - e[5] * e[0]) / t,
                      ];
                    }
                    static apply3dTransform(e, t) {
                      return [
                        e[0] * t[0] + e[1] * t[1] + e[2] * t[2],
                        e[3] * t[0] + e[4] * t[1] + e[5] * t[2],
                        e[6] * t[0] + e[7] * t[1] + e[8] * t[2],
                      ];
                    }
                    static singularValueDecompose2dScale(e) {
                      const t = [e[0], e[2], e[1], e[3]],
                        n = e[0] * t[0] + e[1] * t[2],
                        r = e[0] * t[1] + e[1] * t[3],
                        i = e[2] * t[0] + e[3] * t[2],
                        o = e[2] * t[1] + e[3] * t[3],
                        a = (n + o) / 2,
                        s = Math.sqrt((n + o) ** 2 - 4 * (n * o - i * r)) / 2,
                        l = a + s || 1,
                        c = a - s || 1;
                      return [Math.sqrt(l), Math.sqrt(c)];
                    }
                    static normalizeRect(e) {
                      const t = e.slice(0);
                      return (
                        e[0] > e[2] && ((t[0] = e[2]), (t[2] = e[0])),
                        e[1] > e[3] && ((t[1] = e[3]), (t[3] = e[1])),
                        t
                      );
                    }
                    static intersect(e, t) {
                      const n = Math.max(
                          Math.min(e[0], e[2]),
                          Math.min(t[0], t[2]),
                        ),
                        r = Math.min(
                          Math.max(e[0], e[2]),
                          Math.max(t[0], t[2]),
                        );
                      if (n > r) return null;
                      const i = Math.max(
                          Math.min(e[1], e[3]),
                          Math.min(t[1], t[3]),
                        ),
                        o = Math.min(
                          Math.max(e[1], e[3]),
                          Math.max(t[1], t[3]),
                        );
                      return i > o ? null : [n, i, r, o];
                    }
                    static bezierBoundingBox(e, t, n, r, i, o, a, s) {
                      const l = [],
                        c = [[], []];
                      let h, u, d, p, f, g, m, v;
                      for (let c = 0; c < 2; ++c)
                        if (
                          (0 === c
                            ? ((u = 6 * e - 12 * n + 6 * i),
                              (h = -3 * e + 9 * n - 9 * i + 3 * a),
                              (d = 3 * n - 3 * e))
                            : ((u = 6 * t - 12 * r + 6 * o),
                              (h = -3 * t + 9 * r - 9 * o + 3 * s),
                              (d = 3 * r - 3 * t)),
                          Math.abs(h) < 1e-12)
                        ) {
                          if (Math.abs(u) < 1e-12) continue;
                          (p = -d / u), 0 < p && p < 1 && l.push(p);
                        } else
                          (m = u * u - 4 * d * h),
                            (v = Math.sqrt(m)),
                            m < 0 ||
                              ((f = (-u + v) / (2 * h)),
                              0 < f && f < 1 && l.push(f),
                              (g = (-u - v) / (2 * h)),
                              0 < g && g < 1 && l.push(g));
                      let b,
                        y = l.length;
                      const _ = y;
                      for (; y--; )
                        (p = l[y]),
                          (b = 1 - p),
                          (c[0][y] =
                            b * b * b * e +
                            3 * b * b * p * n +
                            3 * b * p * p * i +
                            p * p * p * a),
                          (c[1][y] =
                            b * b * b * t +
                            3 * b * b * p * r +
                            3 * b * p * p * o +
                            p * p * p * s);
                      return (
                        (c[0][_] = e),
                        (c[1][_] = t),
                        (c[0][_ + 1] = a),
                        (c[1][_ + 1] = s),
                        (c[0].length = c[1].length = _ + 2),
                        [
                          Math.min(...c[0]),
                          Math.min(...c[1]),
                          Math.max(...c[0]),
                          Math.max(...c[1]),
                        ]
                      );
                    }
                  }
                  t.Util = d;
                  const p = [
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225,
                    8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222,
                    8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338,
                    352, 376, 381, 305, 322, 339, 353, 382, 0, 8364,
                  ];
                  function f(e) {
                    return decodeURIComponent(escape(e));
                  }
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(3);
                  globalThis._pdfjsCompatibilityChecked ||
                    ((globalThis._pdfjsCompatibilityChecked = !0),
                    !globalThis.btoa &&
                      r.isNodeJS &&
                      (globalThis.btoa = function (e) {
                        return Buffer.from(e, 'binary').toString('base64');
                      }),
                    !globalThis.atob &&
                      r.isNodeJS &&
                      (globalThis.atob = function (e) {
                        return Buffer.from(e, 'base64').toString('binary');
                      }),
                    !globalThis.DOMMatrix &&
                      r.isNodeJS &&
                      (globalThis.DOMMatrix = __webpack_require__(90733)),
                    !globalThis.ReadableStream &&
                      r.isNodeJS &&
                      (globalThis.ReadableStream =
                        __webpack_require__(23800).ReadableStream),
                    Array.prototype.at || n(4),
                    Uint8Array.prototype.at || n(76),
                    globalThis.structuredClone || n(86));
                },
                (e, t) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.isNodeJS = void 0);
                  const n = !(
                    'object' != typeof process ||
                    process + '' != '[object process]' ||
                    process.versions.nw ||
                    (process.versions.electron &&
                      process.type &&
                      'browser' !== process.type)
                  );
                  t.isNodeJS = n;
                },
                (e, t, n) => {
                  n(5);
                  var r = n(75);
                  e.exports = r('Array', 'at');
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(6),
                    i = n(41),
                    o = n(65),
                    a = n(63),
                    s = n(70);
                  r(
                    { target: 'Array', proto: !0 },
                    {
                      at: function (e) {
                        var t = i(this),
                          n = o(t),
                          r = a(e),
                          s = r >= 0 ? r : n + r;
                        return s < 0 || s >= n ? void 0 : t[s];
                      },
                    },
                  ),
                    s('at');
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(8).f,
                    o = n(45),
                    a = n(49),
                    s = n(39),
                    l = n(57),
                    c = n(69);
                  e.exports = function (e, t) {
                    var n,
                      h,
                      u,
                      d,
                      p,
                      f = e.target,
                      g = e.global,
                      m = e.stat;
                    if (
                      (n = g
                        ? r
                        : m
                          ? r[f] || s(f, {})
                          : (r[f] || {}).prototype)
                    )
                      for (h in t) {
                        if (
                          ((d = t[h]),
                          (u = e.dontCallGetSet
                            ? (p = i(n, h)) && p.value
                            : n[h]),
                          !c(g ? h : f + (m ? '.' : '#') + h, e.forced) &&
                            void 0 !== u)
                        ) {
                          if (typeof d == typeof u) continue;
                          l(d, u);
                        }
                        (e.sham || (u && u.sham)) && o(d, 'sham', !0),
                          a(n, h, d, e);
                      }
                  };
                },
                (e) => {
                  var t = function (e) {
                    return e && e.Math == Math && e;
                  };
                  e.exports =
                    t('object' == typeof globalThis && globalThis) ||
                    t('object' == typeof window && window) ||
                    t('object' == typeof self && self) ||
                    t(
                      'object' == typeof __webpack_require__.g &&
                        __webpack_require__.g,
                    ) ||
                    (function () {
                      return this;
                    })() ||
                    Function('return this')();
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(11),
                    o = n(13),
                    a = n(14),
                    s = n(15),
                    l = n(20),
                    c = n(40),
                    h = n(43),
                    u = Object.getOwnPropertyDescriptor;
                  t.f = r
                    ? u
                    : function (e, t) {
                        if (((e = s(e)), (t = l(t)), h))
                          try {
                            return u(e, t);
                          } catch (e) {}
                        if (c(e, t)) return a(!i(o.f, e, t), e[t]);
                      };
                },
                (e, t, n) => {
                  var r = n(10);
                  e.exports = !r(function () {
                    return (
                      7 !=
                      Object.defineProperty({}, 1, {
                        get: function () {
                          return 7;
                        },
                      })[1]
                    );
                  });
                },
                (e) => {
                  e.exports = function (e) {
                    try {
                      return !!e();
                    } catch (e) {
                      return !0;
                    }
                  };
                },
                (e, t, n) => {
                  var r = n(12),
                    i = Function.prototype.call;
                  e.exports = r
                    ? i.bind(i)
                    : function () {
                        return i.apply(i, arguments);
                      };
                },
                (e, t, n) => {
                  var r = n(10);
                  e.exports = !r(function () {
                    var e = function () {}.bind();
                    return (
                      'function' != typeof e || e.hasOwnProperty('prototype')
                    );
                  });
                },
                (e, t) => {
                  'use strict';
                  var n = {}.propertyIsEnumerable,
                    r = Object.getOwnPropertyDescriptor,
                    i = r && !n.call({ 1: 2 }, 1);
                  t.f = i
                    ? function (e) {
                        var t = r(this, e);
                        return !!t && t.enumerable;
                      }
                    : n;
                },
                (e) => {
                  e.exports = function (e, t) {
                    return {
                      enumerable: !(1 & e),
                      configurable: !(2 & e),
                      writable: !(4 & e),
                      value: t,
                    };
                  };
                },
                (e, t, n) => {
                  var r = n(16),
                    i = n(19);
                  e.exports = function (e) {
                    return r(i(e));
                  };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(10),
                    o = n(18),
                    a = Object,
                    s = r(''.split);
                  e.exports = i(function () {
                    return !a('z').propertyIsEnumerable(0);
                  })
                    ? function (e) {
                        return 'String' == o(e) ? s(e, '') : a(e);
                      }
                    : a;
                },
                (e, t, n) => {
                  var r = n(12),
                    i = Function.prototype,
                    o = i.bind,
                    a = i.call,
                    s = r && o.bind(a, a);
                  e.exports = r
                    ? function (e) {
                        return e && s(e);
                      }
                    : function (e) {
                        return (
                          e &&
                          function () {
                            return a.apply(e, arguments);
                          }
                        );
                      };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = r({}.toString),
                    o = r(''.slice);
                  e.exports = function (e) {
                    return o(i(e), 8, -1);
                  };
                },
                (e) => {
                  var t = TypeError;
                  e.exports = function (e) {
                    if (null == e) throw t("Can't call method on " + e);
                    return e;
                  };
                },
                (e, t, n) => {
                  var r = n(21),
                    i = n(24);
                  e.exports = function (e) {
                    var t = r(e, 'string');
                    return i(t) ? t : t + '';
                  };
                },
                (e, t, n) => {
                  var r = n(11),
                    i = n(22),
                    o = n(24),
                    a = n(31),
                    s = n(34),
                    l = n(35),
                    c = TypeError,
                    h = l('toPrimitive');
                  e.exports = function (e, t) {
                    if (!i(e) || o(e)) return e;
                    var n,
                      l = a(e, h);
                    if (l) {
                      if (
                        (void 0 === t && (t = 'default'),
                        (n = r(l, e, t)),
                        !i(n) || o(n))
                      )
                        return n;
                      throw c("Can't convert object to primitive value");
                    }
                    return void 0 === t && (t = 'number'), s(e, t);
                  };
                },
                (e, t, n) => {
                  var r = n(23);
                  e.exports = function (e) {
                    return 'object' == typeof e ? null !== e : r(e);
                  };
                },
                (e) => {
                  e.exports = function (e) {
                    return 'function' == typeof e;
                  };
                },
                (e, t, n) => {
                  var r = n(25),
                    i = n(23),
                    o = n(26),
                    a = n(27),
                    s = Object;
                  e.exports = a
                    ? function (e) {
                        return 'symbol' == typeof e;
                      }
                    : function (e) {
                        var t = r('Symbol');
                        return i(t) && o(t.prototype, s(e));
                      };
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(23);
                  e.exports = function (e, t) {
                    return arguments.length < 2
                      ? ((n = r[e]), i(n) ? n : void 0)
                      : r[e] && r[e][t];
                    var n;
                  };
                },
                (e, t, n) => {
                  var r = n(17);
                  e.exports = r({}.isPrototypeOf);
                },
                (e, t, n) => {
                  var r = n(28);
                  e.exports =
                    r && !Symbol.sham && 'symbol' == typeof Symbol.iterator;
                },
                (e, t, n) => {
                  var r = n(29),
                    i = n(10);
                  e.exports =
                    !!Object.getOwnPropertySymbols &&
                    !i(function () {
                      var e = Symbol();
                      return (
                        !String(e) ||
                        !(Object(e) instanceof Symbol) ||
                        (!Symbol.sham && r && r < 41)
                      );
                    });
                },
                (e, t, n) => {
                  var r,
                    i,
                    o = n(7),
                    a = n(30),
                    s = o.process,
                    l = o.Deno,
                    c = (s && s.versions) || (l && l.version),
                    h = c && c.v8;
                  h &&
                    (i =
                      (r = h.split('.'))[0] > 0 && r[0] < 4
                        ? 1
                        : +(r[0] + r[1])),
                    !i &&
                      a &&
                      (!(r = a.match(/Edge\/(\d+)/)) || r[1] >= 74) &&
                      (r = a.match(/Chrome\/(\d+)/)) &&
                      (i = +r[1]),
                    (e.exports = i);
                },
                (e, t, n) => {
                  var r = n(25);
                  e.exports = r('navigator', 'userAgent') || '';
                },
                (e, t, n) => {
                  var r = n(32);
                  e.exports = function (e, t) {
                    var n = e[t];
                    return null == n ? void 0 : r(n);
                  };
                },
                (e, t, n) => {
                  var r = n(23),
                    i = n(33),
                    o = TypeError;
                  e.exports = function (e) {
                    if (r(e)) return e;
                    throw o(i(e) + ' is not a function');
                  };
                },
                (e) => {
                  var t = String;
                  e.exports = function (e) {
                    try {
                      return t(e);
                    } catch (e) {
                      return 'Object';
                    }
                  };
                },
                (e, t, n) => {
                  var r = n(11),
                    i = n(23),
                    o = n(22),
                    a = TypeError;
                  e.exports = function (e, t) {
                    var n, s;
                    if (
                      'string' === t &&
                      i((n = e.toString)) &&
                      !o((s = r(n, e)))
                    )
                      return s;
                    if (i((n = e.valueOf)) && !o((s = r(n, e)))) return s;
                    if (
                      'string' !== t &&
                      i((n = e.toString)) &&
                      !o((s = r(n, e)))
                    )
                      return s;
                    throw a("Can't convert object to primitive value");
                  };
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(36),
                    o = n(40),
                    a = n(42),
                    s = n(28),
                    l = n(27),
                    c = i('wks'),
                    h = r.Symbol,
                    u = h && h.for,
                    d = l ? h : (h && h.withoutSetter) || a;
                  e.exports = function (e) {
                    if (!o(c, e) || (!s && 'string' != typeof c[e])) {
                      var t = 'Symbol.' + e;
                      s && o(h, e)
                        ? (c[e] = h[e])
                        : (c[e] = l && u ? u(t) : d(t));
                    }
                    return c[e];
                  };
                },
                (e, t, n) => {
                  var r = n(37),
                    i = n(38);
                  (e.exports = function (e, t) {
                    return i[e] || (i[e] = void 0 !== t ? t : {});
                  })('versions', []).push({
                    version: '3.24.1',
                    mode: r ? 'pure' : 'global',
                    copyright: '© 2014-2022 Denis Pushkarev (zloirock.ru)',
                    license:
                      'https://github.com/zloirock/core-js/blob/v3.24.1/LICENSE',
                    source: 'https://github.com/zloirock/core-js',
                  });
                },
                (e) => {
                  e.exports = !1;
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(39),
                    o = '__core-js_shared__',
                    a = r[o] || i(o, {});
                  e.exports = a;
                },
                (e, t, n) => {
                  var r = n(7),
                    i = Object.defineProperty;
                  e.exports = function (e, t) {
                    try {
                      i(r, e, { value: t, configurable: !0, writable: !0 });
                    } catch (n) {
                      r[e] = t;
                    }
                    return t;
                  };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(41),
                    o = r({}.hasOwnProperty);
                  e.exports =
                    Object.hasOwn ||
                    function (e, t) {
                      return o(i(e), t);
                    };
                },
                (e, t, n) => {
                  var r = n(19),
                    i = Object;
                  e.exports = function (e) {
                    return i(r(e));
                  };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = 0,
                    o = Math.random(),
                    a = r((1).toString);
                  e.exports = function (e) {
                    return (
                      'Symbol(' +
                      (void 0 === e ? '' : e) +
                      ')_' +
                      a(++i + o, 36)
                    );
                  };
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(10),
                    o = n(44);
                  e.exports =
                    !r &&
                    !i(function () {
                      return (
                        7 !=
                        Object.defineProperty(o('div'), 'a', {
                          get: function () {
                            return 7;
                          },
                        }).a
                      );
                    });
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(22),
                    o = r.document,
                    a = i(o) && i(o.createElement);
                  e.exports = function (e) {
                    return a ? o.createElement(e) : {};
                  };
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(46),
                    o = n(14);
                  e.exports = r
                    ? function (e, t, n) {
                        return i.f(e, t, o(1, n));
                      }
                    : function (e, t, n) {
                        return (e[t] = n), e;
                      };
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(43),
                    o = n(47),
                    a = n(48),
                    s = n(20),
                    l = TypeError,
                    c = Object.defineProperty,
                    h = Object.getOwnPropertyDescriptor,
                    u = 'enumerable',
                    d = 'configurable',
                    p = 'writable';
                  t.f = r
                    ? o
                      ? function (e, t, n) {
                          if (
                            (a(e),
                            (t = s(t)),
                            a(n),
                            'function' == typeof e &&
                              'prototype' === t &&
                              'value' in n &&
                              p in n &&
                              !n[p])
                          ) {
                            var r = h(e, t);
                            r &&
                              r[p] &&
                              ((e[t] = n.value),
                              (n = {
                                configurable: d in n ? n[d] : r[d],
                                enumerable: u in n ? n[u] : r[u],
                                writable: !1,
                              }));
                          }
                          return c(e, t, n);
                        }
                      : c
                    : function (e, t, n) {
                        if ((a(e), (t = s(t)), a(n), i))
                          try {
                            return c(e, t, n);
                          } catch (e) {}
                        if ('get' in n || 'set' in n)
                          throw l('Accessors not supported');
                        return 'value' in n && (e[t] = n.value), e;
                      };
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(10);
                  e.exports =
                    r &&
                    i(function () {
                      return (
                        42 !=
                        Object.defineProperty(function () {}, 'prototype', {
                          value: 42,
                          writable: !1,
                        }).prototype
                      );
                    });
                },
                (e, t, n) => {
                  var r = n(22),
                    i = String,
                    o = TypeError;
                  e.exports = function (e) {
                    if (r(e)) return e;
                    throw o(i(e) + ' is not an object');
                  };
                },
                (e, t, n) => {
                  var r = n(23),
                    i = n(46),
                    o = n(50),
                    a = n(39);
                  e.exports = function (e, t, n, s) {
                    s || (s = {});
                    var l = s.enumerable,
                      c = void 0 !== s.name ? s.name : t;
                    if ((r(n) && o(n, c, s), s.global))
                      l ? (e[t] = n) : a(t, n);
                    else {
                      try {
                        s.unsafe ? e[t] && (l = !0) : delete e[t];
                      } catch (e) {}
                      l
                        ? (e[t] = n)
                        : i.f(e, t, {
                            value: n,
                            enumerable: !1,
                            configurable: !s.nonConfigurable,
                            writable: !s.nonWritable,
                          });
                    }
                    return e;
                  };
                },
                (e, t, n) => {
                  var r = n(10),
                    i = n(23),
                    o = n(40),
                    a = n(9),
                    s = n(51).CONFIGURABLE,
                    l = n(52),
                    c = n(53),
                    h = c.enforce,
                    u = c.get,
                    d = Object.defineProperty,
                    p =
                      a &&
                      !r(function () {
                        return (
                          8 !== d(function () {}, 'length', { value: 8 }).length
                        );
                      }),
                    f = String(String).split('String'),
                    g = (e.exports = function (e, t, n) {
                      'Symbol(' === String(t).slice(0, 7) &&
                        (t =
                          '[' +
                          String(t).replace(/^Symbol\(([^)]*)\)/, '$1') +
                          ']'),
                        n && n.getter && (t = 'get ' + t),
                        n && n.setter && (t = 'set ' + t),
                        (!o(e, 'name') || (s && e.name !== t)) &&
                          (a
                            ? d(e, 'name', { value: t, configurable: !0 })
                            : (e.name = t)),
                        p &&
                          n &&
                          o(n, 'arity') &&
                          e.length !== n.arity &&
                          d(e, 'length', { value: n.arity });
                      try {
                        n && o(n, 'constructor') && n.constructor
                          ? a && d(e, 'prototype', { writable: !1 })
                          : e.prototype && (e.prototype = void 0);
                      } catch (e) {}
                      var r = h(e);
                      return (
                        o(r, 'source') ||
                          (r.source = f.join('string' == typeof t ? t : '')),
                        e
                      );
                    });
                  Function.prototype.toString = g(function () {
                    return (i(this) && u(this).source) || l(this);
                  }, 'toString');
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(40),
                    o = Function.prototype,
                    a = r && Object.getOwnPropertyDescriptor,
                    s = i(o, 'name'),
                    l = s && 'something' === function () {}.name,
                    c = s && (!r || (r && a(o, 'name').configurable));
                  e.exports = { EXISTS: s, PROPER: l, CONFIGURABLE: c };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(23),
                    o = n(38),
                    a = r(Function.toString);
                  i(o.inspectSource) ||
                    (o.inspectSource = function (e) {
                      return a(e);
                    }),
                    (e.exports = o.inspectSource);
                },
                (e, t, n) => {
                  var r,
                    i,
                    o,
                    a = n(54),
                    s = n(7),
                    l = n(17),
                    c = n(22),
                    h = n(45),
                    u = n(40),
                    d = n(38),
                    p = n(55),
                    f = n(56),
                    g = 'Object already initialized',
                    m = s.TypeError,
                    v = s.WeakMap;
                  if (a || d.state) {
                    var b = d.state || (d.state = new v()),
                      y = l(b.get),
                      _ = l(b.has),
                      w = l(b.set);
                    (r = function (e, t) {
                      if (_(b, e)) throw new m(g);
                      return (t.facade = e), w(b, e, t), t;
                    }),
                      (i = function (e) {
                        return y(b, e) || {};
                      }),
                      (o = function (e) {
                        return _(b, e);
                      });
                  } else {
                    var S = p('state');
                    (f[S] = !0),
                      (r = function (e, t) {
                        if (u(e, S)) throw new m(g);
                        return (t.facade = e), h(e, S, t), t;
                      }),
                      (i = function (e) {
                        return u(e, S) ? e[S] : {};
                      }),
                      (o = function (e) {
                        return u(e, S);
                      });
                  }
                  e.exports = {
                    set: r,
                    get: i,
                    has: o,
                    enforce: function (e) {
                      return o(e) ? i(e) : r(e, {});
                    },
                    getterFor: function (e) {
                      return function (t) {
                        var n;
                        if (!c(t) || (n = i(t)).type !== e)
                          throw m('Incompatible receiver, ' + e + ' required');
                        return n;
                      };
                    },
                  };
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(23),
                    o = n(52),
                    a = r.WeakMap;
                  e.exports = i(a) && /native code/.test(o(a));
                },
                (e, t, n) => {
                  var r = n(36),
                    i = n(42),
                    o = r('keys');
                  e.exports = function (e) {
                    return o[e] || (o[e] = i(e));
                  };
                },
                (e) => {
                  e.exports = {};
                },
                (e, t, n) => {
                  var r = n(40),
                    i = n(58),
                    o = n(8),
                    a = n(46);
                  e.exports = function (e, t, n) {
                    for (
                      var s = i(t), l = a.f, c = o.f, h = 0;
                      h < s.length;
                      h++
                    ) {
                      var u = s[h];
                      r(e, u) || (n && r(n, u)) || l(e, u, c(t, u));
                    }
                  };
                },
                (e, t, n) => {
                  var r = n(25),
                    i = n(17),
                    o = n(59),
                    a = n(68),
                    s = n(48),
                    l = i([].concat);
                  e.exports =
                    r('Reflect', 'ownKeys') ||
                    function (e) {
                      var t = o.f(s(e)),
                        n = a.f;
                      return n ? l(t, n(e)) : t;
                    };
                },
                (e, t, n) => {
                  var r = n(60),
                    i = n(67).concat('length', 'prototype');
                  t.f =
                    Object.getOwnPropertyNames ||
                    function (e) {
                      return r(e, i);
                    };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(40),
                    o = n(15),
                    a = n(61).indexOf,
                    s = n(56),
                    l = r([].push);
                  e.exports = function (e, t) {
                    var n,
                      r = o(e),
                      c = 0,
                      h = [];
                    for (n in r) !i(s, n) && i(r, n) && l(h, n);
                    for (; t.length > c; )
                      i(r, (n = t[c++])) && (~a(h, n) || l(h, n));
                    return h;
                  };
                },
                (e, t, n) => {
                  var r = n(15),
                    i = n(62),
                    o = n(65),
                    a = function (e) {
                      return function (t, n, a) {
                        var s,
                          l = r(t),
                          c = o(l),
                          h = i(a, c);
                        if (e && n != n) {
                          for (; c > h; ) if ((s = l[h++]) != s) return !0;
                        } else
                          for (; c > h; h++)
                            if ((e || h in l) && l[h] === n) return e || h || 0;
                        return !e && -1;
                      };
                    };
                  e.exports = { includes: a(!0), indexOf: a(!1) };
                },
                (e, t, n) => {
                  var r = n(63),
                    i = Math.max,
                    o = Math.min;
                  e.exports = function (e, t) {
                    var n = r(e);
                    return n < 0 ? i(n + t, 0) : o(n, t);
                  };
                },
                (e, t, n) => {
                  var r = n(64);
                  e.exports = function (e) {
                    var t = +e;
                    return t != t || 0 === t ? 0 : r(t);
                  };
                },
                (e) => {
                  var t = Math.ceil,
                    n = Math.floor;
                  e.exports =
                    Math.trunc ||
                    function (e) {
                      var r = +e;
                      return (r > 0 ? n : t)(r);
                    };
                },
                (e, t, n) => {
                  var r = n(66);
                  e.exports = function (e) {
                    return r(e.length);
                  };
                },
                (e, t, n) => {
                  var r = n(63),
                    i = Math.min;
                  e.exports = function (e) {
                    return e > 0 ? i(r(e), 9007199254740991) : 0;
                  };
                },
                (e) => {
                  e.exports = [
                    'constructor',
                    'hasOwnProperty',
                    'isPrototypeOf',
                    'propertyIsEnumerable',
                    'toLocaleString',
                    'toString',
                    'valueOf',
                  ];
                },
                (e, t) => {
                  t.f = Object.getOwnPropertySymbols;
                },
                (e, t, n) => {
                  var r = n(10),
                    i = n(23),
                    o = /#|\.prototype\./,
                    a = function (e, t) {
                      var n = l[s(e)];
                      return n == h || (n != c && (i(t) ? r(t) : !!t));
                    },
                    s = (a.normalize = function (e) {
                      return String(e).replace(o, '.').toLowerCase();
                    }),
                    l = (a.data = {}),
                    c = (a.NATIVE = 'N'),
                    h = (a.POLYFILL = 'P');
                  e.exports = a;
                },
                (e, t, n) => {
                  var r = n(35),
                    i = n(71),
                    o = n(46).f,
                    a = r('unscopables'),
                    s = Array.prototype;
                  null == s[a] && o(s, a, { configurable: !0, value: i(null) }),
                    (e.exports = function (e) {
                      s[a][e] = !0;
                    });
                },
                (e, t, n) => {
                  var r,
                    i = n(48),
                    o = n(72),
                    a = n(67),
                    s = n(56),
                    l = n(74),
                    c = n(44),
                    h = n(55),
                    u = 'prototype',
                    d = 'script',
                    p = h('IE_PROTO'),
                    f = function () {},
                    g = function (e) {
                      return '<' + d + '>' + e + '</' + d + '>';
                    },
                    m = function (e) {
                      e.write(g('')), e.close();
                      var t = e.parentWindow.Object;
                      return (e = null), t;
                    },
                    v = function () {
                      try {
                        r = new ActiveXObject('htmlfile');
                      } catch (e) {}
                      var e, t, n;
                      v =
                        'undefined' != typeof document
                          ? document.domain && r
                            ? m(r)
                            : ((t = c('iframe')),
                              (n = 'java' + d + ':'),
                              (t.style.display = 'none'),
                              l.appendChild(t),
                              (t.src = String(n)),
                              (e = t.contentWindow.document).open(),
                              e.write(g('document.F=Object')),
                              e.close(),
                              e.F)
                          : m(r);
                      for (var i = a.length; i--; ) delete v[u][a[i]];
                      return v();
                    };
                  (s[p] = !0),
                    (e.exports =
                      Object.create ||
                      function (e, t) {
                        var n;
                        return (
                          null !== e
                            ? ((f[u] = i(e)),
                              (n = new f()),
                              (f[u] = null),
                              (n[p] = e))
                            : (n = v()),
                          void 0 === t ? n : o.f(n, t)
                        );
                      });
                },
                (e, t, n) => {
                  var r = n(9),
                    i = n(47),
                    o = n(46),
                    a = n(48),
                    s = n(15),
                    l = n(73);
                  t.f =
                    r && !i
                      ? Object.defineProperties
                      : function (e, t) {
                          a(e);
                          for (
                            var n, r = s(t), i = l(t), c = i.length, h = 0;
                            c > h;

                          )
                            o.f(e, (n = i[h++]), r[n]);
                          return e;
                        };
                },
                (e, t, n) => {
                  var r = n(60),
                    i = n(67);
                  e.exports =
                    Object.keys ||
                    function (e) {
                      return r(e, i);
                    };
                },
                (e, t, n) => {
                  var r = n(25);
                  e.exports = r('document', 'documentElement');
                },
                (e, t, n) => {
                  var r = n(7),
                    i = n(17);
                  e.exports = function (e, t) {
                    return i(r[e].prototype[t]);
                  };
                },
                (e, t, n) => {
                  n(77);
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(78),
                    i = n(65),
                    o = n(63),
                    a = r.aTypedArray;
                  (0, r.exportTypedArrayMethod)('at', function (e) {
                    var t = a(this),
                      n = i(t),
                      r = o(e),
                      s = r >= 0 ? r : n + r;
                    return s < 0 || s >= n ? void 0 : t[s];
                  });
                },
                (e, t, n) => {
                  'use strict';
                  var r,
                    i,
                    o,
                    a = n(79),
                    s = n(9),
                    l = n(7),
                    c = n(23),
                    h = n(22),
                    u = n(40),
                    d = n(80),
                    p = n(33),
                    f = n(45),
                    g = n(49),
                    m = n(46).f,
                    v = n(26),
                    b = n(82),
                    y = n(84),
                    _ = n(35),
                    w = n(42),
                    S = n(53),
                    A = S.enforce,
                    x = S.get,
                    P = l.Int8Array,
                    E = P && P.prototype,
                    C = l.Uint8ClampedArray,
                    T = C && C.prototype,
                    k = P && b(P),
                    M = E && b(E),
                    R = Object.prototype,
                    O = l.TypeError,
                    D = _('toStringTag'),
                    I = w('TYPED_ARRAY_TAG'),
                    L = 'TypedArrayConstructor',
                    F = a && !!y && 'Opera' !== d(l.opera),
                    N = !1,
                    j = {
                      Int8Array: 1,
                      Uint8Array: 1,
                      Uint8ClampedArray: 1,
                      Int16Array: 2,
                      Uint16Array: 2,
                      Int32Array: 4,
                      Uint32Array: 4,
                      Float32Array: 4,
                      Float64Array: 8,
                    },
                    B = { BigInt64Array: 8, BigUint64Array: 8 },
                    W = function (e) {
                      var t = b(e);
                      if (h(t)) {
                        var n = x(t);
                        return n && u(n, L) ? n[L] : W(t);
                      }
                    },
                    z = function (e) {
                      if (!h(e)) return !1;
                      var t = d(e);
                      return u(j, t) || u(B, t);
                    };
                  for (r in j)
                    (o = (i = l[r]) && i.prototype) ? (A(o)[L] = i) : (F = !1);
                  for (r in B) (o = (i = l[r]) && i.prototype) && (A(o)[L] = i);
                  if (
                    (!F || !c(k) || k === Function.prototype) &&
                    ((k = function () {
                      throw O('Incorrect invocation');
                    }),
                    F)
                  )
                    for (r in j) l[r] && y(l[r], k);
                  if ((!F || !M || M === R) && ((M = k.prototype), F))
                    for (r in j) l[r] && y(l[r].prototype, M);
                  if ((F && b(T) !== M && y(T, M), s && !u(M, D)))
                    for (r in ((N = !0),
                    m(M, D, {
                      get: function () {
                        return h(this) ? this[I] : void 0;
                      },
                    }),
                    j))
                      l[r] && f(l[r], I, r);
                  e.exports = {
                    NATIVE_ARRAY_BUFFER_VIEWS: F,
                    TYPED_ARRAY_TAG: N && I,
                    aTypedArray: function (e) {
                      if (z(e)) return e;
                      throw O('Target is not a typed array');
                    },
                    aTypedArrayConstructor: function (e) {
                      if (c(e) && (!y || v(k, e))) return e;
                      throw O(p(e) + ' is not a typed array constructor');
                    },
                    exportTypedArrayMethod: function (e, t, n, r) {
                      if (s) {
                        if (n)
                          for (var i in j) {
                            var o = l[i];
                            if (o && u(o.prototype, e))
                              try {
                                delete o.prototype[e];
                              } catch (n) {
                                try {
                                  o.prototype[e] = t;
                                } catch (e) {}
                              }
                          }
                        (M[e] && !n) || g(M, e, n ? t : (F && E[e]) || t, r);
                      }
                    },
                    exportTypedArrayStaticMethod: function (e, t, n) {
                      var r, i;
                      if (s) {
                        if (y) {
                          if (n)
                            for (r in j)
                              if ((i = l[r]) && u(i, e))
                                try {
                                  delete i[e];
                                } catch (e) {}
                          if (k[e] && !n) return;
                          try {
                            return g(k, e, n ? t : (F && k[e]) || t);
                          } catch (e) {}
                        }
                        for (r in j) !(i = l[r]) || (i[e] && !n) || g(i, e, t);
                      }
                    },
                    getTypedArrayConstructor: W,
                    isView: function (e) {
                      if (!h(e)) return !1;
                      var t = d(e);
                      return 'DataView' === t || u(j, t) || u(B, t);
                    },
                    isTypedArray: z,
                    TypedArray: k,
                    TypedArrayPrototype: M,
                  };
                },
                (e) => {
                  e.exports =
                    'undefined' != typeof ArrayBuffer &&
                    'undefined' != typeof DataView;
                },
                (e, t, n) => {
                  var r = n(81),
                    i = n(23),
                    o = n(18),
                    a = n(35)('toStringTag'),
                    s = Object,
                    l =
                      'Arguments' ==
                      o(
                        (function () {
                          return arguments;
                        })(),
                      );
                  e.exports = r
                    ? o
                    : function (e) {
                        var t, n, r;
                        return void 0 === e
                          ? 'Undefined'
                          : null === e
                            ? 'Null'
                            : 'string' ==
                                typeof (n = (function (e, t) {
                                  try {
                                    return e[t];
                                  } catch (e) {}
                                })((t = s(e)), a))
                              ? n
                              : l
                                ? o(t)
                                : 'Object' == (r = o(t)) && i(t.callee)
                                  ? 'Arguments'
                                  : r;
                      };
                },
                (e, t, n) => {
                  var r = {};
                  (r[n(35)('toStringTag')] = 'z'),
                    (e.exports = '[object z]' === String(r));
                },
                (e, t, n) => {
                  var r = n(40),
                    i = n(23),
                    o = n(41),
                    a = n(55),
                    s = n(83),
                    l = a('IE_PROTO'),
                    c = Object,
                    h = c.prototype;
                  e.exports = s
                    ? c.getPrototypeOf
                    : function (e) {
                        var t = o(e);
                        if (r(t, l)) return t[l];
                        var n = t.constructor;
                        return i(n) && t instanceof n
                          ? n.prototype
                          : t instanceof c
                            ? h
                            : null;
                      };
                },
                (e, t, n) => {
                  var r = n(10);
                  e.exports = !r(function () {
                    function e() {}
                    return (
                      (e.prototype.constructor = null),
                      Object.getPrototypeOf(new e()) !== e.prototype
                    );
                  });
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(48),
                    o = n(85);
                  e.exports =
                    Object.setPrototypeOf ||
                    ('__proto__' in {}
                      ? (function () {
                          var e,
                            t = !1,
                            n = {};
                          try {
                            (e = r(
                              Object.getOwnPropertyDescriptor(
                                Object.prototype,
                                '__proto__',
                              ).set,
                            ))(n, []),
                              (t = n instanceof Array);
                          } catch (e) {}
                          return function (n, r) {
                            return (
                              i(n), o(r), t ? e(n, r) : (n.__proto__ = r), n
                            );
                          };
                        })()
                      : void 0);
                },
                (e, t, n) => {
                  var r = n(23),
                    i = String,
                    o = TypeError;
                  e.exports = function (e) {
                    if ('object' == typeof e || r(e)) return e;
                    throw o("Can't set " + i(e) + ' as a prototype');
                  };
                },
                (e, t, n) => {
                  n(87), n(93), n(95), n(117), n(119);
                  var r = n(128);
                  e.exports = r.structuredClone;
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(15),
                    i = n(70),
                    o = n(88),
                    a = n(53),
                    s = n(46).f,
                    l = n(89),
                    c = n(37),
                    h = n(9),
                    u = 'Array Iterator',
                    d = a.set,
                    p = a.getterFor(u);
                  e.exports = l(
                    Array,
                    'Array',
                    function (e, t) {
                      d(this, { type: u, target: r(e), index: 0, kind: t });
                    },
                    function () {
                      var e = p(this),
                        t = e.target,
                        n = e.kind,
                        r = e.index++;
                      return !t || r >= t.length
                        ? ((e.target = void 0), { value: void 0, done: !0 })
                        : 'keys' == n
                          ? { value: r, done: !1 }
                          : 'values' == n
                            ? { value: t[r], done: !1 }
                            : { value: [r, t[r]], done: !1 };
                    },
                    'values',
                  );
                  var f = (o.Arguments = o.Array);
                  if (
                    (i('keys'),
                    i('values'),
                    i('entries'),
                    !c && h && 'values' !== f.name)
                  )
                    try {
                      s(f, 'name', { value: 'values' });
                    } catch (e) {}
                },
                (e) => {
                  e.exports = {};
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(6),
                    i = n(11),
                    o = n(37),
                    a = n(51),
                    s = n(23),
                    l = n(90),
                    c = n(82),
                    h = n(84),
                    u = n(92),
                    d = n(45),
                    p = n(49),
                    f = n(35),
                    g = n(88),
                    m = n(91),
                    v = a.PROPER,
                    b = a.CONFIGURABLE,
                    y = m.IteratorPrototype,
                    _ = m.BUGGY_SAFARI_ITERATORS,
                    w = f('iterator'),
                    S = 'keys',
                    A = 'values',
                    x = 'entries',
                    P = function () {
                      return this;
                    };
                  e.exports = function (e, t, n, a, f, m, E) {
                    l(n, t, a);
                    var C,
                      T,
                      k,
                      M = function (e) {
                        if (e === f && L) return L;
                        if (!_ && e in D) return D[e];
                        switch (e) {
                          case S:
                          case A:
                          case x:
                            return function () {
                              return new n(this, e);
                            };
                        }
                        return function () {
                          return new n(this);
                        };
                      },
                      R = t + ' Iterator',
                      O = !1,
                      D = e.prototype,
                      I = D[w] || D['@@iterator'] || (f && D[f]),
                      L = (!_ && I) || M(f),
                      F = ('Array' == t && D.entries) || I;
                    if (
                      (F &&
                        (C = c(F.call(new e()))) !== Object.prototype &&
                        C.next &&
                        (o ||
                          c(C) === y ||
                          (h ? h(C, y) : s(C[w]) || p(C, w, P)),
                        u(C, R, !0, !0),
                        o && (g[R] = P)),
                      v &&
                        f == A &&
                        I &&
                        I.name !== A &&
                        (!o && b
                          ? d(D, 'name', A)
                          : ((O = !0),
                            (L = function () {
                              return i(I, this);
                            }))),
                      f)
                    )
                      if (
                        ((T = {
                          values: M(A),
                          keys: m ? L : M(S),
                          entries: M(x),
                        }),
                        E)
                      )
                        for (k in T) (_ || O || !(k in D)) && p(D, k, T[k]);
                      else r({ target: t, proto: !0, forced: _ || O }, T);
                    return (
                      (o && !E) || D[w] === L || p(D, w, L, { name: f }),
                      (g[t] = L),
                      T
                    );
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(91).IteratorPrototype,
                    i = n(71),
                    o = n(14),
                    a = n(92),
                    s = n(88),
                    l = function () {
                      return this;
                    };
                  e.exports = function (e, t, n, c) {
                    var h = t + ' Iterator';
                    return (
                      (e.prototype = i(r, { next: o(+!c, n) })),
                      a(e, h, !1, !0),
                      (s[h] = l),
                      e
                    );
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r,
                    i,
                    o,
                    a = n(10),
                    s = n(23),
                    l = n(71),
                    c = n(82),
                    h = n(49),
                    u = n(35),
                    d = n(37),
                    p = u('iterator'),
                    f = !1;
                  [].keys &&
                    ('next' in (o = [].keys())
                      ? (i = c(c(o))) !== Object.prototype && (r = i)
                      : (f = !0)),
                    null == r ||
                    a(function () {
                      var e = {};
                      return r[p].call(e) !== e;
                    })
                      ? (r = {})
                      : d && (r = l(r)),
                    s(r[p]) ||
                      h(r, p, function () {
                        return this;
                      }),
                    (e.exports = {
                      IteratorPrototype: r,
                      BUGGY_SAFARI_ITERATORS: f,
                    });
                },
                (e, t, n) => {
                  var r = n(46).f,
                    i = n(40),
                    o = n(35)('toStringTag');
                  e.exports = function (e, t, n) {
                    e && !n && (e = e.prototype),
                      e && !i(e, o) && r(e, o, { configurable: !0, value: t });
                  };
                },
                (e, t, n) => {
                  var r = n(81),
                    i = n(49),
                    o = n(94);
                  r || i(Object.prototype, 'toString', o, { unsafe: !0 });
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(81),
                    i = n(80);
                  e.exports = r
                    ? {}.toString
                    : function () {
                        return '[object ' + i(this) + ']';
                      };
                },
                (e, t, n) => {
                  n(96);
                },
                (e, t, n) => {
                  'use strict';
                  n(97)(
                    'Map',
                    function (e) {
                      return function () {
                        return e(
                          this,
                          arguments.length ? arguments[0] : void 0,
                        );
                      };
                    },
                    n(114),
                  );
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(6),
                    i = n(7),
                    o = n(17),
                    a = n(69),
                    s = n(49),
                    l = n(98),
                    c = n(105),
                    h = n(111),
                    u = n(23),
                    d = n(22),
                    p = n(10),
                    f = n(112),
                    g = n(92),
                    m = n(113);
                  e.exports = function (e, t, n) {
                    var v = -1 !== e.indexOf('Map'),
                      b = -1 !== e.indexOf('Weak'),
                      y = v ? 'set' : 'add',
                      _ = i[e],
                      w = _ && _.prototype,
                      S = _,
                      A = {},
                      x = function (e) {
                        var t = o(w[e]);
                        s(
                          w,
                          e,
                          'add' == e
                            ? function (e) {
                                return t(this, 0 === e ? 0 : e), this;
                              }
                            : 'delete' == e
                              ? function (e) {
                                  return (
                                    !(b && !d(e)) && t(this, 0 === e ? 0 : e)
                                  );
                                }
                              : 'get' == e
                                ? function (e) {
                                    return b && !d(e)
                                      ? void 0
                                      : t(this, 0 === e ? 0 : e);
                                  }
                                : 'has' == e
                                  ? function (e) {
                                      return (
                                        !(b && !d(e)) &&
                                        t(this, 0 === e ? 0 : e)
                                      );
                                    }
                                  : function (e, n) {
                                      return t(this, 0 === e ? 0 : e, n), this;
                                    },
                        );
                      };
                    if (
                      a(
                        e,
                        !u(_) ||
                          !(
                            b ||
                            (w.forEach &&
                              !p(function () {
                                new _().entries().next();
                              }))
                          ),
                      )
                    )
                      (S = n.getConstructor(t, e, v, y)), l.enable();
                    else if (a(e, !0)) {
                      var P = new S(),
                        E = P[y](b ? {} : -0, 1) != P,
                        C = p(function () {
                          P.has(1);
                        }),
                        T = f(function (e) {
                          new _(e);
                        }),
                        k =
                          !b &&
                          p(function () {
                            for (var e = new _(), t = 5; t--; ) e[y](t, t);
                            return !e.has(-0);
                          });
                      T ||
                        (((S = t(function (e, t) {
                          h(e, w);
                          var n = m(new _(), e, S);
                          return (
                            null != t && c(t, n[y], { that: n, AS_ENTRIES: v }),
                            n
                          );
                        })).prototype = w),
                        (w.constructor = S)),
                        (C || k) && (x('delete'), x('has'), v && x('get')),
                        (k || E) && x(y),
                        b && w.clear && delete w.clear;
                    }
                    return (
                      (A[e] = S),
                      r({ global: !0, constructor: !0, forced: S != _ }, A),
                      g(S, e),
                      b || n.setStrong(S, e, v),
                      S
                    );
                  };
                },
                (e, t, n) => {
                  var r = n(6),
                    i = n(17),
                    o = n(56),
                    a = n(22),
                    s = n(40),
                    l = n(46).f,
                    c = n(59),
                    h = n(99),
                    u = n(102),
                    d = n(42),
                    p = n(104),
                    f = !1,
                    g = d('meta'),
                    m = 0,
                    v = function (e) {
                      l(e, g, { value: { objectID: 'O' + m++, weakData: {} } });
                    },
                    b = (e.exports = {
                      enable: function () {
                        (b.enable = function () {}), (f = !0);
                        var e = c.f,
                          t = i([].splice),
                          n = {};
                        (n[g] = 1),
                          e(n).length &&
                            ((c.f = function (n) {
                              for (
                                var r = e(n), i = 0, o = r.length;
                                i < o;
                                i++
                              )
                                if (r[i] === g) {
                                  t(r, i, 1);
                                  break;
                                }
                              return r;
                            }),
                            r(
                              { target: 'Object', stat: !0, forced: !0 },
                              { getOwnPropertyNames: h.f },
                            ));
                      },
                      fastKey: function (e, t) {
                        if (!a(e))
                          return 'symbol' == typeof e
                            ? e
                            : ('string' == typeof e ? 'S' : 'P') + e;
                        if (!s(e, g)) {
                          if (!u(e)) return 'F';
                          if (!t) return 'E';
                          v(e);
                        }
                        return e[g].objectID;
                      },
                      getWeakData: function (e, t) {
                        if (!s(e, g)) {
                          if (!u(e)) return !0;
                          if (!t) return !1;
                          v(e);
                        }
                        return e[g].weakData;
                      },
                      onFreeze: function (e) {
                        return p && f && u(e) && !s(e, g) && v(e), e;
                      },
                    });
                  o[g] = !0;
                },
                (e, t, n) => {
                  var r = n(18),
                    i = n(15),
                    o = n(59).f,
                    a = n(100),
                    s =
                      'object' == typeof window &&
                      window &&
                      Object.getOwnPropertyNames
                        ? Object.getOwnPropertyNames(window)
                        : [];
                  e.exports.f = function (e) {
                    return s && 'Window' == r(e)
                      ? (function (e) {
                          try {
                            return o(e);
                          } catch (e) {
                            return a(s);
                          }
                        })(e)
                      : o(i(e));
                  };
                },
                (e, t, n) => {
                  var r = n(62),
                    i = n(65),
                    o = n(101),
                    a = Array,
                    s = Math.max;
                  e.exports = function (e, t, n) {
                    for (
                      var l = i(e),
                        c = r(t, l),
                        h = r(void 0 === n ? l : n, l),
                        u = a(s(h - c, 0)),
                        d = 0;
                      c < h;
                      c++, d++
                    )
                      o(u, d, e[c]);
                    return (u.length = d), u;
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(20),
                    i = n(46),
                    o = n(14);
                  e.exports = function (e, t, n) {
                    var a = r(t);
                    a in e ? i.f(e, a, o(0, n)) : (e[a] = n);
                  };
                },
                (e, t, n) => {
                  var r = n(10),
                    i = n(22),
                    o = n(18),
                    a = n(103),
                    s = Object.isExtensible,
                    l = r(function () {
                      s(1);
                    });
                  e.exports =
                    l || a
                      ? function (e) {
                          return (
                            !!i(e) &&
                            (!a || 'ArrayBuffer' != o(e)) &&
                            (!s || s(e))
                          );
                        }
                      : s;
                },
                (e, t, n) => {
                  var r = n(10);
                  e.exports = r(function () {
                    if ('function' == typeof ArrayBuffer) {
                      var e = new ArrayBuffer(8);
                      Object.isExtensible(e) &&
                        Object.defineProperty(e, 'a', { value: 8 });
                    }
                  });
                },
                (e, t, n) => {
                  var r = n(10);
                  e.exports = !r(function () {
                    return Object.isExtensible(Object.preventExtensions({}));
                  });
                },
                (e, t, n) => {
                  var r = n(106),
                    i = n(11),
                    o = n(48),
                    a = n(33),
                    s = n(107),
                    l = n(65),
                    c = n(26),
                    h = n(108),
                    u = n(109),
                    d = n(110),
                    p = TypeError,
                    f = function (e, t) {
                      (this.stopped = e), (this.result = t);
                    },
                    g = f.prototype;
                  e.exports = function (e, t, n) {
                    var m,
                      v,
                      b,
                      y,
                      _,
                      w,
                      S,
                      A = n && n.that,
                      x = !(!n || !n.AS_ENTRIES),
                      P = !(!n || !n.IS_RECORD),
                      E = !(!n || !n.IS_ITERATOR),
                      C = !(!n || !n.INTERRUPTED),
                      T = r(t, A),
                      k = function (e) {
                        return m && d(m, 'normal', e), new f(!0, e);
                      },
                      M = function (e) {
                        return x
                          ? (o(e), C ? T(e[0], e[1], k) : T(e[0], e[1]))
                          : C
                            ? T(e, k)
                            : T(e);
                      };
                    if (P) m = e.iterator;
                    else if (E) m = e;
                    else {
                      if (!(v = u(e))) throw p(a(e) + ' is not iterable');
                      if (s(v)) {
                        for (b = 0, y = l(e); y > b; b++)
                          if ((_ = M(e[b])) && c(g, _)) return _;
                        return new f(!1);
                      }
                      m = h(e, v);
                    }
                    for (w = P ? e.next : m.next; !(S = i(w, m)).done; ) {
                      try {
                        _ = M(S.value);
                      } catch (e) {
                        d(m, 'throw', e);
                      }
                      if ('object' == typeof _ && _ && c(g, _)) return _;
                    }
                    return new f(!1);
                  };
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(32),
                    o = n(12),
                    a = r(r.bind);
                  e.exports = function (e, t) {
                    return (
                      i(e),
                      void 0 === t
                        ? e
                        : o
                          ? a(e, t)
                          : function () {
                              return e.apply(t, arguments);
                            }
                    );
                  };
                },
                (e, t, n) => {
                  var r = n(35),
                    i = n(88),
                    o = r('iterator'),
                    a = Array.prototype;
                  e.exports = function (e) {
                    return void 0 !== e && (i.Array === e || a[o] === e);
                  };
                },
                (e, t, n) => {
                  var r = n(11),
                    i = n(32),
                    o = n(48),
                    a = n(33),
                    s = n(109),
                    l = TypeError;
                  e.exports = function (e, t) {
                    var n = arguments.length < 2 ? s(e) : t;
                    if (i(n)) return o(r(n, e));
                    throw l(a(e) + ' is not iterable');
                  };
                },
                (e, t, n) => {
                  var r = n(80),
                    i = n(31),
                    o = n(88),
                    a = n(35)('iterator');
                  e.exports = function (e) {
                    if (null != e)
                      return i(e, a) || i(e, '@@iterator') || o[r(e)];
                  };
                },
                (e, t, n) => {
                  var r = n(11),
                    i = n(48),
                    o = n(31);
                  e.exports = function (e, t, n) {
                    var a, s;
                    i(e);
                    try {
                      if (!(a = o(e, 'return'))) {
                        if ('throw' === t) throw n;
                        return n;
                      }
                      a = r(a, e);
                    } catch (e) {
                      (s = !0), (a = e);
                    }
                    if ('throw' === t) throw n;
                    if (s) throw a;
                    return i(a), n;
                  };
                },
                (e, t, n) => {
                  var r = n(26),
                    i = TypeError;
                  e.exports = function (e, t) {
                    if (r(t, e)) return e;
                    throw i('Incorrect invocation');
                  };
                },
                (e, t, n) => {
                  var r = n(35)('iterator'),
                    i = !1;
                  try {
                    var o = 0,
                      a = {
                        next: function () {
                          return { done: !!o++ };
                        },
                        return: function () {
                          i = !0;
                        },
                      };
                    (a[r] = function () {
                      return this;
                    }),
                      Array.from(a, function () {
                        throw 2;
                      });
                  } catch (e) {}
                  e.exports = function (e, t) {
                    if (!t && !i) return !1;
                    var n = !1;
                    try {
                      var o = {};
                      (o[r] = function () {
                        return {
                          next: function () {
                            return { done: (n = !0) };
                          },
                        };
                      }),
                        e(o);
                    } catch (e) {}
                    return n;
                  };
                },
                (e, t, n) => {
                  var r = n(23),
                    i = n(22),
                    o = n(84);
                  e.exports = function (e, t, n) {
                    var a, s;
                    return (
                      o &&
                        r((a = t.constructor)) &&
                        a !== n &&
                        i((s = a.prototype)) &&
                        s !== n.prototype &&
                        o(e, s),
                      e
                    );
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(46).f,
                    i = n(71),
                    o = n(115),
                    a = n(106),
                    s = n(111),
                    l = n(105),
                    c = n(89),
                    h = n(116),
                    u = n(9),
                    d = n(98).fastKey,
                    p = n(53),
                    f = p.set,
                    g = p.getterFor;
                  e.exports = {
                    getConstructor: function (e, t, n, c) {
                      var h = e(function (e, r) {
                          s(e, p),
                            f(e, {
                              type: t,
                              index: i(null),
                              first: void 0,
                              last: void 0,
                              size: 0,
                            }),
                            u || (e.size = 0),
                            null != r && l(r, e[c], { that: e, AS_ENTRIES: n });
                        }),
                        p = h.prototype,
                        m = g(t),
                        v = function (e, t, n) {
                          var r,
                            i,
                            o = m(e),
                            a = b(e, t);
                          return (
                            a
                              ? (a.value = n)
                              : ((o.last = a =
                                  {
                                    index: (i = d(t, !0)),
                                    key: t,
                                    value: n,
                                    previous: (r = o.last),
                                    next: void 0,
                                    removed: !1,
                                  }),
                                o.first || (o.first = a),
                                r && (r.next = a),
                                u ? o.size++ : e.size++,
                                'F' !== i && (o.index[i] = a)),
                            e
                          );
                        },
                        b = function (e, t) {
                          var n,
                            r = m(e),
                            i = d(t);
                          if ('F' !== i) return r.index[i];
                          for (n = r.first; n; n = n.next)
                            if (n.key == t) return n;
                        };
                      return (
                        o(p, {
                          clear: function () {
                            for (var e = m(this), t = e.index, n = e.first; n; )
                              (n.removed = !0),
                                n.previous &&
                                  (n.previous = n.previous.next = void 0),
                                delete t[n.index],
                                (n = n.next);
                            (e.first = e.last = void 0),
                              u ? (e.size = 0) : (this.size = 0);
                          },
                          delete: function (e) {
                            var t = this,
                              n = m(t),
                              r = b(t, e);
                            if (r) {
                              var i = r.next,
                                o = r.previous;
                              delete n.index[r.index],
                                (r.removed = !0),
                                o && (o.next = i),
                                i && (i.previous = o),
                                n.first == r && (n.first = i),
                                n.last == r && (n.last = o),
                                u ? n.size-- : t.size--;
                            }
                            return !!r;
                          },
                          forEach: function (e) {
                            for (
                              var t,
                                n = m(this),
                                r = a(
                                  e,
                                  arguments.length > 1 ? arguments[1] : void 0,
                                );
                              (t = t ? t.next : n.first);

                            )
                              for (r(t.value, t.key, this); t && t.removed; )
                                t = t.previous;
                          },
                          has: function (e) {
                            return !!b(this, e);
                          },
                        }),
                        o(
                          p,
                          n
                            ? {
                                get: function (e) {
                                  var t = b(this, e);
                                  return t && t.value;
                                },
                                set: function (e, t) {
                                  return v(this, 0 === e ? 0 : e, t);
                                },
                              }
                            : {
                                add: function (e) {
                                  return v(this, (e = 0 === e ? 0 : e), e);
                                },
                              },
                        ),
                        u &&
                          r(p, 'size', {
                            get: function () {
                              return m(this).size;
                            },
                          }),
                        h
                      );
                    },
                    setStrong: function (e, t, n) {
                      var r = t + ' Iterator',
                        i = g(t),
                        o = g(r);
                      c(
                        e,
                        t,
                        function (e, t) {
                          f(this, {
                            type: r,
                            target: e,
                            state: i(e),
                            kind: t,
                            last: void 0,
                          });
                        },
                        function () {
                          for (
                            var e = o(this), t = e.kind, n = e.last;
                            n && n.removed;

                          )
                            n = n.previous;
                          return e.target &&
                            (e.last = n = n ? n.next : e.state.first)
                            ? 'keys' == t
                              ? { value: n.key, done: !1 }
                              : 'values' == t
                                ? { value: n.value, done: !1 }
                                : { value: [n.key, n.value], done: !1 }
                            : ((e.target = void 0),
                              { value: void 0, done: !0 });
                        },
                        n ? 'entries' : 'values',
                        !n,
                        !0,
                      ),
                        h(t);
                    },
                  };
                },
                (e, t, n) => {
                  var r = n(49);
                  e.exports = function (e, t, n) {
                    for (var i in t) r(e, i, t[i], n);
                    return e;
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(25),
                    i = n(46),
                    o = n(35),
                    a = n(9),
                    s = o('species');
                  e.exports = function (e) {
                    var t = r(e),
                      n = i.f;
                    a &&
                      t &&
                      !t[s] &&
                      n(t, s, {
                        configurable: !0,
                        get: function () {
                          return this;
                        },
                      });
                  };
                },
                (e, t, n) => {
                  n(118);
                },
                (e, t, n) => {
                  'use strict';
                  n(97)(
                    'Set',
                    function (e) {
                      return function () {
                        return e(
                          this,
                          arguments.length ? arguments[0] : void 0,
                        );
                      };
                    },
                    n(114),
                  );
                },
                (e, t, n) => {
                  var r,
                    i = n(37),
                    o = n(6),
                    a = n(7),
                    s = n(25),
                    l = n(17),
                    c = n(10),
                    h = n(42),
                    u = n(23),
                    d = n(120),
                    p = n(22),
                    f = n(24),
                    g = n(105),
                    m = n(48),
                    v = n(80),
                    b = n(40),
                    y = n(101),
                    _ = n(45),
                    w = n(65),
                    S = n(121),
                    A = n(122),
                    x = n(124),
                    P = n(29),
                    E = n(125),
                    C = n(126),
                    T = n(127),
                    k = a.Object,
                    M = a.Date,
                    R = a.Error,
                    O = a.EvalError,
                    D = a.RangeError,
                    I = a.ReferenceError,
                    L = a.SyntaxError,
                    F = a.TypeError,
                    N = a.URIError,
                    j = a.PerformanceMark,
                    B = a.WebAssembly,
                    W = (B && B.CompileError) || R,
                    z = (B && B.LinkError) || R,
                    $ = (B && B.RuntimeError) || R,
                    U = s('DOMException'),
                    H = s('Set'),
                    V = s('Map'),
                    q = V.prototype,
                    G = l(q.has),
                    X = l(q.get),
                    Y = l(q.set),
                    K = l(H.prototype.add),
                    Z = s('Object', 'keys'),
                    Q = l([].push),
                    J = l((!0).valueOf),
                    ee = l((1).valueOf),
                    te = l(''.valueOf),
                    ne = l(M.prototype.getTime),
                    re = h('structuredClone'),
                    ie = 'DataCloneError',
                    oe = 'Transferring',
                    ae = function (e) {
                      return (
                        !c(function () {
                          var t = new a.Set([7]),
                            n = e(t),
                            r = e(k(7));
                          return (
                            n == t ||
                            !n.has(7) ||
                            'object' != typeof r ||
                            7 != r
                          );
                        }) && e
                      );
                    },
                    se = function (e, t) {
                      return !c(function () {
                        var n = new t(),
                          r = e({ a: n, b: n });
                        return !(
                          r &&
                          r.a === r.b &&
                          r.a instanceof t &&
                          r.a.stack === n.stack
                        );
                      });
                    },
                    le = a.structuredClone,
                    ce =
                      i ||
                      !se(le, R) ||
                      !se(le, U) ||
                      ((r = le),
                      !!c(function () {
                        var e = r(new a.AggregateError([1], re, { cause: 3 }));
                        return (
                          'AggregateError' != e.name ||
                          1 != e.errors[0] ||
                          e.message != re ||
                          3 != e.cause
                        );
                      })),
                    he =
                      !le &&
                      ae(function (e) {
                        return new j(re, { detail: e }).detail;
                      }),
                    ue = ae(le) || he,
                    de = function (e) {
                      throw new U('Uncloneable type: ' + e, ie);
                    },
                    pe = function (e, t) {
                      throw new U(
                        (t || 'Cloning') +
                          ' of ' +
                          e +
                          ' cannot be properly polyfilled in this engine',
                        ie,
                      );
                    },
                    fe = function (e, t) {
                      if ((f(e) && de('Symbol'), !p(e))) return e;
                      if (t) {
                        if (G(t, e)) return X(t, e);
                      } else t = new V();
                      var n,
                        r,
                        i,
                        o,
                        l,
                        c,
                        h,
                        g,
                        m,
                        S,
                        P = v(e),
                        E = !1;
                      switch (P) {
                        case 'Array':
                          (i = []), (E = !0);
                          break;
                        case 'Object':
                          (i = {}), (E = !0);
                          break;
                        case 'Map':
                          (i = new V()), (E = !0);
                          break;
                        case 'Set':
                          (i = new H()), (E = !0);
                          break;
                        case 'RegExp':
                          i = new RegExp(e.source, A(e));
                          break;
                        case 'Error':
                          switch ((r = e.name)) {
                            case 'AggregateError':
                              i = s('AggregateError')([]);
                              break;
                            case 'EvalError':
                              i = O();
                              break;
                            case 'RangeError':
                              i = D();
                              break;
                            case 'ReferenceError':
                              i = I();
                              break;
                            case 'SyntaxError':
                              i = L();
                              break;
                            case 'TypeError':
                              i = F();
                              break;
                            case 'URIError':
                              i = N();
                              break;
                            case 'CompileError':
                              i = W();
                              break;
                            case 'LinkError':
                              i = z();
                              break;
                            case 'RuntimeError':
                              i = $();
                              break;
                            default:
                              i = R();
                          }
                          E = !0;
                          break;
                        case 'DOMException':
                          (i = new U(e.message, e.name)), (E = !0);
                          break;
                        case 'DataView':
                        case 'Int8Array':
                        case 'Uint8Array':
                        case 'Uint8ClampedArray':
                        case 'Int16Array':
                        case 'Uint16Array':
                        case 'Int32Array':
                        case 'Uint32Array':
                        case 'Float32Array':
                        case 'Float64Array':
                        case 'BigInt64Array':
                        case 'BigUint64Array':
                          (n = a[P]),
                            p(n) || pe(P),
                            (i = new n(
                              fe(e.buffer, t),
                              e.byteOffset,
                              'DataView' === P ? e.byteLength : e.length,
                            ));
                          break;
                        case 'DOMQuad':
                          try {
                            i = new DOMQuad(
                              fe(e.p1, t),
                              fe(e.p2, t),
                              fe(e.p3, t),
                              fe(e.p4, t),
                            );
                          } catch (t) {
                            ue ? (i = ue(e)) : pe(P);
                          }
                          break;
                        case 'FileList':
                          if (((n = a.DataTransfer), d(n))) {
                            for (o = new n(), l = 0, c = w(e); l < c; l++)
                              o.items.add(fe(e[l], t));
                            i = o.files;
                          } else ue ? (i = ue(e)) : pe(P);
                          break;
                        case 'ImageData':
                          try {
                            i = new ImageData(
                              fe(e.data, t),
                              e.width,
                              e.height,
                              { colorSpace: e.colorSpace },
                            );
                          } catch (t) {
                            ue ? (i = ue(e)) : pe(P);
                          }
                          break;
                        default:
                          if (ue) i = ue(e);
                          else
                            switch (P) {
                              case 'BigInt':
                                i = k(e.valueOf());
                                break;
                              case 'Boolean':
                                i = k(J(e));
                                break;
                              case 'Number':
                                i = k(ee(e));
                                break;
                              case 'String':
                                i = k(te(e));
                                break;
                              case 'Date':
                                i = new M(ne(e));
                                break;
                              case 'ArrayBuffer':
                                (n = a.DataView) ||
                                  'function' == typeof e.slice ||
                                  pe(P);
                                try {
                                  if ('function' == typeof e.slice)
                                    i = e.slice(0);
                                  else
                                    for (
                                      c = e.byteLength,
                                        i = new ArrayBuffer(c),
                                        m = new n(e),
                                        S = new n(i),
                                        l = 0;
                                      l < c;
                                      l++
                                    )
                                      S.setUint8(l, m.getUint8(l));
                                } catch (e) {
                                  throw new U('ArrayBuffer is detached', ie);
                                }
                                break;
                              case 'SharedArrayBuffer':
                                i = e;
                                break;
                              case 'Blob':
                                try {
                                  i = e.slice(0, e.size, e.type);
                                } catch (e) {
                                  pe(P);
                                }
                                break;
                              case 'DOMPoint':
                              case 'DOMPointReadOnly':
                                n = a[P];
                                try {
                                  i = n.fromPoint
                                    ? n.fromPoint(e)
                                    : new n(e.x, e.y, e.z, e.w);
                                } catch (e) {
                                  pe(P);
                                }
                                break;
                              case 'DOMRect':
                              case 'DOMRectReadOnly':
                                n = a[P];
                                try {
                                  i = n.fromRect
                                    ? n.fromRect(e)
                                    : new n(e.x, e.y, e.width, e.height);
                                } catch (e) {
                                  pe(P);
                                }
                                break;
                              case 'DOMMatrix':
                              case 'DOMMatrixReadOnly':
                                n = a[P];
                                try {
                                  i = n.fromMatrix ? n.fromMatrix(e) : new n(e);
                                } catch (e) {
                                  pe(P);
                                }
                                break;
                              case 'AudioData':
                              case 'VideoFrame':
                                u(e.clone) || pe(P);
                                try {
                                  i = e.clone();
                                } catch (e) {
                                  de(P);
                                }
                                break;
                              case 'File':
                                try {
                                  i = new File([e], e.name, e);
                                } catch (e) {
                                  pe(P);
                                }
                                break;
                              case 'CryptoKey':
                              case 'GPUCompilationMessage':
                              case 'GPUCompilationInfo':
                              case 'ImageBitmap':
                              case 'RTCCertificate':
                              case 'WebAssembly.Module':
                                pe(P);
                              default:
                                de(P);
                            }
                      }
                      if ((Y(t, e, i), E))
                        switch (P) {
                          case 'Array':
                          case 'Object':
                            for (h = Z(e), l = 0, c = w(h); l < c; l++)
                              (g = h[l]), y(i, g, fe(e[g], t));
                            break;
                          case 'Map':
                            e.forEach(function (e, n) {
                              Y(i, fe(n, t), fe(e, t));
                            });
                            break;
                          case 'Set':
                            e.forEach(function (e) {
                              K(i, fe(e, t));
                            });
                            break;
                          case 'Error':
                            _(i, 'message', fe(e.message, t)),
                              b(e, 'cause') && _(i, 'cause', fe(e.cause, t)),
                              'AggregateError' == r &&
                                (i.errors = fe(e.errors, t));
                          case 'DOMException':
                            x && _(i, 'stack', fe(e.stack, t));
                        }
                      return i;
                    },
                    ge =
                      le &&
                      !c(function () {
                        if ((C && P > 92) || (T && P > 94) || (E && P > 97))
                          return !1;
                        var e = new ArrayBuffer(8),
                          t = le(e, { transfer: [e] });
                        return 0 != e.byteLength || 8 != t.byteLength;
                      });
                  o(
                    { global: !0, enumerable: !0, sham: !ge, forced: ce },
                    {
                      structuredClone: function (e) {
                        var t,
                          n =
                            S(arguments.length, 1) > 1 && null != arguments[1]
                              ? m(arguments[1])
                              : void 0,
                          r = n ? n.transfer : void 0;
                        return (
                          void 0 !== r &&
                            (function (e, t) {
                              if (!p(e))
                                throw F(
                                  'Transfer option cannot be converted to a sequence',
                                );
                              var n = [];
                              g(e, function (e) {
                                Q(n, m(e));
                              });
                              var r,
                                i,
                                o,
                                s,
                                l,
                                c,
                                h = 0,
                                f = w(n);
                              if (ge)
                                for (s = le(n, { transfer: n }); h < f; )
                                  Y(t, n[h], s[h++]);
                              else
                                for (; h < f; ) {
                                  if (((r = n[h++]), G(t, r)))
                                    throw new U('Duplicate transferable', ie);
                                  switch ((i = v(r))) {
                                    case 'ImageBitmap':
                                      (o = a.OffscreenCanvas),
                                        d(o) || pe(i, oe);
                                      try {
                                        (c = new o(r.width, r.height))
                                          .getContext('bitmaprenderer')
                                          .transferFromImageBitmap(r),
                                          (l = c.transferToImageBitmap());
                                      } catch (e) {}
                                      break;
                                    case 'AudioData':
                                    case 'VideoFrame':
                                      (u(r.clone) && u(r.close)) || pe(i, oe);
                                      try {
                                        (l = r.clone()), r.close();
                                      } catch (e) {}
                                      break;
                                    case 'ArrayBuffer':
                                    case 'MessagePort':
                                    case 'OffscreenCanvas':
                                    case 'ReadableStream':
                                    case 'TransformStream':
                                    case 'WritableStream':
                                      pe(i, oe);
                                  }
                                  if (void 0 === l)
                                    throw new U(
                                      'This object cannot be transferred: ' + i,
                                      ie,
                                    );
                                  Y(t, r, l);
                                }
                            })(r, (t = new V())),
                          fe(e, t)
                        );
                      },
                    },
                  );
                },
                (e, t, n) => {
                  var r = n(17),
                    i = n(10),
                    o = n(23),
                    a = n(80),
                    s = n(25),
                    l = n(52),
                    c = function () {},
                    h = [],
                    u = s('Reflect', 'construct'),
                    d = /^\s*(?:class|function)\b/,
                    p = r(d.exec),
                    f = !d.exec(c),
                    g = function (e) {
                      if (!o(e)) return !1;
                      try {
                        return u(c, h, e), !0;
                      } catch (e) {
                        return !1;
                      }
                    },
                    m = function (e) {
                      if (!o(e)) return !1;
                      switch (a(e)) {
                        case 'AsyncFunction':
                        case 'GeneratorFunction':
                        case 'AsyncGeneratorFunction':
                          return !1;
                      }
                      try {
                        return f || !!p(d, l(e));
                      } catch (e) {
                        return !0;
                      }
                    };
                  (m.sham = !0),
                    (e.exports =
                      !u ||
                      i(function () {
                        var e;
                        return (
                          g(g.call) ||
                          !g(Object) ||
                          !g(function () {
                            e = !0;
                          }) ||
                          e
                        );
                      })
                        ? m
                        : g);
                },
                (e) => {
                  var t = TypeError;
                  e.exports = function (e, n) {
                    if (e < n) throw t('Not enough arguments');
                    return e;
                  };
                },
                (e, t, n) => {
                  var r = n(11),
                    i = n(40),
                    o = n(26),
                    a = n(123),
                    s = RegExp.prototype;
                  e.exports = function (e) {
                    var t = e.flags;
                    return void 0 !== t ||
                      'flags' in s ||
                      i(e, 'flags') ||
                      !o(s, e)
                      ? t
                      : r(a, e);
                  };
                },
                (e, t, n) => {
                  'use strict';
                  var r = n(48);
                  e.exports = function () {
                    var e = r(this),
                      t = '';
                    return (
                      e.hasIndices && (t += 'd'),
                      e.global && (t += 'g'),
                      e.ignoreCase && (t += 'i'),
                      e.multiline && (t += 'm'),
                      e.dotAll && (t += 's'),
                      e.unicode && (t += 'u'),
                      e.unicodeSets && (t += 'v'),
                      e.sticky && (t += 'y'),
                      t
                    );
                  };
                },
                (e, t, n) => {
                  var r = n(10),
                    i = n(14);
                  e.exports = !r(function () {
                    var e = Error('a');
                    return (
                      !('stack' in e) ||
                      (Object.defineProperty(e, 'stack', i(1, 7)),
                      7 !== e.stack)
                    );
                  });
                },
                (e, t, n) => {
                  var r = n(126),
                    i = n(127);
                  e.exports =
                    !r &&
                    !i &&
                    'object' == typeof window &&
                    'object' == typeof document;
                },
                (e) => {
                  e.exports =
                    'object' == typeof Deno &&
                    Deno &&
                    'object' == typeof Deno.version;
                },
                (e, t, n) => {
                  var r = n(18),
                    i = n(7);
                  e.exports = 'process' == r(i.process);
                },
                (e, t, n) => {
                  var r = n(7);
                  e.exports = r;
                },
                (__unused_webpack_module, exports, __w_pdfjs_require__) => {
                  'use strict';
                  Object.defineProperty(exports, '__esModule', { value: !0 }),
                    (exports.build =
                      exports.RenderTask =
                      exports.PDFWorkerUtil =
                      exports.PDFWorker =
                      exports.PDFPageProxy =
                      exports.PDFDocumentProxy =
                      exports.PDFDocumentLoadingTask =
                      exports.PDFDataRangeTransport =
                      exports.LoopbackPort =
                      exports.DefaultStandardFontDataFactory =
                      exports.DefaultCanvasFactory =
                      exports.DefaultCMapReaderFactory =
                        void 0),
                    (exports.getDocument = getDocument),
                    (exports.setPDFNetworkStreamFactory =
                      setPDFNetworkStreamFactory),
                    (exports.version = void 0);
                  var _util = __w_pdfjs_require__(1),
                    _annotation_storage = __w_pdfjs_require__(130),
                    _display_utils = __w_pdfjs_require__(133),
                    _font_loader = __w_pdfjs_require__(136),
                    _canvas = __w_pdfjs_require__(137),
                    _worker_options = __w_pdfjs_require__(140),
                    _is_node = __w_pdfjs_require__(3),
                    _message_handler = __w_pdfjs_require__(141),
                    _metadata = __w_pdfjs_require__(142),
                    _optional_content_config = __w_pdfjs_require__(143),
                    _transport_stream = __w_pdfjs_require__(144),
                    _xfa_text = __w_pdfjs_require__(145);
                  function _classPrivateMethodInitSpec(e, t) {
                    _checkPrivateRedeclaration(e, t), t.add(e);
                  }
                  function _classPrivateMethodGet(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function _classPrivateFieldInitSpec(e, t, n) {
                    _checkPrivateRedeclaration(e, t), t.set(e, n);
                  }
                  function _checkPrivateRedeclaration(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function _classPrivateFieldSet(e, t, n) {
                    return (
                      _classApplyDescriptorSet(
                        e,
                        _classExtractFieldDescriptor(e, t, 'set'),
                        n,
                      ),
                      n
                    );
                  }
                  function _classPrivateFieldGet(e, t) {
                    return _classApplyDescriptorGet(
                      e,
                      _classExtractFieldDescriptor(e, t, 'get'),
                    );
                  }
                  function _classExtractFieldDescriptor(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  function _classStaticPrivateFieldSpecSet(e, t, n, r) {
                    return (
                      _classCheckPrivateStaticAccess(e, t),
                      _classCheckPrivateStaticFieldDescriptor(n, 'set'),
                      _classApplyDescriptorSet(e, n, r),
                      r
                    );
                  }
                  function _classApplyDescriptorSet(e, t, n) {
                    if (t.set) t.set.call(e, n);
                    else {
                      if (!t.writable)
                        throw new TypeError(
                          'attempted to set read only private field',
                        );
                      t.value = n;
                    }
                  }
                  function _classStaticPrivateFieldSpecGet(e, t, n) {
                    return (
                      _classCheckPrivateStaticAccess(e, t),
                      _classCheckPrivateStaticFieldDescriptor(n, 'get'),
                      _classApplyDescriptorGet(e, n)
                    );
                  }
                  function _classCheckPrivateStaticFieldDescriptor(e, t) {
                    if (void 0 === e)
                      throw new TypeError(
                        'attempted to ' +
                          t +
                          ' private static field before its declaration',
                      );
                  }
                  function _classCheckPrivateStaticAccess(e, t) {
                    if (e !== t)
                      throw new TypeError(
                        'Private static access of wrong provenance',
                      );
                  }
                  function _classApplyDescriptorGet(e, t) {
                    return t.get ? t.get.call(e) : t.value;
                  }
                  const DEFAULT_RANGE_CHUNK_SIZE = 65536,
                    RENDERING_CANCELLED_TIMEOUT = 100;
                  let DefaultCanvasFactory = _display_utils.DOMCanvasFactory;
                  exports.DefaultCanvasFactory = DefaultCanvasFactory;
                  let DefaultCMapReaderFactory =
                    _display_utils.DOMCMapReaderFactory;
                  exports.DefaultCMapReaderFactory = DefaultCMapReaderFactory;
                  let DefaultStandardFontDataFactory =
                      _display_utils.DOMStandardFontDataFactory,
                    createPDFNetworkStream;
                  if (
                    ((exports.DefaultStandardFontDataFactory =
                      DefaultStandardFontDataFactory),
                    _is_node.isNodeJS)
                  ) {
                    const {
                      NodeCanvasFactory: e,
                      NodeCMapReaderFactory: t,
                      NodeStandardFontDataFactory: n,
                    } = __w_pdfjs_require__(146);
                    (exports.DefaultCanvasFactory = DefaultCanvasFactory = e),
                      (exports.DefaultCMapReaderFactory =
                        DefaultCMapReaderFactory =
                          t),
                      (exports.DefaultStandardFontDataFactory =
                        DefaultStandardFontDataFactory =
                          n);
                  }
                  function setPDFNetworkStreamFactory(e) {
                    createPDFNetworkStream = e;
                  }
                  function getDocument(e) {
                    const t = new PDFDocumentLoadingTask();
                    let n;
                    if ('string' == typeof e || e instanceof URL)
                      n = { url: e };
                    else if ((0, _util.isArrayBuffer)(e)) n = { data: e };
                    else if (e instanceof PDFDataRangeTransport)
                      n = { range: e };
                    else {
                      if ('object' != typeof e)
                        throw new Error(
                          'Invalid parameter in getDocument, need either string, URL, TypedArray, or parameter object.',
                        );
                      if (!e.url && !e.data && !e.range)
                        throw new Error(
                          'Invalid parameter object: need either .data, .range or .url',
                        );
                      n = e;
                    }
                    const r = Object.create(null);
                    let i = null,
                      o = null;
                    for (const e in n) {
                      const t = n[e];
                      switch (e) {
                        case 'url':
                          if ('undefined' != typeof window)
                            try {
                              r[e] = new URL(t, window.location).href;
                              continue;
                            } catch (e) {
                              (0, _util.warn)(
                                `Cannot create valid URL: "${e}".`,
                              );
                            }
                          else if ('string' == typeof t || t instanceof URL) {
                            r[e] = t.toString();
                            continue;
                          }
                          throw new Error(
                            'Invalid PDF url data: either string or URL-object is expected in the url property.',
                          );
                        case 'range':
                          i = t;
                          continue;
                        case 'worker':
                          o = t;
                          continue;
                        case 'data':
                          if (
                            _is_node.isNodeJS &&
                            void 0 !== Buffer &&
                            t instanceof Buffer
                          )
                            r[e] = new Uint8Array(t);
                          else {
                            if (t instanceof Uint8Array) break;
                            if ('string' == typeof t)
                              r[e] = (0, _util.stringToBytes)(t);
                            else if (
                              'object' != typeof t ||
                              null === t ||
                              isNaN(t.length)
                            ) {
                              if (!(0, _util.isArrayBuffer)(t))
                                throw new Error(
                                  'Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.',
                                );
                              r[e] = new Uint8Array(t);
                            } else r[e] = new Uint8Array(t);
                          }
                          continue;
                      }
                      r[e] = t;
                    }
                    if (
                      ((r.CMapReaderFactory =
                        r.CMapReaderFactory || DefaultCMapReaderFactory),
                      (r.StandardFontDataFactory =
                        r.StandardFontDataFactory ||
                        DefaultStandardFontDataFactory),
                      (r.ignoreErrors = !0 !== r.stopAtErrors),
                      (r.fontExtraProperties = !0 === r.fontExtraProperties),
                      (r.pdfBug = !0 === r.pdfBug),
                      (r.enableXfa = !0 === r.enableXfa),
                      (!Number.isInteger(r.rangeChunkSize) ||
                        r.rangeChunkSize < 1) &&
                        (r.rangeChunkSize = DEFAULT_RANGE_CHUNK_SIZE),
                      ('string' != typeof r.docBaseUrl ||
                        (0, _display_utils.isDataScheme)(r.docBaseUrl)) &&
                        (r.docBaseUrl = null),
                      (!Number.isInteger(r.maxImageSize) ||
                        r.maxImageSize < -1) &&
                        (r.maxImageSize = -1),
                      'string' != typeof r.cMapUrl && (r.cMapUrl = null),
                      'string' != typeof r.standardFontDataUrl &&
                        (r.standardFontDataUrl = null),
                      'boolean' != typeof r.useWorkerFetch &&
                        (r.useWorkerFetch =
                          r.CMapReaderFactory ===
                            _display_utils.DOMCMapReaderFactory &&
                          r.StandardFontDataFactory ===
                            _display_utils.DOMStandardFontDataFactory),
                      'boolean' != typeof r.isEvalSupported &&
                        (r.isEvalSupported = !0),
                      'boolean' != typeof r.disableFontFace &&
                        (r.disableFontFace = _is_node.isNodeJS),
                      'boolean' != typeof r.useSystemFonts &&
                        (r.useSystemFonts =
                          !_is_node.isNodeJS && !r.disableFontFace),
                      ('object' == typeof r.ownerDocument &&
                        null !== r.ownerDocument) ||
                        (r.ownerDocument = globalThis.document),
                      'boolean' != typeof r.disableRange &&
                        (r.disableRange = !1),
                      'boolean' != typeof r.disableStream &&
                        (r.disableStream = !1),
                      'boolean' != typeof r.disableAutoFetch &&
                        (r.disableAutoFetch = !1),
                      (0, _util.setVerbosityLevel)(r.verbosity),
                      !o)
                    ) {
                      const e = {
                        verbosity: r.verbosity,
                        port: _worker_options.GlobalWorkerOptions.workerPort,
                      };
                      (o = e.port ? PDFWorker.fromPort(e) : new PDFWorker(e)),
                        (t._worker = o);
                    }
                    const a = t.docId;
                    return (
                      o.promise
                        .then(function () {
                          if (t.destroyed) throw new Error('Loading aborted');
                          const e = _fetchDocument(o, r, i, a),
                            n = new Promise(function (e) {
                              let t;
                              i
                                ? (t =
                                    new _transport_stream.PDFDataTransportStream(
                                      {
                                        length: r.length,
                                        initialData: r.initialData,
                                        progressiveDone: r.progressiveDone,
                                        contentDispositionFilename:
                                          r.contentDispositionFilename,
                                        disableRange: r.disableRange,
                                        disableStream: r.disableStream,
                                      },
                                      i,
                                    ))
                                : r.data ||
                                  (t = createPDFNetworkStream({
                                    url: r.url,
                                    length: r.length,
                                    httpHeaders: r.httpHeaders,
                                    withCredentials: r.withCredentials,
                                    rangeChunkSize: r.rangeChunkSize,
                                    disableRange: r.disableRange,
                                    disableStream: r.disableStream,
                                  })),
                                e(t);
                            });
                          return Promise.all([e, n]).then(function (e) {
                            let [n, i] = e;
                            if (t.destroyed) throw new Error('Loading aborted');
                            const s = new _message_handler.MessageHandler(
                                a,
                                n,
                                o.port,
                              ),
                              l = new WorkerTransport(s, t, i, r);
                            (t._transport = l), s.send('Ready', null);
                          });
                        })
                        .catch(t._capability.reject),
                      t
                    );
                  }
                  async function _fetchDocument(e, t, n, r) {
                    if (e.destroyed) throw new Error('Worker was destroyed');
                    n &&
                      ((t.length = n.length),
                      (t.initialData = n.initialData),
                      (t.progressiveDone = n.progressiveDone),
                      (t.contentDispositionFilename =
                        n.contentDispositionFilename));
                    const i = await e.messageHandler.sendWithPromise(
                      'GetDocRequest',
                      {
                        docId: r,
                        apiVersion: '2.16.105',
                        source: {
                          data: t.data,
                          url: t.url,
                          password: t.password,
                          disableAutoFetch: t.disableAutoFetch,
                          rangeChunkSize: t.rangeChunkSize,
                          length: t.length,
                        },
                        maxImageSize: t.maxImageSize,
                        disableFontFace: t.disableFontFace,
                        docBaseUrl: t.docBaseUrl,
                        ignoreErrors: t.ignoreErrors,
                        isEvalSupported: t.isEvalSupported,
                        fontExtraProperties: t.fontExtraProperties,
                        enableXfa: t.enableXfa,
                        useSystemFonts: t.useSystemFonts,
                        cMapUrl: t.useWorkerFetch ? t.cMapUrl : null,
                        standardFontDataUrl: t.useWorkerFetch
                          ? t.standardFontDataUrl
                          : null,
                      },
                    );
                    if ((t.data && (t.data = null), e.destroyed))
                      throw new Error('Worker was destroyed');
                    return i;
                  }
                  class PDFDocumentLoadingTask {
                    constructor() {
                      var e, t;
                      (this._capability = (0, _util.createPromiseCapability)()),
                        (this._transport = null),
                        (this._worker = null),
                        (this.docId = `d${(_classStaticPrivateFieldSpecSet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId, ((e = _classStaticPrivateFieldSpecGet(PDFDocumentLoadingTask, PDFDocumentLoadingTask, _docId)), (t = e++), e)), t)}`),
                        (this.destroyed = !1),
                        (this.onPassword = null),
                        (this.onProgress = null),
                        (this.onUnsupportedFeature = null);
                    }
                    get promise() {
                      return this._capability.promise;
                    }
                    async destroy() {
                      var e;
                      (this.destroyed = !0),
                        await (null === (e = this._transport) || void 0 === e
                          ? void 0
                          : e.destroy()),
                        (this._transport = null),
                        this._worker &&
                          (this._worker.destroy(), (this._worker = null));
                    }
                  }
                  exports.PDFDocumentLoadingTask = PDFDocumentLoadingTask;
                  var _docId = { writable: !0, value: 0 };
                  class PDFDataRangeTransport {
                    constructor(e, t) {
                      let n =
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2],
                        r =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : null;
                      (this.length = e),
                        (this.initialData = t),
                        (this.progressiveDone = n),
                        (this.contentDispositionFilename = r),
                        (this._rangeListeners = []),
                        (this._progressListeners = []),
                        (this._progressiveReadListeners = []),
                        (this._progressiveDoneListeners = []),
                        (this._readyCapability = (0,
                        _util.createPromiseCapability)());
                    }
                    addRangeListener(e) {
                      this._rangeListeners.push(e);
                    }
                    addProgressListener(e) {
                      this._progressListeners.push(e);
                    }
                    addProgressiveReadListener(e) {
                      this._progressiveReadListeners.push(e);
                    }
                    addProgressiveDoneListener(e) {
                      this._progressiveDoneListeners.push(e);
                    }
                    onDataRange(e, t) {
                      for (const n of this._rangeListeners) n(e, t);
                    }
                    onDataProgress(e, t) {
                      this._readyCapability.promise.then(() => {
                        for (const n of this._progressListeners) n(e, t);
                      });
                    }
                    onDataProgressiveRead(e) {
                      this._readyCapability.promise.then(() => {
                        for (const t of this._progressiveReadListeners) t(e);
                      });
                    }
                    onDataProgressiveDone() {
                      this._readyCapability.promise.then(() => {
                        for (const e of this._progressiveDoneListeners) e();
                      });
                    }
                    transportReady() {
                      this._readyCapability.resolve();
                    }
                    requestDataRange(e, t) {
                      (0, _util.unreachable)(
                        'Abstract method PDFDataRangeTransport.requestDataRange',
                      );
                    }
                    abort() {}
                  }
                  exports.PDFDataRangeTransport = PDFDataRangeTransport;
                  class PDFDocumentProxy {
                    constructor(e, t) {
                      (this._pdfInfo = e),
                        (this._transport = t),
                        Object.defineProperty(this, 'fingerprint', {
                          get() {
                            return (
                              (0, _display_utils.deprecated)(
                                '`PDFDocumentProxy.fingerprint`, please use `PDFDocumentProxy.fingerprints` instead.',
                              ),
                              this.fingerprints[0]
                            );
                          },
                        }),
                        Object.defineProperty(this, 'getStats', {
                          value: async () => (
                            (0, _display_utils.deprecated)(
                              '`PDFDocumentProxy.getStats`, please use the `PDFDocumentProxy.stats`-getter instead.',
                            ),
                            this.stats || { streamTypes: {}, fontTypes: {} }
                          ),
                        });
                    }
                    get annotationStorage() {
                      return this._transport.annotationStorage;
                    }
                    get numPages() {
                      return this._pdfInfo.numPages;
                    }
                    get fingerprints() {
                      return this._pdfInfo.fingerprints;
                    }
                    get stats() {
                      return this._transport.stats;
                    }
                    get isPureXfa() {
                      return !!this._transport._htmlForXfa;
                    }
                    get allXfaHtml() {
                      return this._transport._htmlForXfa;
                    }
                    getPage(e) {
                      return this._transport.getPage(e);
                    }
                    getPageIndex(e) {
                      return this._transport.getPageIndex(e);
                    }
                    getDestinations() {
                      return this._transport.getDestinations();
                    }
                    getDestination(e) {
                      return this._transport.getDestination(e);
                    }
                    getPageLabels() {
                      return this._transport.getPageLabels();
                    }
                    getPageLayout() {
                      return this._transport.getPageLayout();
                    }
                    getPageMode() {
                      return this._transport.getPageMode();
                    }
                    getViewerPreferences() {
                      return this._transport.getViewerPreferences();
                    }
                    getOpenAction() {
                      return this._transport.getOpenAction();
                    }
                    getAttachments() {
                      return this._transport.getAttachments();
                    }
                    getJavaScript() {
                      return this._transport.getJavaScript();
                    }
                    getJSActions() {
                      return this._transport.getDocJSActions();
                    }
                    getOutline() {
                      return this._transport.getOutline();
                    }
                    getOptionalContentConfig() {
                      return this._transport.getOptionalContentConfig();
                    }
                    getPermissions() {
                      return this._transport.getPermissions();
                    }
                    getMetadata() {
                      return this._transport.getMetadata();
                    }
                    getMarkInfo() {
                      return this._transport.getMarkInfo();
                    }
                    getData() {
                      return this._transport.getData();
                    }
                    getDownloadInfo() {
                      return this._transport.downloadInfoCapability.promise;
                    }
                    cleanup() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      return this._transport.startCleanup(e || this.isPureXfa);
                    }
                    destroy() {
                      return this.loadingTask.destroy();
                    }
                    get loadingParams() {
                      return this._transport.loadingParams;
                    }
                    get loadingTask() {
                      return this._transport.loadingTask;
                    }
                    saveDocument() {
                      return (
                        this._transport.annotationStorage.size <= 0 &&
                          (0, _display_utils.deprecated)(
                            'saveDocument called while `annotationStorage` is empty, please use the getData-method instead.',
                          ),
                        this._transport.saveDocument()
                      );
                    }
                    getFieldObjects() {
                      return this._transport.getFieldObjects();
                    }
                    hasJSActions() {
                      return this._transport.hasJSActions();
                    }
                    getCalculationOrderIds() {
                      return this._transport.getCalculationOrderIds();
                    }
                  }
                  exports.PDFDocumentProxy = PDFDocumentProxy;
                  class PDFPageProxy {
                    constructor(e, t, n, r) {
                      let i =
                        arguments.length > 4 &&
                        void 0 !== arguments[4] &&
                        arguments[4];
                      (this._pageIndex = e),
                        (this._pageInfo = t),
                        (this._ownerDocument = r),
                        (this._transport = n),
                        (this._stats = i
                          ? new _display_utils.StatTimer()
                          : null),
                        (this._pdfBug = i),
                        (this.commonObjs = n.commonObjs),
                        (this.objs = new PDFObjects()),
                        (this._bitmaps = new Set()),
                        (this.cleanupAfterRender = !1),
                        (this.pendingCleanup = !1),
                        (this._intentStates = new Map()),
                        (this._annotationPromises = new Map()),
                        (this.destroyed = !1);
                    }
                    get pageNumber() {
                      return this._pageIndex + 1;
                    }
                    get rotate() {
                      return this._pageInfo.rotate;
                    }
                    get ref() {
                      return this._pageInfo.ref;
                    }
                    get userUnit() {
                      return this._pageInfo.userUnit;
                    }
                    get view() {
                      return this._pageInfo.view;
                    }
                    getViewport() {
                      let {
                        scale: e,
                        rotation: t = this.rotate,
                        offsetX: n = 0,
                        offsetY: r = 0,
                        dontFlip: i = !1,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      return new _display_utils.PageViewport({
                        viewBox: this.view,
                        scale: e,
                        rotation: t,
                        offsetX: n,
                        offsetY: r,
                        dontFlip: i,
                      });
                    }
                    getAnnotations() {
                      let { intent: e = 'display' } =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {};
                      const t = this._transport.getRenderingIntent(e);
                      let n = this._annotationPromises.get(t.cacheKey);
                      return (
                        n ||
                          ((n = this._transport.getAnnotations(
                            this._pageIndex,
                            t.renderingIntent,
                          )),
                          this._annotationPromises.set(t.cacheKey, n),
                          (n = n.then((e) => {
                            for (const t of e)
                              void 0 !== t.titleObj &&
                                Object.defineProperty(t, 'title', {
                                  get() {
                                    return (
                                      (0, _display_utils.deprecated)(
                                        '`title`-property on annotation, please use `titleObj` instead.',
                                      ),
                                      t.titleObj.str
                                    );
                                  },
                                }),
                                void 0 !== t.contentsObj &&
                                  Object.defineProperty(t, 'contents', {
                                    get() {
                                      return (
                                        (0, _display_utils.deprecated)(
                                          '`contents`-property on annotation, please use `contentsObj` instead.',
                                        ),
                                        t.contentsObj.str
                                      );
                                    },
                                  });
                            return e;
                          }))),
                        n
                      );
                    }
                    getJSActions() {
                      return (
                        this._jsActionsPromise ||
                        (this._jsActionsPromise =
                          this._transport.getPageJSActions(this._pageIndex))
                      );
                    }
                    async getXfa() {
                      var e;
                      return (
                        (null === (e = this._transport._htmlForXfa) ||
                        void 0 === e
                          ? void 0
                          : e.children[this._pageIndex]) || null
                      );
                    }
                    render(e) {
                      var t, n, r;
                      let {
                        canvasContext: i,
                        viewport: o,
                        intent: a = 'display',
                        annotationMode: s = _util.AnnotationMode.ENABLE,
                        transform: l = null,
                        imageLayer: c = null,
                        canvasFactory: h = null,
                        background: u = null,
                        optionalContentConfigPromise: d = null,
                        annotationCanvasMap: p = null,
                        pageColors: f = null,
                        printAnnotationStorage: g = null,
                      } = e;
                      void 0 !==
                        (null === (t = arguments[0]) || void 0 === t
                          ? void 0
                          : t.renderInteractiveForms) &&
                        ((0, _display_utils.deprecated)(
                          'render no longer accepts the `renderInteractiveForms`-option, please use the `annotationMode`-option instead.',
                        ),
                        !0 === arguments[0].renderInteractiveForms &&
                          s === _util.AnnotationMode.ENABLE &&
                          (s = _util.AnnotationMode.ENABLE_FORMS)),
                        void 0 !==
                          (null === (n = arguments[0]) || void 0 === n
                            ? void 0
                            : n.includeAnnotationStorage) &&
                          ((0, _display_utils.deprecated)(
                            'render no longer accepts the `includeAnnotationStorage`-option, please use the `annotationMode`-option instead.',
                          ),
                          !0 === arguments[0].includeAnnotationStorage &&
                            s === _util.AnnotationMode.ENABLE &&
                            (s = _util.AnnotationMode.ENABLE_STORAGE)),
                        this._stats && this._stats.time('Overall');
                      const m = this._transport.getRenderingIntent(a, s, g);
                      (this.pendingCleanup = !1),
                        d || (d = this._transport.getOptionalContentConfig());
                      let v = this._intentStates.get(m.cacheKey);
                      v ||
                        ((v = Object.create(null)),
                        this._intentStates.set(m.cacheKey, v)),
                        v.streamReaderCancelTimeout &&
                          (clearTimeout(v.streamReaderCancelTimeout),
                          (v.streamReaderCancelTimeout = null));
                      const b =
                          h ||
                          new DefaultCanvasFactory({
                            ownerDocument: this._ownerDocument,
                          }),
                        y = !!(
                          m.renderingIntent & _util.RenderingIntentFlag.PRINT
                        );
                      v.displayReadyCapability ||
                        ((v.displayReadyCapability = (0,
                        _util.createPromiseCapability)()),
                        (v.operatorList = {
                          fnArray: [],
                          argsArray: [],
                          lastChunk: !1,
                          separateAnnots: null,
                        }),
                        this._stats && this._stats.time('Page Request'),
                        this._pumpOperatorList(m));
                      const _ = (e) => {
                          v.renderTasks.delete(w),
                            (this.cleanupAfterRender || y) &&
                              (this.pendingCleanup = !0),
                            this._tryCleanup(),
                            e
                              ? (w.capability.reject(e),
                                this._abortOperatorList({
                                  intentState: v,
                                  reason: e instanceof Error ? e : new Error(e),
                                }))
                              : w.capability.resolve(),
                            this._stats &&
                              (this._stats.timeEnd('Rendering'),
                              this._stats.timeEnd('Overall'));
                        },
                        w = new InternalRenderTask({
                          callback: _,
                          params: {
                            canvasContext: i,
                            viewport: o,
                            transform: l,
                            imageLayer: c,
                            background: u,
                          },
                          objs: this.objs,
                          commonObjs: this.commonObjs,
                          annotationCanvasMap: p,
                          operatorList: v.operatorList,
                          pageIndex: this._pageIndex,
                          canvasFactory: b,
                          useRequestAnimationFrame: !y,
                          pdfBug: this._pdfBug,
                          pageColors: f,
                        });
                      ((r = v).renderTasks || (r.renderTasks = new Set())).add(
                        w,
                      );
                      const S = w.task;
                      return (
                        Promise.all([v.displayReadyCapability.promise, d])
                          .then((e) => {
                            let [t, n] = e;
                            this.pendingCleanup
                              ? _()
                              : (this._stats && this._stats.time('Rendering'),
                                w.initializeGraphics({
                                  transparency: t,
                                  optionalContentConfig: n,
                                }),
                                w.operatorListChanged());
                          })
                          .catch(_),
                        S
                      );
                    }
                    getOperatorList() {
                      let {
                        intent: e = 'display',
                        annotationMode: t = _util.AnnotationMode.ENABLE,
                        printAnnotationStorage: n = null,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      const r = this._transport.getRenderingIntent(e, t, n, !0);
                      let i,
                        o = this._intentStates.get(r.cacheKey);
                      var a;
                      return (
                        o ||
                          ((o = Object.create(null)),
                          this._intentStates.set(r.cacheKey, o)),
                        o.opListReadCapability ||
                          ((i = Object.create(null)),
                          (i.operatorListChanged = function () {
                            o.operatorList.lastChunk &&
                              (o.opListReadCapability.resolve(o.operatorList),
                              o.renderTasks.delete(i));
                          }),
                          (o.opListReadCapability = (0,
                          _util.createPromiseCapability)()),
                          (
                            (a = o).renderTasks || (a.renderTasks = new Set())
                          ).add(i),
                          (o.operatorList = {
                            fnArray: [],
                            argsArray: [],
                            lastChunk: !1,
                            separateAnnots: null,
                          }),
                          this._stats && this._stats.time('Page Request'),
                          this._pumpOperatorList(r)),
                        o.opListReadCapability.promise
                      );
                    }
                    streamTextContent() {
                      let {
                        disableCombineTextItems: e = !1,
                        includeMarkedContent: t = !1,
                      } =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {};
                      return this._transport.messageHandler.sendWithStream(
                        'GetTextContent',
                        {
                          pageIndex: this._pageIndex,
                          combineTextItems: !0 !== e,
                          includeMarkedContent: !0 === t,
                        },
                        {
                          highWaterMark: 100,
                          size(e) {
                            return e.items.length;
                          },
                        },
                      );
                    }
                    getTextContent() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {};
                      if (this._transport._htmlForXfa)
                        return this.getXfa().then((e) =>
                          _xfa_text.XfaText.textContent(e),
                        );
                      const t = this.streamTextContent(e);
                      return new Promise(function (e, n) {
                        const r = t.getReader(),
                          i = { items: [], styles: Object.create(null) };
                        !(function t() {
                          r.read().then(function (n) {
                            let { value: r, done: o } = n;
                            o
                              ? e(i)
                              : (Object.assign(i.styles, r.styles),
                                i.items.push(...r.items),
                                t());
                          }, n);
                        })();
                      });
                    }
                    getStructTree() {
                      return (
                        this._structTreePromise ||
                        (this._structTreePromise =
                          this._transport.getStructTree(this._pageIndex))
                      );
                    }
                    _destroy() {
                      this.destroyed = !0;
                      const e = [];
                      for (const t of this._intentStates.values())
                        if (
                          (this._abortOperatorList({
                            intentState: t,
                            reason: new Error('Page was destroyed.'),
                            force: !0,
                          }),
                          !t.opListReadCapability)
                        )
                          for (const n of t.renderTasks)
                            e.push(n.completed), n.cancel();
                      this.objs.clear();
                      for (const e of this._bitmaps) e.close();
                      return (
                        this._bitmaps.clear(),
                        this._annotationPromises.clear(),
                        (this._jsActionsPromise = null),
                        (this._structTreePromise = null),
                        (this.pendingCleanup = !1),
                        Promise.all(e)
                      );
                    }
                    cleanup() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      return (this.pendingCleanup = !0), this._tryCleanup(e);
                    }
                    _tryCleanup() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (!this.pendingCleanup) return !1;
                      for (const {
                        renderTasks: e,
                        operatorList: t,
                      } of this._intentStates.values())
                        if (e.size > 0 || !t.lastChunk) return !1;
                      this._intentStates.clear(),
                        this.objs.clear(),
                        this._annotationPromises.clear(),
                        (this._jsActionsPromise = null),
                        (this._structTreePromise = null),
                        e &&
                          this._stats &&
                          (this._stats = new _display_utils.StatTimer());
                      for (const e of this._bitmaps) e.close();
                      return (
                        this._bitmaps.clear(), (this.pendingCleanup = !1), !0
                      );
                    }
                    _startRenderPage(e, t) {
                      const n = this._intentStates.get(t);
                      n &&
                        (this._stats && this._stats.timeEnd('Page Request'),
                        n.displayReadyCapability &&
                          n.displayReadyCapability.resolve(e));
                    }
                    _renderPageChunk(e, t) {
                      for (let n = 0, r = e.length; n < r; n++)
                        t.operatorList.fnArray.push(e.fnArray[n]),
                          t.operatorList.argsArray.push(e.argsArray[n]);
                      (t.operatorList.lastChunk = e.lastChunk),
                        (t.operatorList.separateAnnots = e.separateAnnots);
                      for (const e of t.renderTasks) e.operatorListChanged();
                      e.lastChunk && this._tryCleanup();
                    }
                    _pumpOperatorList(e) {
                      let {
                        renderingIntent: t,
                        cacheKey: n,
                        annotationStorageMap: r,
                      } = e;
                      const i = this._transport.messageHandler
                          .sendWithStream('GetOperatorList', {
                            pageIndex: this._pageIndex,
                            intent: t,
                            cacheKey: n,
                            annotationStorage: r,
                          })
                          .getReader(),
                        o = this._intentStates.get(n);
                      o.streamReader = i;
                      const a = () => {
                        i.read().then(
                          (e) => {
                            let { value: t, done: n } = e;
                            n
                              ? (o.streamReader = null)
                              : this._transport.destroyed ||
                                (this._renderPageChunk(t, o), a());
                          },
                          (e) => {
                            if (
                              ((o.streamReader = null),
                              !this._transport.destroyed)
                            ) {
                              if (o.operatorList) {
                                o.operatorList.lastChunk = !0;
                                for (const e of o.renderTasks)
                                  e.operatorListChanged();
                                this._tryCleanup();
                              }
                              if (o.displayReadyCapability)
                                o.displayReadyCapability.reject(e);
                              else {
                                if (!o.opListReadCapability) throw e;
                                o.opListReadCapability.reject(e);
                              }
                            }
                          },
                        );
                      };
                      a();
                    }
                    _abortOperatorList(e) {
                      let { intentState: t, reason: n, force: r = !1 } = e;
                      if (t.streamReader) {
                        if (!r) {
                          if (t.renderTasks.size > 0) return;
                          if (
                            n instanceof
                            _display_utils.RenderingCancelledException
                          )
                            return void (t.streamReaderCancelTimeout =
                              setTimeout(() => {
                                this._abortOperatorList({
                                  intentState: t,
                                  reason: n,
                                  force: !0,
                                }),
                                  (t.streamReaderCancelTimeout = null);
                              }, RENDERING_CANCELLED_TIMEOUT));
                        }
                        if (
                          (t.streamReader
                            .cancel(new _util.AbortException(n.message))
                            .catch(() => {}),
                          (t.streamReader = null),
                          !this._transport.destroyed)
                        ) {
                          for (const [e, n] of this._intentStates)
                            if (n === t) {
                              this._intentStates.delete(e);
                              break;
                            }
                          this.cleanup();
                        }
                      }
                    }
                    get stats() {
                      return this._stats;
                    }
                  }
                  exports.PDFPageProxy = PDFPageProxy;
                  class LoopbackPort {
                    constructor() {
                      (this._listeners = []),
                        (this._deferred = Promise.resolve());
                    }
                    postMessage(e, t) {
                      const n = { data: structuredClone(e, t) };
                      this._deferred.then(() => {
                        for (const e of this._listeners) e.call(this, n);
                      });
                    }
                    addEventListener(e, t) {
                      this._listeners.push(t);
                    }
                    removeEventListener(e, t) {
                      const n = this._listeners.indexOf(t);
                      this._listeners.splice(n, 1);
                    }
                    terminate() {
                      this._listeners.length = 0;
                    }
                  }
                  exports.LoopbackPort = LoopbackPort;
                  const PDFWorkerUtil = {
                    isWorkerDisabled: !1,
                    fallbackWorkerSrc: null,
                    fakeWorkerId: 0,
                  };
                  if (
                    ((exports.PDFWorkerUtil = PDFWorkerUtil), _is_node.isNodeJS)
                  )
                    (PDFWorkerUtil.isWorkerDisabled = !0),
                      (PDFWorkerUtil.fallbackWorkerSrc = './pdf.worker.js');
                  else if ('object' == typeof document) {
                    var _document, _document$currentScri;
                    const e =
                      null === (_document = document) ||
                      void 0 === _document ||
                      null ===
                        (_document$currentScri = _document.currentScript) ||
                      void 0 === _document$currentScri
                        ? void 0
                        : _document$currentScri.src;
                    e &&
                      (PDFWorkerUtil.fallbackWorkerSrc = e.replace(
                        /(\.(?:min\.)?js)(\?.*)?$/i,
                        '.worker$1$2',
                      ));
                  }
                  (PDFWorkerUtil.isSameOrigin = function (e, t) {
                    let n;
                    try {
                      if (((n = new URL(e)), !n.origin || 'null' === n.origin))
                        return !1;
                    } catch (e) {
                      return !1;
                    }
                    const r = new URL(t, n);
                    return n.origin === r.origin;
                  }),
                    (PDFWorkerUtil.createCDNWrapper = function (e) {
                      const t = `importScripts("${e}");`;
                      return URL.createObjectURL(new Blob([t]));
                    });
                  class PDFWorker {
                    constructor() {
                      let {
                        name: e = null,
                        port: t = null,
                        verbosity: n = (0, _util.getVerbosityLevel)(),
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      if (
                        t &&
                        _classStaticPrivateFieldSpecGet(
                          PDFWorker,
                          PDFWorker,
                          _workerPorts,
                        ).has(t)
                      )
                        throw new Error(
                          'Cannot use more than one PDFWorker per port.',
                        );
                      if (
                        ((this.name = e),
                        (this.destroyed = !1),
                        (this.verbosity = n),
                        (this._readyCapability = (0,
                        _util.createPromiseCapability)()),
                        (this._port = null),
                        (this._webWorker = null),
                        (this._messageHandler = null),
                        t)
                      )
                        return (
                          _classStaticPrivateFieldSpecGet(
                            PDFWorker,
                            PDFWorker,
                            _workerPorts,
                          ).set(t, this),
                          void this._initializeFromPort(t)
                        );
                      this._initialize();
                    }
                    get promise() {
                      return this._readyCapability.promise;
                    }
                    get port() {
                      return this._port;
                    }
                    get messageHandler() {
                      return this._messageHandler;
                    }
                    _initializeFromPort(e) {
                      (this._port = e),
                        (this._messageHandler =
                          new _message_handler.MessageHandler(
                            'main',
                            'worker',
                            e,
                          )),
                        this._messageHandler.on('ready', function () {}),
                        this._readyCapability.resolve();
                    }
                    _initialize() {
                      if (
                        !PDFWorkerUtil.isWorkerDisabled &&
                        !PDFWorker._mainThreadWorkerMessageHandler
                      ) {
                        let { workerSrc: e } = PDFWorker;
                        try {
                          PDFWorkerUtil.isSameOrigin(window.location.href, e) ||
                            (e = PDFWorkerUtil.createCDNWrapper(
                              new URL(e, window.location).href,
                            ));
                          const t = new Worker(e),
                            n = new _message_handler.MessageHandler(
                              'main',
                              'worker',
                              t,
                            ),
                            r = () => {
                              t.removeEventListener('error', i),
                                n.destroy(),
                                t.terminate(),
                                this.destroyed
                                  ? this._readyCapability.reject(
                                      new Error('Worker was destroyed'),
                                    )
                                  : this._setupFakeWorker();
                            },
                            i = () => {
                              this._webWorker || r();
                            };
                          t.addEventListener('error', i),
                            n.on('test', (e) => {
                              t.removeEventListener('error', i),
                                this.destroyed
                                  ? r()
                                  : e
                                    ? ((this._messageHandler = n),
                                      (this._port = t),
                                      (this._webWorker = t),
                                      this._readyCapability.resolve(),
                                      n.send('configure', {
                                        verbosity: this.verbosity,
                                      }))
                                    : (this._setupFakeWorker(),
                                      n.destroy(),
                                      t.terminate());
                            }),
                            n.on('ready', (e) => {
                              if (
                                (t.removeEventListener('error', i),
                                this.destroyed)
                              )
                                r();
                              else
                                try {
                                  o();
                                } catch (e) {
                                  this._setupFakeWorker();
                                }
                            });
                          const o = () => {
                            const e = new Uint8Array();
                            n.send('test', e, [e.buffer]);
                          };
                          return void o();
                        } catch (e) {
                          (0, _util.info)('The worker has been disabled.');
                        }
                      }
                      this._setupFakeWorker();
                    }
                    _setupFakeWorker() {
                      PDFWorkerUtil.isWorkerDisabled ||
                        ((0, _util.warn)('Setting up fake worker.'),
                        (PDFWorkerUtil.isWorkerDisabled = !0)),
                        PDFWorker._setupFakeWorkerGlobal
                          .then((e) => {
                            if (this.destroyed)
                              return void this._readyCapability.reject(
                                new Error('Worker was destroyed'),
                              );
                            const t = new LoopbackPort();
                            this._port = t;
                            const n = 'fake' + PDFWorkerUtil.fakeWorkerId++,
                              r = new _message_handler.MessageHandler(
                                n + '_worker',
                                n,
                                t,
                              );
                            e.setup(r, t);
                            const i = new _message_handler.MessageHandler(
                              n,
                              n + '_worker',
                              t,
                            );
                            (this._messageHandler = i),
                              this._readyCapability.resolve(),
                              i.send('configure', {
                                verbosity: this.verbosity,
                              });
                          })
                          .catch((e) => {
                            this._readyCapability.reject(
                              new Error(
                                `Setting up fake worker failed: "${e.message}".`,
                              ),
                            );
                          });
                    }
                    destroy() {
                      (this.destroyed = !0),
                        this._webWorker &&
                          (this._webWorker.terminate(),
                          (this._webWorker = null)),
                        _classStaticPrivateFieldSpecGet(
                          PDFWorker,
                          PDFWorker,
                          _workerPorts,
                        ).delete(this._port),
                        (this._port = null),
                        this._messageHandler &&
                          (this._messageHandler.destroy(),
                          (this._messageHandler = null));
                    }
                    static fromPort(e) {
                      if (null == e || !e.port)
                        throw new Error(
                          'PDFWorker.fromPort - invalid method signature.',
                        );
                      return _classStaticPrivateFieldSpecGet(
                        this,
                        PDFWorker,
                        _workerPorts,
                      ).has(e.port)
                        ? _classStaticPrivateFieldSpecGet(
                            this,
                            PDFWorker,
                            _workerPorts,
                          ).get(e.port)
                        : new PDFWorker(e);
                    }
                    static get workerSrc() {
                      if (_worker_options.GlobalWorkerOptions.workerSrc)
                        return _worker_options.GlobalWorkerOptions.workerSrc;
                      if (null !== PDFWorkerUtil.fallbackWorkerSrc)
                        return (
                          _is_node.isNodeJS ||
                            (0, _display_utils.deprecated)(
                              'No "GlobalWorkerOptions.workerSrc" specified.',
                            ),
                          PDFWorkerUtil.fallbackWorkerSrc
                        );
                      throw new Error(
                        'No "GlobalWorkerOptions.workerSrc" specified.',
                      );
                    }
                    static get _mainThreadWorkerMessageHandler() {
                      try {
                        var e;
                        return (
                          (null === (e = globalThis.pdfjsWorker) || void 0 === e
                            ? void 0
                            : e.WorkerMessageHandler) || null
                        );
                      } catch (e) {
                        return null;
                      }
                    }
                    static get _setupFakeWorkerGlobal() {
                      const loader = async () => {
                        const mainWorkerMessageHandler =
                          this._mainThreadWorkerMessageHandler;
                        if (mainWorkerMessageHandler)
                          return mainWorkerMessageHandler;
                        if (_is_node.isNodeJS) {
                          const worker = eval('require')(this.workerSrc);
                          return worker.WorkerMessageHandler;
                        }
                        return (
                          await (0, _display_utils.loadScript)(this.workerSrc),
                          window.pdfjsWorker.WorkerMessageHandler
                        );
                      };
                      return (0, _util.shadow)(
                        this,
                        '_setupFakeWorkerGlobal',
                        loader(),
                      );
                    }
                  }
                  exports.PDFWorker = PDFWorker;
                  var _workerPorts = { writable: !0, value: new WeakMap() };
                  PDFWorker.getWorkerSrc = function () {
                    return (
                      (0, _display_utils.deprecated)(
                        '`PDFWorker.getWorkerSrc()`, please use `PDFWorker.workerSrc` instead.',
                      ),
                      this.workerSrc
                    );
                  };
                  var _docStats = new WeakMap(),
                    _pageCache = new WeakMap(),
                    _pagePromises = new WeakMap(),
                    _metadataPromise = new WeakMap();
                  class WorkerTransport {
                    constructor(e, t, n, r) {
                      _classPrivateFieldInitSpec(this, _docStats, {
                        writable: !0,
                        value: null,
                      }),
                        _classPrivateFieldInitSpec(this, _pageCache, {
                          writable: !0,
                          value: new Map(),
                        }),
                        _classPrivateFieldInitSpec(this, _pagePromises, {
                          writable: !0,
                          value: new Map(),
                        }),
                        _classPrivateFieldInitSpec(this, _metadataPromise, {
                          writable: !0,
                          value: null,
                        }),
                        (this.messageHandler = e),
                        (this.loadingTask = t),
                        (this.commonObjs = new PDFObjects()),
                        (this.fontLoader = new _font_loader.FontLoader({
                          docId: t.docId,
                          onUnsupportedFeature:
                            this._onUnsupportedFeature.bind(this),
                          ownerDocument: r.ownerDocument,
                          styleElement: r.styleElement,
                        })),
                        (this._params = r),
                        r.useWorkerFetch ||
                          ((this.CMapReaderFactory = new r.CMapReaderFactory({
                            baseUrl: r.cMapUrl,
                            isCompressed: r.cMapPacked,
                          })),
                          (this.StandardFontDataFactory =
                            new r.StandardFontDataFactory({
                              baseUrl: r.standardFontDataUrl,
                            }))),
                        (this.destroyed = !1),
                        (this.destroyCapability = null),
                        (this._passwordCapability = null),
                        (this._networkStream = n),
                        (this._fullReader = null),
                        (this._lastProgress = null),
                        (this.downloadInfoCapability = (0,
                        _util.createPromiseCapability)()),
                        this.setupMessageHandler();
                    }
                    get annotationStorage() {
                      return (0, _util.shadow)(
                        this,
                        'annotationStorage',
                        new _annotation_storage.AnnotationStorage(),
                      );
                    }
                    get stats() {
                      return _classPrivateFieldGet(this, _docStats);
                    }
                    getRenderingIntent(e) {
                      let t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : _util.AnnotationMode.ENABLE,
                        n =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : null,
                        r =
                          arguments.length > 3 &&
                          void 0 !== arguments[3] &&
                          arguments[3],
                        i = _util.RenderingIntentFlag.DISPLAY,
                        o = null;
                      switch (e) {
                        case 'any':
                          i = _util.RenderingIntentFlag.ANY;
                          break;
                        case 'display':
                          break;
                        case 'print':
                          i = _util.RenderingIntentFlag.PRINT;
                          break;
                        default:
                          (0, _util.warn)(
                            `getRenderingIntent - invalid intent: ${e}`,
                          );
                      }
                      switch (t) {
                        case _util.AnnotationMode.DISABLE:
                          i += _util.RenderingIntentFlag.ANNOTATIONS_DISABLE;
                          break;
                        case _util.AnnotationMode.ENABLE:
                          break;
                        case _util.AnnotationMode.ENABLE_FORMS:
                          i += _util.RenderingIntentFlag.ANNOTATIONS_FORMS;
                          break;
                        case _util.AnnotationMode.ENABLE_STORAGE:
                          (i += _util.RenderingIntentFlag.ANNOTATIONS_STORAGE),
                            (o = (
                              i & _util.RenderingIntentFlag.PRINT &&
                              n instanceof
                                _annotation_storage.PrintAnnotationStorage
                                ? n
                                : this.annotationStorage
                            ).serializable);
                          break;
                        default:
                          (0, _util.warn)(
                            `getRenderingIntent - invalid annotationMode: ${t}`,
                          );
                      }
                      return (
                        r && (i += _util.RenderingIntentFlag.OPLIST),
                        {
                          renderingIntent: i,
                          cacheKey: `${i}_${_annotation_storage.AnnotationStorage.getHash(o)}`,
                          annotationStorageMap: o,
                        }
                      );
                    }
                    destroy() {
                      if (this.destroyCapability)
                        return this.destroyCapability.promise;
                      (this.destroyed = !0),
                        (this.destroyCapability = (0,
                        _util.createPromiseCapability)()),
                        this._passwordCapability &&
                          this._passwordCapability.reject(
                            new Error(
                              'Worker was destroyed during onPassword callback',
                            ),
                          );
                      const e = [];
                      for (const t of _classPrivateFieldGet(
                        this,
                        _pageCache,
                      ).values())
                        e.push(t._destroy());
                      _classPrivateFieldGet(this, _pageCache).clear(),
                        _classPrivateFieldGet(this, _pagePromises).clear(),
                        this.hasOwnProperty('annotationStorage') &&
                          this.annotationStorage.resetModified();
                      const t = this.messageHandler.sendWithPromise(
                        'Terminate',
                        null,
                      );
                      return (
                        e.push(t),
                        Promise.all(e).then(() => {
                          this.commonObjs.clear(),
                            this.fontLoader.clear(),
                            _classPrivateFieldSet(this, _metadataPromise, null),
                            (this._getFieldObjectsPromise = null),
                            (this._hasJSActionsPromise = null),
                            this._networkStream &&
                              this._networkStream.cancelAllRequests(
                                new _util.AbortException(
                                  'Worker was terminated.',
                                ),
                              ),
                            this.messageHandler &&
                              (this.messageHandler.destroy(),
                              (this.messageHandler = null)),
                            this.destroyCapability.resolve();
                        }, this.destroyCapability.reject),
                        this.destroyCapability.promise
                      );
                    }
                    setupMessageHandler() {
                      const { messageHandler: e, loadingTask: t } = this;
                      e.on('GetReader', (e, t) => {
                        (0, _util.assert)(
                          this._networkStream,
                          'GetReader - no `IPDFStream` instance available.',
                        ),
                          (this._fullReader =
                            this._networkStream.getFullReader()),
                          (this._fullReader.onProgress = (e) => {
                            this._lastProgress = {
                              loaded: e.loaded,
                              total: e.total,
                            };
                          }),
                          (t.onPull = () => {
                            this._fullReader
                              .read()
                              .then(function (e) {
                                let { value: n, done: r } = e;
                                r
                                  ? t.close()
                                  : ((0, _util.assert)(
                                      (0, _util.isArrayBuffer)(n),
                                      'GetReader - expected an ArrayBuffer.',
                                    ),
                                    t.enqueue(new Uint8Array(n), 1, [n]));
                              })
                              .catch((e) => {
                                t.error(e);
                              });
                          }),
                          (t.onCancel = (e) => {
                            this._fullReader.cancel(e),
                              t.ready.catch((e) => {
                                if (!this.destroyed) throw e;
                              });
                          });
                      }),
                        e.on('ReaderHeadersReady', (e) => {
                          const n = (0, _util.createPromiseCapability)(),
                            r = this._fullReader;
                          return (
                            r.headersReady.then(() => {
                              var e;
                              (r.isStreamingSupported && r.isRangeSupported) ||
                                (this._lastProgress &&
                                  (null === (e = t.onProgress) ||
                                    void 0 === e ||
                                    e.call(t, this._lastProgress)),
                                (r.onProgress = (e) => {
                                  var n;
                                  null === (n = t.onProgress) ||
                                    void 0 === n ||
                                    n.call(t, {
                                      loaded: e.loaded,
                                      total: e.total,
                                    });
                                }));
                              n.resolve({
                                isStreamingSupported: r.isStreamingSupported,
                                isRangeSupported: r.isRangeSupported,
                                contentLength: r.contentLength,
                              });
                            }, n.reject),
                            n.promise
                          );
                        }),
                        e.on('GetRangeReader', (e, t) => {
                          (0, _util.assert)(
                            this._networkStream,
                            'GetRangeReader - no `IPDFStream` instance available.',
                          );
                          const n = this._networkStream.getRangeReader(
                            e.begin,
                            e.end,
                          );
                          n
                            ? ((t.onPull = () => {
                                n.read()
                                  .then(function (e) {
                                    let { value: n, done: r } = e;
                                    r
                                      ? t.close()
                                      : ((0, _util.assert)(
                                          (0, _util.isArrayBuffer)(n),
                                          'GetRangeReader - expected an ArrayBuffer.',
                                        ),
                                        t.enqueue(new Uint8Array(n), 1, [n]));
                                  })
                                  .catch((e) => {
                                    t.error(e);
                                  });
                              }),
                              (t.onCancel = (e) => {
                                n.cancel(e),
                                  t.ready.catch((e) => {
                                    if (!this.destroyed) throw e;
                                  });
                              }))
                            : t.close();
                        }),
                        e.on('GetDoc', (e) => {
                          let { pdfInfo: n } = e;
                          (this._numPages = n.numPages),
                            (this._htmlForXfa = n.htmlForXfa),
                            delete n.htmlForXfa,
                            t._capability.resolve(
                              new PDFDocumentProxy(n, this),
                            );
                        }),
                        e.on('DocException', function (e) {
                          let n;
                          switch (e.name) {
                            case 'PasswordException':
                              n = new _util.PasswordException(
                                e.message,
                                e.code,
                              );
                              break;
                            case 'InvalidPDFException':
                              n = new _util.InvalidPDFException(e.message);
                              break;
                            case 'MissingPDFException':
                              n = new _util.MissingPDFException(e.message);
                              break;
                            case 'UnexpectedResponseException':
                              n = new _util.UnexpectedResponseException(
                                e.message,
                                e.status,
                              );
                              break;
                            case 'UnknownErrorException':
                              n = new _util.UnknownErrorException(
                                e.message,
                                e.details,
                              );
                              break;
                            default:
                              (0, _util.unreachable)(
                                'DocException - expected a valid Error.',
                              );
                          }
                          t._capability.reject(n);
                        }),
                        e.on('PasswordRequest', (e) => {
                          if (
                            ((this._passwordCapability = (0,
                            _util.createPromiseCapability)()),
                            t.onPassword)
                          ) {
                            const n = (e) => {
                              e instanceof Error
                                ? this._passwordCapability.reject(e)
                                : this._passwordCapability.resolve({
                                    password: e,
                                  });
                            };
                            try {
                              t.onPassword(n, e.code);
                            } catch (e) {
                              this._passwordCapability.reject(e);
                            }
                          } else
                            this._passwordCapability.reject(
                              new _util.PasswordException(e.message, e.code),
                            );
                          return this._passwordCapability.promise;
                        }),
                        e.on('DataLoaded', (e) => {
                          var n;
                          null === (n = t.onProgress) ||
                            void 0 === n ||
                            n.call(t, { loaded: e.length, total: e.length }),
                            this.downloadInfoCapability.resolve(e);
                        }),
                        e.on('StartRenderPage', (e) => {
                          this.destroyed ||
                            _classPrivateFieldGet(this, _pageCache)
                              .get(e.pageIndex)
                              ._startRenderPage(e.transparency, e.cacheKey);
                        }),
                        e.on('commonobj', (t) => {
                          var n;
                          let [r, i, o] = t;
                          if (!this.destroyed && !this.commonObjs.has(r))
                            switch (i) {
                              case 'Font':
                                const t = this._params;
                                if ('error' in o) {
                                  const e = o.error;
                                  (0, _util.warn)(
                                    `Error during font loading: ${e}`,
                                  ),
                                    this.commonObjs.resolve(r, e);
                                  break;
                                }
                                let a = null;
                                t.pdfBug &&
                                  null !== (n = globalThis.FontInspector) &&
                                  void 0 !== n &&
                                  n.enabled &&
                                  (a = {
                                    registerFont(e, t) {
                                      globalThis.FontInspector.fontAdded(e, t);
                                    },
                                  });
                                const s = new _font_loader.FontFaceObject(o, {
                                  isEvalSupported: t.isEvalSupported,
                                  disableFontFace: t.disableFontFace,
                                  ignoreErrors: t.ignoreErrors,
                                  onUnsupportedFeature:
                                    this._onUnsupportedFeature.bind(this),
                                  fontRegistry: a,
                                });
                                this.fontLoader
                                  .bind(s)
                                  .catch((t) =>
                                    e.sendWithPromise('FontFallback', {
                                      id: r,
                                    }),
                                  )
                                  .finally(() => {
                                    !t.fontExtraProperties &&
                                      s.data &&
                                      (s.data = null),
                                      this.commonObjs.resolve(r, s);
                                  });
                                break;
                              case 'FontPath':
                              case 'Image':
                                this.commonObjs.resolve(r, o);
                                break;
                              default:
                                throw new Error(
                                  `Got unknown common object type ${i}`,
                                );
                            }
                        }),
                        e.on('obj', (e) => {
                          let [t, n, r, i] = e;
                          if (this.destroyed) return;
                          const o = _classPrivateFieldGet(this, _pageCache).get(
                            n,
                          );
                          if (!o.objs.has(t))
                            switch (r) {
                              case 'Image':
                                o.objs.resolve(t, i);
                                const e = 8e6;
                                if (i) {
                                  let t;
                                  if (i.bitmap) {
                                    const {
                                      bitmap: e,
                                      width: n,
                                      height: r,
                                    } = i;
                                    (t = n * r * 4), o._bitmaps.add(e);
                                  } else {
                                    var a;
                                    t =
                                      (null === (a = i.data) || void 0 === a
                                        ? void 0
                                        : a.length) || 0;
                                  }
                                  t > e && (o.cleanupAfterRender = !0);
                                }
                                break;
                              case 'Pattern':
                                o.objs.resolve(t, i);
                                break;
                              default:
                                throw new Error(`Got unknown object type ${r}`);
                            }
                        }),
                        e.on('DocProgress', (e) => {
                          var n;
                          this.destroyed ||
                            null === (n = t.onProgress) ||
                            void 0 === n ||
                            n.call(t, { loaded: e.loaded, total: e.total });
                        }),
                        e.on('DocStats', (e) => {
                          this.destroyed ||
                            _classPrivateFieldSet(
                              this,
                              _docStats,
                              Object.freeze({
                                streamTypes: Object.freeze(e.streamTypes),
                                fontTypes: Object.freeze(e.fontTypes),
                              }),
                            );
                        }),
                        e.on(
                          'UnsupportedFeature',
                          this._onUnsupportedFeature.bind(this),
                        ),
                        e.on('FetchBuiltInCMap', (e) =>
                          this.destroyed
                            ? Promise.reject(new Error('Worker was destroyed.'))
                            : this.CMapReaderFactory
                              ? this.CMapReaderFactory.fetch(e)
                              : Promise.reject(
                                  new Error(
                                    'CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.',
                                  ),
                                ),
                        ),
                        e.on('FetchStandardFontData', (e) =>
                          this.destroyed
                            ? Promise.reject(new Error('Worker was destroyed.'))
                            : this.StandardFontDataFactory
                              ? this.StandardFontDataFactory.fetch(e)
                              : Promise.reject(
                                  new Error(
                                    'StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.',
                                  ),
                                ),
                        );
                    }
                    _onUnsupportedFeature(e) {
                      var t, n;
                      let { featureId: r } = e;
                      this.destroyed ||
                        null ===
                          (t = (n = this.loadingTask).onUnsupportedFeature) ||
                        void 0 === t ||
                        t.call(n, r);
                    }
                    getData() {
                      return this.messageHandler.sendWithPromise(
                        'GetData',
                        null,
                      );
                    }
                    getPage(e) {
                      if (!Number.isInteger(e) || e <= 0 || e > this._numPages)
                        return Promise.reject(
                          new Error('Invalid page request.'),
                        );
                      const t = e - 1,
                        n = _classPrivateFieldGet(this, _pagePromises).get(t);
                      if (n) return n;
                      const r = this.messageHandler
                        .sendWithPromise('GetPage', { pageIndex: t })
                        .then((e) => {
                          if (this.destroyed)
                            throw new Error('Transport destroyed');
                          const n = new PDFPageProxy(
                            t,
                            e,
                            this,
                            this._params.ownerDocument,
                            this._params.pdfBug,
                          );
                          return (
                            _classPrivateFieldGet(this, _pageCache).set(t, n), n
                          );
                        });
                      return (
                        _classPrivateFieldGet(this, _pagePromises).set(t, r), r
                      );
                    }
                    getPageIndex(e) {
                      return 'object' != typeof e ||
                        null === e ||
                        !Number.isInteger(e.num) ||
                        e.num < 0 ||
                        !Number.isInteger(e.gen) ||
                        e.gen < 0
                        ? Promise.reject(
                            new Error('Invalid pageIndex request.'),
                          )
                        : this.messageHandler.sendWithPromise('GetPageIndex', {
                            num: e.num,
                            gen: e.gen,
                          });
                    }
                    getAnnotations(e, t) {
                      return this.messageHandler.sendWithPromise(
                        'GetAnnotations',
                        { pageIndex: e, intent: t },
                      );
                    }
                    saveDocument() {
                      var e, t;
                      return this.messageHandler
                        .sendWithPromise('SaveDocument', {
                          isPureXfa: !!this._htmlForXfa,
                          numPages: this._numPages,
                          annotationStorage:
                            this.annotationStorage.serializable,
                          filename:
                            null !==
                              (e =
                                null === (t = this._fullReader) || void 0 === t
                                  ? void 0
                                  : t.filename) && void 0 !== e
                              ? e
                              : null,
                        })
                        .finally(() => {
                          this.annotationStorage.resetModified();
                        });
                    }
                    getFieldObjects() {
                      return (
                        this._getFieldObjectsPromise ||
                        (this._getFieldObjectsPromise =
                          this.messageHandler.sendWithPromise(
                            'GetFieldObjects',
                            null,
                          ))
                      );
                    }
                    hasJSActions() {
                      return (
                        this._hasJSActionsPromise ||
                        (this._hasJSActionsPromise =
                          this.messageHandler.sendWithPromise(
                            'HasJSActions',
                            null,
                          ))
                      );
                    }
                    getCalculationOrderIds() {
                      return this.messageHandler.sendWithPromise(
                        'GetCalculationOrderIds',
                        null,
                      );
                    }
                    getDestinations() {
                      return this.messageHandler.sendWithPromise(
                        'GetDestinations',
                        null,
                      );
                    }
                    getDestination(e) {
                      return 'string' != typeof e
                        ? Promise.reject(
                            new Error('Invalid destination request.'),
                          )
                        : this.messageHandler.sendWithPromise(
                            'GetDestination',
                            { id: e },
                          );
                    }
                    getPageLabels() {
                      return this.messageHandler.sendWithPromise(
                        'GetPageLabels',
                        null,
                      );
                    }
                    getPageLayout() {
                      return this.messageHandler.sendWithPromise(
                        'GetPageLayout',
                        null,
                      );
                    }
                    getPageMode() {
                      return this.messageHandler.sendWithPromise(
                        'GetPageMode',
                        null,
                      );
                    }
                    getViewerPreferences() {
                      return this.messageHandler.sendWithPromise(
                        'GetViewerPreferences',
                        null,
                      );
                    }
                    getOpenAction() {
                      return this.messageHandler.sendWithPromise(
                        'GetOpenAction',
                        null,
                      );
                    }
                    getAttachments() {
                      return this.messageHandler.sendWithPromise(
                        'GetAttachments',
                        null,
                      );
                    }
                    getJavaScript() {
                      return this.messageHandler.sendWithPromise(
                        'GetJavaScript',
                        null,
                      );
                    }
                    getDocJSActions() {
                      return this.messageHandler.sendWithPromise(
                        'GetDocJSActions',
                        null,
                      );
                    }
                    getPageJSActions(e) {
                      return this.messageHandler.sendWithPromise(
                        'GetPageJSActions',
                        { pageIndex: e },
                      );
                    }
                    getStructTree(e) {
                      return this.messageHandler.sendWithPromise(
                        'GetStructTree',
                        { pageIndex: e },
                      );
                    }
                    getOutline() {
                      return this.messageHandler.sendWithPromise(
                        'GetOutline',
                        null,
                      );
                    }
                    getOptionalContentConfig() {
                      return this.messageHandler
                        .sendWithPromise('GetOptionalContentConfig', null)
                        .then(
                          (e) =>
                            new _optional_content_config.OptionalContentConfig(
                              e,
                            ),
                        );
                    }
                    getPermissions() {
                      return this.messageHandler.sendWithPromise(
                        'GetPermissions',
                        null,
                      );
                    }
                    getMetadata() {
                      return (
                        _classPrivateFieldGet(this, _metadataPromise) ||
                        _classPrivateFieldSet(
                          this,
                          _metadataPromise,
                          this.messageHandler
                            .sendWithPromise('GetMetadata', null)
                            .then((e) => {
                              var t, n, r, i;
                              return {
                                info: e[0],
                                metadata: e[1]
                                  ? new _metadata.Metadata(e[1])
                                  : null,
                                contentDispositionFilename:
                                  null !==
                                    (t =
                                      null === (n = this._fullReader) ||
                                      void 0 === n
                                        ? void 0
                                        : n.filename) && void 0 !== t
                                    ? t
                                    : null,
                                contentLength:
                                  null !==
                                    (r =
                                      null === (i = this._fullReader) ||
                                      void 0 === i
                                        ? void 0
                                        : i.contentLength) && void 0 !== r
                                    ? r
                                    : null,
                              };
                            }),
                        )
                      );
                    }
                    getMarkInfo() {
                      return this.messageHandler.sendWithPromise(
                        'GetMarkInfo',
                        null,
                      );
                    }
                    async startCleanup() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (
                        (await this.messageHandler.sendWithPromise(
                          'Cleanup',
                          null,
                        ),
                        !this.destroyed)
                      ) {
                        for (const e of _classPrivateFieldGet(
                          this,
                          _pageCache,
                        ).values())
                          if (!e.cleanup())
                            throw new Error(
                              `startCleanup: Page ${e.pageNumber} is currently rendering.`,
                            );
                        this.commonObjs.clear(),
                          e || this.fontLoader.clear(),
                          _classPrivateFieldSet(this, _metadataPromise, null),
                          (this._getFieldObjectsPromise = null),
                          (this._hasJSActionsPromise = null);
                      }
                    }
                    get loadingParams() {
                      const e = this._params;
                      return (0, _util.shadow)(this, 'loadingParams', {
                        disableAutoFetch: e.disableAutoFetch,
                        enableXfa: e.enableXfa,
                      });
                    }
                  }
                  var _objs = new WeakMap(),
                    _ensureObj = new WeakSet();
                  class PDFObjects {
                    constructor() {
                      _classPrivateMethodInitSpec(this, _ensureObj),
                        _classPrivateFieldInitSpec(this, _objs, {
                          writable: !0,
                          value: Object.create(null),
                        });
                    }
                    get(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      if (t) {
                        const n = _classPrivateMethodGet(
                          this,
                          _ensureObj,
                          _ensureObj2,
                        ).call(this, e);
                        return n.capability.promise.then(() => t(n.data)), null;
                      }
                      const n = _classPrivateFieldGet(this, _objs)[e];
                      if (null == n || !n.capability.settled)
                        throw new Error(
                          `Requesting object that isn't resolved yet ${e}.`,
                        );
                      return n.data;
                    }
                    has(e) {
                      const t = _classPrivateFieldGet(this, _objs)[e];
                      return (null == t ? void 0 : t.capability.settled) || !1;
                    }
                    resolve(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      const n = _classPrivateMethodGet(
                        this,
                        _ensureObj,
                        _ensureObj2,
                      ).call(this, e);
                      (n.data = t), n.capability.resolve();
                    }
                    clear() {
                      _classPrivateFieldSet(this, _objs, Object.create(null));
                    }
                  }
                  function _ensureObj2(e) {
                    const t = _classPrivateFieldGet(this, _objs)[e];
                    return (
                      t ||
                      (_classPrivateFieldGet(this, _objs)[e] = {
                        capability: (0, _util.createPromiseCapability)(),
                        data: null,
                      })
                    );
                  }
                  var _internalRenderTask = new WeakMap();
                  class RenderTask {
                    constructor(e) {
                      _classPrivateFieldInitSpec(this, _internalRenderTask, {
                        writable: !0,
                        value: null,
                      }),
                        _classPrivateFieldSet(this, _internalRenderTask, e),
                        (this.onContinue = null);
                    }
                    get promise() {
                      return _classPrivateFieldGet(this, _internalRenderTask)
                        .capability.promise;
                    }
                    cancel() {
                      _classPrivateFieldGet(this, _internalRenderTask).cancel();
                    }
                    get separateAnnots() {
                      const { separateAnnots: e } = _classPrivateFieldGet(
                        this,
                        _internalRenderTask,
                      ).operatorList;
                      if (!e) return !1;
                      const { annotationCanvasMap: t } = _classPrivateFieldGet(
                        this,
                        _internalRenderTask,
                      );
                      return (
                        e.form ||
                        (e.canvas && (null == t ? void 0 : t.size) > 0)
                      );
                    }
                  }
                  exports.RenderTask = RenderTask;
                  class InternalRenderTask {
                    constructor(e) {
                      let {
                        callback: t,
                        params: n,
                        objs: r,
                        commonObjs: i,
                        annotationCanvasMap: o,
                        operatorList: a,
                        pageIndex: s,
                        canvasFactory: l,
                        useRequestAnimationFrame: c = !1,
                        pdfBug: h = !1,
                        pageColors: u = null,
                      } = e;
                      (this.callback = t),
                        (this.params = n),
                        (this.objs = r),
                        (this.commonObjs = i),
                        (this.annotationCanvasMap = o),
                        (this.operatorListIdx = null),
                        (this.operatorList = a),
                        (this._pageIndex = s),
                        (this.canvasFactory = l),
                        (this._pdfBug = h),
                        (this.pageColors = u),
                        (this.running = !1),
                        (this.graphicsReadyCallback = null),
                        (this.graphicsReady = !1),
                        (this._useRequestAnimationFrame =
                          !0 === c && 'undefined' != typeof window),
                        (this.cancelled = !1),
                        (this.capability = (0,
                        _util.createPromiseCapability)()),
                        (this.task = new RenderTask(this)),
                        (this._cancelBound = this.cancel.bind(this)),
                        (this._continueBound = this._continue.bind(this)),
                        (this._scheduleNextBound =
                          this._scheduleNext.bind(this)),
                        (this._nextBound = this._next.bind(this)),
                        (this._canvas = n.canvasContext.canvas);
                    }
                    get completed() {
                      return this.capability.promise.catch(function () {});
                    }
                    initializeGraphics(e) {
                      var t;
                      let { transparency: n = !1, optionalContentConfig: r } =
                        e;
                      if (this.cancelled) return;
                      if (this._canvas) {
                        if (
                          _classStaticPrivateFieldSpecGet(
                            InternalRenderTask,
                            InternalRenderTask,
                            _canvasInUse,
                          ).has(this._canvas)
                        )
                          throw new Error(
                            'Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.',
                          );
                        _classStaticPrivateFieldSpecGet(
                          InternalRenderTask,
                          InternalRenderTask,
                          _canvasInUse,
                        ).add(this._canvas);
                      }
                      this._pdfBug &&
                        null !== (t = globalThis.StepperManager) &&
                        void 0 !== t &&
                        t.enabled &&
                        ((this.stepper = globalThis.StepperManager.create(
                          this._pageIndex,
                        )),
                        this.stepper.init(this.operatorList),
                        (this.stepper.nextBreakPoint =
                          this.stepper.getNextBreakPoint()));
                      const {
                        canvasContext: i,
                        viewport: o,
                        transform: a,
                        imageLayer: s,
                        background: l,
                      } = this.params;
                      (this.gfx = new _canvas.CanvasGraphics(
                        i,
                        this.commonObjs,
                        this.objs,
                        this.canvasFactory,
                        s,
                        r,
                        this.annotationCanvasMap,
                        this.pageColors,
                      )),
                        this.gfx.beginDrawing({
                          transform: a,
                          viewport: o,
                          transparency: n,
                          background: l,
                        }),
                        (this.operatorListIdx = 0),
                        (this.graphicsReady = !0),
                        this.graphicsReadyCallback &&
                          this.graphicsReadyCallback();
                    }
                    cancel() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      (this.running = !1),
                        (this.cancelled = !0),
                        this.gfx && this.gfx.endDrawing(),
                        this._canvas &&
                          _classStaticPrivateFieldSpecGet(
                            InternalRenderTask,
                            InternalRenderTask,
                            _canvasInUse,
                          ).delete(this._canvas),
                        this.callback(
                          e ||
                            new _display_utils.RenderingCancelledException(
                              `Rendering cancelled, page ${this._pageIndex + 1}`,
                              'canvas',
                            ),
                        );
                    }
                    operatorListChanged() {
                      this.graphicsReady
                        ? (this.stepper &&
                            this.stepper.updateOperatorList(this.operatorList),
                          this.running || this._continue())
                        : this.graphicsReadyCallback ||
                          (this.graphicsReadyCallback = this._continueBound);
                    }
                    _continue() {
                      (this.running = !0),
                        this.cancelled ||
                          (this.task.onContinue
                            ? this.task.onContinue(this._scheduleNextBound)
                            : this._scheduleNext());
                    }
                    _scheduleNext() {
                      this._useRequestAnimationFrame
                        ? window.requestAnimationFrame(() => {
                            this._nextBound().catch(this._cancelBound);
                          })
                        : Promise.resolve()
                            .then(this._nextBound)
                            .catch(this._cancelBound);
                    }
                    async _next() {
                      this.cancelled ||
                        ((this.operatorListIdx = this.gfx.executeOperatorList(
                          this.operatorList,
                          this.operatorListIdx,
                          this._continueBound,
                          this.stepper,
                        )),
                        this.operatorListIdx ===
                          this.operatorList.argsArray.length &&
                          ((this.running = !1),
                          this.operatorList.lastChunk &&
                            (this.gfx.endDrawing(),
                            this._canvas &&
                              _classStaticPrivateFieldSpecGet(
                                InternalRenderTask,
                                InternalRenderTask,
                                _canvasInUse,
                              ).delete(this._canvas),
                            this.callback())));
                    }
                  }
                  var _canvasInUse = { writable: !0, value: new WeakSet() };
                  const version = '2.16.105';
                  exports.version = version;
                  const build = '172ccdbe5';
                  exports.build = build;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PrintAnnotationStorage = t.AnnotationStorage = void 0);
                  var r = n(1),
                    i = n(131),
                    o = n(135);
                  function a(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, s(e, t, 'set'), n),
                      n
                    );
                  }
                  function s(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  function l(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  var c = new WeakSet();
                  class h {
                    constructor() {
                      var e, t;
                      l((e = this), (t = c)),
                        t.add(e),
                        (this._storage = new Map()),
                        (this._modified = !1),
                        (this.onSetModified = null),
                        (this.onResetModified = null),
                        (this.onAnnotationEditor = null);
                    }
                    getValue(e, t) {
                      const n = this._storage.get(e);
                      return void 0 === n ? t : Object.assign(t, n);
                    }
                    getRawValue(e) {
                      return this._storage.get(e);
                    }
                    remove(e) {
                      if (
                        (this._storage.delete(e),
                        0 === this._storage.size && this.resetModified(),
                        'function' == typeof this.onAnnotationEditor)
                      ) {
                        for (const e of this._storage.values())
                          if (e instanceof i.AnnotationEditor) return;
                        this.onAnnotationEditor(null);
                      }
                    }
                    setValue(e, t) {
                      const n = this._storage.get(e);
                      let r = !1;
                      if (void 0 !== n)
                        for (const [e, i] of Object.entries(t))
                          n[e] !== i && ((r = !0), (n[e] = i));
                      else (r = !0), this._storage.set(e, t);
                      r &&
                        (function (e, t, n) {
                          if (!t.has(e))
                            throw new TypeError(
                              'attempted to get private field on non-instance',
                            );
                          return n;
                        })(this, c, u).call(this),
                        t instanceof i.AnnotationEditor &&
                          'function' == typeof this.onAnnotationEditor &&
                          this.onAnnotationEditor(t.constructor._type);
                    }
                    has(e) {
                      return this._storage.has(e);
                    }
                    getAll() {
                      return this._storage.size > 0
                        ? (0, r.objectFromMap)(this._storage)
                        : null;
                    }
                    get size() {
                      return this._storage.size;
                    }
                    resetModified() {
                      this._modified &&
                        ((this._modified = !1),
                        'function' == typeof this.onResetModified &&
                          this.onResetModified());
                    }
                    get print() {
                      return new p(this);
                    }
                    get serializable() {
                      if (0 === this._storage.size) return null;
                      const e = new Map();
                      for (const [t, n] of this._storage) {
                        const r =
                          n instanceof i.AnnotationEditor ? n.serialize() : n;
                        r && e.set(t, r);
                      }
                      return e;
                    }
                    static getHash(e) {
                      if (!e) return '';
                      const t = new o.MurmurHash3_64();
                      for (const [n, r] of e)
                        t.update(`${n}:${JSON.stringify(r)}`);
                      return t.hexdigest();
                    }
                  }
                  function u() {
                    this._modified ||
                      ((this._modified = !0),
                      'function' == typeof this.onSetModified &&
                        this.onSetModified());
                  }
                  t.AnnotationStorage = h;
                  var d = new WeakMap();
                  class p extends h {
                    constructor(e) {
                      var t, n, r;
                      super(),
                        (r = { writable: !0, value: null }),
                        l((t = this), (n = d)),
                        n.set(t, r),
                        a(this, d, structuredClone(e.serializable));
                    }
                    get print() {
                      (0, r.unreachable)(
                        'Should not call PrintAnnotationStorage.print',
                      );
                    }
                    get serializable() {
                      return (function (e, t) {
                        return t.get ? t.get.call(e) : t.value;
                      })((e = this), s(e, d, 'get'));
                      var e;
                    }
                  }
                  t.PrintAnnotationStorage = p;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.AnnotationEditor = void 0);
                  var r = n(132),
                    i = n(1);
                  function o(e, t, n) {
                    return (
                      t in e
                        ? Object.defineProperty(e, t, {
                            value: n,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                          })
                        : (e[t] = n),
                      e
                    );
                  }
                  function a(e, t, n) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.set(e, n);
                  }
                  function s(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, c(e, t, 'set'), n),
                      n
                    );
                  }
                  function l(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, c(e, t, 'get'));
                  }
                  function c(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var h = new WeakMap(),
                    u = new WeakMap(),
                    d = new WeakMap(),
                    p = new WeakMap(),
                    f = new WeakMap(),
                    g = new WeakMap();
                  class m {
                    constructor(e) {
                      a(this, h, {
                        writable: !0,
                        value: this.focusin.bind(this),
                      }),
                        a(this, u, {
                          writable: !0,
                          value: this.focusout.bind(this),
                        }),
                        a(this, d, { writable: !0, value: !1 }),
                        a(this, p, { writable: !0, value: !1 }),
                        a(this, f, { writable: !0, value: !1 }),
                        a(this, g, { writable: !0, value: m._zIndex++ }),
                        this.constructor === m &&
                          (0, i.unreachable)(
                            'Cannot initialize AnnotationEditor.',
                          ),
                        (this.parent = e.parent),
                        (this.id = e.id),
                        (this.width = this.height = null),
                        (this.pageIndex = e.parent.pageIndex),
                        (this.name = e.name),
                        (this.div = null);
                      const [t, n] = this.parent.viewportBaseDimensions;
                      (this.x = e.x / t),
                        (this.y = e.y / n),
                        (this.rotation = this.parent.viewport.rotation),
                        (this.isAttachedToDOM = !1);
                    }
                    static get _defaultLineColor() {
                      return (0, i.shadow)(
                        this,
                        '_defaultLineColor',
                        this._colorManager.getHexCode('CanvasText'),
                      );
                    }
                    setInBackground() {
                      this.div.style.zIndex = 0;
                    }
                    setInForeground() {
                      this.div.style.zIndex = l(this, g);
                    }
                    focusin(e) {
                      l(this, d)
                        ? s(this, d, !1)
                        : this.parent.setSelected(this);
                    }
                    focusout(e) {
                      if (!this.isAttachedToDOM) return;
                      const t = e.relatedTarget;
                      (null != t && t.closest(`#${this.id}`)) ||
                        (e.preventDefault(),
                        this.parent.isMultipleSelection ||
                          this.commitOrRemove());
                    }
                    commitOrRemove() {
                      this.isEmpty() ? this.remove() : this.commit();
                    }
                    commit() {
                      this.parent.addToAnnotationStorage(this);
                    }
                    dragstart(e) {
                      const t = this.parent.div.getBoundingClientRect();
                      (this.startX = e.clientX - t.x),
                        (this.startY = e.clientY - t.y),
                        e.dataTransfer.setData('text/plain', this.id),
                        (e.dataTransfer.effectAllowed = 'move');
                    }
                    setAt(e, t, n, r) {
                      const [i, o] = this.parent.viewportBaseDimensions;
                      ([n, r] = this.screenToPageTranslation(n, r)),
                        (this.x = (e + n) / i),
                        (this.y = (t + r) / o),
                        (this.div.style.left = 100 * this.x + '%'),
                        (this.div.style.top = 100 * this.y + '%');
                    }
                    translate(e, t) {
                      const [n, r] = this.parent.viewportBaseDimensions;
                      ([e, t] = this.screenToPageTranslation(e, t)),
                        (this.x += e / n),
                        (this.y += t / r),
                        (this.div.style.left = 100 * this.x + '%'),
                        (this.div.style.top = 100 * this.y + '%');
                    }
                    screenToPageTranslation(e, t) {
                      const { rotation: n } = this.parent.viewport;
                      switch (n) {
                        case 90:
                          return [t, -e];
                        case 180:
                          return [-e, -t];
                        case 270:
                          return [-t, e];
                        default:
                          return [e, t];
                      }
                    }
                    setDims(e, t) {
                      const [n, r] = this.parent.viewportBaseDimensions;
                      (this.div.style.width = (100 * e) / n + '%'),
                        (this.div.style.height = (100 * t) / r + '%');
                    }
                    getInitialTranslation() {
                      return [0, 0];
                    }
                    render() {
                      (this.div = document.createElement('div')),
                        this.div.setAttribute(
                          'data-editor-rotation',
                          (360 - this.rotation) % 360,
                        ),
                        (this.div.className = this.name),
                        this.div.setAttribute('id', this.id),
                        this.div.setAttribute('tabIndex', 0),
                        this.setInForeground(),
                        this.div.addEventListener('focusin', l(this, h)),
                        this.div.addEventListener('focusout', l(this, u));
                      const [e, t] = this.getInitialTranslation();
                      return (
                        this.translate(e, t),
                        (0, r.bindEvents)(this, this.div, [
                          'dragstart',
                          'pointerdown',
                        ]),
                        this.div
                      );
                    }
                    pointerdown(e) {
                      const t = r.KeyboardManager.platform.isMac;
                      0 !== e.button || (e.ctrlKey && t)
                        ? e.preventDefault()
                        : ((e.ctrlKey && !t) || e.shiftKey || (e.metaKey && t)
                            ? this.parent.toggleSelected(this)
                            : this.parent.setSelected(this),
                          s(this, d, !0));
                    }
                    getRect(e, t) {
                      const [n, r] = this.parent.viewportBaseDimensions,
                        [i, o] = this.parent.pageDimensions,
                        a = (i * e) / n,
                        s = (o * t) / r,
                        l = this.x * i,
                        c = this.y * o,
                        h = this.width * i,
                        u = this.height * o;
                      switch (this.rotation) {
                        case 0:
                          return [l + a, o - c - s - u, l + a + h, o - c - s];
                        case 90:
                          return [l + s, o - c + a, l + s + u, o - c + a + h];
                        case 180:
                          return [l - a - h, o - c + s, l - a, o - c + s + u];
                        case 270:
                          return [l - s - u, o - c - a - h, l - s, o - c - a];
                        default:
                          throw new Error('Invalid rotation');
                      }
                    }
                    getRectInCurrentCoords(e, t) {
                      const [n, r, i, o] = e,
                        a = i - n,
                        s = o - r;
                      switch (this.rotation) {
                        case 0:
                          return [n, t - o, a, s];
                        case 90:
                          return [n, t - r, s, a];
                        case 180:
                          return [i, t - r, a, s];
                        case 270:
                          return [i, t - o, s, a];
                        default:
                          throw new Error('Invalid rotation');
                      }
                    }
                    onceAdded() {}
                    isEmpty() {
                      return !1;
                    }
                    enableEditMode() {
                      s(this, f, !0);
                    }
                    disableEditMode() {
                      s(this, f, !1);
                    }
                    isInEditMode() {
                      return l(this, f);
                    }
                    shouldGetKeyboardEvents() {
                      return !1;
                    }
                    needsToBeRebuilt() {
                      return this.div && !this.isAttachedToDOM;
                    }
                    rebuild() {
                      var e;
                      null === (e = this.div) ||
                        void 0 === e ||
                        e.addEventListener('focusin', l(this, h));
                    }
                    serialize() {
                      (0, i.unreachable)('An editor must be serializable');
                    }
                    static deserialize(e, t) {
                      const n = new this.prototype.constructor({
                        parent: t,
                        id: t.getNextId(),
                      });
                      n.rotation = e.rotation;
                      const [r, i] = t.pageDimensions,
                        [o, a, s, l] = n.getRectInCurrentCoords(e.rect, i);
                      return (
                        (n.x = o / r),
                        (n.y = a / i),
                        (n.width = s / r),
                        (n.height = l / i),
                        n
                      );
                    }
                    remove() {
                      this.div.removeEventListener('focusin', l(this, h)),
                        this.div.removeEventListener('focusout', l(this, u)),
                        this.isEmpty() || this.commit(),
                        this.parent.remove(this);
                    }
                    select() {
                      var e;
                      null === (e = this.div) ||
                        void 0 === e ||
                        e.classList.add('selectedEditor');
                    }
                    unselect() {
                      var e;
                      null === (e = this.div) ||
                        void 0 === e ||
                        e.classList.remove('selectedEditor');
                    }
                    updateParams(e, t) {}
                    disableEditing() {}
                    enableEditing() {}
                    get propertiesToUpdate() {
                      return {};
                    }
                    get contentDiv() {
                      return this.div;
                    }
                    get isEditing() {
                      return l(this, p);
                    }
                    set isEditing(e) {
                      s(this, p, e),
                        e
                          ? (this.parent.setSelected(this),
                            this.parent.setActiveEditor(this))
                          : this.parent.setActiveEditor(null);
                    }
                  }
                  (t.AnnotationEditor = m),
                    o(m, '_colorManager', new r.ColorManager()),
                    o(m, '_zIndex', 1);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.KeyboardManager =
                      t.CommandManager =
                      t.ColorManager =
                      t.AnnotationEditorUIManager =
                        void 0),
                    (t.bindEvents = function (e, t, n) {
                      for (const r of n) t.addEventListener(r, e[r].bind(e));
                    }),
                    (t.opacityToHex = function (e) {
                      return Math.round(Math.min(255, Math.max(1, 255 * e)))
                        .toString(16)
                        .padStart(2, '0');
                    });
                  var r = n(1),
                    i = n(133);
                  function o(e, t, n) {
                    return (
                      t in e
                        ? Object.defineProperty(e, t, {
                            value: n,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                          })
                        : (e[t] = n),
                      e
                    );
                  }
                  function a(e, t) {
                    c(e, t), t.add(e);
                  }
                  function s(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function l(e, t, n) {
                    c(e, t), t.set(e, n);
                  }
                  function c(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function h(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, d(e, t, 'set'), n),
                      n
                    );
                  }
                  function u(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, d(e, t, 'get'));
                  }
                  function d(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var p = new WeakMap();
                  class f {
                    constructor() {
                      l(this, p, { writable: !0, value: 0 });
                    }
                    getId() {
                      var e, t;
                      return `${r.AnnotationEditorPrefix}${(h(this, p, ((e = u(this, p)), (t = e++), e)), t)}`;
                    }
                  }
                  var g = new WeakMap(),
                    m = new WeakMap(),
                    v = new WeakMap(),
                    b = new WeakMap();
                  class y {
                    constructor() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : 128;
                      l(this, g, { writable: !0, value: [] }),
                        l(this, m, { writable: !0, value: !1 }),
                        l(this, v, { writable: !0, value: void 0 }),
                        l(this, b, { writable: !0, value: -1 }),
                        h(this, v, e);
                    }
                    add(e) {
                      let {
                        cmd: t,
                        undo: n,
                        mustExec: r,
                        type: i = NaN,
                        overwriteIfSameType: o = !1,
                        keepUndo: a = !1,
                      } = e;
                      if ((r && t(), u(this, m))) return;
                      const s = { cmd: t, undo: n, type: i };
                      if (-1 === u(this, b))
                        return (
                          u(this, g).length > 0 && (u(this, g).length = 0),
                          h(this, b, 0),
                          void u(this, g).push(s)
                        );
                      if (o && u(this, g)[u(this, b)].type === i)
                        return (
                          a && (s.undo = u(this, g)[u(this, b)].undo),
                          void (u(this, g)[u(this, b)] = s)
                        );
                      const l = u(this, b) + 1;
                      l === u(this, v)
                        ? u(this, g).splice(0, 1)
                        : (h(this, b, l),
                          l < u(this, g).length && u(this, g).splice(l)),
                        u(this, g).push(s);
                    }
                    undo() {
                      -1 !== u(this, b) &&
                        (h(this, m, !0),
                        u(this, g)[u(this, b)].undo(),
                        h(this, m, !1),
                        h(this, b, u(this, b) - 1));
                    }
                    redo() {
                      u(this, b) < u(this, g).length - 1 &&
                        (h(this, b, u(this, b) + 1),
                        h(this, m, !0),
                        u(this, g)[u(this, b)].cmd(),
                        h(this, m, !1));
                    }
                    hasSomethingToUndo() {
                      return -1 !== u(this, b);
                    }
                    hasSomethingToRedo() {
                      return u(this, b) < u(this, g).length - 1;
                    }
                    destroy() {
                      h(this, g, null);
                    }
                  }
                  t.CommandManager = y;
                  var _ = new WeakSet();
                  class w {
                    constructor(e) {
                      a(this, _),
                        (this.buffer = []),
                        (this.callbacks = new Map()),
                        (this.allKeys = new Set());
                      const t = w.platform.isMac;
                      for (const [n, r] of e)
                        for (const e of n) {
                          const n = e.startsWith('mac+');
                          t && n
                            ? (this.callbacks.set(e.slice(4), r),
                              this.allKeys.add(e.split('+').at(-1)))
                            : t ||
                              n ||
                              (this.callbacks.set(e, r),
                              this.allKeys.add(e.split('+').at(-1)));
                        }
                    }
                    static get platform() {
                      const e =
                        'undefined' != typeof navigator
                          ? navigator.platform
                          : '';
                      return (0, r.shadow)(this, 'platform', {
                        isWin: e.includes('Win'),
                        isMac: e.includes('Mac'),
                      });
                    }
                    exec(e, t) {
                      if (!this.allKeys.has(t.key)) return;
                      const n = this.callbacks.get(s(this, _, S).call(this, t));
                      n &&
                        (n.bind(e)(), t.stopPropagation(), t.preventDefault());
                    }
                  }
                  function S(e) {
                    e.altKey && this.buffer.push('alt'),
                      e.ctrlKey && this.buffer.push('ctrl'),
                      e.metaKey && this.buffer.push('meta'),
                      e.shiftKey && this.buffer.push('shift'),
                      this.buffer.push(e.key);
                    const t = this.buffer.join('+');
                    return (this.buffer.length = 0), t;
                  }
                  t.KeyboardManager = w;
                  var A = new WeakMap();
                  class x {
                    constructor() {
                      l(this, A, { writable: !0, value: null });
                    }
                    copy(e) {
                      e &&
                        (Array.isArray(e)
                          ? h(
                              this,
                              A,
                              e.map((e) => e.serialize()),
                            )
                          : h(this, A, [e.serialize()]),
                        h(
                          this,
                          A,
                          u(this, A).filter((e) => !!e),
                        ),
                        0 === u(this, A).length && h(this, A, null));
                    }
                    paste() {
                      return u(this, A);
                    }
                    isEmpty() {
                      return null === u(this, A);
                    }
                    destroy() {
                      h(this, A, null);
                    }
                  }
                  class P {
                    get _colors() {
                      const e = new Map([
                        ['CanvasText', null],
                        ['Canvas', null],
                      ]);
                      return (
                        (0, i.getColorValues)(e),
                        (0, r.shadow)(this, '_colors', e)
                      );
                    }
                    convert(e) {
                      const t = (0, i.getRGB)(e);
                      if (!window.matchMedia('(forced-colors: active)').matches)
                        return t;
                      for (const [e, n] of this._colors)
                        if (n.every((e, n) => e === t[n]))
                          return P._colorsMapping.get(e);
                      return t;
                    }
                    getHexCode(e) {
                      const t = this._colors.get(e);
                      return t ? r.Util.makeHexColor(...t) : e;
                    }
                  }
                  (t.ColorManager = P),
                    o(
                      P,
                      '_colorsMapping',
                      new Map([
                        ['CanvasText', [0, 0, 0]],
                        ['Canvas', [255, 255, 255]],
                      ]),
                    );
                  var E = new WeakMap(),
                    C = new WeakMap(),
                    T = new WeakMap(),
                    k = new WeakMap(),
                    M = new WeakMap(),
                    R = new WeakMap(),
                    O = new WeakMap(),
                    D = new WeakMap(),
                    I = new WeakMap(),
                    L = new WeakMap(),
                    F = new WeakMap(),
                    N = new WeakMap(),
                    j = new WeakMap(),
                    B = new WeakMap(),
                    W = new WeakMap(),
                    z = new WeakMap(),
                    $ = new WeakMap(),
                    U = new WeakSet(),
                    H = new WeakSet(),
                    V = new WeakSet(),
                    q = new WeakSet(),
                    G = new WeakSet(),
                    X = new WeakSet(),
                    Y = new WeakSet(),
                    K = new WeakSet(),
                    Z = new WeakSet();
                  class Q {
                    constructor(e, t) {
                      a(this, Z),
                        a(this, K),
                        a(this, Y),
                        a(this, X),
                        a(this, G),
                        a(this, q),
                        a(this, V),
                        a(this, H),
                        a(this, U),
                        l(this, E, { writable: !0, value: null }),
                        l(this, C, { writable: !0, value: new Map() }),
                        l(this, T, { writable: !0, value: new Map() }),
                        l(this, k, { writable: !0, value: new x() }),
                        l(this, M, { writable: !0, value: new y() }),
                        l(this, R, { writable: !0, value: 0 }),
                        l(this, O, { writable: !0, value: null }),
                        l(this, D, { writable: !0, value: null }),
                        l(this, I, { writable: !0, value: new f() }),
                        l(this, L, { writable: !0, value: !1 }),
                        l(this, F, {
                          writable: !0,
                          value: r.AnnotationEditorType.NONE,
                        }),
                        l(this, N, { writable: !0, value: new Set() }),
                        l(this, j, {
                          writable: !0,
                          value: this.keydown.bind(this),
                        }),
                        l(this, B, {
                          writable: !0,
                          value: this.onEditingAction.bind(this),
                        }),
                        l(this, W, {
                          writable: !0,
                          value: this.onPageChanging.bind(this),
                        }),
                        l(this, z, {
                          writable: !0,
                          value: {
                            isEditing: !1,
                            isEmpty: !0,
                            hasEmptyClipboard: !0,
                            hasSomethingToUndo: !1,
                            hasSomethingToRedo: !1,
                            hasSelectedEditor: !1,
                          },
                        }),
                        l(this, $, { writable: !0, value: null }),
                        h(this, $, e),
                        h(this, D, t),
                        u(this, D)._on('editingaction', u(this, B)),
                        u(this, D)._on('pagechanging', u(this, W));
                    }
                    destroy() {
                      s(this, H, ee).call(this),
                        u(this, D)._off('editingaction', u(this, B)),
                        u(this, D)._off('pagechanging', u(this, W));
                      for (const e of u(this, T).values()) e.destroy();
                      u(this, T).clear(),
                        u(this, C).clear(),
                        h(this, E, null),
                        u(this, N).clear(),
                        u(this, k).destroy(),
                        u(this, M).destroy();
                    }
                    onPageChanging(e) {
                      let { pageNumber: t } = e;
                      h(this, R, t - 1);
                    }
                    focusMainContainer() {
                      u(this, $).focus();
                    }
                    keydown(e) {
                      var t;
                      (null !== (t = this.getActive()) &&
                        void 0 !== t &&
                        t.shouldGetKeyboardEvents()) ||
                        Q._keyboardManager.exec(this, e);
                    }
                    onEditingAction(e) {
                      [
                        'undo',
                        'redo',
                        'cut',
                        'copy',
                        'paste',
                        'delete',
                        'selectAll',
                      ].includes(e.name) && this[e.name]();
                    }
                    setEditingState(e) {
                      e
                        ? (s(this, U, J).call(this),
                          s(this, V, te).call(this, {
                            isEditing:
                              u(this, F) !== r.AnnotationEditorType.NONE,
                            isEmpty: s(this, K, ae).call(this),
                            hasSomethingToUndo: u(this, M).hasSomethingToUndo(),
                            hasSomethingToRedo: u(this, M).hasSomethingToRedo(),
                            hasSelectedEditor: !1,
                            hasEmptyClipboard: u(this, k).isEmpty(),
                          }))
                        : (s(this, H, ee).call(this),
                          s(this, V, te).call(this, { isEditing: !1 }));
                    }
                    registerEditorTypes(e) {
                      h(this, O, e);
                      for (const e of u(this, O))
                        s(this, q, ne).call(this, e.defaultPropertiesToUpdate);
                    }
                    getId() {
                      return u(this, I).getId();
                    }
                    addLayer(e) {
                      u(this, T).set(e.pageIndex, e),
                        u(this, L) ? e.enable() : e.disable();
                    }
                    removeLayer(e) {
                      u(this, T).delete(e.pageIndex);
                    }
                    updateMode(e) {
                      if ((h(this, F, e), e === r.AnnotationEditorType.NONE))
                        this.setEditingState(!1), s(this, X, ie).call(this);
                      else {
                        this.setEditingState(!0), s(this, G, re).call(this);
                        for (const t of u(this, T).values()) t.updateMode(e);
                      }
                    }
                    updateToolbar(e) {
                      e !== u(this, F) &&
                        u(this, D).dispatch('switchannotationeditormode', {
                          source: this,
                          mode: e,
                        });
                    }
                    updateParams(e, t) {
                      for (const n of u(this, N)) n.updateParams(e, t);
                      for (const n of u(this, O)) n.updateDefaultParams(e, t);
                    }
                    getEditors(e) {
                      const t = [];
                      for (const n of u(this, C).values())
                        n.pageIndex === e && t.push(n);
                      return t;
                    }
                    getEditor(e) {
                      return u(this, C).get(e);
                    }
                    addEditor(e) {
                      u(this, C).set(e.id, e);
                    }
                    removeEditor(e) {
                      u(this, C).delete(e.id), this.unselect(e);
                    }
                    setActiveEditor(e) {
                      u(this, E) !== e &&
                        (h(this, E, e),
                        e && s(this, q, ne).call(this, e.propertiesToUpdate));
                    }
                    toggleSelected(e) {
                      if (u(this, N).has(e))
                        return (
                          u(this, N).delete(e),
                          e.unselect(),
                          void s(this, V, te).call(this, {
                            hasSelectedEditor: this.hasSelection,
                          })
                        );
                      u(this, N).add(e),
                        e.select(),
                        s(this, q, ne).call(this, e.propertiesToUpdate),
                        s(this, V, te).call(this, { hasSelectedEditor: !0 });
                    }
                    setSelected(e) {
                      for (const t of u(this, N)) t !== e && t.unselect();
                      u(this, N).clear(),
                        u(this, N).add(e),
                        e.select(),
                        s(this, q, ne).call(this, e.propertiesToUpdate),
                        s(this, V, te).call(this, { hasSelectedEditor: !0 });
                    }
                    isSelected(e) {
                      return u(this, N).has(e);
                    }
                    unselect(e) {
                      e.unselect(),
                        u(this, N).delete(e),
                        s(this, V, te).call(this, {
                          hasSelectedEditor: this.hasSelection,
                        });
                    }
                    get hasSelection() {
                      return 0 !== u(this, N).size;
                    }
                    undo() {
                      u(this, M).undo(),
                        s(this, V, te).call(this, {
                          hasSomethingToUndo: u(this, M).hasSomethingToUndo(),
                          hasSomethingToRedo: !0,
                          isEmpty: s(this, K, ae).call(this),
                        });
                    }
                    redo() {
                      u(this, M).redo(),
                        s(this, V, te).call(this, {
                          hasSomethingToUndo: !0,
                          hasSomethingToRedo: u(this, M).hasSomethingToRedo(),
                          isEmpty: s(this, K, ae).call(this),
                        });
                    }
                    addCommands(e) {
                      u(this, M).add(e),
                        s(this, V, te).call(this, {
                          hasSomethingToUndo: !0,
                          hasSomethingToRedo: !1,
                          isEmpty: s(this, K, ae).call(this),
                        });
                    }
                    delete() {
                      if (
                        (u(this, E) && u(this, E).commitOrRemove(),
                        !this.hasSelection)
                      )
                        return;
                      const e = [...u(this, N)];
                      this.addCommands({
                        cmd: () => {
                          for (const t of e) t.remove();
                        },
                        undo: () => {
                          for (const t of e) s(this, Y, oe).call(this, t);
                        },
                        mustExec: !0,
                      });
                    }
                    copy() {
                      if (
                        (u(this, E) && u(this, E).commitOrRemove(),
                        this.hasSelection)
                      ) {
                        const e = [];
                        for (const t of u(this, N)) t.isEmpty() || e.push(t);
                        if (0 === e.length) return;
                        u(this, k).copy(e),
                          s(this, V, te).call(this, { hasEmptyClipboard: !1 });
                      }
                    }
                    cut() {
                      this.copy(), this.delete();
                    }
                    paste() {
                      if (u(this, k).isEmpty()) return;
                      this.unselectAll();
                      const e = u(this, T).get(u(this, R)),
                        t = u(this, k)
                          .paste()
                          .map((t) => e.deserialize(t));
                      this.addCommands({
                        cmd: () => {
                          for (const e of t) s(this, Y, oe).call(this, e);
                          s(this, Z, se).call(this, t);
                        },
                        undo: () => {
                          for (const e of t) e.remove();
                        },
                        mustExec: !0,
                      });
                    }
                    selectAll() {
                      for (const e of u(this, N)) e.commit();
                      s(this, Z, se).call(this, u(this, C).values());
                    }
                    unselectAll() {
                      if (u(this, E)) u(this, E).commitOrRemove();
                      else if (0 !== s(this, Z, se).size) {
                        for (const e of u(this, N)) e.unselect();
                        u(this, N).clear(),
                          s(this, V, te).call(this, { hasSelectedEditor: !1 });
                      }
                    }
                    isActive(e) {
                      return u(this, E) === e;
                    }
                    getActive() {
                      return u(this, E);
                    }
                    getMode() {
                      return u(this, F);
                    }
                  }
                  function J() {
                    u(this, $).addEventListener('keydown', u(this, j));
                  }
                  function ee() {
                    u(this, $).removeEventListener('keydown', u(this, j));
                  }
                  function te(e) {
                    Object.entries(e).some((e) => {
                      let [t, n] = e;
                      return u(this, z)[t] !== n;
                    }) &&
                      u(this, D).dispatch('annotationeditorstateschanged', {
                        source: this,
                        details: Object.assign(u(this, z), e),
                      });
                  }
                  function ne(e) {
                    u(this, D).dispatch('annotationeditorparamschanged', {
                      source: this,
                      details: e,
                    });
                  }
                  function re() {
                    if (!u(this, L)) {
                      h(this, L, !0);
                      for (const e of u(this, T).values()) e.enable();
                    }
                  }
                  function ie() {
                    if ((this.unselectAll(), u(this, L))) {
                      h(this, L, !1);
                      for (const e of u(this, T).values()) e.disable();
                    }
                  }
                  function oe(e) {
                    const t = u(this, T).get(e.pageIndex);
                    t ? t.addOrRebuild(e) : this.addEditor(e);
                  }
                  function ae() {
                    if (0 === u(this, C).size) return !0;
                    if (1 === u(this, C).size)
                      for (const e of u(this, C).values()) return e.isEmpty();
                    return !1;
                  }
                  function se(e) {
                    u(this, N).clear();
                    for (const t of e)
                      t.isEmpty() || (u(this, N).add(t), t.select());
                    s(this, V, te).call(this, { hasSelectedEditor: !0 });
                  }
                  (t.AnnotationEditorUIManager = Q),
                    o(
                      Q,
                      '_keyboardManager',
                      new w([
                        [['ctrl+a', 'mac+meta+a'], Q.prototype.selectAll],
                        [['ctrl+c', 'mac+meta+c'], Q.prototype.copy],
                        [['ctrl+v', 'mac+meta+v'], Q.prototype.paste],
                        [['ctrl+x', 'mac+meta+x'], Q.prototype.cut],
                        [['ctrl+z', 'mac+meta+z'], Q.prototype.undo],
                        [
                          ['ctrl+y', 'ctrl+shift+Z', 'mac+meta+shift+Z'],
                          Q.prototype.redo,
                        ],
                        [
                          [
                            'Backspace',
                            'alt+Backspace',
                            'ctrl+Backspace',
                            'shift+Backspace',
                            'mac+Backspace',
                            'mac+alt+Backspace',
                            'mac+ctrl+Backspace',
                            'Delete',
                            'ctrl+Delete',
                            'shift+Delete',
                          ],
                          Q.prototype.delete,
                        ],
                        [['Escape', 'mac+Escape'], Q.prototype.unselectAll],
                      ]),
                    );
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.StatTimer =
                      t.RenderingCancelledException =
                      t.PixelsPerInch =
                      t.PageViewport =
                      t.PDFDateString =
                      t.DOMStandardFontDataFactory =
                      t.DOMSVGFactory =
                      t.DOMCanvasFactory =
                      t.DOMCMapReaderFactory =
                      t.AnnotationPrefix =
                        void 0),
                    (t.deprecated = function (e) {
                      console.log('Deprecated API usage: ' + e);
                    }),
                    (t.getColorValues = function (e) {
                      const t = document.createElement('span');
                      (t.style.visibility = 'hidden'), document.body.append(t);
                      for (const n of e.keys()) {
                        t.style.color = n;
                        const r = window.getComputedStyle(t).color;
                        e.set(n, v(r));
                      }
                      t.remove();
                    }),
                    (t.getCurrentTransform = function (e) {
                      const {
                        a: t,
                        b: n,
                        c: r,
                        d: i,
                        e: o,
                        f: a,
                      } = e.getTransform();
                      return [t, n, r, i, o, a];
                    }),
                    (t.getCurrentTransformInverse = function (e) {
                      const {
                        a: t,
                        b: n,
                        c: r,
                        d: i,
                        e: o,
                        f: a,
                      } = e.getTransform().invertSelf();
                      return [t, n, r, i, o, a];
                    }),
                    (t.getFilenameFromUrl = function (e) {
                      const t = e.indexOf('#'),
                        n = e.indexOf('?'),
                        r = Math.min(
                          t > 0 ? t : e.length,
                          n > 0 ? n : e.length,
                        );
                      return e.substring(e.lastIndexOf('/', r) + 1, r);
                    }),
                    (t.getPdfFilenameFromUrl = function (e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : 'document.pdf';
                      if ('string' != typeof e) return t;
                      if (f(e))
                        return (
                          (0, i.warn)(
                            'getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.',
                          ),
                          t
                        );
                      const n = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i,
                        r =
                          /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/.exec(
                            e,
                          );
                      let o = n.exec(r[1]) || n.exec(r[2]) || n.exec(r[3]);
                      if (o && ((o = o[0]), o.includes('%')))
                        try {
                          o = n.exec(decodeURIComponent(o))[0];
                        } catch (e) {}
                      return o || t;
                    }),
                    (t.getRGB = v),
                    (t.getXfaPageViewport = function (e, t) {
                      let { scale: n = 1, rotation: r = 0 } = t;
                      const { width: i, height: o } = e.attributes.style,
                        a = [0, 0, parseInt(i), parseInt(o)];
                      return new d({ viewBox: a, scale: n, rotation: r });
                    }),
                    (t.isDataScheme = f),
                    (t.isPdfFile = function (e) {
                      return 'string' == typeof e && /\.pdf$/i.test(e);
                    }),
                    (t.isValidFetchUrl = g),
                    (t.loadScript = function (e) {
                      let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      return new Promise((n, r) => {
                        const i = document.createElement('script');
                        (i.src = e),
                          (i.onload = function (e) {
                            t && i.remove(), n(e);
                          }),
                          (i.onerror = function () {
                            r(new Error(`Cannot load script at: ${i.src}`));
                          }),
                          (document.head || document.documentElement).append(i);
                      });
                    });
                  var r = n(134),
                    i = n(1);
                  function o(e, t, n) {
                    return (
                      t in e
                        ? Object.defineProperty(e, t, {
                            value: n,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                          })
                        : (e[t] = n),
                      e
                    );
                  }
                  t.AnnotationPrefix = 'pdfjs_internal_id_';
                  class a {}
                  (t.PixelsPerInch = a),
                    o(a, 'CSS', 96),
                    o(a, 'PDF', 72),
                    o(a, 'PDF_TO_CSS_UNITS', a.CSS / a.PDF);
                  class s extends r.BaseCanvasFactory {
                    constructor() {
                      let { ownerDocument: e = globalThis.document } =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : {};
                      super(), (this._document = e);
                    }
                    _createCanvas(e, t) {
                      const n = this._document.createElement('canvas');
                      return (n.width = e), (n.height = t), n;
                    }
                  }
                  async function l(e) {
                    let t =
                      arguments.length > 1 &&
                      void 0 !== arguments[1] &&
                      arguments[1];
                    if (g(e, document.baseURI)) {
                      const n = await fetch(e);
                      if (!n.ok) throw new Error(n.statusText);
                      return t
                        ? new Uint8Array(await n.arrayBuffer())
                        : (0, i.stringToBytes)(await n.text());
                    }
                    return new Promise((n, r) => {
                      const o = new XMLHttpRequest();
                      o.open('GET', e, !0),
                        t && (o.responseType = 'arraybuffer'),
                        (o.onreadystatechange = () => {
                          if (o.readyState === XMLHttpRequest.DONE) {
                            if (200 === o.status || 0 === o.status) {
                              let e;
                              if (
                                (t && o.response
                                  ? (e = new Uint8Array(o.response))
                                  : !t &&
                                    o.responseText &&
                                    (e = (0, i.stringToBytes)(o.responseText)),
                                e)
                              )
                                return void n(e);
                            }
                            r(new Error(o.statusText));
                          }
                        }),
                        o.send(null);
                    });
                  }
                  t.DOMCanvasFactory = s;
                  class c extends r.BaseCMapReaderFactory {
                    _fetchData(e, t) {
                      return l(e, this.isCompressed).then((e) => ({
                        cMapData: e,
                        compressionType: t,
                      }));
                    }
                  }
                  t.DOMCMapReaderFactory = c;
                  class h extends r.BaseStandardFontDataFactory {
                    _fetchData(e) {
                      return l(e, !0);
                    }
                  }
                  t.DOMStandardFontDataFactory = h;
                  class u extends r.BaseSVGFactory {
                    _createSVG(e) {
                      return document.createElementNS(
                        'http://www.w3.org/2000/svg',
                        e,
                      );
                    }
                  }
                  t.DOMSVGFactory = u;
                  class d {
                    constructor(e) {
                      let {
                        viewBox: t,
                        scale: n,
                        rotation: r,
                        offsetX: i = 0,
                        offsetY: o = 0,
                        dontFlip: a = !1,
                      } = e;
                      (this.viewBox = t),
                        (this.scale = n),
                        (this.rotation = r),
                        (this.offsetX = i),
                        (this.offsetY = o);
                      const s = (t[2] + t[0]) / 2,
                        l = (t[3] + t[1]) / 2;
                      let c, h, u, d, p, f, g, m;
                      switch (((r %= 360), r < 0 && (r += 360), r)) {
                        case 180:
                          (c = -1), (h = 0), (u = 0), (d = 1);
                          break;
                        case 90:
                          (c = 0), (h = 1), (u = 1), (d = 0);
                          break;
                        case 270:
                          (c = 0), (h = -1), (u = -1), (d = 0);
                          break;
                        case 0:
                          (c = 1), (h = 0), (u = 0), (d = -1);
                          break;
                        default:
                          throw new Error(
                            'PageViewport: Invalid rotation, must be a multiple of 90 degrees.',
                          );
                      }
                      a && ((u = -u), (d = -d)),
                        0 === c
                          ? ((p = Math.abs(l - t[1]) * n + i),
                            (f = Math.abs(s - t[0]) * n + o),
                            (g = Math.abs(t[3] - t[1]) * n),
                            (m = Math.abs(t[2] - t[0]) * n))
                          : ((p = Math.abs(s - t[0]) * n + i),
                            (f = Math.abs(l - t[1]) * n + o),
                            (g = Math.abs(t[2] - t[0]) * n),
                            (m = Math.abs(t[3] - t[1]) * n)),
                        (this.transform = [
                          c * n,
                          h * n,
                          u * n,
                          d * n,
                          p - c * n * s - u * n * l,
                          f - h * n * s - d * n * l,
                        ]),
                        (this.width = g),
                        (this.height = m);
                    }
                    clone() {
                      let {
                        scale: e = this.scale,
                        rotation: t = this.rotation,
                        offsetX: n = this.offsetX,
                        offsetY: r = this.offsetY,
                        dontFlip: i = !1,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      return new d({
                        viewBox: this.viewBox.slice(),
                        scale: e,
                        rotation: t,
                        offsetX: n,
                        offsetY: r,
                        dontFlip: i,
                      });
                    }
                    convertToViewportPoint(e, t) {
                      return i.Util.applyTransform([e, t], this.transform);
                    }
                    convertToViewportRectangle(e) {
                      const t = i.Util.applyTransform(
                          [e[0], e[1]],
                          this.transform,
                        ),
                        n = i.Util.applyTransform([e[2], e[3]], this.transform);
                      return [t[0], t[1], n[0], n[1]];
                    }
                    convertToPdfPoint(e, t) {
                      return i.Util.applyInverseTransform(
                        [e, t],
                        this.transform,
                      );
                    }
                  }
                  t.PageViewport = d;
                  class p extends i.BaseException {
                    constructor(e, t) {
                      super(e, 'RenderingCancelledException'), (this.type = t);
                    }
                  }
                  function f(e) {
                    const t = e.length;
                    let n = 0;
                    for (; n < t && '' === e[n].trim(); ) n++;
                    return 'data:' === e.substring(n, n + 5).toLowerCase();
                  }
                  function g(e, t) {
                    try {
                      const { protocol: n } = t ? new URL(e, t) : new URL(e);
                      return 'http:' === n || 'https:' === n;
                    } catch (e) {
                      return !1;
                    }
                  }
                  let m;
                  function v(e) {
                    if (e.startsWith('#')) {
                      const t = parseInt(e.slice(1), 16);
                      return [(16711680 & t) >> 16, (65280 & t) >> 8, 255 & t];
                    }
                    return e.startsWith('rgb(')
                      ? e
                          .slice(4, -1)
                          .split(',')
                          .map((e) => parseInt(e))
                      : e.startsWith('rgba(')
                        ? e
                            .slice(5, -1)
                            .split(',')
                            .map((e) => parseInt(e))
                            .slice(0, 3)
                        : ((0, i.warn)(`Not a valid color format: "${e}"`),
                          [0, 0, 0]);
                  }
                  (t.RenderingCancelledException = p),
                    (t.StatTimer = class {
                      constructor() {
                        (this.started = Object.create(null)), (this.times = []);
                      }
                      time(e) {
                        e in this.started &&
                          (0, i.warn)(`Timer is already running for ${e}`),
                          (this.started[e] = Date.now());
                      }
                      timeEnd(e) {
                        e in this.started ||
                          (0, i.warn)(`Timer has not been started for ${e}`),
                          this.times.push({
                            name: e,
                            start: this.started[e],
                            end: Date.now(),
                          }),
                          delete this.started[e];
                      }
                      toString() {
                        const e = [];
                        let t = 0;
                        for (const e of this.times) {
                          const n = e.name;
                          n.length > t && (t = n.length);
                        }
                        for (const n of this.times) {
                          const r = n.end - n.start;
                          e.push(`${n.name.padEnd(t)} ${r}ms\n`);
                        }
                        return e.join('');
                      }
                    }),
                    (t.PDFDateString = class {
                      static toDateObject(e) {
                        if (!e || 'string' != typeof e) return null;
                        m ||
                          (m = new RegExp(
                            "^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?",
                          ));
                        const t = m.exec(e);
                        if (!t) return null;
                        const n = parseInt(t[1], 10);
                        let r = parseInt(t[2], 10);
                        r = r >= 1 && r <= 12 ? r - 1 : 0;
                        let i = parseInt(t[3], 10);
                        i = i >= 1 && i <= 31 ? i : 1;
                        let o = parseInt(t[4], 10);
                        o = o >= 0 && o <= 23 ? o : 0;
                        let a = parseInt(t[5], 10);
                        a = a >= 0 && a <= 59 ? a : 0;
                        let s = parseInt(t[6], 10);
                        s = s >= 0 && s <= 59 ? s : 0;
                        const l = t[7] || 'Z';
                        let c = parseInt(t[8], 10);
                        c = c >= 0 && c <= 23 ? c : 0;
                        let h = parseInt(t[9], 10) || 0;
                        return (
                          (h = h >= 0 && h <= 59 ? h : 0),
                          '-' === l
                            ? ((o += c), (a += h))
                            : '+' === l && ((o -= c), (a -= h)),
                          new Date(Date.UTC(n, r, i, o, a, s))
                        );
                      }
                    });
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.BaseStandardFontDataFactory =
                      t.BaseSVGFactory =
                      t.BaseCanvasFactory =
                      t.BaseCMapReaderFactory =
                        void 0);
                  var r = n(1);
                  class i {
                    constructor() {
                      this.constructor === i &&
                        (0, r.unreachable)(
                          'Cannot initialize BaseCanvasFactory.',
                        );
                    }
                    create(e, t) {
                      if (e <= 0 || t <= 0)
                        throw new Error('Invalid canvas size');
                      const n = this._createCanvas(e, t);
                      return { canvas: n, context: n.getContext('2d') };
                    }
                    reset(e, t, n) {
                      if (!e.canvas) throw new Error('Canvas is not specified');
                      if (t <= 0 || n <= 0)
                        throw new Error('Invalid canvas size');
                      (e.canvas.width = t), (e.canvas.height = n);
                    }
                    destroy(e) {
                      if (!e.canvas) throw new Error('Canvas is not specified');
                      (e.canvas.width = 0),
                        (e.canvas.height = 0),
                        (e.canvas = null),
                        (e.context = null);
                    }
                    _createCanvas(e, t) {
                      (0, r.unreachable)(
                        'Abstract method `_createCanvas` called.',
                      );
                    }
                  }
                  t.BaseCanvasFactory = i;
                  class o {
                    constructor(e) {
                      let { baseUrl: t = null, isCompressed: n = !1 } = e;
                      this.constructor === o &&
                        (0, r.unreachable)(
                          'Cannot initialize BaseCMapReaderFactory.',
                        ),
                        (this.baseUrl = t),
                        (this.isCompressed = n);
                    }
                    async fetch(e) {
                      let { name: t } = e;
                      if (!this.baseUrl)
                        throw new Error(
                          'The CMap "baseUrl" parameter must be specified, ensure that the "cMapUrl" and "cMapPacked" API parameters are provided.',
                        );
                      if (!t) throw new Error('CMap name must be specified.');
                      const n =
                          this.baseUrl +
                          t +
                          (this.isCompressed ? '.bcmap' : ''),
                        i = this.isCompressed
                          ? r.CMapCompressionType.BINARY
                          : r.CMapCompressionType.NONE;
                      return this._fetchData(n, i).catch((e) => {
                        throw new Error(
                          `Unable to load ${this.isCompressed ? 'binary ' : ''}CMap at: ${n}`,
                        );
                      });
                    }
                    _fetchData(e, t) {
                      (0, r.unreachable)(
                        'Abstract method `_fetchData` called.',
                      );
                    }
                  }
                  t.BaseCMapReaderFactory = o;
                  class a {
                    constructor(e) {
                      let { baseUrl: t = null } = e;
                      this.constructor === a &&
                        (0, r.unreachable)(
                          'Cannot initialize BaseStandardFontDataFactory.',
                        ),
                        (this.baseUrl = t);
                    }
                    async fetch(e) {
                      let { filename: t } = e;
                      if (!this.baseUrl)
                        throw new Error(
                          'The standard font "baseUrl" parameter must be specified, ensure that the "standardFontDataUrl" API parameter is provided.',
                        );
                      if (!t)
                        throw new Error('Font filename must be specified.');
                      const n = `${this.baseUrl}${t}`;
                      return this._fetchData(n).catch((e) => {
                        throw new Error(`Unable to load font data at: ${n}`);
                      });
                    }
                    _fetchData(e) {
                      (0, r.unreachable)(
                        'Abstract method `_fetchData` called.',
                      );
                    }
                  }
                  t.BaseStandardFontDataFactory = a;
                  class s {
                    constructor() {
                      this.constructor === s &&
                        (0, r.unreachable)('Cannot initialize BaseSVGFactory.');
                    }
                    create(e, t) {
                      let n =
                        arguments.length > 2 &&
                        void 0 !== arguments[2] &&
                        arguments[2];
                      if (e <= 0 || t <= 0)
                        throw new Error('Invalid SVG dimensions');
                      const r = this._createSVG('svg:svg');
                      return (
                        r.setAttribute('version', '1.1'),
                        n ||
                          (r.setAttribute('width', `${e}px`),
                          r.setAttribute('height', `${t}px`)),
                        r.setAttribute('preserveAspectRatio', 'none'),
                        r.setAttribute('viewBox', `0 0 ${e} ${t}`),
                        r
                      );
                    }
                    createElement(e) {
                      if ('string' != typeof e)
                        throw new Error('Invalid SVG element type');
                      return this._createSVG(e);
                    }
                    _createSVG(e) {
                      (0, r.unreachable)(
                        'Abstract method `_createSVG` called.',
                      );
                    }
                  }
                  t.BaseSVGFactory = s;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.MurmurHash3_64 = void 0);
                  var r = n(1);
                  const i = 3285377520,
                    o = 4294901760,
                    a = 65535;
                  t.MurmurHash3_64 = class {
                    constructor(e) {
                      (this.h1 = e ? 4294967295 & e : i),
                        (this.h2 = e ? 4294967295 & e : i);
                    }
                    update(e) {
                      let t, n;
                      if ('string' == typeof e) {
                        (t = new Uint8Array(2 * e.length)), (n = 0);
                        for (let r = 0, i = e.length; r < i; r++) {
                          const i = e.charCodeAt(r);
                          i <= 255
                            ? (t[n++] = i)
                            : ((t[n++] = i >>> 8), (t[n++] = 255 & i));
                        }
                      } else {
                        if (!(0, r.isArrayBuffer)(e))
                          throw new Error(
                            'Wrong data format in MurmurHash3_64_update. Input must be a string or array.',
                          );
                        (t = e.slice()), (n = t.byteLength);
                      }
                      const i = n >> 2,
                        s = n - 4 * i,
                        l = new Uint32Array(t.buffer, 0, i);
                      let c = 0,
                        h = 0,
                        u = this.h1,
                        d = this.h2;
                      const p = 3432918353,
                        f = 461845907,
                        g = 11601,
                        m = 13715;
                      for (let e = 0; e < i; e++)
                        1 & e
                          ? ((c = l[e]),
                            (c = ((c * p) & o) | ((c * g) & a)),
                            (c = (c << 15) | (c >>> 17)),
                            (c = ((c * f) & o) | ((c * m) & a)),
                            (u ^= c),
                            (u = (u << 13) | (u >>> 19)),
                            (u = 5 * u + 3864292196))
                          : ((h = l[e]),
                            (h = ((h * p) & o) | ((h * g) & a)),
                            (h = (h << 15) | (h >>> 17)),
                            (h = ((h * f) & o) | ((h * m) & a)),
                            (d ^= h),
                            (d = (d << 13) | (d >>> 19)),
                            (d = 5 * d + 3864292196));
                      switch (((c = 0), s)) {
                        case 3:
                          c ^= t[4 * i + 2] << 16;
                        case 2:
                          c ^= t[4 * i + 1] << 8;
                        case 1:
                          (c ^= t[4 * i]),
                            (c = ((c * p) & o) | ((c * g) & a)),
                            (c = (c << 15) | (c >>> 17)),
                            (c = ((c * f) & o) | ((c * m) & a)),
                            1 & i ? (u ^= c) : (d ^= c);
                      }
                      (this.h1 = u), (this.h2 = d);
                    }
                    hexdigest() {
                      let e = this.h1,
                        t = this.h2;
                      (e ^= t >>> 1),
                        (e = ((3981806797 * e) & o) | ((36045 * e) & a)),
                        (t =
                          ((4283543511 * t) & o) |
                          (((2950163797 * ((t << 16) | (e >>> 16))) & o) >>>
                            16)),
                        (e ^= t >>> 1),
                        (e = ((444984403 * e) & o) | ((60499 * e) & a)),
                        (t =
                          ((3301882366 * t) & o) |
                          (((3120437893 * ((t << 16) | (e >>> 16))) & o) >>>
                            16)),
                        (e ^= t >>> 1);
                      const n = (e >>> 0).toString(16),
                        r = (t >>> 0).toString(16);
                      return n.padStart(8, '0') + r.padStart(8, '0');
                    }
                  };
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.FontLoader = t.FontFaceObject = void 0);
                  var r = n(1);
                  class i {
                    constructor(e) {
                      let {
                        docId: t,
                        onUnsupportedFeature: n,
                        ownerDocument: o = globalThis.document,
                        styleElement: a = null,
                      } = e;
                      this.constructor === i &&
                        (0, r.unreachable)('Cannot initialize BaseFontLoader.'),
                        (this.docId = t),
                        (this._onUnsupportedFeature = n),
                        (this._document = o),
                        (this.nativeFontFaces = []),
                        (this.styleElement = null);
                    }
                    addNativeFontFace(e) {
                      this.nativeFontFaces.push(e), this._document.fonts.add(e);
                    }
                    insertRule(e) {
                      let t = this.styleElement;
                      t ||
                        ((t = this.styleElement =
                          this._document.createElement('style')),
                        (t.id = `PDFJS_FONT_STYLE_TAG_${this.docId}`),
                        this._document.documentElement
                          .getElementsByTagName('head')[0]
                          .append(t));
                      const n = t.sheet;
                      n.insertRule(e, n.cssRules.length);
                    }
                    clear() {
                      for (const e of this.nativeFontFaces)
                        this._document.fonts.delete(e);
                      (this.nativeFontFaces.length = 0),
                        this.styleElement &&
                          (this.styleElement.remove(),
                          (this.styleElement = null));
                    }
                    async bind(e) {
                      if (e.attached || e.missingFile) return;
                      if (((e.attached = !0), this.isFontLoadingAPISupported)) {
                        const t = e.createNativeFontFace();
                        if (t) {
                          this.addNativeFontFace(t);
                          try {
                            await t.loaded;
                          } catch (n) {
                            throw (
                              (this._onUnsupportedFeature({
                                featureId:
                                  r.UNSUPPORTED_FEATURES.errorFontLoadNative,
                              }),
                              (0, r.warn)(
                                `Failed to load font '${t.family}': '${n}'.`,
                              ),
                              (e.disableFontFace = !0),
                              n)
                            );
                          }
                        }
                        return;
                      }
                      const t = e.createFontFaceRule();
                      if (t) {
                        if (
                          (this.insertRule(t), this.isSyncFontLoadingSupported)
                        )
                          return;
                        await new Promise((n) => {
                          const r = this._queueLoadingCallback(n);
                          this._prepareFontLoadEvent([t], [e], r);
                        });
                      }
                    }
                    _queueLoadingCallback(e) {
                      (0, r.unreachable)(
                        'Abstract method `_queueLoadingCallback`.',
                      );
                    }
                    get isFontLoadingAPISupported() {
                      var e;
                      const t = !(
                        null === (e = this._document) ||
                        void 0 === e ||
                        !e.fonts
                      );
                      return (0, r.shadow)(
                        this,
                        'isFontLoadingAPISupported',
                        t,
                      );
                    }
                    get isSyncFontLoadingSupported() {
                      (0, r.unreachable)(
                        'Abstract method `isSyncFontLoadingSupported`.',
                      );
                    }
                    get _loadTestFont() {
                      (0, r.unreachable)('Abstract method `_loadTestFont`.');
                    }
                    _prepareFontLoadEvent(e, t, n) {
                      (0, r.unreachable)(
                        'Abstract method `_prepareFontLoadEvent`.',
                      );
                    }
                  }
                  let o;
                  (t.FontLoader = o),
                    (t.FontLoader = o =
                      class extends i {
                        constructor(e) {
                          super(e),
                            (this.loadingContext = {
                              requests: [],
                              nextRequestId: 0,
                            }),
                            (this.loadTestFontId = 0);
                        }
                        get isSyncFontLoadingSupported() {
                          let e = !1;
                          if ('undefined' == typeof navigator) e = !0;
                          else {
                            const t = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(
                              navigator.userAgent,
                            );
                            (null == t ? void 0 : t[1]) >= 14 && (e = !0);
                          }
                          return (0, r.shadow)(
                            this,
                            'isSyncFontLoadingSupported',
                            e,
                          );
                        }
                        _queueLoadingCallback(e) {
                          const t = this.loadingContext,
                            n = {
                              id: 'pdfjs-font-loading-' + t.nextRequestId++,
                              done: !1,
                              complete: function () {
                                for (
                                  (0, r.assert)(
                                    !n.done,
                                    'completeRequest() cannot be called twice.',
                                  ),
                                    n.done = !0;
                                  t.requests.length > 0 && t.requests[0].done;

                                ) {
                                  const e = t.requests.shift();
                                  setTimeout(e.callback, 0);
                                }
                              },
                              callback: e,
                            };
                          return t.requests.push(n), n;
                        }
                        get _loadTestFont() {
                          return (0, r.shadow)(
                            this,
                            '_loadTestFont',
                            atob(
                              'T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==',
                            ),
                          );
                        }
                        _prepareFontLoadEvent(e, t, n) {
                          function i(e, t) {
                            return (
                              (e.charCodeAt(t) << 24) |
                              (e.charCodeAt(t + 1) << 16) |
                              (e.charCodeAt(t + 2) << 8) |
                              (255 & e.charCodeAt(t + 3))
                            );
                          }
                          function o(e, t, n, r) {
                            return e.substring(0, t) + r + e.substring(t + n);
                          }
                          let a, s;
                          const l = this._document.createElement('canvas');
                          (l.width = 1), (l.height = 1);
                          const c = l.getContext('2d');
                          let h = 0;
                          const u = `lt${Date.now()}${this.loadTestFontId++}`;
                          let d = this._loadTestFont;
                          d = o(d, 976, u.length, u);
                          const p = 1482184792;
                          let f = i(d, 16);
                          for (a = 0, s = u.length - 3; a < s; a += 4)
                            f = (f - p + i(u, a)) | 0;
                          a < u.length && (f = (f - p + i(u + 'XXX', a)) | 0),
                            (d = o(d, 16, 4, (0, r.string32)(f)));
                          const g = `@font-face {font-family:"${u}";src:url(data:font/opentype;base64,${btoa(d)});}`;
                          this.insertRule(g);
                          const m = [];
                          for (const e of t) m.push(e.loadedName);
                          m.push(u);
                          const v = this._document.createElement('div');
                          (v.style.visibility = 'hidden'),
                            (v.style.width = v.style.height = '10px'),
                            (v.style.position = 'absolute'),
                            (v.style.top = v.style.left = '0px');
                          for (const e of m) {
                            const t = this._document.createElement('span');
                            (t.textContent = 'Hi'),
                              (t.style.fontFamily = e),
                              v.append(t);
                          }
                          this._document.body.append(v),
                            (function e(t, n) {
                              if ((h++, h > 30))
                                return (
                                  (0, r.warn)('Load test font never loaded.'),
                                  void n()
                                );
                              (c.font = '30px ' + t),
                                c.fillText('.', 0, 20),
                                c.getImageData(0, 0, 1, 1).data[3] > 0
                                  ? n()
                                  : setTimeout(e.bind(null, t, n));
                            })(u, () => {
                              v.remove(), n.complete();
                            });
                        }
                      }),
                    (t.FontFaceObject = class {
                      constructor(e, t) {
                        let {
                          isEvalSupported: n = !0,
                          disableFontFace: r = !1,
                          ignoreErrors: i = !1,
                          onUnsupportedFeature: o,
                          fontRegistry: a = null,
                        } = t;
                        this.compiledGlyphs = Object.create(null);
                        for (const t in e) this[t] = e[t];
                        (this.isEvalSupported = !1 !== n),
                          (this.disableFontFace = !0 === r),
                          (this.ignoreErrors = !0 === i),
                          (this._onUnsupportedFeature = o),
                          (this.fontRegistry = a);
                      }
                      createNativeFontFace() {
                        if (!this.data || this.disableFontFace) return null;
                        let e;
                        if (this.cssFontInfo) {
                          const t = { weight: this.cssFontInfo.fontWeight };
                          this.cssFontInfo.italicAngle &&
                            (t.style = `oblique ${this.cssFontInfo.italicAngle}deg`),
                            (e = new FontFace(
                              this.cssFontInfo.fontFamily,
                              this.data,
                              t,
                            ));
                        } else e = new FontFace(this.loadedName, this.data, {});
                        return (
                          this.fontRegistry &&
                            this.fontRegistry.registerFont(this),
                          e
                        );
                      }
                      createFontFaceRule() {
                        if (!this.data || this.disableFontFace) return null;
                        const e = (0, r.bytesToString)(this.data),
                          t = `url(data:${this.mimetype};base64,${btoa(e)});`;
                        let n;
                        if (this.cssFontInfo) {
                          let e = `font-weight: ${this.cssFontInfo.fontWeight};`;
                          this.cssFontInfo.italicAngle &&
                            (e += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`),
                            (n = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${e}src:${t}}`);
                        } else
                          n = `@font-face {font-family:"${this.loadedName}";src:${t}}`;
                        return (
                          this.fontRegistry &&
                            this.fontRegistry.registerFont(this, t),
                          n
                        );
                      }
                      getPathGenerator(e, t) {
                        if (void 0 !== this.compiledGlyphs[t])
                          return this.compiledGlyphs[t];
                        let n;
                        try {
                          n = e.get(this.loadedName + '_path_' + t);
                        } catch (e) {
                          if (!this.ignoreErrors) throw e;
                          return (
                            this._onUnsupportedFeature({
                              featureId:
                                r.UNSUPPORTED_FEATURES.errorFontGetPath,
                            }),
                            (0, r.warn)(
                              `getPathGenerator - ignoring character: "${e}".`,
                            ),
                            (this.compiledGlyphs[t] = function (e, t) {})
                          );
                        }
                        if (
                          this.isEvalSupported &&
                          r.FeatureTest.isEvalSupported
                        ) {
                          const e = [];
                          for (const t of n) {
                            const n = void 0 !== t.args ? t.args.join(',') : '';
                            e.push('c.', t.cmd, '(', n, ');\n');
                          }
                          return (this.compiledGlyphs[t] = new Function(
                            'c',
                            'size',
                            e.join(''),
                          ));
                        }
                        return (this.compiledGlyphs[t] = function (e, t) {
                          for (const r of n)
                            'scale' === r.cmd && (r.args = [t, -t]),
                              e[r.cmd].apply(e, r.args);
                        });
                      }
                    });
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.CanvasGraphics = void 0);
                  var r = n(133),
                    i = n(1),
                    o = n(138),
                    a = n(139),
                    s = n(3);
                  function l(e, t) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.add(e);
                  }
                  function c(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  const h = 4096,
                    u = s.isNodeJS && 'undefined' == typeof Path2D ? -1 : 1e3,
                    d = 16;
                  class p {
                    constructor(e) {
                      (this.canvasFactory = e),
                        (this.cache = Object.create(null));
                    }
                    getCanvas(e, t, n) {
                      let r;
                      return (
                        void 0 !== this.cache[e]
                          ? ((r = this.cache[e]),
                            this.canvasFactory.reset(r, t, n))
                          : ((r = this.canvasFactory.create(t, n)),
                            (this.cache[e] = r)),
                        r
                      );
                    }
                    delete(e) {
                      delete this.cache[e];
                    }
                    clear() {
                      for (const e in this.cache) {
                        const t = this.cache[e];
                        this.canvasFactory.destroy(t), delete this.cache[e];
                      }
                    }
                  }
                  function f(e, t, n, i, o, a, s, l, c, h) {
                    const [u, d, p, f, g, m] = (0, r.getCurrentTransform)(e);
                    if (0 === d && 0 === p) {
                      const r = s * u + g,
                        v = Math.round(r),
                        b = l * f + m,
                        y = Math.round(b),
                        _ = (s + c) * u + g,
                        w = Math.abs(Math.round(_) - v) || 1,
                        S = (l + h) * f + m,
                        A = Math.abs(Math.round(S) - y) || 1;
                      return (
                        e.setTransform(Math.sign(u), 0, 0, Math.sign(f), v, y),
                        e.drawImage(t, n, i, o, a, 0, 0, w, A),
                        e.setTransform(u, d, p, f, g, m),
                        [w, A]
                      );
                    }
                    if (0 === u && 0 === f) {
                      const r = l * p + g,
                        v = Math.round(r),
                        b = s * d + m,
                        y = Math.round(b),
                        _ = (l + h) * p + g,
                        w = Math.abs(Math.round(_) - v) || 1,
                        S = (s + c) * d + m,
                        A = Math.abs(Math.round(S) - y) || 1;
                      return (
                        e.setTransform(0, Math.sign(d), Math.sign(p), 0, v, y),
                        e.drawImage(t, n, i, o, a, 0, 0, A, w),
                        e.setTransform(u, d, p, f, g, m),
                        [A, w]
                      );
                    }
                    return (
                      e.drawImage(t, n, i, o, a, s, l, c, h),
                      [Math.hypot(u, d) * c, Math.hypot(p, f) * h]
                    );
                  }
                  class g {
                    constructor(e, t) {
                      (this.alphaIsShape = !1),
                        (this.fontSize = 0),
                        (this.fontSizeScale = 1),
                        (this.textMatrix = i.IDENTITY_MATRIX),
                        (this.textMatrixScale = 1),
                        (this.fontMatrix = i.FONT_IDENTITY_MATRIX),
                        (this.leading = 0),
                        (this.x = 0),
                        (this.y = 0),
                        (this.lineX = 0),
                        (this.lineY = 0),
                        (this.charSpacing = 0),
                        (this.wordSpacing = 0),
                        (this.textHScale = 1),
                        (this.textRenderingMode = i.TextRenderingMode.FILL),
                        (this.textRise = 0),
                        (this.fillColor = '#000000'),
                        (this.strokeColor = '#000000'),
                        (this.patternFill = !1),
                        (this.fillAlpha = 1),
                        (this.strokeAlpha = 1),
                        (this.lineWidth = 1),
                        (this.activeSMask = null),
                        (this.transferMaps = null),
                        this.startNewPathAndClipBox([0, 0, e, t]);
                    }
                    clone() {
                      const e = Object.create(this);
                      return (e.clipBox = this.clipBox.slice()), e;
                    }
                    setCurrentPoint(e, t) {
                      (this.x = e), (this.y = t);
                    }
                    updatePathMinMax(e, t, n) {
                      ([t, n] = i.Util.applyTransform([t, n], e)),
                        (this.minX = Math.min(this.minX, t)),
                        (this.minY = Math.min(this.minY, n)),
                        (this.maxX = Math.max(this.maxX, t)),
                        (this.maxY = Math.max(this.maxY, n));
                    }
                    updateRectMinMax(e, t) {
                      const n = i.Util.applyTransform(t, e),
                        r = i.Util.applyTransform(t.slice(2), e);
                      (this.minX = Math.min(this.minX, n[0], r[0])),
                        (this.minY = Math.min(this.minY, n[1], r[1])),
                        (this.maxX = Math.max(this.maxX, n[0], r[0])),
                        (this.maxY = Math.max(this.maxY, n[1], r[1]));
                    }
                    updateScalingPathMinMax(e, t) {
                      i.Util.scaleMinMax(e, t),
                        (this.minX = Math.min(this.minX, t[0])),
                        (this.maxX = Math.max(this.maxX, t[1])),
                        (this.minY = Math.min(this.minY, t[2])),
                        (this.maxY = Math.max(this.maxY, t[3]));
                    }
                    updateCurvePathMinMax(e, t, n, r, o, a, s, l, c, h) {
                      const u = i.Util.bezierBoundingBox(
                        t,
                        n,
                        r,
                        o,
                        a,
                        s,
                        l,
                        c,
                      );
                      if (h)
                        return (
                          (h[0] = Math.min(h[0], u[0], u[2])),
                          (h[1] = Math.max(h[1], u[0], u[2])),
                          (h[2] = Math.min(h[2], u[1], u[3])),
                          void (h[3] = Math.max(h[3], u[1], u[3]))
                        );
                      this.updateRectMinMax(e, u);
                    }
                    getPathBoundingBox() {
                      let e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : o.PathType.FILL,
                        t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null;
                      const n = [this.minX, this.minY, this.maxX, this.maxY];
                      if (e === o.PathType.STROKE) {
                        t ||
                          (0, i.unreachable)(
                            'Stroke bounding box must include transform.',
                          );
                        const e = i.Util.singularValueDecompose2dScale(t),
                          r = (e[0] * this.lineWidth) / 2,
                          o = (e[1] * this.lineWidth) / 2;
                        (n[0] -= r), (n[1] -= o), (n[2] += r), (n[3] += o);
                      }
                      return n;
                    }
                    updateClipFromPath() {
                      const e = i.Util.intersect(
                        this.clipBox,
                        this.getPathBoundingBox(),
                      );
                      this.startNewPathAndClipBox(e || [0, 0, 0, 0]);
                    }
                    isEmptyClip() {
                      return this.minX === 1 / 0;
                    }
                    startNewPathAndClipBox(e) {
                      (this.clipBox = e),
                        (this.minX = 1 / 0),
                        (this.minY = 1 / 0),
                        (this.maxX = 0),
                        (this.maxY = 0);
                    }
                    getClippedPathBoundingBox() {
                      let e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : o.PathType.FILL,
                        t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null;
                      return i.Util.intersect(
                        this.clipBox,
                        this.getPathBoundingBox(e, t),
                      );
                    }
                  }
                  function m(e, t) {
                    let n =
                      arguments.length > 2 && void 0 !== arguments[2]
                        ? arguments[2]
                        : null;
                    if (
                      'undefined' != typeof ImageData &&
                      t instanceof ImageData
                    )
                      return void e.putImageData(t, 0, 0);
                    const r = t.height,
                      o = t.width,
                      a = r % d,
                      s = (r - a) / d,
                      l = 0 === a ? s : s + 1,
                      c = e.createImageData(o, d);
                    let h,
                      u = 0;
                    const p = t.data,
                      f = c.data;
                    let g, m, v, b, y, _, w, S;
                    if (n)
                      switch (n.length) {
                        case 1:
                          (y = n[0]), (_ = n[0]), (w = n[0]), (S = n[0]);
                          break;
                        case 4:
                          (y = n[0]), (_ = n[1]), (w = n[2]), (S = n[3]);
                      }
                    if (t.kind === i.ImageKind.GRAYSCALE_1BPP) {
                      const t = p.byteLength,
                        n = new Uint32Array(f.buffer, 0, f.byteLength >> 2),
                        r = n.length,
                        b = (o + 7) >> 3;
                      let y = 4294967295,
                        _ = i.FeatureTest.isLittleEndian ? 4278190080 : 255;
                      for (
                        S && 255 === S[0] && 0 === S[255] && ([y, _] = [_, y]),
                          g = 0;
                        g < l;
                        g++
                      ) {
                        for (v = g < s ? d : a, h = 0, m = 0; m < v; m++) {
                          const e = t - u;
                          let r = 0;
                          const i = e > b ? o : 8 * e - 7,
                            a = -8 & i;
                          let s = 0,
                            l = 0;
                          for (; r < a; r += 8)
                            (l = p[u++]),
                              (n[h++] = 128 & l ? y : _),
                              (n[h++] = 64 & l ? y : _),
                              (n[h++] = 32 & l ? y : _),
                              (n[h++] = 16 & l ? y : _),
                              (n[h++] = 8 & l ? y : _),
                              (n[h++] = 4 & l ? y : _),
                              (n[h++] = 2 & l ? y : _),
                              (n[h++] = 1 & l ? y : _);
                          for (; r < i; r++)
                            0 === s && ((l = p[u++]), (s = 128)),
                              (n[h++] = l & s ? y : _),
                              (s >>= 1);
                        }
                        for (; h < r; ) n[h++] = 0;
                        e.putImageData(c, 0, g * d);
                      }
                    } else if (t.kind === i.ImageKind.RGBA_32BPP) {
                      const t = !!(y || _ || w);
                      for (m = 0, b = o * d * 4, g = 0; g < s; g++) {
                        if ((f.set(p.subarray(u, u + b)), (u += b), t))
                          for (let e = 0; e < b; e += 4)
                            y && (f[e + 0] = y[f[e + 0]]),
                              _ && (f[e + 1] = _[f[e + 1]]),
                              w && (f[e + 2] = w[f[e + 2]]);
                        e.putImageData(c, 0, m), (m += d);
                      }
                      if (g < l) {
                        if (((b = o * a * 4), f.set(p.subarray(u, u + b)), t))
                          for (let e = 0; e < b; e += 4)
                            y && (f[e + 0] = y[f[e + 0]]),
                              _ && (f[e + 1] = _[f[e + 1]]),
                              w && (f[e + 2] = w[f[e + 2]]);
                        e.putImageData(c, 0, m);
                      }
                    } else {
                      if (t.kind !== i.ImageKind.RGB_24BPP)
                        throw new Error(`bad image kind: ${t.kind}`);
                      {
                        const t = !!(y || _ || w);
                        for (v = d, b = o * v, g = 0; g < l; g++) {
                          for (
                            g >= s && ((v = a), (b = o * v)), h = 0, m = b;
                            m--;

                          )
                            (f[h++] = p[u++]),
                              (f[h++] = p[u++]),
                              (f[h++] = p[u++]),
                              (f[h++] = 255);
                          if (t)
                            for (let e = 0; e < h; e += 4)
                              y && (f[e + 0] = y[f[e + 0]]),
                                _ && (f[e + 1] = _[f[e + 1]]),
                                w && (f[e + 2] = w[f[e + 2]]);
                          e.putImageData(c, 0, g * d);
                        }
                      }
                    }
                  }
                  function v(e, t) {
                    if (t.bitmap) return void e.drawImage(t.bitmap, 0, 0);
                    const n = t.height,
                      r = t.width,
                      i = n % d,
                      o = (n - i) / d,
                      s = 0 === i ? o : o + 1,
                      l = e.createImageData(r, d);
                    let c = 0;
                    const h = t.data,
                      u = l.data;
                    for (let t = 0; t < s; t++) {
                      const n = t < o ? d : i;
                      ({ srcPos: c } = (0, a.applyMaskImageData)({
                        src: h,
                        srcPos: c,
                        dest: u,
                        width: r,
                        height: n,
                      })),
                        e.putImageData(l, 0, t * d);
                    }
                  }
                  function b(e, t) {
                    const n = [
                      'strokeStyle',
                      'fillStyle',
                      'fillRule',
                      'globalAlpha',
                      'lineWidth',
                      'lineCap',
                      'lineJoin',
                      'miterLimit',
                      'globalCompositeOperation',
                      'font',
                    ];
                    for (let r = 0, i = n.length; r < i; r++) {
                      const i = n[r];
                      void 0 !== e[i] && (t[i] = e[i]);
                    }
                    void 0 !== e.setLineDash &&
                      (t.setLineDash(e.getLineDash()),
                      (t.lineDashOffset = e.lineDashOffset));
                  }
                  function y(e, t) {
                    (e.strokeStyle = e.fillStyle = t || '#000000'),
                      (e.fillRule = 'nonzero'),
                      (e.globalAlpha = 1),
                      (e.lineWidth = 1),
                      (e.lineCap = 'butt'),
                      (e.lineJoin = 'miter'),
                      (e.miterLimit = 10),
                      (e.globalCompositeOperation = 'source-over'),
                      (e.font = '10px sans-serif'),
                      void 0 !== e.setLineDash &&
                        (e.setLineDash([]), (e.lineDashOffset = 0));
                  }
                  function _(e, t, n, r) {
                    const i = e.length;
                    for (let o = 3; o < i; o += 4) {
                      const i = e[o];
                      if (0 === i)
                        (e[o - 3] = t), (e[o - 2] = n), (e[o - 1] = r);
                      else if (i < 255) {
                        const a = 255 - i;
                        (e[o - 3] = (e[o - 3] * i + t * a) >> 8),
                          (e[o - 2] = (e[o - 2] * i + n * a) >> 8),
                          (e[o - 1] = (e[o - 1] * i + r * a) >> 8);
                      }
                    }
                  }
                  function w(e, t, n) {
                    const r = e.length,
                      i = 1 / 255;
                    for (let o = 3; o < r; o += 4) {
                      const r = n ? n[e[o]] : e[o];
                      t[o] = (t[o] * r * i) | 0;
                    }
                  }
                  function S(e, t, n) {
                    const r = e.length;
                    for (let i = 3; i < r; i += 4) {
                      const r = 77 * e[i - 3] + 152 * e[i - 2] + 28 * e[i - 1];
                      t[i] = n ? (t[i] * n[r >> 8]) >> 8 : (t[i] * r) >> 16;
                    }
                  }
                  function A(e, t, n, r) {
                    const i = r[0],
                      o = r[1],
                      a = r[2] - i,
                      s = r[3] - o;
                    0 !== a &&
                      0 !== s &&
                      ((function (e, t, n, r, i, o, a, s, l, c, h) {
                        const u = !!o,
                          d = u ? o[0] : 0,
                          p = u ? o[1] : 0,
                          f = u ? o[2] : 0;
                        let g;
                        g = 'Luminosity' === i ? S : w;
                        const m = Math.min(r, Math.ceil(1048576 / n));
                        for (let i = 0; i < r; i += m) {
                          const o = Math.min(m, r - i),
                            v = e.getImageData(s - c, i + (l - h), n, o),
                            b = t.getImageData(s, i + l, n, o);
                          u && _(v.data, d, p, f),
                            g(v.data, b.data, a),
                            t.putImageData(b, s, i + l);
                        }
                      })(
                        t.context,
                        n,
                        a,
                        s,
                        t.subtype,
                        t.backdrop,
                        t.transferMap,
                        i,
                        o,
                        t.offsetX,
                        t.offsetY,
                      ),
                      e.save(),
                      (e.globalAlpha = 1),
                      (e.globalCompositeOperation = 'source-over'),
                      e.setTransform(1, 0, 0, 1, 0, 0),
                      e.drawImage(n.canvas, 0, 0),
                      e.restore());
                  }
                  function x(e, t) {
                    const n = i.Util.singularValueDecompose2dScale(e);
                    (n[0] = Math.fround(n[0])), (n[1] = Math.fround(n[1]));
                    const o = Math.fround(
                      (globalThis.devicePixelRatio || 1) *
                        r.PixelsPerInch.PDF_TO_CSS_UNITS,
                    );
                    return void 0 !== t ? t : n[0] <= o || n[1] <= o;
                  }
                  const P = ['butt', 'round', 'square'],
                    E = ['miter', 'round', 'bevel'],
                    C = {},
                    T = {};
                  var k = new WeakSet();
                  class M {
                    constructor(e, t, n, r, i, o, a, s) {
                      l(this, k),
                        (this.ctx = e),
                        (this.current = new g(
                          this.ctx.canvas.width,
                          this.ctx.canvas.height,
                        )),
                        (this.stateStack = []),
                        (this.pendingClip = null),
                        (this.pendingEOFill = !1),
                        (this.res = null),
                        (this.xobjs = null),
                        (this.commonObjs = t),
                        (this.objs = n),
                        (this.canvasFactory = r),
                        (this.imageLayer = i),
                        (this.groupStack = []),
                        (this.processingType3 = null),
                        (this.baseTransform = null),
                        (this.baseTransformStack = []),
                        (this.groupLevel = 0),
                        (this.smaskStack = []),
                        (this.smaskCounter = 0),
                        (this.tempSMask = null),
                        (this.suspendedCtx = null),
                        (this.contentVisible = !0),
                        (this.markedContentStack = []),
                        (this.optionalContentConfig = o),
                        (this.cachedCanvases = new p(this.canvasFactory)),
                        (this.cachedPatterns = new Map()),
                        (this.annotationCanvasMap = a),
                        (this.viewportScale = 1),
                        (this.outputScaleX = 1),
                        (this.outputScaleY = 1),
                        (this.backgroundColor =
                          (null == s ? void 0 : s.background) || null),
                        (this.foregroundColor =
                          (null == s ? void 0 : s.foreground) || null),
                        (this._cachedScaleForStroking = null),
                        (this._cachedGetSinglePixelWidth = null),
                        (this._cachedBitmapsMap = new Map());
                    }
                    getObject(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      return 'string' == typeof e
                        ? e.startsWith('g_')
                          ? this.commonObjs.get(e)
                          : this.objs.get(e)
                        : t;
                    }
                    beginDrawing(e) {
                      let {
                        transform: t,
                        viewport: n,
                        transparency: i = !1,
                        background: o = null,
                      } = e;
                      const a = this.ctx.canvas.width,
                        s = this.ctx.canvas.height,
                        l = o || '#ffffff';
                      if (
                        (this.ctx.save(),
                        this.foregroundColor && this.backgroundColor)
                      ) {
                        this.ctx.fillStyle = this.foregroundColor;
                        const e = (this.foregroundColor = this.ctx.fillStyle);
                        this.ctx.fillStyle = this.backgroundColor;
                        const t = (this.backgroundColor = this.ctx.fillStyle);
                        let n = !0,
                          i = l;
                        if (
                          ((this.ctx.fillStyle = l),
                          (i = this.ctx.fillStyle),
                          (n =
                            'string' == typeof i &&
                            /^#[0-9A-Fa-f]{6}$/.test(i)),
                          ('#000000' === e && '#ffffff' === t) || e === t || !n)
                        )
                          this.foregroundColor = this.backgroundColor = null;
                        else {
                          const [n, o, a] = (0, r.getRGB)(i),
                            s = (e) =>
                              (e /= 255) <= 0.03928
                                ? e / 12.92
                                : ((e + 0.055) / 1.055) ** 2.4,
                            l = Math.round(
                              0.2126 * s(n) + 0.7152 * s(o) + 0.0722 * s(a),
                            );
                          this.selectColor = (n, r, i) => {
                            const o =
                              0.2126 * s(n) + 0.7152 * s(r) + 0.0722 * s(i);
                            return Math.round(o) === l ? t : e;
                          };
                        }
                      }
                      if (
                        ((this.ctx.fillStyle = this.backgroundColor || l),
                        this.ctx.fillRect(0, 0, a, s),
                        this.ctx.restore(),
                        i)
                      ) {
                        const e = this.cachedCanvases.getCanvas(
                          'transparent',
                          a,
                          s,
                        );
                        (this.compositeCtx = this.ctx),
                          (this.transparentCanvas = e.canvas),
                          (this.ctx = e.context),
                          this.ctx.save(),
                          this.ctx.transform(
                            ...(0, r.getCurrentTransform)(this.compositeCtx),
                          );
                      }
                      this.ctx.save(),
                        y(this.ctx, this.foregroundColor),
                        t &&
                          (this.ctx.transform(...t),
                          (this.outputScaleX = t[0]),
                          (this.outputScaleY = t[0])),
                        this.ctx.transform(...n.transform),
                        (this.viewportScale = n.scale),
                        (this.baseTransform = (0, r.getCurrentTransform)(
                          this.ctx,
                        )),
                        this.imageLayer &&
                          ((0, r.deprecated)(
                            'The `imageLayer` functionality will be removed in the future.',
                          ),
                          this.imageLayer.beginLayout());
                    }
                    executeOperatorList(e, t, n, r) {
                      const o = e.argsArray,
                        a = e.fnArray;
                      let s = t || 0;
                      const l = o.length;
                      if (l === s) return s;
                      const c = l - s > 10 && 'function' == typeof n,
                        h = c ? Date.now() + 15 : 0;
                      let u = 0;
                      const d = this.commonObjs,
                        p = this.objs;
                      let f;
                      for (;;) {
                        if (void 0 !== r && s === r.nextBreakPoint)
                          return r.breakIt(s, n), s;
                        if (((f = a[s]), f !== i.OPS.dependency))
                          this[f].apply(this, o[s]);
                        else
                          for (const e of o[s]) {
                            const t = e.startsWith('g_') ? d : p;
                            if (!t.has(e)) return t.get(e, n), s;
                          }
                        if ((s++, s === l)) return s;
                        if (c && ++u > 10) {
                          if (Date.now() > h) return n(), s;
                          u = 0;
                        }
                      }
                    }
                    endDrawing() {
                      c(this, k, R).call(this),
                        this.cachedCanvases.clear(),
                        this.cachedPatterns.clear();
                      for (const e of this._cachedBitmapsMap.values()) {
                        for (const t of e.values())
                          'undefined' != typeof HTMLCanvasElement &&
                            t instanceof HTMLCanvasElement &&
                            (t.width = t.height = 0);
                        e.clear();
                      }
                      this._cachedBitmapsMap.clear(),
                        this.imageLayer && this.imageLayer.endLayout();
                    }
                    _scaleImage(e, t) {
                      const n = e.width,
                        r = e.height;
                      let i,
                        o,
                        a = Math.max(Math.hypot(t[0], t[1]), 1),
                        s = Math.max(Math.hypot(t[2], t[3]), 1),
                        l = n,
                        c = r,
                        h = 'prescale1';
                      for (; (a > 2 && l > 1) || (s > 2 && c > 1); ) {
                        let t = l,
                          n = c;
                        a > 2 &&
                          l > 1 &&
                          ((t = Math.ceil(l / 2)), (a /= l / t)),
                          s > 2 &&
                            c > 1 &&
                            ((n = Math.ceil(c / 2)), (s /= c / n)),
                          (i = this.cachedCanvases.getCanvas(h, t, n)),
                          (o = i.context),
                          o.clearRect(0, 0, t, n),
                          o.drawImage(e, 0, 0, l, c, 0, 0, t, n),
                          (e = i.canvas),
                          (l = t),
                          (c = n),
                          (h = 'prescale1' === h ? 'prescale2' : 'prescale1');
                      }
                      return { img: e, paintWidth: l, paintHeight: c };
                    }
                    _createMaskCanvas(e) {
                      const t = this.ctx,
                        { width: n, height: a } = e,
                        s = this.current.fillColor,
                        l = this.current.patternFill,
                        c = (0, r.getCurrentTransform)(t);
                      let h, u, d, p;
                      if ((e.bitmap || e.data) && e.count > 1) {
                        const t = e.bitmap || e.data.buffer,
                          n = c.slice(0, 4);
                        (u = JSON.stringify(l ? n : [n, s])),
                          (h = this._cachedBitmapsMap.get(t)),
                          h ||
                            ((h = new Map()), this._cachedBitmapsMap.set(t, h));
                        const r = h.get(u);
                        if (r && !l)
                          return {
                            canvas: r,
                            offsetX: Math.round(Math.min(c[0], c[2]) + c[4]),
                            offsetY: Math.round(Math.min(c[1], c[3]) + c[5]),
                          };
                        d = r;
                      }
                      d ||
                        ((p = this.cachedCanvases.getCanvas(
                          'maskCanvas',
                          n,
                          a,
                        )),
                        v(p.context, e));
                      let g = i.Util.transform(c, [1 / n, 0, 0, -1 / a, 0, 0]);
                      g = i.Util.transform(g, [1, 0, 0, 1, 0, -a]);
                      const m = i.Util.applyTransform([0, 0], g),
                        b = i.Util.applyTransform([n, a], g),
                        y = i.Util.normalizeRect([m[0], m[1], b[0], b[1]]),
                        _ = Math.round(y[2] - y[0]) || 1,
                        w = Math.round(y[3] - y[1]) || 1,
                        S = this.cachedCanvases.getCanvas('fillCanvas', _, w),
                        A = S.context,
                        P = Math.min(m[0], b[0]),
                        E = Math.min(m[1], b[1]);
                      A.translate(-P, -E),
                        A.transform(...g),
                        d ||
                          ((d = this._scaleImage(
                            p.canvas,
                            (0, r.getCurrentTransformInverse)(A),
                          )),
                          (d = d.img),
                          h && l && h.set(u, d)),
                        (A.imageSmoothingEnabled = x(
                          (0, r.getCurrentTransform)(A),
                          e.interpolate,
                        )),
                        f(A, d, 0, 0, d.width, d.height, 0, 0, n, a),
                        (A.globalCompositeOperation = 'source-in');
                      const C = i.Util.transform(
                        (0, r.getCurrentTransformInverse)(A),
                        [1, 0, 0, 1, -P, -E],
                      );
                      return (
                        (A.fillStyle = l
                          ? s.getPattern(t, this, C, o.PathType.FILL)
                          : s),
                        A.fillRect(0, 0, n, a),
                        h &&
                          !l &&
                          (this.cachedCanvases.delete('fillCanvas'),
                          h.set(u, S.canvas)),
                        {
                          canvas: S.canvas,
                          offsetX: Math.round(P),
                          offsetY: Math.round(E),
                        }
                      );
                    }
                    setLineWidth(e) {
                      e !== this.current.lineWidth &&
                        (this._cachedScaleForStroking = null),
                        (this.current.lineWidth = e),
                        (this.ctx.lineWidth = e);
                    }
                    setLineCap(e) {
                      this.ctx.lineCap = P[e];
                    }
                    setLineJoin(e) {
                      this.ctx.lineJoin = E[e];
                    }
                    setMiterLimit(e) {
                      this.ctx.miterLimit = e;
                    }
                    setDash(e, t) {
                      const n = this.ctx;
                      void 0 !== n.setLineDash &&
                        (n.setLineDash(e), (n.lineDashOffset = t));
                    }
                    setRenderingIntent(e) {}
                    setFlatness(e) {}
                    setGState(e) {
                      for (let t = 0, n = e.length; t < n; t++) {
                        const n = e[t],
                          r = n[0],
                          i = n[1];
                        switch (r) {
                          case 'LW':
                            this.setLineWidth(i);
                            break;
                          case 'LC':
                            this.setLineCap(i);
                            break;
                          case 'LJ':
                            this.setLineJoin(i);
                            break;
                          case 'ML':
                            this.setMiterLimit(i);
                            break;
                          case 'D':
                            this.setDash(i[0], i[1]);
                            break;
                          case 'RI':
                            this.setRenderingIntent(i);
                            break;
                          case 'FL':
                            this.setFlatness(i);
                            break;
                          case 'Font':
                            this.setFont(i[0], i[1]);
                            break;
                          case 'CA':
                            this.current.strokeAlpha = n[1];
                            break;
                          case 'ca':
                            (this.current.fillAlpha = n[1]),
                              (this.ctx.globalAlpha = n[1]);
                            break;
                          case 'BM':
                            this.ctx.globalCompositeOperation = i;
                            break;
                          case 'SMask':
                            (this.current.activeSMask = i
                              ? this.tempSMask
                              : null),
                              (this.tempSMask = null),
                              this.checkSMaskState();
                            break;
                          case 'TR':
                            this.current.transferMaps = i;
                        }
                      }
                    }
                    get inSMaskMode() {
                      return !!this.suspendedCtx;
                    }
                    checkSMaskState() {
                      const e = this.inSMaskMode;
                      this.current.activeSMask && !e
                        ? this.beginSMaskMode()
                        : !this.current.activeSMask && e && this.endSMaskMode();
                    }
                    beginSMaskMode() {
                      if (this.inSMaskMode)
                        throw new Error(
                          'beginSMaskMode called while already in smask mode',
                        );
                      const e = this.ctx.canvas.width,
                        t = this.ctx.canvas.height,
                        n = 'smaskGroupAt' + this.groupLevel,
                        i = this.cachedCanvases.getCanvas(n, e, t);
                      (this.suspendedCtx = this.ctx), (this.ctx = i.context);
                      const o = this.ctx;
                      o.setTransform(
                        ...(0, r.getCurrentTransform)(this.suspendedCtx),
                      ),
                        b(this.suspendedCtx, o),
                        (function (e, t) {
                          if (e._removeMirroring)
                            throw new Error(
                              'Context is already forwarding operations.',
                            );
                          (e.__originalSave = e.save),
                            (e.__originalRestore = e.restore),
                            (e.__originalRotate = e.rotate),
                            (e.__originalScale = e.scale),
                            (e.__originalTranslate = e.translate),
                            (e.__originalTransform = e.transform),
                            (e.__originalSetTransform = e.setTransform),
                            (e.__originalResetTransform = e.resetTransform),
                            (e.__originalClip = e.clip),
                            (e.__originalMoveTo = e.moveTo),
                            (e.__originalLineTo = e.lineTo),
                            (e.__originalBezierCurveTo = e.bezierCurveTo),
                            (e.__originalRect = e.rect),
                            (e.__originalClosePath = e.closePath),
                            (e.__originalBeginPath = e.beginPath),
                            (e._removeMirroring = () => {
                              (e.save = e.__originalSave),
                                (e.restore = e.__originalRestore),
                                (e.rotate = e.__originalRotate),
                                (e.scale = e.__originalScale),
                                (e.translate = e.__originalTranslate),
                                (e.transform = e.__originalTransform),
                                (e.setTransform = e.__originalSetTransform),
                                (e.resetTransform = e.__originalResetTransform),
                                (e.clip = e.__originalClip),
                                (e.moveTo = e.__originalMoveTo),
                                (e.lineTo = e.__originalLineTo),
                                (e.bezierCurveTo = e.__originalBezierCurveTo),
                                (e.rect = e.__originalRect),
                                (e.closePath = e.__originalClosePath),
                                (e.beginPath = e.__originalBeginPath),
                                delete e._removeMirroring;
                            }),
                            (e.save = function () {
                              t.save(), this.__originalSave();
                            }),
                            (e.restore = function () {
                              t.restore(), this.__originalRestore();
                            }),
                            (e.translate = function (e, n) {
                              t.translate(e, n), this.__originalTranslate(e, n);
                            }),
                            (e.scale = function (e, n) {
                              t.scale(e, n), this.__originalScale(e, n);
                            }),
                            (e.transform = function (e, n, r, i, o, a) {
                              t.transform(e, n, r, i, o, a),
                                this.__originalTransform(e, n, r, i, o, a);
                            }),
                            (e.setTransform = function (e, n, r, i, o, a) {
                              t.setTransform(e, n, r, i, o, a),
                                this.__originalSetTransform(e, n, r, i, o, a);
                            }),
                            (e.resetTransform = function () {
                              t.resetTransform(),
                                this.__originalResetTransform();
                            }),
                            (e.rotate = function (e) {
                              t.rotate(e), this.__originalRotate(e);
                            }),
                            (e.clip = function (e) {
                              t.clip(e), this.__originalClip(e);
                            }),
                            (e.moveTo = function (e, n) {
                              t.moveTo(e, n), this.__originalMoveTo(e, n);
                            }),
                            (e.lineTo = function (e, n) {
                              t.lineTo(e, n), this.__originalLineTo(e, n);
                            }),
                            (e.bezierCurveTo = function (e, n, r, i, o, a) {
                              t.bezierCurveTo(e, n, r, i, o, a),
                                this.__originalBezierCurveTo(e, n, r, i, o, a);
                            }),
                            (e.rect = function (e, n, r, i) {
                              t.rect(e, n, r, i),
                                this.__originalRect(e, n, r, i);
                            }),
                            (e.closePath = function () {
                              t.closePath(), this.__originalClosePath();
                            }),
                            (e.beginPath = function () {
                              t.beginPath(), this.__originalBeginPath();
                            });
                        })(o, this.suspendedCtx),
                        this.setGState([
                          ['BM', 'source-over'],
                          ['ca', 1],
                          ['CA', 1],
                        ]);
                    }
                    endSMaskMode() {
                      if (!this.inSMaskMode)
                        throw new Error(
                          'endSMaskMode called while not in smask mode',
                        );
                      this.ctx._removeMirroring(),
                        b(this.ctx, this.suspendedCtx),
                        (this.ctx = this.suspendedCtx),
                        (this.suspendedCtx = null);
                    }
                    compose(e) {
                      if (!this.current.activeSMask) return;
                      e
                        ? ((e[0] = Math.floor(e[0])),
                          (e[1] = Math.floor(e[1])),
                          (e[2] = Math.ceil(e[2])),
                          (e[3] = Math.ceil(e[3])))
                        : (e = [
                            0,
                            0,
                            this.ctx.canvas.width,
                            this.ctx.canvas.height,
                          ]);
                      const t = this.current.activeSMask;
                      A(this.suspendedCtx, t, this.ctx, e),
                        this.ctx.save(),
                        this.ctx.setTransform(1, 0, 0, 1, 0, 0),
                        this.ctx.clearRect(
                          0,
                          0,
                          this.ctx.canvas.width,
                          this.ctx.canvas.height,
                        ),
                        this.ctx.restore();
                    }
                    save() {
                      this.inSMaskMode
                        ? (b(this.ctx, this.suspendedCtx),
                          this.suspendedCtx.save())
                        : this.ctx.save();
                      const e = this.current;
                      this.stateStack.push(e), (this.current = e.clone());
                    }
                    restore() {
                      0 === this.stateStack.length &&
                        this.inSMaskMode &&
                        this.endSMaskMode(),
                        0 !== this.stateStack.length &&
                          ((this.current = this.stateStack.pop()),
                          this.inSMaskMode
                            ? (this.suspendedCtx.restore(),
                              b(this.suspendedCtx, this.ctx))
                            : this.ctx.restore(),
                          this.checkSMaskState(),
                          (this.pendingClip = null),
                          (this._cachedScaleForStroking = null),
                          (this._cachedGetSinglePixelWidth = null));
                    }
                    transform(e, t, n, r, i, o) {
                      this.ctx.transform(e, t, n, r, i, o),
                        (this._cachedScaleForStroking = null),
                        (this._cachedGetSinglePixelWidth = null);
                    }
                    constructPath(e, t, n) {
                      const o = this.ctx,
                        a = this.current;
                      let s,
                        l,
                        c = a.x,
                        h = a.y;
                      const u = (0, r.getCurrentTransform)(o),
                        d =
                          (0 === u[0] && 0 === u[3]) ||
                          (0 === u[1] && 0 === u[2]),
                        p = d ? n.slice(0) : null;
                      for (let n = 0, r = 0, f = e.length; n < f; n++)
                        switch (0 | e[n]) {
                          case i.OPS.rectangle:
                            (c = t[r++]), (h = t[r++]);
                            const e = t[r++],
                              n = t[r++],
                              f = c + e,
                              g = h + n;
                            o.moveTo(c, h),
                              0 === e || 0 === n
                                ? o.lineTo(f, g)
                                : (o.lineTo(f, h),
                                  o.lineTo(f, g),
                                  o.lineTo(c, g)),
                              d || a.updateRectMinMax(u, [c, h, f, g]),
                              o.closePath();
                            break;
                          case i.OPS.moveTo:
                            (c = t[r++]),
                              (h = t[r++]),
                              o.moveTo(c, h),
                              d || a.updatePathMinMax(u, c, h);
                            break;
                          case i.OPS.lineTo:
                            (c = t[r++]),
                              (h = t[r++]),
                              o.lineTo(c, h),
                              d || a.updatePathMinMax(u, c, h);
                            break;
                          case i.OPS.curveTo:
                            (s = c),
                              (l = h),
                              (c = t[r + 4]),
                              (h = t[r + 5]),
                              o.bezierCurveTo(
                                t[r],
                                t[r + 1],
                                t[r + 2],
                                t[r + 3],
                                c,
                                h,
                              ),
                              a.updateCurvePathMinMax(
                                u,
                                s,
                                l,
                                t[r],
                                t[r + 1],
                                t[r + 2],
                                t[r + 3],
                                c,
                                h,
                                p,
                              ),
                              (r += 6);
                            break;
                          case i.OPS.curveTo2:
                            (s = c),
                              (l = h),
                              o.bezierCurveTo(
                                c,
                                h,
                                t[r],
                                t[r + 1],
                                t[r + 2],
                                t[r + 3],
                              ),
                              a.updateCurvePathMinMax(
                                u,
                                s,
                                l,
                                c,
                                h,
                                t[r],
                                t[r + 1],
                                t[r + 2],
                                t[r + 3],
                                p,
                              ),
                              (c = t[r + 2]),
                              (h = t[r + 3]),
                              (r += 4);
                            break;
                          case i.OPS.curveTo3:
                            (s = c),
                              (l = h),
                              (c = t[r + 2]),
                              (h = t[r + 3]),
                              o.bezierCurveTo(t[r], t[r + 1], c, h, c, h),
                              a.updateCurvePathMinMax(
                                u,
                                s,
                                l,
                                t[r],
                                t[r + 1],
                                c,
                                h,
                                c,
                                h,
                                p,
                              ),
                              (r += 4);
                            break;
                          case i.OPS.closePath:
                            o.closePath();
                        }
                      d && a.updateScalingPathMinMax(u, p),
                        a.setCurrentPoint(c, h);
                    }
                    closePath() {
                      this.ctx.closePath();
                    }
                    stroke(e) {
                      e = void 0 === e || e;
                      const t = this.ctx,
                        n = this.current.strokeColor;
                      (t.globalAlpha = this.current.strokeAlpha),
                        this.contentVisible &&
                          ('object' == typeof n && null != n && n.getPattern
                            ? (t.save(),
                              (t.strokeStyle = n.getPattern(
                                t,
                                this,
                                (0, r.getCurrentTransformInverse)(t),
                                o.PathType.STROKE,
                              )),
                              this.rescaleAndStroke(!1),
                              t.restore())
                            : this.rescaleAndStroke(!0)),
                        e &&
                          this.consumePath(
                            this.current.getClippedPathBoundingBox(),
                          ),
                        (t.globalAlpha = this.current.fillAlpha);
                    }
                    closeStroke() {
                      this.closePath(), this.stroke();
                    }
                    fill(e) {
                      e = void 0 === e || e;
                      const t = this.ctx,
                        n = this.current.fillColor;
                      let i = !1;
                      this.current.patternFill &&
                        (t.save(),
                        (t.fillStyle = n.getPattern(
                          t,
                          this,
                          (0, r.getCurrentTransformInverse)(t),
                          o.PathType.FILL,
                        )),
                        (i = !0));
                      const a = this.current.getClippedPathBoundingBox();
                      this.contentVisible &&
                        null !== a &&
                        (this.pendingEOFill
                          ? (t.fill('evenodd'), (this.pendingEOFill = !1))
                          : t.fill()),
                        i && t.restore(),
                        e && this.consumePath(a);
                    }
                    eoFill() {
                      (this.pendingEOFill = !0), this.fill();
                    }
                    fillStroke() {
                      this.fill(!1), this.stroke(!1), this.consumePath();
                    }
                    eoFillStroke() {
                      (this.pendingEOFill = !0), this.fillStroke();
                    }
                    closeFillStroke() {
                      this.closePath(), this.fillStroke();
                    }
                    closeEOFillStroke() {
                      (this.pendingEOFill = !0),
                        this.closePath(),
                        this.fillStroke();
                    }
                    endPath() {
                      this.consumePath();
                    }
                    clip() {
                      this.pendingClip = C;
                    }
                    eoClip() {
                      this.pendingClip = T;
                    }
                    beginText() {
                      (this.current.textMatrix = i.IDENTITY_MATRIX),
                        (this.current.textMatrixScale = 1),
                        (this.current.x = this.current.lineX = 0),
                        (this.current.y = this.current.lineY = 0);
                    }
                    endText() {
                      const e = this.pendingTextPaths,
                        t = this.ctx;
                      if (void 0 !== e) {
                        t.save(), t.beginPath();
                        for (const n of e)
                          t.setTransform(...n.transform),
                            t.translate(n.x, n.y),
                            n.addToPath(t, n.fontSize);
                        t.restore(),
                          t.clip(),
                          t.beginPath(),
                          delete this.pendingTextPaths;
                      } else t.beginPath();
                    }
                    setCharSpacing(e) {
                      this.current.charSpacing = e;
                    }
                    setWordSpacing(e) {
                      this.current.wordSpacing = e;
                    }
                    setHScale(e) {
                      this.current.textHScale = e / 100;
                    }
                    setLeading(e) {
                      this.current.leading = -e;
                    }
                    setFont(e, t) {
                      const n = this.commonObjs.get(e),
                        r = this.current;
                      if (!n) throw new Error(`Can't find font for ${e}`);
                      if (
                        ((r.fontMatrix =
                          n.fontMatrix || i.FONT_IDENTITY_MATRIX),
                        (0 !== r.fontMatrix[0] && 0 !== r.fontMatrix[3]) ||
                          (0, i.warn)('Invalid font matrix for font ' + e),
                        t < 0
                          ? ((t = -t), (r.fontDirection = -1))
                          : (r.fontDirection = 1),
                        (this.current.font = n),
                        (this.current.fontSize = t),
                        n.isType3Font)
                      )
                        return;
                      const o = n.loadedName || 'sans-serif';
                      let a = 'normal';
                      n.black ? (a = '900') : n.bold && (a = 'bold');
                      const s = n.italic ? 'italic' : 'normal',
                        l = `"${o}", ${n.fallbackName}`;
                      let c = t;
                      t < 16 ? (c = 16) : t > 100 && (c = 100),
                        (this.current.fontSizeScale = t / c),
                        (this.ctx.font = `${s} ${a} ${c}px ${l}`);
                    }
                    setTextRenderingMode(e) {
                      this.current.textRenderingMode = e;
                    }
                    setTextRise(e) {
                      this.current.textRise = e;
                    }
                    moveText(e, t) {
                      (this.current.x = this.current.lineX += e),
                        (this.current.y = this.current.lineY += t);
                    }
                    setLeadingMoveText(e, t) {
                      this.setLeading(-t), this.moveText(e, t);
                    }
                    setTextMatrix(e, t, n, r, i, o) {
                      (this.current.textMatrix = [e, t, n, r, i, o]),
                        (this.current.textMatrixScale = Math.hypot(e, t)),
                        (this.current.x = this.current.lineX = 0),
                        (this.current.y = this.current.lineY = 0);
                    }
                    nextLine() {
                      this.moveText(0, this.current.leading);
                    }
                    paintChar(e, t, n, o) {
                      const a = this.ctx,
                        s = this.current,
                        l = s.font,
                        c = s.textRenderingMode,
                        h = s.fontSize / s.fontSizeScale,
                        u = c & i.TextRenderingMode.FILL_STROKE_MASK,
                        d = !!(c & i.TextRenderingMode.ADD_TO_PATH_FLAG),
                        p = s.patternFill && !l.missingFile;
                      let f;
                      (l.disableFontFace || d || p) &&
                        (f = l.getPathGenerator(this.commonObjs, e)),
                        l.disableFontFace || p
                          ? (a.save(),
                            a.translate(t, n),
                            a.beginPath(),
                            f(a, h),
                            o && a.setTransform(...o),
                            (u !== i.TextRenderingMode.FILL &&
                              u !== i.TextRenderingMode.FILL_STROKE) ||
                              a.fill(),
                            (u !== i.TextRenderingMode.STROKE &&
                              u !== i.TextRenderingMode.FILL_STROKE) ||
                              a.stroke(),
                            a.restore())
                          : ((u !== i.TextRenderingMode.FILL &&
                              u !== i.TextRenderingMode.FILL_STROKE) ||
                              a.fillText(e, t, n),
                            (u !== i.TextRenderingMode.STROKE &&
                              u !== i.TextRenderingMode.FILL_STROKE) ||
                              a.strokeText(e, t, n)),
                        d &&
                          (
                            this.pendingTextPaths ||
                            (this.pendingTextPaths = [])
                          ).push({
                            transform: (0, r.getCurrentTransform)(a),
                            x: t,
                            y: n,
                            fontSize: h,
                            addToPath: f,
                          });
                    }
                    get isFontSubpixelAAEnabled() {
                      const { context: e } = this.cachedCanvases.getCanvas(
                        'isFontSubpixelAAEnabled',
                        10,
                        10,
                      );
                      e.scale(1.5, 1), e.fillText('I', 0, 10);
                      const t = e.getImageData(0, 0, 10, 10).data;
                      let n = !1;
                      for (let e = 3; e < t.length; e += 4)
                        if (t[e] > 0 && t[e] < 255) {
                          n = !0;
                          break;
                        }
                      return (0, i.shadow)(this, 'isFontSubpixelAAEnabled', n);
                    }
                    showText(e) {
                      const t = this.current,
                        n = t.font;
                      if (n.isType3Font) return this.showType3Text(e);
                      const a = t.fontSize;
                      if (0 === a) return;
                      const s = this.ctx,
                        l = t.fontSizeScale,
                        c = t.charSpacing,
                        h = t.wordSpacing,
                        u = t.fontDirection,
                        d = t.textHScale * u,
                        p = e.length,
                        f = n.vertical,
                        g = f ? 1 : -1,
                        m = n.defaultVMetrics,
                        v = a * t.fontMatrix[0],
                        b =
                          t.textRenderingMode === i.TextRenderingMode.FILL &&
                          !n.disableFontFace &&
                          !t.patternFill;
                      let y;
                      if (
                        (s.save(),
                        s.transform(...t.textMatrix),
                        s.translate(t.x, t.y + t.textRise),
                        u > 0 ? s.scale(d, -1) : s.scale(d, 1),
                        t.patternFill)
                      ) {
                        s.save();
                        const e = t.fillColor.getPattern(
                          s,
                          this,
                          (0, r.getCurrentTransformInverse)(s),
                          o.PathType.FILL,
                        );
                        (y = (0, r.getCurrentTransform)(s)),
                          s.restore(),
                          (s.fillStyle = e);
                      }
                      let _ = t.lineWidth;
                      const w = t.textMatrixScale;
                      if (0 === w || 0 === _) {
                        const e =
                          t.textRenderingMode &
                          i.TextRenderingMode.FILL_STROKE_MASK;
                        (e !== i.TextRenderingMode.STROKE &&
                          e !== i.TextRenderingMode.FILL_STROKE) ||
                          (_ = this.getSinglePixelWidth());
                      } else _ /= w;
                      1 !== l && (s.scale(l, l), (_ /= l)), (s.lineWidth = _);
                      let S,
                        A = 0;
                      for (S = 0; S < p; ++S) {
                        const t = e[S];
                        if ('number' == typeof t) {
                          A += (g * t * a) / 1e3;
                          continue;
                        }
                        let r = !1;
                        const i = (t.isSpace ? h : 0) + c,
                          o = t.fontChar,
                          d = t.accent;
                        let p,
                          _,
                          w,
                          x = t.width;
                        if (f) {
                          const e = t.vmetric || m,
                            n = -(t.vmetric ? e[1] : 0.5 * x) * v,
                            r = e[2] * v;
                          (x = e ? -e[0] : x), (p = n / l), (_ = (A + r) / l);
                        } else (p = A / l), (_ = 0);
                        if (n.remeasure && x > 0) {
                          const e = ((1e3 * s.measureText(o).width) / a) * l;
                          if (x < e && this.isFontSubpixelAAEnabled) {
                            const t = x / e;
                            (r = !0), s.save(), s.scale(t, 1), (p /= t);
                          } else x !== e && (p += (((x - e) / 2e3) * a) / l);
                        }
                        if (
                          this.contentVisible &&
                          (t.isInFont || n.missingFile)
                        )
                          if (b && !d) s.fillText(o, p, _);
                          else if ((this.paintChar(o, p, _, y), d)) {
                            const e = p + (a * d.offset.x) / l,
                              t = _ - (a * d.offset.y) / l;
                            this.paintChar(d.fontChar, e, t, y);
                          }
                        (w = f ? x * v - i * u : x * v + i * u),
                          (A += w),
                          r && s.restore();
                      }
                      f ? (t.y -= A) : (t.x += A * d),
                        s.restore(),
                        this.compose();
                    }
                    showType3Text(e) {
                      const t = this.ctx,
                        n = this.current,
                        r = n.font,
                        o = n.fontSize,
                        a = n.fontDirection,
                        s = r.vertical ? 1 : -1,
                        l = n.charSpacing,
                        c = n.wordSpacing,
                        h = n.textHScale * a,
                        u = n.fontMatrix || i.FONT_IDENTITY_MATRIX,
                        d = e.length;
                      let p, f, g, m;
                      if (
                        n.textRenderingMode !== i.TextRenderingMode.INVISIBLE &&
                        0 !== o
                      ) {
                        for (
                          this._cachedScaleForStroking = null,
                            this._cachedGetSinglePixelWidth = null,
                            t.save(),
                            t.transform(...n.textMatrix),
                            t.translate(n.x, n.y),
                            t.scale(h, a),
                            p = 0;
                          p < d;
                          ++p
                        ) {
                          if (((f = e[p]), 'number' == typeof f)) {
                            (m = (s * f * o) / 1e3),
                              this.ctx.translate(m, 0),
                              (n.x += m * h);
                            continue;
                          }
                          const a = (f.isSpace ? c : 0) + l,
                            d = r.charProcOperatorList[f.operatorListId];
                          d
                            ? (this.contentVisible &&
                                ((this.processingType3 = f),
                                this.save(),
                                t.scale(o, o),
                                t.transform(...u),
                                this.executeOperatorList(d),
                                this.restore()),
                              (g =
                                i.Util.applyTransform([f.width, 0], u)[0] * o +
                                a),
                              t.translate(g, 0),
                              (n.x += g * h))
                            : (0, i.warn)(
                                `Type3 character "${f.operatorListId}" is not available.`,
                              );
                        }
                        t.restore(), (this.processingType3 = null);
                      }
                    }
                    setCharWidth(e, t) {}
                    setCharWidthAndBounds(e, t, n, r, i, o) {
                      this.ctx.rect(n, r, i - n, o - r),
                        this.ctx.clip(),
                        this.endPath();
                    }
                    getColorN_Pattern(e) {
                      let t;
                      if ('TilingPattern' === e[0]) {
                        const n = e[1],
                          i =
                            this.baseTransform ||
                            (0, r.getCurrentTransform)(this.ctx),
                          a = {
                            createCanvasGraphics: (e) =>
                              new M(
                                e,
                                this.commonObjs,
                                this.objs,
                                this.canvasFactory,
                              ),
                          };
                        t = new o.TilingPattern(e, n, this.ctx, a, i);
                      } else t = this._getPattern(e[1], e[2]);
                      return t;
                    }
                    setStrokeColorN() {
                      this.current.strokeColor =
                        this.getColorN_Pattern(arguments);
                    }
                    setFillColorN() {
                      (this.current.fillColor =
                        this.getColorN_Pattern(arguments)),
                        (this.current.patternFill = !0);
                    }
                    setStrokeRGBColor(e, t, n) {
                      var r;
                      const o =
                        (null === (r = this.selectColor) || void 0 === r
                          ? void 0
                          : r.call(this, e, t, n)) ||
                        i.Util.makeHexColor(e, t, n);
                      (this.ctx.strokeStyle = o),
                        (this.current.strokeColor = o);
                    }
                    setFillRGBColor(e, t, n) {
                      var r;
                      const o =
                        (null === (r = this.selectColor) || void 0 === r
                          ? void 0
                          : r.call(this, e, t, n)) ||
                        i.Util.makeHexColor(e, t, n);
                      (this.ctx.fillStyle = o),
                        (this.current.fillColor = o),
                        (this.current.patternFill = !1);
                    }
                    _getPattern(e) {
                      let t,
                        n =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null;
                      return (
                        this.cachedPatterns.has(e)
                          ? (t = this.cachedPatterns.get(e))
                          : ((t = (0, o.getShadingPattern)(this.objs.get(e))),
                            this.cachedPatterns.set(e, t)),
                        n && (t.matrix = n),
                        t
                      );
                    }
                    shadingFill(e) {
                      if (!this.contentVisible) return;
                      const t = this.ctx;
                      this.save();
                      const n = this._getPattern(e);
                      t.fillStyle = n.getPattern(
                        t,
                        this,
                        (0, r.getCurrentTransformInverse)(t),
                        o.PathType.SHADING,
                      );
                      const a = (0, r.getCurrentTransformInverse)(t);
                      if (a) {
                        const e = t.canvas,
                          n = e.width,
                          r = e.height,
                          o = i.Util.applyTransform([0, 0], a),
                          s = i.Util.applyTransform([0, r], a),
                          l = i.Util.applyTransform([n, 0], a),
                          c = i.Util.applyTransform([n, r], a),
                          h = Math.min(o[0], s[0], l[0], c[0]),
                          u = Math.min(o[1], s[1], l[1], c[1]),
                          d = Math.max(o[0], s[0], l[0], c[0]),
                          p = Math.max(o[1], s[1], l[1], c[1]);
                        this.ctx.fillRect(h, u, d - h, p - u);
                      } else this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
                      this.compose(this.current.getClippedPathBoundingBox()),
                        this.restore();
                    }
                    beginInlineImage() {
                      (0, i.unreachable)('Should not call beginInlineImage');
                    }
                    beginImageData() {
                      (0, i.unreachable)('Should not call beginImageData');
                    }
                    paintFormXObjectBegin(e, t) {
                      if (
                        this.contentVisible &&
                        (this.save(),
                        this.baseTransformStack.push(this.baseTransform),
                        Array.isArray(e) &&
                          6 === e.length &&
                          this.transform(...e),
                        (this.baseTransform = (0, r.getCurrentTransform)(
                          this.ctx,
                        )),
                        t)
                      ) {
                        const e = t[2] - t[0],
                          n = t[3] - t[1];
                        this.ctx.rect(t[0], t[1], e, n),
                          this.current.updateRectMinMax(
                            (0, r.getCurrentTransform)(this.ctx),
                            t,
                          ),
                          this.clip(),
                          this.endPath();
                      }
                    }
                    paintFormXObjectEnd() {
                      this.contentVisible &&
                        (this.restore(),
                        (this.baseTransform = this.baseTransformStack.pop()));
                    }
                    beginGroup(e) {
                      if (!this.contentVisible) return;
                      this.save(),
                        this.inSMaskMode &&
                          (this.endSMaskMode(),
                          (this.current.activeSMask = null));
                      const t = this.ctx;
                      e.isolated ||
                        (0, i.info)('TODO: Support non-isolated groups.'),
                        e.knockout &&
                          (0, i.warn)('Knockout groups not supported.');
                      const n = (0, r.getCurrentTransform)(t);
                      if ((e.matrix && t.transform(...e.matrix), !e.bbox))
                        throw new Error('Bounding box is required.');
                      let o = i.Util.getAxialAlignedBoundingBox(
                        e.bbox,
                        (0, r.getCurrentTransform)(t),
                      );
                      const a = [0, 0, t.canvas.width, t.canvas.height];
                      o = i.Util.intersect(o, a) || [0, 0, 0, 0];
                      const s = Math.floor(o[0]),
                        l = Math.floor(o[1]);
                      let c = Math.max(Math.ceil(o[2]) - s, 1),
                        u = Math.max(Math.ceil(o[3]) - l, 1),
                        d = 1,
                        p = 1;
                      c > h && ((d = c / h), (c = h)),
                        u > h && ((p = u / h), (u = h)),
                        this.current.startNewPathAndClipBox([0, 0, c, u]);
                      let f = 'groupAt' + this.groupLevel;
                      e.smask && (f += '_smask_' + (this.smaskCounter++ % 2));
                      const g = this.cachedCanvases.getCanvas(f, c, u),
                        m = g.context;
                      m.scale(1 / d, 1 / p),
                        m.translate(-s, -l),
                        m.transform(...n),
                        e.smask
                          ? this.smaskStack.push({
                              canvas: g.canvas,
                              context: m,
                              offsetX: s,
                              offsetY: l,
                              scaleX: d,
                              scaleY: p,
                              subtype: e.smask.subtype,
                              backdrop: e.smask.backdrop,
                              transferMap: e.smask.transferMap || null,
                              startTransformInverse: null,
                            })
                          : (t.setTransform(1, 0, 0, 1, 0, 0),
                            t.translate(s, l),
                            t.scale(d, p),
                            t.save()),
                        b(t, m),
                        (this.ctx = m),
                        this.setGState([
                          ['BM', 'source-over'],
                          ['ca', 1],
                          ['CA', 1],
                        ]),
                        this.groupStack.push(t),
                        this.groupLevel++;
                    }
                    endGroup(e) {
                      if (!this.contentVisible) return;
                      this.groupLevel--;
                      const t = this.ctx,
                        n = this.groupStack.pop();
                      if (
                        ((this.ctx = n),
                        (this.ctx.imageSmoothingEnabled = !1),
                        e.smask)
                      )
                        (this.tempSMask = this.smaskStack.pop()),
                          this.restore();
                      else {
                        this.ctx.restore();
                        const e = (0, r.getCurrentTransform)(this.ctx);
                        this.restore(),
                          this.ctx.save(),
                          this.ctx.setTransform(...e);
                        const n = i.Util.getAxialAlignedBoundingBox(
                          [0, 0, t.canvas.width, t.canvas.height],
                          e,
                        );
                        this.ctx.drawImage(t.canvas, 0, 0),
                          this.ctx.restore(),
                          this.compose(n);
                      }
                    }
                    beginAnnotation(e, t, n, o, a) {
                      if (
                        (c(this, k, R).call(this),
                        y(this.ctx, this.foregroundColor),
                        this.ctx.save(),
                        this.save(),
                        this.baseTransform &&
                          this.ctx.setTransform(...this.baseTransform),
                        Array.isArray(t) && 4 === t.length)
                      ) {
                        const o = t[2] - t[0],
                          s = t[3] - t[1];
                        if (a && this.annotationCanvasMap) {
                          ((n = n.slice())[4] -= t[0]),
                            (n[5] -= t[1]),
                            ((t = t.slice())[0] = t[1] = 0),
                            (t[2] = o),
                            (t[3] = s);
                          const [a, l] = i.Util.singularValueDecompose2dScale(
                              (0, r.getCurrentTransform)(this.ctx),
                            ),
                            { viewportScale: c } = this,
                            h = Math.ceil(o * this.outputScaleX * c),
                            u = Math.ceil(s * this.outputScaleY * c);
                          this.annotationCanvas = this.canvasFactory.create(
                            h,
                            u,
                          );
                          const { canvas: d, context: p } =
                            this.annotationCanvas;
                          this.annotationCanvasMap.set(e, d),
                            (this.annotationCanvas.savedCtx = this.ctx),
                            (this.ctx = p),
                            this.ctx.setTransform(a, 0, 0, -l, 0, s * l),
                            y(this.ctx, this.foregroundColor);
                        } else
                          y(this.ctx, this.foregroundColor),
                            this.ctx.rect(t[0], t[1], o, s),
                            this.ctx.clip(),
                            this.endPath();
                      }
                      (this.current = new g(
                        this.ctx.canvas.width,
                        this.ctx.canvas.height,
                      )),
                        this.transform(...n),
                        this.transform(...o);
                    }
                    endAnnotation() {
                      this.annotationCanvas &&
                        ((this.ctx = this.annotationCanvas.savedCtx),
                        delete this.annotationCanvas.savedCtx,
                        delete this.annotationCanvas);
                    }
                    paintImageMaskXObject(e) {
                      if (!this.contentVisible) return;
                      const t = e.count;
                      (e = this.getObject(e.data, e)).count = t;
                      const n = this.ctx,
                        r = this.processingType3;
                      if (
                        r &&
                        (void 0 === r.compiled &&
                          (r.compiled = (function (e) {
                            const { width: t, height: n } = e;
                            if (t > u || n > u) return null;
                            const r = new Uint8Array([
                                0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,
                              ]),
                              i = t + 1;
                            let o,
                              a,
                              s,
                              l = new Uint8Array(i * (n + 1));
                            const c = (t + 7) & -8;
                            let h = new Uint8Array(c * n),
                              d = 0;
                            for (const t of e.data) {
                              let e = 128;
                              for (; e > 0; )
                                (h[d++] = t & e ? 0 : 255), (e >>= 1);
                            }
                            let p = 0;
                            for (
                              d = 0, 0 !== h[d] && ((l[0] = 1), ++p), a = 1;
                              a < t;
                              a++
                            )
                              h[d] !== h[d + 1] && ((l[a] = h[d] ? 2 : 1), ++p),
                                d++;
                            for (
                              0 !== h[d] && ((l[a] = 2), ++p), o = 1;
                              o < n;
                              o++
                            ) {
                              (d = o * c),
                                (s = o * i),
                                h[d - c] !== h[d] &&
                                  ((l[s] = h[d] ? 1 : 8), ++p);
                              let e = (h[d] ? 4 : 0) + (h[d - c] ? 8 : 0);
                              for (a = 1; a < t; a++)
                                (e =
                                  (e >> 2) +
                                  (h[d + 1] ? 4 : 0) +
                                  (h[d - c + 1] ? 8 : 0)),
                                  r[e] && ((l[s + a] = r[e]), ++p),
                                  d++;
                              if (
                                (h[d - c] !== h[d] &&
                                  ((l[s + a] = h[d] ? 2 : 4), ++p),
                                p > 1e3)
                              )
                                return null;
                            }
                            for (
                              d = c * (n - 1),
                                s = o * i,
                                0 !== h[d] && ((l[s] = 8), ++p),
                                a = 1;
                              a < t;
                              a++
                            )
                              h[d] !== h[d + 1] &&
                                ((l[s + a] = h[d] ? 4 : 8), ++p),
                                d++;
                            if ((0 !== h[d] && ((l[s + a] = 4), ++p), p > 1e3))
                              return null;
                            const f = new Int32Array([
                                0,
                                i,
                                -1,
                                0,
                                -i,
                                0,
                                0,
                                0,
                                1,
                              ]),
                              g = new Path2D();
                            for (o = 0; p && o <= n; o++) {
                              let e = o * i;
                              const n = e + t;
                              for (; e < n && !l[e]; ) e++;
                              if (e === n) continue;
                              g.moveTo(e % i, o);
                              const r = e;
                              let a = l[e];
                              do {
                                const t = f[a];
                                do {
                                  e += t;
                                } while (!l[e]);
                                const n = l[e];
                                5 !== n && 10 !== n
                                  ? ((a = n), (l[e] = 0))
                                  : ((a = n & ((51 * a) >> 4)),
                                    (l[e] &= (a >> 2) | (a << 2))),
                                  g.lineTo(e % i, (e / i) | 0),
                                  l[e] || --p;
                              } while (r !== e);
                              --o;
                            }
                            return (
                              (h = null),
                              (l = null),
                              function (e) {
                                e.save(),
                                  e.scale(1 / t, -1 / n),
                                  e.translate(0, -n),
                                  e.fill(g),
                                  e.beginPath(),
                                  e.restore();
                              }
                            );
                          })(e)),
                        r.compiled)
                      )
                        return void r.compiled(n);
                      const i = this._createMaskCanvas(e),
                        o = i.canvas;
                      n.save(),
                        n.setTransform(1, 0, 0, 1, 0, 0),
                        n.drawImage(o, i.offsetX, i.offsetY),
                        n.restore(),
                        this.compose();
                    }
                    paintImageMaskXObjectRepeat(e, t) {
                      let n =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : 0,
                        o =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : 0,
                        a = arguments.length > 4 ? arguments[4] : void 0,
                        s = arguments.length > 5 ? arguments[5] : void 0;
                      if (!this.contentVisible) return;
                      e = this.getObject(e.data, e);
                      const l = this.ctx;
                      l.save();
                      const c = (0, r.getCurrentTransform)(l);
                      l.transform(t, n, o, a, 0, 0);
                      const h = this._createMaskCanvas(e);
                      l.setTransform(1, 0, 0, 1, 0, 0);
                      for (let e = 0, r = s.length; e < r; e += 2) {
                        const r = i.Util.transform(c, [
                            t,
                            n,
                            o,
                            a,
                            s[e],
                            s[e + 1],
                          ]),
                          [u, d] = i.Util.applyTransform([0, 0], r);
                        l.drawImage(h.canvas, u, d);
                      }
                      l.restore(), this.compose();
                    }
                    paintImageMaskXObjectGroup(e) {
                      if (!this.contentVisible) return;
                      const t = this.ctx,
                        n = this.current.fillColor,
                        i = this.current.patternFill;
                      for (const a of e) {
                        const {
                            data: e,
                            width: s,
                            height: l,
                            transform: c,
                          } = a,
                          h = this.cachedCanvases.getCanvas('maskCanvas', s, l),
                          u = h.context;
                        u.save(),
                          v(u, this.getObject(e, a)),
                          (u.globalCompositeOperation = 'source-in'),
                          (u.fillStyle = i
                            ? n.getPattern(
                                u,
                                this,
                                (0, r.getCurrentTransformInverse)(t),
                                o.PathType.FILL,
                              )
                            : n),
                          u.fillRect(0, 0, s, l),
                          u.restore(),
                          t.save(),
                          t.transform(...c),
                          t.scale(1, -1),
                          f(t, h.canvas, 0, 0, s, l, 0, -1, 1, 1),
                          t.restore();
                      }
                      this.compose();
                    }
                    paintImageXObject(e) {
                      if (!this.contentVisible) return;
                      const t = this.getObject(e);
                      t
                        ? this.paintInlineImageXObject(t)
                        : (0, i.warn)("Dependent image isn't ready yet");
                    }
                    paintImageXObjectRepeat(e, t, n, r) {
                      if (!this.contentVisible) return;
                      const o = this.getObject(e);
                      if (!o)
                        return void (0, i.warn)(
                          "Dependent image isn't ready yet",
                        );
                      const a = o.width,
                        s = o.height,
                        l = [];
                      for (let e = 0, i = r.length; e < i; e += 2)
                        l.push({
                          transform: [t, 0, 0, n, r[e], r[e + 1]],
                          x: 0,
                          y: 0,
                          w: a,
                          h: s,
                        });
                      this.paintInlineImageXObjectGroup(o, l);
                    }
                    paintInlineImageXObject(e) {
                      if (!this.contentVisible) return;
                      const t = e.width,
                        n = e.height,
                        o = this.ctx;
                      let a;
                      if (
                        (this.save(),
                        o.scale(1 / t, -1 / n),
                        ('function' == typeof HTMLElement &&
                          e instanceof HTMLElement) ||
                          !e.data)
                      )
                        a = e;
                      else {
                        const r = this.cachedCanvases.getCanvas(
                          'inlineImage',
                          t,
                          n,
                        );
                        m(r.context, e, this.current.transferMaps),
                          (a = r.canvas);
                      }
                      const s = this._scaleImage(
                        a,
                        (0, r.getCurrentTransformInverse)(o),
                      );
                      o.imageSmoothingEnabled = x(
                        (0, r.getCurrentTransform)(o),
                        e.interpolate,
                      );
                      const [l, c] = f(
                        o,
                        s.img,
                        0,
                        0,
                        s.paintWidth,
                        s.paintHeight,
                        0,
                        -n,
                        t,
                        n,
                      );
                      if (this.imageLayer) {
                        const [t, o] = i.Util.applyTransform(
                          [0, -n],
                          (0, r.getCurrentTransform)(this.ctx),
                        );
                        this.imageLayer.appendImage({
                          imgData: e,
                          left: t,
                          top: o,
                          width: l,
                          height: c,
                        });
                      }
                      this.compose(), this.restore();
                    }
                    paintInlineImageXObjectGroup(e, t) {
                      if (!this.contentVisible) return;
                      const n = this.ctx,
                        o = e.width,
                        a = e.height,
                        s = this.cachedCanvases.getCanvas('inlineImage', o, a);
                      m(s.context, e, this.current.transferMaps);
                      for (const l of t) {
                        if (
                          (n.save(),
                          n.transform(...l.transform),
                          n.scale(1, -1),
                          f(n, s.canvas, l.x, l.y, l.w, l.h, 0, -1, 1, 1),
                          this.imageLayer)
                        ) {
                          const [t, n] = i.Util.applyTransform(
                            [l.x, l.y],
                            (0, r.getCurrentTransform)(this.ctx),
                          );
                          this.imageLayer.appendImage({
                            imgData: e,
                            left: t,
                            top: n,
                            width: o,
                            height: a,
                          });
                        }
                        n.restore();
                      }
                      this.compose();
                    }
                    paintSolidColorImageMask() {
                      this.contentVisible &&
                        (this.ctx.fillRect(0, 0, 1, 1), this.compose());
                    }
                    markPoint(e) {}
                    markPointProps(e, t) {}
                    beginMarkedContent(e) {
                      this.markedContentStack.push({ visible: !0 });
                    }
                    beginMarkedContentProps(e, t) {
                      'OC' === e
                        ? this.markedContentStack.push({
                            visible: this.optionalContentConfig.isVisible(t),
                          })
                        : this.markedContentStack.push({ visible: !0 }),
                        (this.contentVisible = this.isContentVisible());
                    }
                    endMarkedContent() {
                      this.markedContentStack.pop(),
                        (this.contentVisible = this.isContentVisible());
                    }
                    beginCompat() {}
                    endCompat() {}
                    consumePath(e) {
                      const t = this.current.isEmptyClip();
                      this.pendingClip && this.current.updateClipFromPath(),
                        this.pendingClip || this.compose(e);
                      const n = this.ctx;
                      this.pendingClip &&
                        (t ||
                          (this.pendingClip === T
                            ? n.clip('evenodd')
                            : n.clip()),
                        (this.pendingClip = null)),
                        this.current.startNewPathAndClipBox(
                          this.current.clipBox,
                        ),
                        n.beginPath();
                    }
                    getSinglePixelWidth() {
                      if (!this._cachedGetSinglePixelWidth) {
                        const e = (0, r.getCurrentTransform)(this.ctx);
                        if (0 === e[1] && 0 === e[2])
                          this._cachedGetSinglePixelWidth =
                            1 / Math.min(Math.abs(e[0]), Math.abs(e[3]));
                        else {
                          const t = Math.abs(e[0] * e[3] - e[2] * e[1]),
                            n = Math.hypot(e[0], e[2]),
                            r = Math.hypot(e[1], e[3]);
                          this._cachedGetSinglePixelWidth = Math.max(n, r) / t;
                        }
                      }
                      return this._cachedGetSinglePixelWidth;
                    }
                    getScaleForStroking() {
                      if (!this._cachedScaleForStroking) {
                        const { lineWidth: e } = this.current,
                          t = (0, r.getCurrentTransform)(this.ctx);
                        let n, i;
                        if (0 === t[1] && 0 === t[2]) {
                          const r = Math.abs(t[0]),
                            o = Math.abs(t[3]);
                          if (0 === e) (n = 1 / r), (i = 1 / o);
                          else {
                            const t = r * e,
                              a = o * e;
                            (n = t < 1 ? 1 / t : 1), (i = a < 1 ? 1 / a : 1);
                          }
                        } else {
                          const r = Math.abs(t[0] * t[3] - t[2] * t[1]),
                            o = Math.hypot(t[0], t[1]),
                            a = Math.hypot(t[2], t[3]);
                          if (0 === e) (n = a / r), (i = o / r);
                          else {
                            const t = e * r;
                            (n = a > t ? a / t : 1), (i = o > t ? o / t : 1);
                          }
                        }
                        this._cachedScaleForStroking = [n, i];
                      }
                      return this._cachedScaleForStroking;
                    }
                    rescaleAndStroke(e) {
                      const { ctx: t } = this,
                        { lineWidth: n } = this.current,
                        [i, o] = this.getScaleForStroking();
                      if (((t.lineWidth = n || 1), 1 === i && 1 === o))
                        return void t.stroke();
                      let a, s, l;
                      e &&
                        ((a = (0, r.getCurrentTransform)(t)),
                        (s = t.getLineDash().slice()),
                        (l = t.lineDashOffset)),
                        t.scale(i, o);
                      const c = Math.max(i, o);
                      t.setLineDash(t.getLineDash().map((e) => e / c)),
                        (t.lineDashOffset /= c),
                        t.stroke(),
                        e &&
                          (t.setTransform(...a),
                          t.setLineDash(s),
                          (t.lineDashOffset = l));
                    }
                    isContentVisible() {
                      for (
                        let e = this.markedContentStack.length - 1;
                        e >= 0;
                        e--
                      )
                        if (!this.markedContentStack[e].visible) return !1;
                      return !0;
                    }
                  }
                  function R() {
                    for (; this.stateStack.length || this.inSMaskMode; )
                      this.restore();
                    this.ctx.restore(),
                      this.transparentCanvas &&
                        ((this.ctx = this.compositeCtx),
                        this.ctx.save(),
                        this.ctx.setTransform(1, 0, 0, 1, 0, 0),
                        this.ctx.drawImage(this.transparentCanvas, 0, 0),
                        this.ctx.restore(),
                        (this.transparentCanvas = null));
                  }
                  t.CanvasGraphics = M;
                  for (const e in i.OPS)
                    void 0 !== M.prototype[e] &&
                      (M.prototype[i.OPS[e]] = M.prototype[e]);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.TilingPattern = t.PathType = void 0),
                    (t.getShadingPattern = function (e) {
                      switch (e[0]) {
                        case 'RadialAxial':
                          return new c(e);
                        case 'Mesh':
                          return new d(e);
                        case 'Dummy':
                          return new p();
                      }
                      throw new Error(`Unknown IR type: ${e[0]}`);
                    });
                  var r = n(1),
                    i = n(133),
                    o = n(3);
                  const a = {
                    FILL: 'Fill',
                    STROKE: 'Stroke',
                    SHADING: 'Shading',
                  };
                  function s(e, t) {
                    if (!t || o.isNodeJS) return;
                    const n = t[2] - t[0],
                      r = t[3] - t[1],
                      i = new Path2D();
                    i.rect(t[0], t[1], n, r), e.clip(i);
                  }
                  t.PathType = a;
                  class l {
                    constructor() {
                      this.constructor === l &&
                        (0, r.unreachable)(
                          'Cannot initialize BaseShadingPattern.',
                        );
                    }
                    getPattern() {
                      (0, r.unreachable)(
                        'Abstract method `getPattern` called.',
                      );
                    }
                  }
                  class c extends l {
                    constructor(e) {
                      super(),
                        (this._type = e[1]),
                        (this._bbox = e[2]),
                        (this._colorStops = e[3]),
                        (this._p0 = e[4]),
                        (this._p1 = e[5]),
                        (this._r0 = e[6]),
                        (this._r1 = e[7]),
                        (this.matrix = null);
                    }
                    _createGradient(e) {
                      let t;
                      'axial' === this._type
                        ? (t = e.createLinearGradient(
                            this._p0[0],
                            this._p0[1],
                            this._p1[0],
                            this._p1[1],
                          ))
                        : 'radial' === this._type &&
                          (t = e.createRadialGradient(
                            this._p0[0],
                            this._p0[1],
                            this._r0,
                            this._p1[0],
                            this._p1[1],
                            this._r1,
                          ));
                      for (const e of this._colorStops)
                        t.addColorStop(e[0], e[1]);
                      return t;
                    }
                    getPattern(e, t, n, o) {
                      let l;
                      if (o === a.STROKE || o === a.FILL) {
                        const a = t.current.getClippedPathBoundingBox(
                            o,
                            (0, i.getCurrentTransform)(e),
                          ) || [0, 0, 0, 0],
                          c = Math.ceil(a[2] - a[0]) || 1,
                          h = Math.ceil(a[3] - a[1]) || 1,
                          u = t.cachedCanvases.getCanvas('pattern', c, h, !0),
                          d = u.context;
                        d.clearRect(0, 0, d.canvas.width, d.canvas.height),
                          d.beginPath(),
                          d.rect(0, 0, d.canvas.width, d.canvas.height),
                          d.translate(-a[0], -a[1]),
                          (n = r.Util.transform(n, [1, 0, 0, 1, a[0], a[1]])),
                          d.transform(...t.baseTransform),
                          this.matrix && d.transform(...this.matrix),
                          s(d, this._bbox),
                          (d.fillStyle = this._createGradient(d)),
                          d.fill(),
                          (l = e.createPattern(u.canvas, 'no-repeat'));
                        const p = new DOMMatrix(n);
                        try {
                          l.setTransform(p);
                        } catch (e) {
                          (0, r.warn)(
                            `RadialAxialShadingPattern.getPattern: "${null == e ? void 0 : e.message}".`,
                          );
                        }
                      } else s(e, this._bbox), (l = this._createGradient(e));
                      return l;
                    }
                  }
                  function h(e, t, n, r, i, o, a, s) {
                    const l = t.coords,
                      c = t.colors,
                      h = e.data,
                      u = 4 * e.width;
                    let d;
                    l[n + 1] > l[r + 1] &&
                      ((d = n), (n = r), (r = d), (d = o), (o = a), (a = d)),
                      l[r + 1] > l[i + 1] &&
                        ((d = r), (r = i), (i = d), (d = a), (a = s), (s = d)),
                      l[n + 1] > l[r + 1] &&
                        ((d = n), (n = r), (r = d), (d = o), (o = a), (a = d));
                    const p = (l[n] + t.offsetX) * t.scaleX,
                      f = (l[n + 1] + t.offsetY) * t.scaleY,
                      g = (l[r] + t.offsetX) * t.scaleX,
                      m = (l[r + 1] + t.offsetY) * t.scaleY,
                      v = (l[i] + t.offsetX) * t.scaleX,
                      b = (l[i + 1] + t.offsetY) * t.scaleY;
                    if (f >= b) return;
                    const y = c[o],
                      _ = c[o + 1],
                      w = c[o + 2],
                      S = c[a],
                      A = c[a + 1],
                      x = c[a + 2],
                      P = c[s],
                      E = c[s + 1],
                      C = c[s + 2],
                      T = Math.round(f),
                      k = Math.round(b);
                    let M, R, O, D, I, L, F, N;
                    for (let e = T; e <= k; e++) {
                      if (e < m) {
                        let t;
                        (t = e < f ? 0 : (f - e) / (f - m)),
                          (M = p - (p - g) * t),
                          (R = y - (y - S) * t),
                          (O = _ - (_ - A) * t),
                          (D = w - (w - x) * t);
                      } else {
                        let t;
                        (t = e > b ? 1 : m === b ? 0 : (m - e) / (m - b)),
                          (M = g - (g - v) * t),
                          (R = S - (S - P) * t),
                          (O = A - (A - E) * t),
                          (D = x - (x - C) * t);
                      }
                      let t;
                      (t = e < f ? 0 : e > b ? 1 : (f - e) / (f - b)),
                        (I = p - (p - v) * t),
                        (L = y - (y - P) * t),
                        (F = _ - (_ - E) * t),
                        (N = w - (w - C) * t);
                      const n = Math.round(Math.min(M, I)),
                        r = Math.round(Math.max(M, I));
                      let i = u * e + 4 * n;
                      for (let e = n; e <= r; e++)
                        (t = (M - e) / (M - I)),
                          t < 0 ? (t = 0) : t > 1 && (t = 1),
                          (h[i++] = (R - (R - L) * t) | 0),
                          (h[i++] = (O - (O - F) * t) | 0),
                          (h[i++] = (D - (D - N) * t) | 0),
                          (h[i++] = 255);
                    }
                  }
                  function u(e, t, n) {
                    const r = t.coords,
                      i = t.colors;
                    let o, a;
                    switch (t.type) {
                      case 'lattice':
                        const s = t.verticesPerRow,
                          l = Math.floor(r.length / s) - 1,
                          c = s - 1;
                        for (o = 0; o < l; o++) {
                          let t = o * s;
                          for (let o = 0; o < c; o++, t++)
                            h(
                              e,
                              n,
                              r[t],
                              r[t + 1],
                              r[t + s],
                              i[t],
                              i[t + 1],
                              i[t + s],
                            ),
                              h(
                                e,
                                n,
                                r[t + s + 1],
                                r[t + 1],
                                r[t + s],
                                i[t + s + 1],
                                i[t + 1],
                                i[t + s],
                              );
                        }
                        break;
                      case 'triangles':
                        for (o = 0, a = r.length; o < a; o += 3)
                          h(
                            e,
                            n,
                            r[o],
                            r[o + 1],
                            r[o + 2],
                            i[o],
                            i[o + 1],
                            i[o + 2],
                          );
                        break;
                      default:
                        throw new Error('illegal figure');
                    }
                  }
                  class d extends l {
                    constructor(e) {
                      super(),
                        (this._coords = e[2]),
                        (this._colors = e[3]),
                        (this._figures = e[4]),
                        (this._bounds = e[5]),
                        (this._bbox = e[7]),
                        (this._background = e[8]),
                        (this.matrix = null);
                    }
                    _createMeshCanvas(e, t, n) {
                      const r = Math.floor(this._bounds[0]),
                        i = Math.floor(this._bounds[1]),
                        o = Math.ceil(this._bounds[2]) - r,
                        a = Math.ceil(this._bounds[3]) - i,
                        s = Math.min(Math.ceil(Math.abs(o * e[0] * 1.1)), 3e3),
                        l = Math.min(Math.ceil(Math.abs(a * e[1] * 1.1)), 3e3),
                        c = o / s,
                        h = a / l,
                        d = {
                          coords: this._coords,
                          colors: this._colors,
                          offsetX: -r,
                          offsetY: -i,
                          scaleX: 1 / c,
                          scaleY: 1 / h,
                        },
                        p = s + 4,
                        f = l + 4,
                        g = n.getCanvas('mesh', p, f, !1),
                        m = g.context,
                        v = m.createImageData(s, l);
                      if (t) {
                        const e = v.data;
                        for (let n = 0, r = e.length; n < r; n += 4)
                          (e[n] = t[0]),
                            (e[n + 1] = t[1]),
                            (e[n + 2] = t[2]),
                            (e[n + 3] = 255);
                      }
                      for (const e of this._figures) u(v, e, d);
                      return (
                        m.putImageData(v, 2, 2),
                        {
                          canvas: g.canvas,
                          offsetX: r - 2 * c,
                          offsetY: i - 2 * h,
                          scaleX: c,
                          scaleY: h,
                        }
                      );
                    }
                    getPattern(e, t, n, o) {
                      let l;
                      if ((s(e, this._bbox), o === a.SHADING))
                        l = r.Util.singularValueDecompose2dScale(
                          (0, i.getCurrentTransform)(e),
                        );
                      else if (
                        ((l = r.Util.singularValueDecompose2dScale(
                          t.baseTransform,
                        )),
                        this.matrix)
                      ) {
                        const e = r.Util.singularValueDecompose2dScale(
                          this.matrix,
                        );
                        l = [l[0] * e[0], l[1] * e[1]];
                      }
                      const c = this._createMeshCanvas(
                        l,
                        o === a.SHADING ? null : this._background,
                        t.cachedCanvases,
                      );
                      return (
                        o !== a.SHADING &&
                          (e.setTransform(...t.baseTransform),
                          this.matrix && e.transform(...this.matrix)),
                        e.translate(c.offsetX, c.offsetY),
                        e.scale(c.scaleX, c.scaleY),
                        e.createPattern(c.canvas, 'no-repeat')
                      );
                    }
                  }
                  class p extends l {
                    getPattern() {
                      return 'hotpink';
                    }
                  }
                  const f = 1,
                    g = 2;
                  class m {
                    static get MAX_PATTERN_SIZE() {
                      return (0, r.shadow)(this, 'MAX_PATTERN_SIZE', 3e3);
                    }
                    constructor(e, t, n, r, i) {
                      (this.operatorList = e[2]),
                        (this.matrix = e[3] || [1, 0, 0, 1, 0, 0]),
                        (this.bbox = e[4]),
                        (this.xstep = e[5]),
                        (this.ystep = e[6]),
                        (this.paintType = e[7]),
                        (this.tilingType = e[8]),
                        (this.color = t),
                        (this.ctx = n),
                        (this.canvasGraphicsFactory = r),
                        (this.baseTransform = i);
                    }
                    createPatternCanvas(e) {
                      const t = this.operatorList,
                        n = this.bbox,
                        o = this.xstep,
                        a = this.ystep,
                        s = this.paintType,
                        l = this.tilingType,
                        c = this.color,
                        h = this.canvasGraphicsFactory;
                      (0, r.info)('TilingType: ' + l);
                      const u = n[0],
                        d = n[1],
                        p = n[2],
                        f = n[3],
                        g = r.Util.singularValueDecompose2dScale(this.matrix),
                        m = r.Util.singularValueDecompose2dScale(
                          this.baseTransform,
                        ),
                        v = [g[0] * m[0], g[1] * m[1]],
                        b = this.getSizeAndScale(
                          o,
                          this.ctx.canvas.width,
                          v[0],
                        ),
                        y = this.getSizeAndScale(
                          a,
                          this.ctx.canvas.height,
                          v[1],
                        ),
                        _ = e.cachedCanvases.getCanvas(
                          'pattern',
                          b.size,
                          y.size,
                          !0,
                        ),
                        w = _.context,
                        S = h.createCanvasGraphics(w);
                      (S.groupLevel = e.groupLevel),
                        this.setFillAndStrokeStyleToContext(S, s, c);
                      let A = u,
                        x = d,
                        P = p,
                        E = f;
                      return (
                        u < 0 && ((A = 0), (P += Math.abs(u))),
                        d < 0 && ((x = 0), (E += Math.abs(d))),
                        w.translate(-b.scale * A, -y.scale * x),
                        S.transform(b.scale, 0, 0, y.scale, 0, 0),
                        w.save(),
                        this.clipBbox(S, A, x, P, E),
                        (S.baseTransform = (0, i.getCurrentTransform)(S.ctx)),
                        S.executeOperatorList(t),
                        S.endDrawing(),
                        {
                          canvas: _.canvas,
                          scaleX: b.scale,
                          scaleY: y.scale,
                          offsetX: A,
                          offsetY: x,
                        }
                      );
                    }
                    getSizeAndScale(e, t, n) {
                      e = Math.abs(e);
                      const r = Math.max(m.MAX_PATTERN_SIZE, t);
                      let i = Math.ceil(e * n);
                      return (
                        i >= r ? (i = r) : (n = i / e), { scale: n, size: i }
                      );
                    }
                    clipBbox(e, t, n, r, o) {
                      const a = r - t,
                        s = o - n;
                      e.ctx.rect(t, n, a, s),
                        e.current.updateRectMinMax(
                          (0, i.getCurrentTransform)(e.ctx),
                          [t, n, r, o],
                        ),
                        e.clip(),
                        e.endPath();
                    }
                    setFillAndStrokeStyleToContext(e, t, n) {
                      const i = e.ctx,
                        o = e.current;
                      switch (t) {
                        case f:
                          const e = this.ctx;
                          (i.fillStyle = e.fillStyle),
                            (i.strokeStyle = e.strokeStyle),
                            (o.fillColor = e.fillStyle),
                            (o.strokeColor = e.strokeStyle);
                          break;
                        case g:
                          const a = r.Util.makeHexColor(n[0], n[1], n[2]);
                          (i.fillStyle = a),
                            (i.strokeStyle = a),
                            (o.fillColor = a),
                            (o.strokeColor = a);
                          break;
                        default:
                          throw new r.FormatError(
                            `Unsupported paint type: ${t}`,
                          );
                      }
                    }
                    getPattern(e, t, n, i) {
                      let o = n;
                      i !== a.SHADING &&
                        ((o = r.Util.transform(o, t.baseTransform)),
                        this.matrix && (o = r.Util.transform(o, this.matrix)));
                      const s = this.createPatternCanvas(t);
                      let l = new DOMMatrix(o);
                      (l = l.translate(s.offsetX, s.offsetY)),
                        (l = l.scale(1 / s.scaleX, 1 / s.scaleY));
                      const c = e.createPattern(s.canvas, 'repeat');
                      try {
                        c.setTransform(l);
                      } catch (e) {
                        (0, r.warn)(
                          `TilingPattern.getPattern: "${null == e ? void 0 : e.message}".`,
                        );
                      }
                      return c;
                    }
                  }
                  t.TilingPattern = m;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.applyMaskImageData = function (e) {
                      let {
                        src: t,
                        srcPos: n = 0,
                        dest: i,
                        destPos: o = 0,
                        width: a,
                        height: s,
                        inverseDecode: l = !1,
                      } = e;
                      const c = r.FeatureTest.isLittleEndian ? 4278190080 : 255,
                        [h, u] = l ? [0, c] : [c, 0],
                        d = a >> 3,
                        p = 7 & a,
                        f = t.length;
                      i = new Uint32Array(i.buffer);
                      for (let e = 0; e < s; e++) {
                        for (const e = n + d; n < e; n++) {
                          const e = n < f ? t[n] : 255;
                          (i[o++] = 128 & e ? u : h),
                            (i[o++] = 64 & e ? u : h),
                            (i[o++] = 32 & e ? u : h),
                            (i[o++] = 16 & e ? u : h),
                            (i[o++] = 8 & e ? u : h),
                            (i[o++] = 4 & e ? u : h),
                            (i[o++] = 2 & e ? u : h),
                            (i[o++] = 1 & e ? u : h);
                        }
                        if (0 === p) continue;
                        const e = n < f ? t[n++] : 255;
                        for (let t = 0; t < p; t++)
                          i[o++] = e & (1 << (7 - t)) ? u : h;
                      }
                      return { srcPos: n, destPos: o };
                    });
                  var r = n(1);
                },
                (e, t) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.GlobalWorkerOptions = void 0);
                  const n = Object.create(null);
                  (t.GlobalWorkerOptions = n),
                    (n.workerPort =
                      void 0 === n.workerPort ? null : n.workerPort),
                    (n.workerSrc = void 0 === n.workerSrc ? '' : n.workerSrc);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.MessageHandler = void 0);
                  var r = n(1);
                  const i = 1,
                    o = 2,
                    a = 1,
                    s = 2,
                    l = 3,
                    c = 4,
                    h = 5,
                    u = 6,
                    d = 7,
                    p = 8;
                  function f(e) {
                    switch (
                      (e instanceof Error ||
                        ('object' == typeof e && null !== e) ||
                        (0, r.unreachable)(
                          'wrapReason: Expected "reason" to be a (possibly cloned) Error.',
                        ),
                      e.name)
                    ) {
                      case 'AbortException':
                        return new r.AbortException(e.message);
                      case 'MissingPDFException':
                        return new r.MissingPDFException(e.message);
                      case 'PasswordException':
                        return new r.PasswordException(e.message, e.code);
                      case 'UnexpectedResponseException':
                        return new r.UnexpectedResponseException(
                          e.message,
                          e.status,
                        );
                      case 'UnknownErrorException':
                        return new r.UnknownErrorException(
                          e.message,
                          e.details,
                        );
                      default:
                        return new r.UnknownErrorException(
                          e.message,
                          e.toString(),
                        );
                    }
                  }
                  t.MessageHandler = class {
                    constructor(e, t, n) {
                      (this.sourceName = e),
                        (this.targetName = t),
                        (this.comObj = n),
                        (this.callbackId = 1),
                        (this.streamId = 1),
                        (this.streamSinks = Object.create(null)),
                        (this.streamControllers = Object.create(null)),
                        (this.callbackCapabilities = Object.create(null)),
                        (this.actionHandler = Object.create(null)),
                        (this._onComObjOnMessage = (e) => {
                          const t = e.data;
                          if (t.targetName !== this.sourceName) return;
                          if (t.stream)
                            return void this._processStreamMessage(t);
                          if (t.callback) {
                            const e = t.callbackId,
                              n = this.callbackCapabilities[e];
                            if (!n)
                              throw new Error(`Cannot resolve callback ${e}`);
                            if (
                              (delete this.callbackCapabilities[e],
                              t.callback === i)
                            )
                              n.resolve(t.data);
                            else {
                              if (t.callback !== o)
                                throw new Error('Unexpected callback case');
                              n.reject(f(t.reason));
                            }
                            return;
                          }
                          const r = this.actionHandler[t.action];
                          if (!r)
                            throw new Error(
                              `Unknown action from worker: ${t.action}`,
                            );
                          if (t.callbackId) {
                            const e = this.sourceName,
                              a = t.sourceName;
                            new Promise(function (e) {
                              e(r(t.data));
                            }).then(
                              function (r) {
                                n.postMessage({
                                  sourceName: e,
                                  targetName: a,
                                  callback: i,
                                  callbackId: t.callbackId,
                                  data: r,
                                });
                              },
                              function (r) {
                                n.postMessage({
                                  sourceName: e,
                                  targetName: a,
                                  callback: o,
                                  callbackId: t.callbackId,
                                  reason: f(r),
                                });
                              },
                            );
                          } else
                            t.streamId ? this._createStreamSink(t) : r(t.data);
                        }),
                        n.addEventListener('message', this._onComObjOnMessage);
                    }
                    on(e, t) {
                      const n = this.actionHandler;
                      if (n[e])
                        throw new Error(
                          `There is already an actionName called "${e}"`,
                        );
                      n[e] = t;
                    }
                    send(e, t, n) {
                      this.comObj.postMessage(
                        {
                          sourceName: this.sourceName,
                          targetName: this.targetName,
                          action: e,
                          data: t,
                        },
                        n,
                      );
                    }
                    sendWithPromise(e, t, n) {
                      const i = this.callbackId++,
                        o = (0, r.createPromiseCapability)();
                      this.callbackCapabilities[i] = o;
                      try {
                        this.comObj.postMessage(
                          {
                            sourceName: this.sourceName,
                            targetName: this.targetName,
                            action: e,
                            callbackId: i,
                            data: t,
                          },
                          n,
                        );
                      } catch (e) {
                        o.reject(e);
                      }
                      return o.promise;
                    }
                    sendWithStream(e, t, n, i) {
                      const o = this.streamId++,
                        s = this.sourceName,
                        l = this.targetName,
                        c = this.comObj;
                      return new ReadableStream(
                        {
                          start: (n) => {
                            const a = (0, r.createPromiseCapability)();
                            return (
                              (this.streamControllers[o] = {
                                controller: n,
                                startCall: a,
                                pullCall: null,
                                cancelCall: null,
                                isClosed: !1,
                              }),
                              c.postMessage(
                                {
                                  sourceName: s,
                                  targetName: l,
                                  action: e,
                                  streamId: o,
                                  data: t,
                                  desiredSize: n.desiredSize,
                                },
                                i,
                              ),
                              a.promise
                            );
                          },
                          pull: (e) => {
                            const t = (0, r.createPromiseCapability)();
                            return (
                              (this.streamControllers[o].pullCall = t),
                              c.postMessage({
                                sourceName: s,
                                targetName: l,
                                stream: u,
                                streamId: o,
                                desiredSize: e.desiredSize,
                              }),
                              t.promise
                            );
                          },
                          cancel: (e) => {
                            (0, r.assert)(
                              e instanceof Error,
                              'cancel must have a valid reason',
                            );
                            const t = (0, r.createPromiseCapability)();
                            return (
                              (this.streamControllers[o].cancelCall = t),
                              (this.streamControllers[o].isClosed = !0),
                              c.postMessage({
                                sourceName: s,
                                targetName: l,
                                stream: a,
                                streamId: o,
                                reason: f(e),
                              }),
                              t.promise
                            );
                          },
                        },
                        n,
                      );
                    }
                    _createStreamSink(e) {
                      const t = e.streamId,
                        n = this.sourceName,
                        i = e.sourceName,
                        o = this.comObj,
                        a = this,
                        s = this.actionHandler[e.action],
                        u = {
                          enqueue(e) {
                            let a =
                                arguments.length > 1 && void 0 !== arguments[1]
                                  ? arguments[1]
                                  : 1,
                              s = arguments.length > 2 ? arguments[2] : void 0;
                            if (this.isCancelled) return;
                            const l = this.desiredSize;
                            (this.desiredSize -= a),
                              l > 0 &&
                                this.desiredSize <= 0 &&
                                ((this.sinkCapability = (0,
                                r.createPromiseCapability)()),
                                (this.ready = this.sinkCapability.promise)),
                              o.postMessage(
                                {
                                  sourceName: n,
                                  targetName: i,
                                  stream: c,
                                  streamId: t,
                                  chunk: e,
                                },
                                s,
                              );
                          },
                          close() {
                            this.isCancelled ||
                              ((this.isCancelled = !0),
                              o.postMessage({
                                sourceName: n,
                                targetName: i,
                                stream: l,
                                streamId: t,
                              }),
                              delete a.streamSinks[t]);
                          },
                          error(e) {
                            (0, r.assert)(
                              e instanceof Error,
                              'error must have a valid reason',
                            ),
                              this.isCancelled ||
                                ((this.isCancelled = !0),
                                o.postMessage({
                                  sourceName: n,
                                  targetName: i,
                                  stream: h,
                                  streamId: t,
                                  reason: f(e),
                                }));
                          },
                          sinkCapability: (0, r.createPromiseCapability)(),
                          onPull: null,
                          onCancel: null,
                          isCancelled: !1,
                          desiredSize: e.desiredSize,
                          ready: null,
                        };
                      u.sinkCapability.resolve(),
                        (u.ready = u.sinkCapability.promise),
                        (this.streamSinks[t] = u),
                        new Promise(function (t) {
                          t(s(e.data, u));
                        }).then(
                          function () {
                            o.postMessage({
                              sourceName: n,
                              targetName: i,
                              stream: p,
                              streamId: t,
                              success: !0,
                            });
                          },
                          function (e) {
                            o.postMessage({
                              sourceName: n,
                              targetName: i,
                              stream: p,
                              streamId: t,
                              reason: f(e),
                            });
                          },
                        );
                    }
                    _processStreamMessage(e) {
                      const t = e.streamId,
                        n = this.sourceName,
                        i = e.sourceName,
                        o = this.comObj,
                        g = this.streamControllers[t],
                        m = this.streamSinks[t];
                      switch (e.stream) {
                        case p:
                          e.success
                            ? g.startCall.resolve()
                            : g.startCall.reject(f(e.reason));
                          break;
                        case d:
                          e.success
                            ? g.pullCall.resolve()
                            : g.pullCall.reject(f(e.reason));
                          break;
                        case u:
                          if (!m) {
                            o.postMessage({
                              sourceName: n,
                              targetName: i,
                              stream: d,
                              streamId: t,
                              success: !0,
                            });
                            break;
                          }
                          m.desiredSize <= 0 &&
                            e.desiredSize > 0 &&
                            m.sinkCapability.resolve(),
                            (m.desiredSize = e.desiredSize),
                            new Promise(function (e) {
                              e(m.onPull && m.onPull());
                            }).then(
                              function () {
                                o.postMessage({
                                  sourceName: n,
                                  targetName: i,
                                  stream: d,
                                  streamId: t,
                                  success: !0,
                                });
                              },
                              function (e) {
                                o.postMessage({
                                  sourceName: n,
                                  targetName: i,
                                  stream: d,
                                  streamId: t,
                                  reason: f(e),
                                });
                              },
                            );
                          break;
                        case c:
                          if (
                            ((0, r.assert)(
                              g,
                              'enqueue should have stream controller',
                            ),
                            g.isClosed)
                          )
                            break;
                          g.controller.enqueue(e.chunk);
                          break;
                        case l:
                          if (
                            ((0, r.assert)(
                              g,
                              'close should have stream controller',
                            ),
                            g.isClosed)
                          )
                            break;
                          (g.isClosed = !0),
                            g.controller.close(),
                            this._deleteStreamController(g, t);
                          break;
                        case h:
                          (0, r.assert)(
                            g,
                            'error should have stream controller',
                          ),
                            g.controller.error(f(e.reason)),
                            this._deleteStreamController(g, t);
                          break;
                        case s:
                          e.success
                            ? g.cancelCall.resolve()
                            : g.cancelCall.reject(f(e.reason)),
                            this._deleteStreamController(g, t);
                          break;
                        case a:
                          if (!m) break;
                          new Promise(function (t) {
                            t(m.onCancel && m.onCancel(f(e.reason)));
                          }).then(
                            function () {
                              o.postMessage({
                                sourceName: n,
                                targetName: i,
                                stream: s,
                                streamId: t,
                                success: !0,
                              });
                            },
                            function (e) {
                              o.postMessage({
                                sourceName: n,
                                targetName: i,
                                stream: s,
                                streamId: t,
                                reason: f(e),
                              });
                            },
                          ),
                            m.sinkCapability.reject(f(e.reason)),
                            (m.isCancelled = !0),
                            delete this.streamSinks[t];
                          break;
                        default:
                          throw new Error('Unexpected stream case');
                      }
                    }
                    async _deleteStreamController(e, t) {
                      await Promise.allSettled([
                        e.startCall && e.startCall.promise,
                        e.pullCall && e.pullCall.promise,
                        e.cancelCall && e.cancelCall.promise,
                      ]),
                        delete this.streamControllers[t];
                    }
                    destroy() {
                      this.comObj.removeEventListener(
                        'message',
                        this._onComObjOnMessage,
                      );
                    }
                  };
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.Metadata = void 0);
                  var r = n(1);
                  function i(e, t, n) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.set(e, n);
                  }
                  function o(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, s(e, t, 'get'));
                  }
                  function a(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, s(e, t, 'set'), n),
                      n
                    );
                  }
                  function s(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var l = new WeakMap(),
                    c = new WeakMap();
                  t.Metadata = class {
                    constructor(e) {
                      let { parsedData: t, rawData: n } = e;
                      i(this, l, { writable: !0, value: void 0 }),
                        i(this, c, { writable: !0, value: void 0 }),
                        a(this, l, t),
                        a(this, c, n);
                    }
                    getRaw() {
                      return o(this, c);
                    }
                    get(e) {
                      var t;
                      return null !== (t = o(this, l).get(e)) && void 0 !== t
                        ? t
                        : null;
                    }
                    getAll() {
                      return (0, r.objectFromMap)(o(this, l));
                    }
                    has(e) {
                      return o(this, l).has(e);
                    }
                  };
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.OptionalContentConfig = void 0);
                  var r = n(1);
                  function i(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function o(e, t, n) {
                    a(e, t), t.set(e, n);
                  }
                  function a(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function s(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, c(e, t, 'set'), n),
                      n
                    );
                  }
                  function l(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, c(e, t, 'get'));
                  }
                  function c(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  const h = Symbol('INTERNAL');
                  var u = new WeakMap();
                  class d {
                    constructor(e, t) {
                      o(this, u, { writable: !0, value: !0 }),
                        (this.name = e),
                        (this.intent = t);
                    }
                    get visible() {
                      return l(this, u);
                    }
                    _setVisible(e, t) {
                      e !== h &&
                        (0, r.unreachable)(
                          'Internal method `_setVisible` called.',
                        ),
                        s(this, u, t);
                    }
                  }
                  var p = new WeakMap(),
                    f = new WeakMap(),
                    g = new WeakMap(),
                    m = new WeakMap(),
                    v = new WeakSet();
                  function b(e) {
                    const t = e.length;
                    if (t < 2) return !0;
                    const n = e[0];
                    for (let o = 1; o < t; o++) {
                      const t = e[o];
                      let a;
                      if (Array.isArray(t)) a = i(this, v, b).call(this, t);
                      else {
                        if (!l(this, f).has(t))
                          return (
                            (0, r.warn)(
                              `Optional content group not found: ${t}`,
                            ),
                            !0
                          );
                        a = l(this, f).get(t).visible;
                      }
                      switch (n) {
                        case 'And':
                          if (!a) return !1;
                          break;
                        case 'Or':
                          if (a) return !0;
                          break;
                        case 'Not':
                          return !a;
                        default:
                          return !0;
                      }
                    }
                    return 'And' === n;
                  }
                  t.OptionalContentConfig = class {
                    constructor(e) {
                      var t, n;
                      if (
                        (a((t = this), (n = v)),
                        n.add(t),
                        o(this, p, { writable: !0, value: !0 }),
                        o(this, f, { writable: !0, value: new Map() }),
                        o(this, g, { writable: !0, value: null }),
                        o(this, m, { writable: !0, value: null }),
                        (this.name = null),
                        (this.creator = null),
                        null !== e)
                      ) {
                        (this.name = e.name),
                          (this.creator = e.creator),
                          s(this, m, e.order);
                        for (const t of e.groups)
                          l(this, f).set(t.id, new d(t.name, t.intent));
                        if ('OFF' === e.baseState)
                          for (const e of l(this, f).values())
                            e._setVisible(h, !1);
                        for (const t of e.on)
                          l(this, f).get(t)._setVisible(h, !0);
                        for (const t of e.off)
                          l(this, f).get(t)._setVisible(h, !1);
                        s(this, g, new Map());
                        for (const [e, t] of l(this, f))
                          l(this, g).set(e, t.visible);
                      }
                    }
                    isVisible(e) {
                      if (0 === l(this, f).size) return !0;
                      if (!e)
                        return (
                          (0, r.warn)('Optional content group not defined.'), !0
                        );
                      if ('OCG' === e.type)
                        return l(this, f).has(e.id)
                          ? l(this, f).get(e.id).visible
                          : ((0, r.warn)(
                              `Optional content group not found: ${e.id}`,
                            ),
                            !0);
                      if ('OCMD' === e.type) {
                        if (e.expression)
                          return i(this, v, b).call(this, e.expression);
                        if (!e.policy || 'AnyOn' === e.policy) {
                          for (const t of e.ids) {
                            if (!l(this, f).has(t))
                              return (
                                (0, r.warn)(
                                  `Optional content group not found: ${t}`,
                                ),
                                !0
                              );
                            if (l(this, f).get(t).visible) return !0;
                          }
                          return !1;
                        }
                        if ('AllOn' === e.policy) {
                          for (const t of e.ids) {
                            if (!l(this, f).has(t))
                              return (
                                (0, r.warn)(
                                  `Optional content group not found: ${t}`,
                                ),
                                !0
                              );
                            if (!l(this, f).get(t).visible) return !1;
                          }
                          return !0;
                        }
                        if ('AnyOff' === e.policy) {
                          for (const t of e.ids) {
                            if (!l(this, f).has(t))
                              return (
                                (0, r.warn)(
                                  `Optional content group not found: ${t}`,
                                ),
                                !0
                              );
                            if (!l(this, f).get(t).visible) return !0;
                          }
                          return !1;
                        }
                        if ('AllOff' === e.policy) {
                          for (const t of e.ids) {
                            if (!l(this, f).has(t))
                              return (
                                (0, r.warn)(
                                  `Optional content group not found: ${t}`,
                                ),
                                !0
                              );
                            if (l(this, f).get(t).visible) return !1;
                          }
                          return !0;
                        }
                        return (
                          (0, r.warn)(
                            `Unknown optional content policy ${e.policy}.`,
                          ),
                          !0
                        );
                      }
                      return (0, r.warn)(`Unknown group type ${e.type}.`), !0;
                    }
                    setVisibility(e) {
                      let t =
                        !(arguments.length > 1 && void 0 !== arguments[1]) ||
                        arguments[1];
                      l(this, f).has(e)
                        ? (l(this, f).get(e)._setVisible(h, !!t),
                          s(this, p, null))
                        : (0, r.warn)(`Optional content group not found: ${e}`);
                    }
                    get hasInitialVisibility() {
                      if (null !== l(this, p)) return l(this, p);
                      for (const [e, t] of l(this, f)) {
                        const n = l(this, g).get(e);
                        if (t.visible !== n) return s(this, p, !1);
                      }
                      return s(this, p, !0);
                    }
                    getOrder() {
                      return l(this, f).size
                        ? l(this, m)
                          ? l(this, m).slice()
                          : [...l(this, f).keys()]
                        : null;
                    }
                    getGroups() {
                      return l(this, f).size > 0
                        ? (0, r.objectFromMap)(l(this, f))
                        : null;
                    }
                    getGroup(e) {
                      return l(this, f).get(e) || null;
                    }
                  };
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFDataTransportStream = void 0);
                  var r = n(1),
                    i = n(133);
                  t.PDFDataTransportStream = class {
                    constructor(e, t) {
                      (0, r.assert)(
                        t,
                        'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.',
                      ),
                        (this._queuedChunks = []),
                        (this._progressiveDone = e.progressiveDone || !1),
                        (this._contentDispositionFilename =
                          e.contentDispositionFilename || null);
                      const n = e.initialData;
                      if ((null == n ? void 0 : n.length) > 0) {
                        const e = new Uint8Array(n).buffer;
                        this._queuedChunks.push(e);
                      }
                      (this._pdfDataRangeTransport = t),
                        (this._isStreamingSupported = !e.disableStream),
                        (this._isRangeSupported = !e.disableRange),
                        (this._contentLength = e.length),
                        (this._fullRequestReader = null),
                        (this._rangeReaders = []),
                        this._pdfDataRangeTransport.addRangeListener((e, t) => {
                          this._onReceiveData({ begin: e, chunk: t });
                        }),
                        this._pdfDataRangeTransport.addProgressListener(
                          (e, t) => {
                            this._onProgress({ loaded: e, total: t });
                          },
                        ),
                        this._pdfDataRangeTransport.addProgressiveReadListener(
                          (e) => {
                            this._onReceiveData({ chunk: e });
                          },
                        ),
                        this._pdfDataRangeTransport.addProgressiveDoneListener(
                          () => {
                            this._onProgressiveDone();
                          },
                        ),
                        this._pdfDataRangeTransport.transportReady();
                    }
                    _onReceiveData(e) {
                      const t = new Uint8Array(e.chunk).buffer;
                      if (void 0 === e.begin)
                        this._fullRequestReader
                          ? this._fullRequestReader._enqueue(t)
                          : this._queuedChunks.push(t);
                      else {
                        const n = this._rangeReaders.some(function (n) {
                          return n._begin === e.begin && (n._enqueue(t), !0);
                        });
                        (0, r.assert)(
                          n,
                          '_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.',
                        );
                      }
                    }
                    get _progressiveDataLength() {
                      var e, t;
                      return null !==
                        (e =
                          null === (t = this._fullRequestReader) || void 0 === t
                            ? void 0
                            : t._loaded) && void 0 !== e
                        ? e
                        : 0;
                    }
                    _onProgress(e) {
                      if (void 0 === e.total) {
                        const t = this._rangeReaders[0];
                        null != t &&
                          t.onProgress &&
                          t.onProgress({ loaded: e.loaded });
                      } else {
                        const t = this._fullRequestReader;
                        null != t &&
                          t.onProgress &&
                          t.onProgress({ loaded: e.loaded, total: e.total });
                      }
                    }
                    _onProgressiveDone() {
                      this._fullRequestReader &&
                        this._fullRequestReader.progressiveDone(),
                        (this._progressiveDone = !0);
                    }
                    _removeRangeReader(e) {
                      const t = this._rangeReaders.indexOf(e);
                      t >= 0 && this._rangeReaders.splice(t, 1);
                    }
                    getFullReader() {
                      (0, r.assert)(
                        !this._fullRequestReader,
                        'PDFDataTransportStream.getFullReader can only be called once.',
                      );
                      const e = this._queuedChunks;
                      return (
                        (this._queuedChunks = null),
                        new o(
                          this,
                          e,
                          this._progressiveDone,
                          this._contentDispositionFilename,
                        )
                      );
                    }
                    getRangeReader(e, t) {
                      if (t <= this._progressiveDataLength) return null;
                      const n = new a(this, e, t);
                      return (
                        this._pdfDataRangeTransport.requestDataRange(e, t),
                        this._rangeReaders.push(n),
                        n
                      );
                    }
                    cancelAllRequests(e) {
                      this._fullRequestReader &&
                        this._fullRequestReader.cancel(e);
                      for (const t of this._rangeReaders.slice(0)) t.cancel(e);
                      this._pdfDataRangeTransport.abort();
                    }
                  };
                  class o {
                    constructor(e, t) {
                      let n =
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2],
                        r =
                          arguments.length > 3 && void 0 !== arguments[3]
                            ? arguments[3]
                            : null;
                      (this._stream = e),
                        (this._done = n || !1),
                        (this._filename = (0, i.isPdfFile)(r) ? r : null),
                        (this._queuedChunks = t || []),
                        (this._loaded = 0);
                      for (const e of this._queuedChunks)
                        this._loaded += e.byteLength;
                      (this._requests = []),
                        (this._headersReady = Promise.resolve()),
                        (e._fullRequestReader = this),
                        (this.onProgress = null);
                    }
                    _enqueue(e) {
                      this._done ||
                        (this._requests.length > 0
                          ? this._requests
                              .shift()
                              .resolve({ value: e, done: !1 })
                          : this._queuedChunks.push(e),
                        (this._loaded += e.byteLength));
                    }
                    get headersReady() {
                      return this._headersReady;
                    }
                    get filename() {
                      return this._filename;
                    }
                    get isRangeSupported() {
                      return this._stream._isRangeSupported;
                    }
                    get isStreamingSupported() {
                      return this._stream._isStreamingSupported;
                    }
                    get contentLength() {
                      return this._stream._contentLength;
                    }
                    async read() {
                      if (this._queuedChunks.length > 0)
                        return { value: this._queuedChunks.shift(), done: !1 };
                      if (this._done) return { value: void 0, done: !0 };
                      const e = (0, r.createPromiseCapability)();
                      return this._requests.push(e), e.promise;
                    }
                    cancel(e) {
                      this._done = !0;
                      for (const e of this._requests)
                        e.resolve({ value: void 0, done: !0 });
                      this._requests.length = 0;
                    }
                    progressiveDone() {
                      this._done || (this._done = !0);
                    }
                  }
                  class a {
                    constructor(e, t, n) {
                      (this._stream = e),
                        (this._begin = t),
                        (this._end = n),
                        (this._queuedChunk = null),
                        (this._requests = []),
                        (this._done = !1),
                        (this.onProgress = null);
                    }
                    _enqueue(e) {
                      if (!this._done) {
                        if (0 === this._requests.length) this._queuedChunk = e;
                        else {
                          this._requests
                            .shift()
                            .resolve({ value: e, done: !1 });
                          for (const e of this._requests)
                            e.resolve({ value: void 0, done: !0 });
                          this._requests.length = 0;
                        }
                        (this._done = !0),
                          this._stream._removeRangeReader(this);
                      }
                    }
                    get isStreamingSupported() {
                      return !1;
                    }
                    async read() {
                      if (this._queuedChunk) {
                        const e = this._queuedChunk;
                        return (
                          (this._queuedChunk = null), { value: e, done: !1 }
                        );
                      }
                      if (this._done) return { value: void 0, done: !0 };
                      const e = (0, r.createPromiseCapability)();
                      return this._requests.push(e), e.promise;
                    }
                    cancel(e) {
                      this._done = !0;
                      for (const e of this._requests)
                        e.resolve({ value: void 0, done: !0 });
                      (this._requests.length = 0),
                        this._stream._removeRangeReader(this);
                    }
                  }
                },
                (e, t) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.XfaText = void 0);
                  class n {
                    static textContent(e) {
                      const t = [],
                        r = { items: t, styles: Object.create(null) };
                      return (
                        (function e(r) {
                          var i;
                          if (!r) return;
                          let o = null;
                          const a = r.name;
                          if ('#text' === a) o = r.value;
                          else {
                            if (!n.shouldBuildText(a)) return;
                            null != r &&
                            null !== (i = r.attributes) &&
                            void 0 !== i &&
                            i.textContent
                              ? (o = r.attributes.textContent)
                              : r.value && (o = r.value);
                          }
                          if ((null !== o && t.push({ str: o }), r.children))
                            for (const t of r.children) e(t);
                        })(e),
                        r
                      );
                    }
                    static shouldBuildText(e) {
                      return !(
                        'textarea' === e ||
                        'input' === e ||
                        'option' === e ||
                        'select' === e
                      );
                    }
                  }
                  t.XfaText = n;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.NodeStandardFontDataFactory =
                      t.NodeCanvasFactory =
                      t.NodeCMapReaderFactory =
                        void 0);
                  var r = n(134);
                  const i = function (e) {
                    return new Promise((t, n) => {
                      __webpack_require__(27922).readFile(e, (e, r) => {
                        !e && r ? t(new Uint8Array(r)) : n(new Error(e));
                      });
                    });
                  };
                  class o extends r.BaseCanvasFactory {
                    _createCanvas(e, t) {
                      return __webpack_require__(64838).createCanvas(e, t);
                    }
                  }
                  t.NodeCanvasFactory = o;
                  class a extends r.BaseCMapReaderFactory {
                    _fetchData(e, t) {
                      return i(e).then((e) => ({
                        cMapData: e,
                        compressionType: t,
                      }));
                    }
                  }
                  t.NodeCMapReaderFactory = a;
                  class s extends r.BaseStandardFontDataFactory {
                    _fetchData(e) {
                      return i(e);
                    }
                  }
                  t.NodeStandardFontDataFactory = s;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.AnnotationEditorLayer = void 0);
                  var r = n(132),
                    i = n(1),
                    o = n(148),
                    a = n(149);
                  function s(e, t) {
                    c(e, t), t.add(e);
                  }
                  function l(e, t, n) {
                    c(e, t), t.set(e, n);
                  }
                  function c(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function h(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function u(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, p(e, t, 'get'));
                  }
                  function d(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, p(e, t, 'set'), n),
                      n
                    );
                  }
                  function p(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var f,
                    g,
                    m,
                    v = new WeakMap(),
                    b = new WeakMap(),
                    y = new WeakMap(),
                    _ = new WeakMap(),
                    w = new WeakMap(),
                    S = new WeakMap(),
                    A = new WeakMap(),
                    x = new WeakMap(),
                    P = new WeakSet(),
                    E = new WeakSet(),
                    C = new WeakSet(),
                    T = new WeakSet();
                  class k {
                    constructor(e) {
                      s(this, T),
                        s(this, C),
                        s(this, E),
                        s(this, P),
                        l(this, v, { writable: !0, value: void 0 }),
                        l(this, b, { writable: !0, value: !1 }),
                        l(this, y, {
                          writable: !0,
                          value: this.pointerup.bind(this),
                        }),
                        l(this, _, {
                          writable: !0,
                          value: this.pointerdown.bind(this),
                        }),
                        l(this, w, { writable: !0, value: new Map() }),
                        l(this, S, { writable: !0, value: !1 }),
                        l(this, A, { writable: !0, value: !1 }),
                        l(this, x, { writable: !0, value: void 0 }),
                        k._initialized ||
                          ((k._initialized = !0),
                          o.FreeTextEditor.initialize(e.l10n),
                          a.InkEditor.initialize(e.l10n),
                          e.uiManager.registerEditorTypes([
                            o.FreeTextEditor,
                            a.InkEditor,
                          ])),
                        d(this, x, e.uiManager),
                        (this.annotationStorage = e.annotationStorage),
                        (this.pageIndex = e.pageIndex),
                        (this.div = e.div),
                        d(this, v, e.accessibilityManager),
                        u(this, x).addLayer(this);
                    }
                    updateToolbar(e) {
                      u(this, x).updateToolbar(e);
                    }
                    updateMode() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : u(this, x).getMode();
                      h(this, T, D).call(this),
                        e === i.AnnotationEditorType.INK
                          ? (this.addInkEditorIfNeeded(!1), this.disableClick())
                          : this.enableClick(),
                        u(this, x).unselectAll();
                    }
                    addInkEditorIfNeeded(e) {
                      if (
                        e ||
                        u(this, x).getMode() === i.AnnotationEditorType.INK
                      ) {
                        if (!e)
                          for (const e of u(this, w).values())
                            if (e.isEmpty()) return void e.setInBackground();
                        h(this, C, O)
                          .call(this, { offsetX: 0, offsetY: 0 })
                          .setInBackground();
                      }
                    }
                    setEditingState(e) {
                      u(this, x).setEditingState(e);
                    }
                    addCommands(e) {
                      u(this, x).addCommands(e);
                    }
                    enable() {
                      this.div.style.pointerEvents = 'auto';
                      for (const e of u(this, w).values()) e.enableEditing();
                    }
                    disable() {
                      this.div.style.pointerEvents = 'none';
                      for (const e of u(this, w).values()) e.disableEditing();
                    }
                    setActiveEditor(e) {
                      u(this, x).getActive() !== e &&
                        u(this, x).setActiveEditor(e);
                    }
                    enableClick() {
                      this.div.addEventListener('pointerdown', u(this, _)),
                        this.div.addEventListener('pointerup', u(this, y));
                    }
                    disableClick() {
                      this.div.removeEventListener('pointerdown', u(this, _)),
                        this.div.removeEventListener('pointerup', u(this, y));
                    }
                    attach(e) {
                      u(this, w).set(e.id, e);
                    }
                    detach(e) {
                      var t;
                      u(this, w).delete(e.id),
                        null === (t = u(this, v)) ||
                          void 0 === t ||
                          t.removePointerInTextLayer(e.contentDiv);
                    }
                    remove(e) {
                      u(this, x).removeEditor(e),
                        this.detach(e),
                        this.annotationStorage.remove(e.id),
                        (e.div.style.display = 'none'),
                        setTimeout(() => {
                          (e.div.style.display = ''),
                            e.div.remove(),
                            (e.isAttachedToDOM = !1),
                            document.activeElement === document.body &&
                              u(this, x).focusMainContainer();
                        }, 0),
                        u(this, A) || this.addInkEditorIfNeeded(!1);
                    }
                    add(e) {
                      if (
                        (h(this, P, M).call(this, e),
                        u(this, x).addEditor(e),
                        this.attach(e),
                        !e.isAttachedToDOM)
                      ) {
                        const t = e.render();
                        this.div.append(t), (e.isAttachedToDOM = !0);
                      }
                      this.moveEditorInDOM(e),
                        e.onceAdded(),
                        this.addToAnnotationStorage(e);
                    }
                    moveEditorInDOM(e) {
                      var t;
                      null === (t = u(this, v)) ||
                        void 0 === t ||
                        t.moveElementInDOM(this.div, e.div, e.contentDiv, !0);
                    }
                    addToAnnotationStorage(e) {
                      e.isEmpty() ||
                        this.annotationStorage.has(e.id) ||
                        this.annotationStorage.setValue(e.id, e);
                    }
                    addOrRebuild(e) {
                      e.needsToBeRebuilt() ? e.rebuild() : this.add(e);
                    }
                    addANewEditor(e) {
                      this.addCommands({
                        cmd: () => {
                          this.addOrRebuild(e);
                        },
                        undo: () => {
                          e.remove();
                        },
                        mustExec: !0,
                      });
                    }
                    addUndoableEditor(e) {
                      this.addCommands({
                        cmd: () => {
                          this.addOrRebuild(e);
                        },
                        undo: () => {
                          e.remove();
                        },
                        mustExec: !1,
                      });
                    }
                    getNextId() {
                      return u(this, x).getId();
                    }
                    deserialize(e) {
                      switch (e.annotationType) {
                        case i.AnnotationEditorType.FREETEXT:
                          return o.FreeTextEditor.deserialize(e, this);
                        case i.AnnotationEditorType.INK:
                          return a.InkEditor.deserialize(e, this);
                      }
                      return null;
                    }
                    setSelected(e) {
                      u(this, x).setSelected(e);
                    }
                    toggleSelected(e) {
                      u(this, x).toggleSelected(e);
                    }
                    isSelected(e) {
                      return u(this, x).isSelected(e);
                    }
                    unselect(e) {
                      u(this, x).unselect(e);
                    }
                    pointerup(e) {
                      const t = r.KeyboardManager.platform.isMac;
                      0 !== e.button ||
                        (e.ctrlKey && t) ||
                        (e.target === this.div &&
                          u(this, S) &&
                          (d(this, S, !1),
                          u(this, b)
                            ? h(this, C, O).call(this, e)
                            : d(this, b, !0)));
                    }
                    pointerdown(e) {
                      const t = r.KeyboardManager.platform.isMac;
                      if (0 !== e.button || (e.ctrlKey && t)) return;
                      if (e.target !== this.div) return;
                      d(this, S, !0);
                      const n = u(this, x).getActive();
                      d(this, b, !n || n.isEmpty());
                    }
                    drop(e) {
                      const t = e.dataTransfer.getData('text/plain'),
                        n = u(this, x).getEditor(t);
                      if (!n) return;
                      e.preventDefault(),
                        (e.dataTransfer.dropEffect = 'move'),
                        h(this, P, M).call(this, n);
                      const r = this.div.getBoundingClientRect(),
                        i = e.clientX - r.x,
                        o = e.clientY - r.y;
                      n.translate(i - n.startX, o - n.startY),
                        this.moveEditorInDOM(n),
                        n.div.focus();
                    }
                    dragover(e) {
                      e.preventDefault();
                    }
                    destroy() {
                      var e;
                      (null === (e = u(this, x).getActive()) || void 0 === e
                        ? void 0
                        : e.parent) === this &&
                        u(this, x).setActiveEditor(null);
                      for (const e of u(this, w).values()) {
                        var t;
                        null === (t = u(this, v)) ||
                          void 0 === t ||
                          t.removePointerInTextLayer(e.contentDiv),
                          (e.isAttachedToDOM = !1),
                          e.div.remove(),
                          (e.parent = null);
                      }
                      (this.div = null),
                        u(this, w).clear(),
                        u(this, x).removeLayer(this);
                    }
                    render(e) {
                      (this.viewport = e.viewport),
                        (0, r.bindEvents)(this, this.div, ['dragover', 'drop']),
                        this.setDimensions();
                      for (const e of u(this, x).getEditors(this.pageIndex))
                        this.add(e);
                      this.updateMode();
                    }
                    update(e) {
                      (this.viewport = e.viewport),
                        this.setDimensions(),
                        this.updateMode();
                    }
                    get scaleFactor() {
                      return this.viewport.scale;
                    }
                    get pageDimensions() {
                      const [e, t, n, r] = this.viewport.viewBox;
                      return [n - e, r - t];
                    }
                    get viewportBaseDimensions() {
                      const {
                        width: e,
                        height: t,
                        rotation: n,
                      } = this.viewport;
                      return n % 180 == 0 ? [e, t] : [t, e];
                    }
                    setDimensions() {
                      const {
                          width: e,
                          height: t,
                          rotation: n,
                        } = this.viewport,
                        r = n % 180 != 0,
                        i = Math.floor(e) + 'px',
                        o = Math.floor(t) + 'px';
                      (this.div.style.width = r ? o : i),
                        (this.div.style.height = r ? i : o),
                        this.div.setAttribute('data-main-rotation', n);
                    }
                  }
                  function M(e) {
                    var t;
                    e.parent !== this &&
                      (this.attach(e),
                      (e.pageIndex = this.pageIndex),
                      null === (t = e.parent) || void 0 === t || t.detach(e),
                      (e.parent = this),
                      e.div &&
                        e.isAttachedToDOM &&
                        (e.div.remove(), this.div.append(e.div)));
                  }
                  function R(e) {
                    switch (u(this, x).getMode()) {
                      case i.AnnotationEditorType.FREETEXT:
                        return new o.FreeTextEditor(e);
                      case i.AnnotationEditorType.INK:
                        return new a.InkEditor(e);
                    }
                    return null;
                  }
                  function O(e) {
                    const t = this.getNextId(),
                      n = h(this, E, R).call(this, {
                        parent: this,
                        id: t,
                        x: e.offsetX,
                        y: e.offsetY,
                      });
                    return n && this.add(n), n;
                  }
                  function D() {
                    d(this, A, !0);
                    for (const e of u(this, w).values())
                      e.isEmpty() && e.remove();
                    d(this, A, !1);
                  }
                  (t.AnnotationEditorLayer = k),
                    (m = !1),
                    (g = '_initialized') in (f = k)
                      ? Object.defineProperty(f, g, {
                          value: m,
                          enumerable: !0,
                          configurable: !0,
                          writable: !0,
                        })
                      : (f[g] = m);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.FreeTextEditor = void 0);
                  var r = n(1),
                    i = n(132),
                    o = n(131);
                  function a(e, t) {
                    c(e, t), t.add(e);
                  }
                  function s(e, t, n) {
                    return (
                      t in e
                        ? Object.defineProperty(e, t, {
                            value: n,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                          })
                        : (e[t] = n),
                      e
                    );
                  }
                  function l(e, t, n) {
                    c(e, t), t.set(e, n);
                  }
                  function c(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function h(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, p(e, t, 'get'));
                  }
                  function u(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function d(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, p(e, t, 'set'), n),
                      n
                    );
                  }
                  function p(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var f = new WeakMap(),
                    g = new WeakMap(),
                    m = new WeakMap(),
                    v = new WeakMap(),
                    b = new WeakMap(),
                    y = new WeakMap(),
                    _ = new WeakMap(),
                    w = new WeakSet(),
                    S = new WeakSet(),
                    A = new WeakSet(),
                    x = new WeakSet();
                  class P extends o.AnnotationEditor {
                    constructor(e) {
                      super({ ...e, name: 'freeTextEditor' }),
                        a(this, x),
                        a(this, A),
                        a(this, S),
                        a(this, w),
                        l(this, f, {
                          writable: !0,
                          value: this.editorDivBlur.bind(this),
                        }),
                        l(this, g, {
                          writable: !0,
                          value: this.editorDivFocus.bind(this),
                        }),
                        l(this, m, {
                          writable: !0,
                          value: this.editorDivKeydown.bind(this),
                        }),
                        l(this, v, { writable: !0, value: void 0 }),
                        l(this, b, { writable: !0, value: '' }),
                        l(this, y, { writable: !0, value: !1 }),
                        l(this, _, { writable: !0, value: void 0 }),
                        d(
                          this,
                          v,
                          e.color ||
                            P._defaultColor ||
                            o.AnnotationEditor._defaultLineColor,
                        ),
                        d(this, _, e.fontSize || P._defaultFontSize);
                    }
                    static initialize(e) {
                      this._l10nPromise = new Map(
                        [
                          'free_text_default_content',
                          'editor_free_text_aria_label',
                        ].map((t) => [t, e.get(t)]),
                      );
                      const t = getComputedStyle(document.documentElement);
                      this._internalPadding = parseFloat(
                        t.getPropertyValue('--freetext-padding'),
                      );
                    }
                    static updateDefaultParams(e, t) {
                      switch (e) {
                        case r.AnnotationEditorParamsType.FREETEXT_SIZE:
                          P._defaultFontSize = t;
                          break;
                        case r.AnnotationEditorParamsType.FREETEXT_COLOR:
                          P._defaultColor = t;
                      }
                    }
                    updateParams(e, t) {
                      switch (e) {
                        case r.AnnotationEditorParamsType.FREETEXT_SIZE:
                          u(this, w, E).call(this, t);
                          break;
                        case r.AnnotationEditorParamsType.FREETEXT_COLOR:
                          u(this, S, C).call(this, t);
                      }
                    }
                    static get defaultPropertiesToUpdate() {
                      return [
                        [
                          r.AnnotationEditorParamsType.FREETEXT_SIZE,
                          P._defaultFontSize,
                        ],
                        [
                          r.AnnotationEditorParamsType.FREETEXT_COLOR,
                          P._defaultColor ||
                            o.AnnotationEditor._defaultLineColor,
                        ],
                      ];
                    }
                    get propertiesToUpdate() {
                      return [
                        [
                          r.AnnotationEditorParamsType.FREETEXT_SIZE,
                          h(this, _),
                        ],
                        [
                          r.AnnotationEditorParamsType.FREETEXT_COLOR,
                          h(this, v),
                        ],
                      ];
                    }
                    getInitialTranslation() {
                      return [
                        -P._internalPadding * this.parent.scaleFactor,
                        -(P._internalPadding + h(this, _)) *
                          this.parent.scaleFactor,
                      ];
                    }
                    rebuild() {
                      super.rebuild(),
                        null !== this.div &&
                          (this.isAttachedToDOM || this.parent.add(this));
                    }
                    enableEditMode() {
                      this.isInEditMode() ||
                        (this.parent.setEditingState(!1),
                        this.parent.updateToolbar(
                          r.AnnotationEditorType.FREETEXT,
                        ),
                        super.enableEditMode(),
                        this.enableEditing(),
                        this.overlayDiv.classList.remove('enabled'),
                        (this.editorDiv.contentEditable = !0),
                        (this.div.draggable = !1),
                        this.editorDiv.addEventListener('keydown', h(this, m)),
                        this.editorDiv.addEventListener('focus', h(this, g)),
                        this.editorDiv.addEventListener('blur', h(this, f)));
                    }
                    disableEditMode() {
                      this.isInEditMode() &&
                        (this.parent.setEditingState(!0),
                        super.disableEditMode(),
                        this.disableEditing(),
                        this.overlayDiv.classList.add('enabled'),
                        (this.editorDiv.contentEditable = !1),
                        (this.div.draggable = !0),
                        this.editorDiv.removeEventListener(
                          'keydown',
                          h(this, m),
                        ),
                        this.editorDiv.removeEventListener('focus', h(this, g)),
                        this.editorDiv.removeEventListener('blur', h(this, f)),
                        this.div.focus(),
                        (this.isEditing = !1));
                    }
                    focusin(e) {
                      super.focusin(e),
                        e.target !== this.editorDiv && this.editorDiv.focus();
                    }
                    onceAdded() {
                      this.width ||
                        (this.enableEditMode(), this.editorDiv.focus());
                    }
                    isEmpty() {
                      return (
                        !this.editorDiv ||
                        '' === this.editorDiv.innerText.trim()
                      );
                    }
                    remove() {
                      (this.isEditing = !1),
                        this.parent.setEditingState(!0),
                        super.remove();
                    }
                    commit() {
                      super.commit(),
                        h(this, y) ||
                          (d(this, y, !0), this.parent.addUndoableEditor(this)),
                        this.disableEditMode(),
                        d(this, b, u(this, A, T).call(this).trimEnd()),
                        u(this, x, k).call(this);
                    }
                    shouldGetKeyboardEvents() {
                      return this.isInEditMode();
                    }
                    dblclick(e) {
                      this.enableEditMode(), this.editorDiv.focus();
                    }
                    keydown(e) {
                      e.target === this.div &&
                        'Enter' === e.key &&
                        (this.enableEditMode(), this.editorDiv.focus());
                    }
                    editorDivKeydown(e) {
                      P._keyboardManager.exec(this, e);
                    }
                    editorDivFocus(e) {
                      this.isEditing = !0;
                    }
                    editorDivBlur(e) {
                      this.isEditing = !1;
                    }
                    disableEditing() {
                      this.editorDiv.setAttribute('role', 'comment'),
                        this.editorDiv.removeAttribute('aria-multiline');
                    }
                    enableEditing() {
                      this.editorDiv.setAttribute('role', 'textbox'),
                        this.editorDiv.setAttribute('aria-multiline', !0);
                    }
                    render() {
                      if (this.div) return this.div;
                      let e, t;
                      this.width && ((e = this.x), (t = this.y)),
                        super.render(),
                        (this.editorDiv = document.createElement('div')),
                        (this.editorDiv.className = 'internal'),
                        this.editorDiv.setAttribute('id', `${this.id}-editor`),
                        this.enableEditing(),
                        P._l10nPromise
                          .get('editor_free_text_aria_label')
                          .then((e) => {
                            var t;
                            return null === (t = this.editorDiv) || void 0 === t
                              ? void 0
                              : t.setAttribute('aria-label', e);
                          }),
                        P._l10nPromise
                          .get('free_text_default_content')
                          .then((e) => {
                            var t;
                            return null === (t = this.editorDiv) || void 0 === t
                              ? void 0
                              : t.setAttribute('default-content', e);
                          }),
                        (this.editorDiv.contentEditable = !0);
                      const { style: n } = this.editorDiv;
                      if (
                        ((n.fontSize = `calc(${h(this, _)}px * var(--scale-factor))`),
                        (n.color = h(this, v)),
                        this.div.append(this.editorDiv),
                        (this.overlayDiv = document.createElement('div')),
                        this.overlayDiv.classList.add('overlay', 'enabled'),
                        this.div.append(this.overlayDiv),
                        (0, i.bindEvents)(this, this.div, [
                          'dblclick',
                          'keydown',
                        ]),
                        this.width)
                      ) {
                        const [n, r] = this.parent.viewportBaseDimensions;
                        this.setAt(
                          e * n,
                          t * r,
                          this.width * n,
                          this.height * r,
                        );
                        for (const e of h(this, b).split('\n')) {
                          const t = document.createElement('div');
                          t.append(
                            e
                              ? document.createTextNode(e)
                              : document.createElement('br'),
                          ),
                            this.editorDiv.append(t);
                        }
                        (this.div.draggable = !0),
                          (this.editorDiv.contentEditable = !1);
                      } else
                        (this.div.draggable = !1),
                          (this.editorDiv.contentEditable = !0);
                      return this.div;
                    }
                    get contentDiv() {
                      return this.editorDiv;
                    }
                    static deserialize(e, t) {
                      const n = super.deserialize(e, t);
                      return (
                        d(n, _, e.fontSize),
                        d(n, v, r.Util.makeHexColor(...e.color)),
                        d(n, b, e.value),
                        n
                      );
                    }
                    serialize() {
                      if (this.isEmpty()) return null;
                      const e = P._internalPadding * this.parent.scaleFactor,
                        t = this.getRect(e, e),
                        n = o.AnnotationEditor._colorManager.convert(
                          getComputedStyle(this.editorDiv).color,
                        );
                      return {
                        annotationType: r.AnnotationEditorType.FREETEXT,
                        color: n,
                        fontSize: h(this, _),
                        value: h(this, b),
                        pageIndex: this.parent.pageIndex,
                        rect: t,
                        rotation: this.rotation,
                      };
                    }
                  }
                  function E(e) {
                    const t = (e) => {
                        (this.editorDiv.style.fontSize = `calc(${e}px * var(--scale-factor))`),
                          this.translate(
                            0,
                            -(e - h(this, _)) * this.parent.scaleFactor,
                          ),
                          d(this, _, e),
                          u(this, x, k).call(this);
                      },
                      n = h(this, _);
                    this.parent.addCommands({
                      cmd: () => {
                        t(e);
                      },
                      undo: () => {
                        t(n);
                      },
                      mustExec: !0,
                      type: r.AnnotationEditorParamsType.FREETEXT_SIZE,
                      overwriteIfSameType: !0,
                      keepUndo: !0,
                    });
                  }
                  function C(e) {
                    const t = h(this, v);
                    this.parent.addCommands({
                      cmd: () => {
                        d(this, v, e), (this.editorDiv.style.color = e);
                      },
                      undo: () => {
                        d(this, v, t), (this.editorDiv.style.color = t);
                      },
                      mustExec: !0,
                      type: r.AnnotationEditorParamsType.FREETEXT_COLOR,
                      overwriteIfSameType: !0,
                      keepUndo: !0,
                    });
                  }
                  function T() {
                    const e = this.editorDiv.getElementsByTagName('div');
                    if (0 === e.length) return this.editorDiv.innerText;
                    const t = [];
                    for (let n = 0, r = e.length; n < r; n++) {
                      const r = e[n].firstChild;
                      '#text' === (null == r ? void 0 : r.nodeName)
                        ? t.push(r.data)
                        : t.push('');
                    }
                    return t.join('\n');
                  }
                  function k() {
                    const [e, t] = this.parent.viewportBaseDimensions,
                      n = this.div.getBoundingClientRect();
                    (this.width = n.width / e), (this.height = n.height / t);
                  }
                  (t.FreeTextEditor = P),
                    s(P, '_freeTextDefaultContent', ''),
                    s(P, '_l10nPromise', void 0),
                    s(P, '_internalPadding', 0),
                    s(P, '_defaultColor', null),
                    s(P, '_defaultFontSize', 10),
                    s(
                      P,
                      '_keyboardManager',
                      new i.KeyboardManager([
                        [
                          [
                            'ctrl+Enter',
                            'mac+meta+Enter',
                            'Escape',
                            'mac+Escape',
                          ],
                          P.prototype.commitOrRemove,
                        ],
                      ]),
                    ),
                    s(P, '_type', 'freetext');
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.InkEditor = void 0),
                    Object.defineProperty(t, 'fitCurve', {
                      enumerable: !0,
                      get: function () {
                        return o.fitCurve;
                      },
                    });
                  var r = n(1),
                    i = n(131),
                    o = n(150),
                    a = n(132);
                  function s(e, t) {
                    h(e, t), t.add(e);
                  }
                  function l(e, t, n) {
                    return (
                      t in e
                        ? Object.defineProperty(e, t, {
                            value: n,
                            enumerable: !0,
                            configurable: !0,
                            writable: !0,
                          })
                        : (e[t] = n),
                      e
                    );
                  }
                  function c(e, t, n) {
                    h(e, t), t.set(e, n);
                  }
                  function h(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function u(e, t, n) {
                    return (
                      (function (e, t) {
                        if (e !== t)
                          throw new TypeError(
                            'Private static access of wrong provenance',
                          );
                      })(e, t),
                      n
                    );
                  }
                  function d(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, f(e, t, 'set'), n),
                      n
                    );
                  }
                  function p(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, f(e, t, 'get'));
                  }
                  function f(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  function g(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  const m = 16;
                  var v = new WeakMap(),
                    b = new WeakMap(),
                    y = new WeakMap(),
                    _ = new WeakMap(),
                    w = new WeakMap(),
                    S = new WeakMap(),
                    A = new WeakMap(),
                    x = new WeakMap(),
                    P = new WeakMap(),
                    E = new WeakMap(),
                    C = new WeakMap(),
                    T = new WeakMap(),
                    k = new WeakMap(),
                    M = new WeakMap(),
                    R = new WeakSet(),
                    O = new WeakSet(),
                    D = new WeakSet(),
                    I = new WeakSet(),
                    L = new WeakSet(),
                    F = new WeakSet(),
                    N = new WeakSet(),
                    j = new WeakSet(),
                    B = new WeakSet(),
                    W = new WeakSet(),
                    z = new WeakSet(),
                    $ = new WeakSet(),
                    U = new WeakSet(),
                    H = new WeakSet(),
                    V = new WeakSet(),
                    q = new WeakSet(),
                    G = new WeakSet(),
                    X = new WeakSet(),
                    Y = new WeakSet(),
                    K = new WeakSet(),
                    Z = new WeakSet(),
                    Q = new WeakSet();
                  class J extends i.AnnotationEditor {
                    constructor(e) {
                      super({ ...e, name: 'inkEditor' }),
                        s(this, Q),
                        s(this, Z),
                        s(this, K),
                        s(this, Y),
                        s(this, X),
                        s(this, G),
                        s(this, q),
                        s(this, V),
                        s(this, H),
                        s(this, U),
                        s(this, $),
                        s(this, z),
                        s(this, W),
                        s(this, B),
                        s(this, j),
                        s(this, N),
                        s(this, F),
                        s(this, L),
                        s(this, I),
                        s(this, D),
                        s(this, O),
                        s(this, R),
                        c(this, v, { writable: !0, value: 0 }),
                        c(this, b, { writable: !0, value: 0 }),
                        c(this, y, { writable: !0, value: 0 }),
                        c(this, _, {
                          writable: !0,
                          value: this.canvasPointermove.bind(this),
                        }),
                        c(this, w, {
                          writable: !0,
                          value: this.canvasPointerleave.bind(this),
                        }),
                        c(this, S, {
                          writable: !0,
                          value: this.canvasPointerup.bind(this),
                        }),
                        c(this, A, {
                          writable: !0,
                          value: this.canvasPointerdown.bind(this),
                        }),
                        c(this, x, { writable: !0, value: !1 }),
                        c(this, P, { writable: !0, value: !1 }),
                        c(this, E, { writable: !0, value: null }),
                        c(this, C, { writable: !0, value: null }),
                        c(this, T, { writable: !0, value: 0 }),
                        c(this, k, { writable: !0, value: 0 }),
                        c(this, M, { writable: !0, value: null }),
                        (this.color = e.color || null),
                        (this.thickness = e.thickness || null),
                        (this.opacity = e.opacity || null),
                        (this.paths = []),
                        (this.bezierPath2D = []),
                        (this.currentPath = []),
                        (this.scaleFactor = 1),
                        (this.translationX = this.translationY = 0),
                        (this.x = 0),
                        (this.y = 0);
                    }
                    static initialize(e) {
                      this._l10nPromise = new Map(
                        [
                          'editor_ink_canvas_aria_label',
                          'editor_ink_aria_label',
                        ].map((t) => [t, e.get(t)]),
                      );
                    }
                    static updateDefaultParams(e, t) {
                      switch (e) {
                        case r.AnnotationEditorParamsType.INK_THICKNESS:
                          J._defaultThickness = t;
                          break;
                        case r.AnnotationEditorParamsType.INK_COLOR:
                          J._defaultColor = t;
                          break;
                        case r.AnnotationEditorParamsType.INK_OPACITY:
                          J._defaultOpacity = t / 100;
                      }
                    }
                    updateParams(e, t) {
                      switch (e) {
                        case r.AnnotationEditorParamsType.INK_THICKNESS:
                          g(this, R, ee).call(this, t);
                          break;
                        case r.AnnotationEditorParamsType.INK_COLOR:
                          g(this, O, te).call(this, t);
                          break;
                        case r.AnnotationEditorParamsType.INK_OPACITY:
                          g(this, D, ne).call(this, t);
                      }
                    }
                    static get defaultPropertiesToUpdate() {
                      return [
                        [
                          r.AnnotationEditorParamsType.INK_THICKNESS,
                          J._defaultThickness,
                        ],
                        [
                          r.AnnotationEditorParamsType.INK_COLOR,
                          J._defaultColor ||
                            i.AnnotationEditor._defaultLineColor,
                        ],
                        [
                          r.AnnotationEditorParamsType.INK_OPACITY,
                          Math.round(100 * J._defaultOpacity),
                        ],
                      ];
                    }
                    get propertiesToUpdate() {
                      var e;
                      return [
                        [
                          r.AnnotationEditorParamsType.INK_THICKNESS,
                          this.thickness || J._defaultThickness,
                        ],
                        [
                          r.AnnotationEditorParamsType.INK_COLOR,
                          this.color ||
                            J._defaultColor ||
                            i.AnnotationEditor._defaultLineColor,
                        ],
                        [
                          r.AnnotationEditorParamsType.INK_OPACITY,
                          Math.round(
                            100 *
                              (null !== (e = this.opacity) && void 0 !== e
                                ? e
                                : J._defaultOpacity),
                          ),
                        ],
                      ];
                    }
                    rebuild() {
                      super.rebuild(),
                        null !== this.div &&
                          (this.canvas ||
                            (g(this, z, he).call(this),
                            g(this, $, ue).call(this)),
                          this.isAttachedToDOM ||
                            (this.parent.add(this), g(this, U, de).call(this)),
                          g(this, Z, we).call(this));
                    }
                    remove() {
                      null !== this.canvas &&
                        (this.isEmpty() || this.commit(),
                        (this.canvas.width = this.canvas.height = 0),
                        this.canvas.remove(),
                        (this.canvas = null),
                        p(this, C).disconnect(),
                        d(this, C, null),
                        super.remove());
                    }
                    enableEditMode() {
                      p(this, x) ||
                        null === this.canvas ||
                        (super.enableEditMode(),
                        (this.div.draggable = !1),
                        this.canvas.addEventListener('pointerdown', p(this, A)),
                        this.canvas.addEventListener('pointerup', p(this, S)));
                    }
                    disableEditMode() {
                      this.isInEditMode() &&
                        null !== this.canvas &&
                        (super.disableEditMode(),
                        (this.div.draggable = !this.isEmpty()),
                        this.div.classList.remove('editing'),
                        this.canvas.removeEventListener(
                          'pointerdown',
                          p(this, A),
                        ),
                        this.canvas.removeEventListener(
                          'pointerup',
                          p(this, S),
                        ));
                    }
                    onceAdded() {
                      this.div.draggable = !this.isEmpty();
                    }
                    isEmpty() {
                      return (
                        0 === this.paths.length ||
                        (1 === this.paths.length && 0 === this.paths[0].length)
                      );
                    }
                    commit() {
                      p(this, x) ||
                        (super.commit(),
                        (this.isEditing = !1),
                        this.disableEditMode(),
                        this.setInForeground(),
                        d(this, x, !0),
                        this.div.classList.add('disabled'),
                        g(this, Z, we).call(this, !0),
                        this.parent.addInkEditorIfNeeded(!0),
                        this.parent.moveEditorInDOM(this),
                        this.div.focus());
                    }
                    focusin(e) {
                      super.focusin(e), this.enableEditMode();
                    }
                    canvasPointerdown(e) {
                      0 === e.button &&
                        this.isInEditMode() &&
                        !p(this, x) &&
                        (this.setInForeground(),
                        'mouse' !== e.type && this.div.focus(),
                        e.stopPropagation(),
                        this.canvas.addEventListener(
                          'pointerleave',
                          p(this, w),
                        ),
                        this.canvas.addEventListener('pointermove', p(this, _)),
                        g(this, F, oe).call(this, e.offsetX, e.offsetY));
                    }
                    canvasPointermove(e) {
                      e.stopPropagation(),
                        g(this, N, ae).call(this, e.offsetX, e.offsetY);
                    }
                    canvasPointerup(e) {
                      0 === e.button &&
                        this.isInEditMode() &&
                        0 !== this.currentPath.length &&
                        (e.stopPropagation(),
                        g(this, W, ce).call(this, e),
                        this.setInBackground());
                    }
                    canvasPointerleave(e) {
                      g(this, W, ce).call(this, e), this.setInBackground();
                    }
                    render() {
                      if (this.div) return this.div;
                      let e, t;
                      this.width && ((e = this.x), (t = this.y)),
                        super.render(),
                        J._l10nPromise
                          .get('editor_ink_aria_label')
                          .then((e) => {
                            var t;
                            return null === (t = this.div) || void 0 === t
                              ? void 0
                              : t.setAttribute('aria-label', e);
                          });
                      const [n, r, i, o] = g(this, I, re).call(this);
                      if (
                        (this.setAt(n, r, 0, 0),
                        this.setDims(i, o),
                        g(this, z, he).call(this),
                        this.width)
                      ) {
                        const [n, r] = this.parent.viewportBaseDimensions;
                        this.setAt(
                          e * n,
                          t * r,
                          this.width * n,
                          this.height * r,
                        ),
                          d(this, P, !0),
                          g(this, U, de).call(this),
                          this.setDims(this.width * n, this.height * r),
                          g(this, B, le).call(this),
                          g(this, Q, Se).call(this),
                          this.div.classList.add('disabled');
                      } else
                        this.div.classList.add('editing'),
                          this.enableEditMode();
                      return g(this, $, ue).call(this), this.div;
                    }
                    setDimensions(e, t) {
                      const n = Math.round(e),
                        r = Math.round(t);
                      if (p(this, T) === n && p(this, k) === r) return;
                      d(this, T, n),
                        d(this, k, r),
                        (this.canvas.style.visibility = 'hidden'),
                        p(this, v) &&
                          Math.abs(p(this, v) - e / t) > 0.01 &&
                          ((t = Math.ceil(e / p(this, v))), this.setDims(e, t));
                      const [i, o] = this.parent.viewportBaseDimensions;
                      (this.width = e / i),
                        (this.height = t / o),
                        p(this, x) && g(this, H, pe).call(this, e, t),
                        g(this, U, de).call(this),
                        g(this, B, le).call(this),
                        (this.canvas.style.visibility = 'visible');
                    }
                    static deserialize(e, t) {
                      const n = super.deserialize(e, t);
                      (n.thickness = e.thickness),
                        (n.color = r.Util.makeHexColor(...e.color)),
                        (n.opacity = e.opacity);
                      const [i, o] = t.pageDimensions,
                        a = n.width * i,
                        s = n.height * o,
                        l = t.scaleFactor,
                        c = e.thickness / 2;
                      d(n, v, a / s),
                        d(n, x, !0),
                        d(n, T, Math.round(a)),
                        d(n, k, Math.round(s));
                      for (const { bezier: t } of e.paths) {
                        const e = [];
                        n.paths.push(e);
                        let r = l * (t[0] - c),
                          i = l * (s - t[1] - c);
                        for (let n = 2, o = t.length; n < o; n += 6) {
                          const o = l * (t[n] - c),
                            a = l * (s - t[n + 1] - c),
                            h = l * (t[n + 2] - c),
                            u = l * (s - t[n + 3] - c),
                            d = l * (t[n + 4] - c),
                            p = l * (s - t[n + 5] - c);
                          e.push([
                            [r, i],
                            [o, a],
                            [h, u],
                            [d, p],
                          ]),
                            (r = d),
                            (i = p);
                        }
                        const o = u(this, J, ge).call(this, e);
                        n.bezierPath2D.push(o);
                      }
                      const h = g(n, Y, ye).call(n);
                      return (
                        d(n, y, Math.max(m, h[2] - h[0])),
                        d(n, b, Math.max(m, h[3] - h[1])),
                        g(n, H, pe).call(n, a, s),
                        n
                      );
                    }
                    serialize() {
                      if (this.isEmpty()) return null;
                      const e = this.getRect(0, 0),
                        t =
                          this.rotation % 180 == 0 ? e[3] - e[1] : e[2] - e[0],
                        n = i.AnnotationEditor._colorManager.convert(
                          this.ctx.strokeStyle,
                        );
                      return {
                        annotationType: r.AnnotationEditorType.INK,
                        color: n,
                        thickness: this.thickness,
                        opacity: this.opacity,
                        paths: g(this, q, me).call(
                          this,
                          this.scaleFactor / this.parent.scaleFactor,
                          this.translationX,
                          this.translationY,
                          t,
                        ),
                        pageIndex: this.parent.pageIndex,
                        rect: e,
                        rotation: this.rotation,
                      };
                    }
                  }
                  function ee(e) {
                    const t = this.thickness;
                    this.parent.addCommands({
                      cmd: () => {
                        (this.thickness = e), g(this, Z, we).call(this);
                      },
                      undo: () => {
                        (this.thickness = t), g(this, Z, we).call(this);
                      },
                      mustExec: !0,
                      type: r.AnnotationEditorParamsType.INK_THICKNESS,
                      overwriteIfSameType: !0,
                      keepUndo: !0,
                    });
                  }
                  function te(e) {
                    const t = this.color;
                    this.parent.addCommands({
                      cmd: () => {
                        (this.color = e), g(this, B, le).call(this);
                      },
                      undo: () => {
                        (this.color = t), g(this, B, le).call(this);
                      },
                      mustExec: !0,
                      type: r.AnnotationEditorParamsType.INK_COLOR,
                      overwriteIfSameType: !0,
                      keepUndo: !0,
                    });
                  }
                  function ne(e) {
                    e /= 100;
                    const t = this.opacity;
                    this.parent.addCommands({
                      cmd: () => {
                        (this.opacity = e), g(this, B, le).call(this);
                      },
                      undo: () => {
                        (this.opacity = t), g(this, B, le).call(this);
                      },
                      mustExec: !0,
                      type: r.AnnotationEditorParamsType.INK_OPACITY,
                      overwriteIfSameType: !0,
                      keepUndo: !0,
                    });
                  }
                  function re() {
                    const {
                      width: e,
                      height: t,
                      rotation: n,
                    } = this.parent.viewport;
                    switch (n) {
                      case 90:
                        return [0, e, e, t];
                      case 180:
                        return [e, t, e, t];
                      case 270:
                        return [t, 0, e, t];
                      default:
                        return [0, 0, e, t];
                    }
                  }
                  function ie() {
                    (this.ctx.lineWidth =
                      (this.thickness * this.parent.scaleFactor) /
                      this.scaleFactor),
                      (this.ctx.lineCap = 'round'),
                      (this.ctx.lineJoin = 'round'),
                      (this.ctx.miterLimit = 10),
                      (this.ctx.strokeStyle = `${this.color}${(0, a.opacityToHex)(this.opacity)}`);
                  }
                  function oe(e, t) {
                    var n;
                    (this.isEditing = !0),
                      p(this, P) ||
                        (d(this, P, !0),
                        g(this, U, de).call(this),
                        this.thickness ||
                          (this.thickness = J._defaultThickness),
                        this.color ||
                          (this.color =
                            J._defaultColor ||
                            i.AnnotationEditor._defaultLineColor),
                        (null !== (n = this.opacity) && void 0 !== n) ||
                          (this.opacity = J._defaultOpacity)),
                      this.currentPath.push([e, t]),
                      d(this, E, null),
                      g(this, L, ie).call(this),
                      this.ctx.beginPath(),
                      this.ctx.moveTo(e, t),
                      d(this, M, () => {
                        p(this, M) &&
                          (p(this, E) &&
                            (this.isEmpty()
                              ? (this.ctx.setTransform(1, 0, 0, 1, 0, 0),
                                this.ctx.clearRect(
                                  0,
                                  0,
                                  this.canvas.width,
                                  this.canvas.height,
                                ))
                              : g(this, B, le).call(this),
                            this.ctx.lineTo(...p(this, E)),
                            d(this, E, null),
                            this.ctx.stroke()),
                          window.requestAnimationFrame(p(this, M)));
                      }),
                      window.requestAnimationFrame(p(this, M));
                  }
                  function ae(e, t) {
                    const [n, r] = this.currentPath.at(-1);
                    (e === n && t === r) ||
                      (this.currentPath.push([e, t]), d(this, E, [e, t]));
                  }
                  function se(e, t) {
                    this.ctx.closePath(),
                      d(this, M, null),
                      (e = Math.min(Math.max(e, 0), this.canvas.width)),
                      (t = Math.min(Math.max(t, 0), this.canvas.height));
                    const [n, r] = this.currentPath.at(-1);
                    let i;
                    if (
                      ((e === n && t === r) || this.currentPath.push([e, t]),
                      1 !== this.currentPath.length)
                    )
                      i = (0, o.fitCurve)(this.currentPath, 30, null);
                    else {
                      const n = [e, t];
                      i = [[n, n.slice(), n.slice(), n]];
                    }
                    const a = u(J, J, ge).call(J, i);
                    (this.currentPath.length = 0),
                      this.parent.addCommands({
                        cmd: () => {
                          this.paths.push(i),
                            this.bezierPath2D.push(a),
                            this.rebuild();
                        },
                        undo: () => {
                          this.paths.pop(),
                            this.bezierPath2D.pop(),
                            0 === this.paths.length
                              ? this.remove()
                              : (this.canvas ||
                                  (g(this, z, he).call(this),
                                  g(this, $, ue).call(this)),
                                g(this, Z, we).call(this));
                        },
                        mustExec: !0,
                      });
                  }
                  function le() {
                    if (this.isEmpty()) return void g(this, V, fe).call(this);
                    g(this, L, ie).call(this);
                    const { canvas: e, ctx: t } = this;
                    t.setTransform(1, 0, 0, 1, 0, 0),
                      t.clearRect(0, 0, e.width, e.height),
                      g(this, V, fe).call(this);
                    for (const e of this.bezierPath2D) t.stroke(e);
                  }
                  function ce(e) {
                    g(this, j, se).call(this, e.offsetX, e.offsetY),
                      this.canvas.removeEventListener(
                        'pointerleave',
                        p(this, w),
                      ),
                      this.canvas.removeEventListener(
                        'pointermove',
                        p(this, _),
                      ),
                      this.parent.addToAnnotationStorage(this);
                  }
                  function he() {
                    (this.canvas = document.createElement('canvas')),
                      (this.canvas.width = this.canvas.height = 0),
                      (this.canvas.className = 'inkEditorCanvas'),
                      J._l10nPromise
                        .get('editor_ink_canvas_aria_label')
                        .then((e) => {
                          var t;
                          return null === (t = this.canvas) || void 0 === t
                            ? void 0
                            : t.setAttribute('aria-label', e);
                        }),
                      this.div.append(this.canvas),
                      (this.ctx = this.canvas.getContext('2d'));
                  }
                  function ue() {
                    d(
                      this,
                      C,
                      new ResizeObserver((e) => {
                        const t = e[0].contentRect;
                        t.width &&
                          t.height &&
                          this.setDimensions(t.width, t.height);
                      }),
                    ),
                      p(this, C).observe(this.div);
                  }
                  function de() {
                    if (!p(this, P)) return;
                    const [e, t] = this.parent.viewportBaseDimensions;
                    (this.canvas.width = Math.ceil(this.width * e)),
                      (this.canvas.height = Math.ceil(this.height * t)),
                      g(this, V, fe).call(this);
                  }
                  function pe(e, t) {
                    const n = g(this, K, _e).call(this),
                      r = (e - n) / p(this, y),
                      i = (t - n) / p(this, b);
                    this.scaleFactor = Math.min(r, i);
                  }
                  function fe() {
                    const e = g(this, K, _e).call(this) / 2;
                    this.ctx.setTransform(
                      this.scaleFactor,
                      0,
                      0,
                      this.scaleFactor,
                      this.translationX * this.scaleFactor + e,
                      this.translationY * this.scaleFactor + e,
                    );
                  }
                  function ge(e) {
                    const t = new Path2D();
                    for (let n = 0, r = e.length; n < r; n++) {
                      const [r, i, o, a] = e[n];
                      0 === n && t.moveTo(...r),
                        t.bezierCurveTo(i[0], i[1], o[0], o[1], a[0], a[1]);
                    }
                    return t;
                  }
                  function me(e, t, n, r) {
                    const i = [],
                      o = this.thickness / 2;
                    let a, s;
                    for (const l of this.paths) {
                      (a = []), (s = []);
                      for (let i = 0, c = l.length; i < c; i++) {
                        const [c, h, u, d] = l[i],
                          p = e * (c[0] + t) + o,
                          f = r - e * (c[1] + n) - o,
                          m = e * (h[0] + t) + o,
                          v = r - e * (h[1] + n) - o,
                          b = e * (u[0] + t) + o,
                          y = r - e * (u[1] + n) - o,
                          _ = e * (d[0] + t) + o,
                          w = r - e * (d[1] + n) - o;
                        0 === i && (a.push(p, f), s.push(p, f)),
                          a.push(m, v, b, y, _, w),
                          g(this, G, ve).call(
                            this,
                            p,
                            f,
                            m,
                            v,
                            b,
                            y,
                            _,
                            w,
                            4,
                            s,
                          );
                      }
                      i.push({ bezier: a, points: s });
                    }
                    return i;
                  }
                  function ve(e, t, n, r, i, o, a, s, l, c) {
                    if (g(this, X, be).call(this, e, t, n, r, i, o, a, s))
                      c.push(a, s);
                    else {
                      for (let h = 1; h < l - 1; h++) {
                        const u = h / l,
                          d = 1 - u;
                        let p = u * e + d * n,
                          f = u * t + d * r,
                          g = u * n + d * i,
                          m = u * r + d * o;
                        (p = u * p + d * g),
                          (f = u * f + d * m),
                          (g = u * g + d * (u * i + d * a)),
                          (m = u * m + d * (u * o + d * s)),
                          (p = u * p + d * g),
                          (f = u * f + d * m),
                          c.push(p, f);
                      }
                      c.push(a, s);
                    }
                  }
                  function be(e, t, n, r, i, o, a, s) {
                    const l = (3 * n - 2 * e - a) ** 2,
                      c = (3 * r - 2 * t - s) ** 2,
                      h = (3 * i - e - 2 * a) ** 2,
                      u = (3 * o - t - 2 * s) ** 2;
                    return Math.max(l, h) + Math.max(c, u) <= 10;
                  }
                  function ye() {
                    let e = 1 / 0,
                      t = -1 / 0,
                      n = 1 / 0,
                      i = -1 / 0;
                    for (const o of this.paths)
                      for (const [a, s, l, c] of o) {
                        const o = r.Util.bezierBoundingBox(
                          ...a,
                          ...s,
                          ...l,
                          ...c,
                        );
                        (e = Math.min(e, o[0])),
                          (n = Math.min(n, o[1])),
                          (t = Math.max(t, o[2])),
                          (i = Math.max(i, o[3]));
                      }
                    return [e, n, t, i];
                  }
                  function _e() {
                    return p(this, x)
                      ? Math.ceil(this.thickness * this.parent.scaleFactor)
                      : 0;
                  }
                  function we() {
                    let e =
                      arguments.length > 0 &&
                      void 0 !== arguments[0] &&
                      arguments[0];
                    if (this.isEmpty()) return;
                    if (!p(this, x)) return void g(this, B, le).call(this);
                    const t = g(this, Y, ye).call(this),
                      n = g(this, K, _e).call(this);
                    d(this, y, Math.max(m, t[2] - t[0])),
                      d(this, b, Math.max(m, t[3] - t[1]));
                    const r = Math.ceil(n + p(this, y) * this.scaleFactor),
                      i = Math.ceil(n + p(this, b) * this.scaleFactor),
                      [o, a] = this.parent.viewportBaseDimensions;
                    (this.width = r / o),
                      (this.height = i / a),
                      d(this, v, r / i),
                      g(this, Q, Se).call(this);
                    const s = this.translationX,
                      l = this.translationY;
                    (this.translationX = -t[0]),
                      (this.translationY = -t[1]),
                      g(this, U, de).call(this),
                      g(this, B, le).call(this),
                      d(this, T, r),
                      d(this, k, i),
                      this.setDims(r, i);
                    const c = e ? n / this.scaleFactor / 2 : 0;
                    this.translate(
                      s - this.translationX - c,
                      l - this.translationY - c,
                    );
                  }
                  function Se() {
                    const { style: e } = this.div;
                    p(this, v) >= 1
                      ? ((e.minHeight = '16px'),
                        (e.minWidth = `${Math.round(p(this, v) * m)}px`))
                      : ((e.minWidth = '16px'),
                        (e.minHeight = `${Math.round(m / p(this, v))}px`));
                  }
                  (t.InkEditor = J),
                    l(J, '_defaultColor', null),
                    l(J, '_defaultOpacity', 1),
                    l(J, '_defaultThickness', 1),
                    l(J, '_l10nPromise', void 0),
                    l(J, '_type', 'ink');
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.fitCurve = void 0);
                  const r = n(151);
                  t.fitCurve = r;
                },
                (e) => {
                  'use strict';
                  function t(e, i, o, a, s) {
                    var c, h, u, d, p, f, g, m, v, b, y, _, w;
                    if (2 === e.length)
                      return (
                        (_ = l.vectorLen(l.subtract(e[0], e[1])) / 3),
                        [
                          (c = [
                            e[0],
                            l.addArrays(e[0], l.mulItems(i, _)),
                            l.addArrays(e[1], l.mulItems(o, _)),
                            e[1],
                          ]),
                        ]
                      );
                    if (
                      ((h = (function (e) {
                        var t,
                          n,
                          r,
                          i = [];
                        return (
                          e.forEach((e, o) => {
                            (t = o ? n + l.vectorLen(l.subtract(e, r)) : 0),
                              i.push(t),
                              (n = t),
                              (r = e);
                          }),
                          (i = i.map((e) => e / n))
                        );
                      })(e)),
                      ([c, d, f] = n(e, h, h, i, o, s)),
                      0 === d || d < a)
                    )
                      return [c];
                    if (d < a * a)
                      for (u = h, p = d, g = f, w = 0; w < 20; w++) {
                        if (
                          ((u = r(c, e, u)),
                          ([c, d, f] = n(e, h, u, i, o, s)),
                          d < a)
                        )
                          return [c];
                        if (f === g) {
                          let e = d / p;
                          if (e > 0.9999 && e < 1.0001) break;
                        }
                        (p = d), (g = f);
                      }
                    return (
                      (y = []),
                      (m = l.subtract(e[f - 1], e[f + 1])).every(
                        (e) => 0 === e,
                      ) &&
                        ((m = l.subtract(e[f - 1], e[f])),
                        ([m[0], m[1]] = [-m[1], m[0]])),
                      (v = l.normalize(m)),
                      (b = l.mulItems(v, -1)),
                      (y = (y = y.concat(
                        t(e.slice(0, f + 1), i, v, a, s),
                      )).concat(t(e.slice(f), b, o, a, s)))
                    );
                  }
                  function n(e, t, n, r, i, s) {
                    var h, u, d;
                    return (
                      (h = (function (e, t, n, r) {
                        var i,
                          o,
                          a,
                          s,
                          h,
                          u,
                          d,
                          p,
                          f,
                          g,
                          m,
                          v,
                          b,
                          y,
                          _,
                          w,
                          S,
                          A = e[0],
                          x = e[e.length - 1];
                        for (
                          i = [A, null, null, x],
                            o = l.zeros_Xx2x2(t.length),
                            b = 0,
                            y = t.length;
                          b < y;
                          b++
                        )
                          (S = 1 - (w = t[b])),
                            ((a = o[b])[0] = l.mulItems(n, 3 * w * (S * S))),
                            (a[1] = l.mulItems(r, 3 * S * (w * w)));
                        for (
                          s = [
                            [0, 0],
                            [0, 0],
                          ],
                            h = [0, 0],
                            b = 0,
                            y = e.length;
                          b < y;
                          b++
                        )
                          (w = t[b]),
                            (a = o[b]),
                            (s[0][0] += l.dot(a[0], a[0])),
                            (s[0][1] += l.dot(a[0], a[1])),
                            (s[1][0] += l.dot(a[0], a[1])),
                            (s[1][1] += l.dot(a[1], a[1])),
                            (_ = l.subtract(e[b], c.q([A, A, x, x], w))),
                            (h[0] += l.dot(a[0], _)),
                            (h[1] += l.dot(a[1], _));
                        return (
                          (u = s[0][0] * s[1][1] - s[1][0] * s[0][1]),
                          (d = s[0][0] * h[1] - s[1][0] * h[0]),
                          (p = h[0] * s[1][1] - h[1] * s[0][1]),
                          (f = 0 === u ? 0 : p / u),
                          (g = 0 === u ? 0 : d / u),
                          (v = l.vectorLen(l.subtract(A, x))),
                          f < (m = 1e-6 * v) || g < m
                            ? ((i[1] = l.addArrays(A, l.mulItems(n, v / 3))),
                              (i[2] = l.addArrays(x, l.mulItems(r, v / 3))))
                            : ((i[1] = l.addArrays(A, l.mulItems(n, f))),
                              (i[2] = l.addArrays(x, l.mulItems(r, g)))),
                          i
                        );
                      })(e, n, r, i)),
                      ([u, d] = (function (e, t, n) {
                        var r, i, s, h, u, d, p, f;
                        (i = 0), (s = Math.floor(e.length / 2));
                        const g = o(t, 10);
                        for (u = 0, d = e.length; u < d; u++)
                          (p = e[u]),
                            (f = a(0, n[u], g, 10)),
                            (r =
                              (h = l.subtract(c.q(t, f), p))[0] * h[0] +
                              h[1] * h[1]) > i && ((i = r), (s = u));
                        return [i, s];
                      })(e, h, t)),
                      s &&
                        s({
                          bez: h,
                          points: e,
                          params: t,
                          maxErr: u,
                          maxPoint: d,
                        }),
                      [h, u, d]
                    );
                  }
                  function r(e, t, n) {
                    return n.map((n, r) => i(e, t[r], n));
                  }
                  function i(e, t, n) {
                    var r = l.subtract(c.q(e, n), t),
                      i = c.qprime(e, n),
                      o = l.mulMatrix(r, i),
                      a =
                        l.sum(l.squareItems(i)) +
                        2 * l.mulMatrix(r, c.qprimeprime(e, n));
                    return 0 === a ? n : n - o / a;
                  }
                  var o = function (e, t) {
                    for (var n, r = [0], i = e[0], o = 0, a = 1; a <= t; a++)
                      (n = c.q(e, a / t)),
                        (o += l.vectorLen(l.subtract(n, i))),
                        r.push(o),
                        (i = n);
                    return (r = r.map((e) => e / o));
                  };
                  function a(e, t, n, r) {
                    if (t < 0) return 0;
                    if (t > 1) return 1;
                    for (var i, o, a, s, l = 1; l <= r; l++)
                      if (t <= n[l]) {
                        (a = (l - 1) / r),
                          (o = l / r),
                          (s =
                            ((t - (i = n[l - 1])) / (n[l] - i)) * (o - a) + a);
                        break;
                      }
                    return s;
                  }
                  function s(e, t) {
                    return l.normalize(l.subtract(e, t));
                  }
                  class l {
                    static zeros_Xx2x2(e) {
                      for (var t = []; e--; ) t.push([0, 0]);
                      return t;
                    }
                    static mulItems(e, t) {
                      return e.map((e) => e * t);
                    }
                    static mulMatrix(e, t) {
                      return e.reduce((e, n, r) => e + n * t[r], 0);
                    }
                    static subtract(e, t) {
                      return e.map((e, n) => e - t[n]);
                    }
                    static addArrays(e, t) {
                      return e.map((e, n) => e + t[n]);
                    }
                    static addItems(e, t) {
                      return e.map((e) => e + t);
                    }
                    static sum(e) {
                      return e.reduce((e, t) => e + t);
                    }
                    static dot(e, t) {
                      return l.mulMatrix(e, t);
                    }
                    static vectorLen(e) {
                      return Math.hypot(...e);
                    }
                    static divItems(e, t) {
                      return e.map((e) => e / t);
                    }
                    static squareItems(e) {
                      return e.map((e) => e * e);
                    }
                    static normalize(e) {
                      return this.divItems(e, this.vectorLen(e));
                    }
                  }
                  class c {
                    static q(e, t) {
                      var n = 1 - t,
                        r = l.mulItems(e[0], n * n * n),
                        i = l.mulItems(e[1], 3 * n * n * t),
                        o = l.mulItems(e[2], 3 * n * t * t),
                        a = l.mulItems(e[3], t * t * t);
                      return l.addArrays(l.addArrays(r, i), l.addArrays(o, a));
                    }
                    static qprime(e, t) {
                      var n = 1 - t,
                        r = l.mulItems(l.subtract(e[1], e[0]), 3 * n * n),
                        i = l.mulItems(l.subtract(e[2], e[1]), 6 * n * t),
                        o = l.mulItems(l.subtract(e[3], e[2]), 3 * t * t);
                      return l.addArrays(l.addArrays(r, i), o);
                    }
                    static qprimeprime(e, t) {
                      return l.addArrays(
                        l.mulItems(
                          l.addArrays(
                            l.subtract(e[2], l.mulItems(e[1], 2)),
                            e[0],
                          ),
                          6 * (1 - t),
                        ),
                        l.mulItems(
                          l.addArrays(
                            l.subtract(e[3], l.mulItems(e[2], 2)),
                            e[1],
                          ),
                          6 * t,
                        ),
                      );
                    }
                  }
                  (e.exports = function (e, n, r) {
                    if (!Array.isArray(e))
                      throw new TypeError('First argument should be an array');
                    if (
                      (e.forEach((t) => {
                        if (
                          !Array.isArray(t) ||
                          t.some((e) => 'number' != typeof e) ||
                          t.length !== e[0].length
                        )
                          throw Error(
                            'Each point should be an array of numbers. Each point should have the same amount of numbers.',
                          );
                      }),
                      (e = e.filter(
                        (t, n) =>
                          0 === n || !t.every((t, r) => t === e[n - 1][r]),
                      )).length < 2)
                    )
                      return [];
                    const i = e.length,
                      o = s(e[1], e[0]),
                      a = s(e[i - 2], e[i - 1]);
                    return t(e, o, a, n, r);
                  }),
                    (e.exports.fitCubic = t),
                    (e.exports.createTangent = s);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.AnnotationLayer = void 0);
                  var r = n(1),
                    i = n(133),
                    o = n(130),
                    a = n(153),
                    s = n(154);
                  function l(e, t, n) {
                    return (
                      (function (e, t) {
                        if (e !== t)
                          throw new TypeError(
                            'Private static access of wrong provenance',
                          );
                      })(e, t),
                      n
                    );
                  }
                  const c = 1e3,
                    h = new WeakSet();
                  function u(e) {
                    return { width: e[2] - e[0], height: e[3] - e[1] };
                  }
                  class d {
                    static create(e) {
                      switch (e.data.annotationType) {
                        case r.AnnotationType.LINK:
                          return new f(e);
                        case r.AnnotationType.TEXT:
                          return new g(e);
                        case r.AnnotationType.WIDGET:
                          switch (e.data.fieldType) {
                            case 'Tx':
                              return new v(e);
                            case 'Btn':
                              return e.data.radioButton
                                ? new y(e)
                                : e.data.checkBox
                                  ? new b(e)
                                  : new _(e);
                            case 'Ch':
                              return new w(e);
                          }
                          return new m(e);
                        case r.AnnotationType.POPUP:
                          return new S(e);
                        case r.AnnotationType.FREETEXT:
                          return new x(e);
                        case r.AnnotationType.LINE:
                          return new P(e);
                        case r.AnnotationType.SQUARE:
                          return new E(e);
                        case r.AnnotationType.CIRCLE:
                          return new C(e);
                        case r.AnnotationType.POLYLINE:
                          return new T(e);
                        case r.AnnotationType.CARET:
                          return new M(e);
                        case r.AnnotationType.INK:
                          return new R(e);
                        case r.AnnotationType.POLYGON:
                          return new k(e);
                        case r.AnnotationType.HIGHLIGHT:
                          return new O(e);
                        case r.AnnotationType.UNDERLINE:
                          return new D(e);
                        case r.AnnotationType.SQUIGGLY:
                          return new I(e);
                        case r.AnnotationType.STRIKEOUT:
                          return new L(e);
                        case r.AnnotationType.STAMP:
                          return new F(e);
                        case r.AnnotationType.FILEATTACHMENT:
                          return new N(e);
                        default:
                          return new p(e);
                      }
                    }
                  }
                  class p {
                    constructor(e) {
                      let {
                        isRenderable: t = !1,
                        ignoreBorder: n = !1,
                        createQuadrilaterals: r = !1,
                      } = arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : {};
                      (this.isRenderable = t),
                        (this.data = e.data),
                        (this.layer = e.layer),
                        (this.page = e.page),
                        (this.viewport = e.viewport),
                        (this.linkService = e.linkService),
                        (this.downloadManager = e.downloadManager),
                        (this.imageResourcesPath = e.imageResourcesPath),
                        (this.renderForms = e.renderForms),
                        (this.svgFactory = e.svgFactory),
                        (this.annotationStorage = e.annotationStorage),
                        (this.enableScripting = e.enableScripting),
                        (this.hasJSActions = e.hasJSActions),
                        (this._fieldObjects = e.fieldObjects),
                        (this._mouseState = e.mouseState),
                        t && (this.container = this._createContainer(n)),
                        r &&
                          (this.quadrilaterals = this._createQuadrilaterals(n));
                    }
                    _createContainer() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      const t = this.data,
                        n = this.page,
                        i = this.viewport,
                        o = document.createElement('section'),
                        { width: a, height: s } = u(t.rect),
                        [l, c, h, d] = i.viewBox,
                        p = h - l,
                        f = d - c;
                      o.setAttribute('data-annotation-id', t.id);
                      const g = r.Util.normalizeRect([
                        t.rect[0],
                        n.view[3] - t.rect[1] + n.view[1],
                        t.rect[2],
                        n.view[3] - t.rect[3] + n.view[1],
                      ]);
                      if (!e && t.borderStyle.width > 0) {
                        o.style.borderWidth = `${t.borderStyle.width}px`;
                        const e = t.borderStyle.horizontalCornerRadius,
                          n = t.borderStyle.verticalCornerRadius;
                        if (e > 0 || n > 0) {
                          const t = `calc(${e}px * var(--scale-factor)) / calc(${n}px * var(--scale-factor))`;
                          o.style.borderRadius = t;
                        } else if (this instanceof y) {
                          const e = `calc(${a}px * var(--scale-factor)) / calc(${s}px * var(--scale-factor))`;
                          o.style.borderRadius = e;
                        }
                        switch (t.borderStyle.style) {
                          case r.AnnotationBorderStyleType.SOLID:
                            o.style.borderStyle = 'solid';
                            break;
                          case r.AnnotationBorderStyleType.DASHED:
                            o.style.borderStyle = 'dashed';
                            break;
                          case r.AnnotationBorderStyleType.BEVELED:
                            (0, r.warn)('Unimplemented border style: beveled');
                            break;
                          case r.AnnotationBorderStyleType.INSET:
                            (0, r.warn)('Unimplemented border style: inset');
                            break;
                          case r.AnnotationBorderStyleType.UNDERLINE:
                            o.style.borderBottomStyle = 'solid';
                        }
                        const i = t.borderColor || null;
                        i
                          ? (o.style.borderColor = r.Util.makeHexColor(
                              0 | i[0],
                              0 | i[1],
                              0 | i[2],
                            ))
                          : (o.style.borderWidth = 0);
                      }
                      (o.style.left = (100 * (g[0] - l)) / p + '%'),
                        (o.style.top = (100 * (g[1] - c)) / f + '%');
                      const { rotation: m } = t;
                      return (
                        t.hasOwnCanvas || 0 === m
                          ? ((o.style.width = (100 * a) / p + '%'),
                            (o.style.height = (100 * s) / f + '%'))
                          : this.setRotation(m, o),
                        o
                      );
                    }
                    setRotation(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : this.container;
                      const [n, r, i, o] = this.viewport.viewBox,
                        a = i - n,
                        s = o - r,
                        { width: l, height: c } = u(this.data.rect);
                      let h, d;
                      e % 180 == 0
                        ? ((h = (100 * l) / a), (d = (100 * c) / s))
                        : ((h = (100 * c) / a), (d = (100 * l) / s)),
                        (t.style.width = `${h}%`),
                        (t.style.height = `${d}%`),
                        t.setAttribute('data-main-rotation', (360 - e) % 360);
                    }
                    get _commonActions() {
                      const e = (e, t, n) => {
                        const r = n.detail[e];
                        n.target.style[t] = a.ColorConverters[`${r[0]}_HTML`](
                          r.slice(1),
                        );
                      };
                      return (0, r.shadow)(this, '_commonActions', {
                        display: (e) => {
                          const t = e.detail.display % 2 == 1;
                          (this.container.style.visibility = t
                            ? 'hidden'
                            : 'visible'),
                            this.annotationStorage.setValue(this.data.id, {
                              hidden: t,
                              print:
                                0 === e.detail.display ||
                                3 === e.detail.display,
                            });
                        },
                        print: (e) => {
                          this.annotationStorage.setValue(this.data.id, {
                            print: e.detail.print,
                          });
                        },
                        hidden: (e) => {
                          (this.container.style.visibility = e.detail.hidden
                            ? 'hidden'
                            : 'visible'),
                            this.annotationStorage.setValue(this.data.id, {
                              hidden: e.detail.hidden,
                            });
                        },
                        focus: (e) => {
                          setTimeout(
                            () => e.target.focus({ preventScroll: !1 }),
                            0,
                          );
                        },
                        userName: (e) => {
                          e.target.title = e.detail.userName;
                        },
                        readonly: (e) => {
                          e.detail.readonly
                            ? e.target.setAttribute('readonly', '')
                            : e.target.removeAttribute('readonly');
                        },
                        required: (e) => {
                          this._setRequired(e.target, e.detail.required);
                        },
                        bgColor: (t) => {
                          e('bgColor', 'backgroundColor', t);
                        },
                        fillColor: (t) => {
                          e('fillColor', 'backgroundColor', t);
                        },
                        fgColor: (t) => {
                          e('fgColor', 'color', t);
                        },
                        textColor: (t) => {
                          e('textColor', 'color', t);
                        },
                        borderColor: (t) => {
                          e('borderColor', 'borderColor', t);
                        },
                        strokeColor: (t) => {
                          e('strokeColor', 'borderColor', t);
                        },
                        rotation: (e) => {
                          const t = e.detail.rotation;
                          this.setRotation(t),
                            this.annotationStorage.setValue(this.data.id, {
                              rotation: t,
                            });
                        },
                      });
                    }
                    _dispatchEventFromSandbox(e, t) {
                      const n = this._commonActions;
                      for (const r of Object.keys(t.detail)) {
                        const i = e[r] || n[r];
                        i && i(t);
                      }
                    }
                    _setDefaultPropertiesFromJS(e) {
                      if (!this.enableScripting) return;
                      const t = this.annotationStorage.getRawValue(
                        this.data.id,
                      );
                      if (!t) return;
                      const n = this._commonActions;
                      for (const [r, i] of Object.entries(t)) {
                        const o = n[r];
                        o &&
                          (o({ detail: { [r]: i }, target: e }), delete t[r]);
                      }
                    }
                    _createQuadrilaterals() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (!this.data.quadPoints) return null;
                      const t = [],
                        n = this.data.rect;
                      for (const n of this.data.quadPoints)
                        (this.data.rect = [n[2].x, n[2].y, n[1].x, n[1].y]),
                          t.push(this._createContainer(e));
                      return (this.data.rect = n), t;
                    }
                    _createPopup(e, t) {
                      let n = this.container;
                      this.quadrilaterals &&
                        ((e = e || this.quadrilaterals),
                        (n = this.quadrilaterals[0])),
                        e ||
                          (((e = document.createElement('div')).className =
                            'popupTriggerArea'),
                          n.append(e));
                      const r = new A({
                        container: n,
                        trigger: e,
                        color: t.color,
                        titleObj: t.titleObj,
                        modificationDate: t.modificationDate,
                        contentsObj: t.contentsObj,
                        richText: t.richText,
                        hideWrapper: !0,
                      }).render();
                      (r.style.left = '100%'), n.append(r);
                    }
                    _renderQuadrilaterals(e) {
                      for (const t of this.quadrilaterals) t.className = e;
                      return this.quadrilaterals;
                    }
                    render() {
                      (0, r.unreachable)(
                        'Abstract method `AnnotationElement.render` called',
                      );
                    }
                    _getElementsByName(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      const n = [];
                      if (this._fieldObjects) {
                        const i = this._fieldObjects[e];
                        if (i)
                          for (const { page: e, id: o, exportValues: a } of i) {
                            if (-1 === e) continue;
                            if (o === t) continue;
                            const i = 'string' == typeof a ? a : null,
                              s = document.querySelector(
                                `[data-element-id="${o}"]`,
                              );
                            !s || h.has(s)
                              ? n.push({ id: o, exportValue: i, domElement: s })
                              : (0, r.warn)(
                                  `_getElementsByName - element not allowed: ${o}`,
                                );
                          }
                        return n;
                      }
                      for (const r of document.getElementsByName(e)) {
                        const { id: e, exportValue: i } = r;
                        e !== t &&
                          h.has(r) &&
                          n.push({ id: e, exportValue: i, domElement: r });
                      }
                      return n;
                    }
                    static get platform() {
                      const e =
                        'undefined' != typeof navigator
                          ? navigator.platform
                          : '';
                      return (0, r.shadow)(this, 'platform', {
                        isWin: e.includes('Win'),
                        isMac: e.includes('Mac'),
                      });
                    }
                  }
                  class f extends p {
                    constructor(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      super(e, {
                        isRenderable: !0,
                        ignoreBorder: !(null == t || !t.ignoreBorder),
                        createQuadrilaterals: !0,
                      }),
                        (this.isTooltipOnly = e.data.isTooltipOnly);
                    }
                    render() {
                      const { data: e, linkService: t } = this,
                        n = document.createElement('a');
                      n.setAttribute('data-element-id', e.id);
                      let r = !1;
                      return (
                        e.url
                          ? (t.addLinkAttributes(n, e.url, e.newWindow),
                            (r = !0))
                          : e.action
                            ? (this._bindNamedAction(n, e.action), (r = !0))
                            : e.dest
                              ? (this._bindLink(n, e.dest), (r = !0))
                              : (e.actions &&
                                  (e.actions.Action ||
                                    e.actions['Mouse Up'] ||
                                    e.actions['Mouse Down']) &&
                                  this.enableScripting &&
                                  this.hasJSActions &&
                                  (this._bindJSAction(n, e), (r = !0)),
                                e.resetForm
                                  ? (this._bindResetFormAction(n, e.resetForm),
                                    (r = !0))
                                  : this.isTooltipOnly &&
                                    !r &&
                                    (this._bindLink(n, ''), (r = !0))),
                        this.quadrilaterals
                          ? this._renderQuadrilaterals('linkAnnotation').map(
                              (e, t) => {
                                const r = 0 === t ? n : n.cloneNode();
                                return e.append(r), e;
                              },
                            )
                          : ((this.container.className = 'linkAnnotation'),
                            r && this.container.append(n),
                            this.container)
                      );
                    }
                    _bindLink(e, t) {
                      (e.href = this.linkService.getDestinationHash(t)),
                        (e.onclick = () => (
                          t && this.linkService.goToDestination(t), !1
                        )),
                        (t || '' === t) && (e.className = 'internalLink');
                    }
                    _bindNamedAction(e, t) {
                      (e.href = this.linkService.getAnchorUrl('')),
                        (e.onclick = () => (
                          this.linkService.executeNamedAction(t), !1
                        )),
                        (e.className = 'internalLink');
                    }
                    _bindJSAction(e, t) {
                      e.href = this.linkService.getAnchorUrl('');
                      const n = new Map([
                        ['Action', 'onclick'],
                        ['Mouse Up', 'onmouseup'],
                        ['Mouse Down', 'onmousedown'],
                      ]);
                      for (const r of Object.keys(t.actions)) {
                        const i = n.get(r);
                        i &&
                          (e[i] = () => {
                            var e;
                            return (
                              null === (e = this.linkService.eventBus) ||
                                void 0 === e ||
                                e.dispatch('dispatcheventinsandbox', {
                                  source: this,
                                  detail: { id: t.id, name: r },
                                }),
                              !1
                            );
                          });
                      }
                      e.onclick || (e.onclick = () => !1),
                        (e.className = 'internalLink');
                    }
                    _bindResetFormAction(e, t) {
                      const n = e.onclick;
                      if (
                        (n || (e.href = this.linkService.getAnchorUrl('')),
                        (e.className = 'internalLink'),
                        !this._fieldObjects)
                      )
                        return (
                          (0, r.warn)(
                            '_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.',
                          ),
                          void (n || (e.onclick = () => !1))
                        );
                      e.onclick = () => {
                        n && n();
                        const { fields: e, refs: i, include: o } = t,
                          a = [];
                        if (0 !== e.length || 0 !== i.length) {
                          const t = new Set(i);
                          for (const n of e) {
                            const e = this._fieldObjects[n] || [];
                            for (const { id: n } of e) t.add(n);
                          }
                          for (const e of Object.values(this._fieldObjects))
                            for (const n of e) t.has(n.id) === o && a.push(n);
                        } else
                          for (const e of Object.values(this._fieldObjects))
                            a.push(...e);
                        const s = this.annotationStorage,
                          l = [];
                        for (const e of a) {
                          const { id: t } = e;
                          switch ((l.push(t), e.type)) {
                            case 'text': {
                              const n = e.defaultValue || '';
                              s.setValue(t, { value: n });
                              break;
                            }
                            case 'checkbox':
                            case 'radiobutton': {
                              const n = e.defaultValue === e.exportValues;
                              s.setValue(t, { value: n });
                              break;
                            }
                            case 'combobox':
                            case 'listbox': {
                              const n = e.defaultValue || '';
                              s.setValue(t, { value: n });
                              break;
                            }
                            default:
                              continue;
                          }
                          const n = document.querySelector(
                            `[data-element-id="${t}"]`,
                          );
                          n &&
                            (h.has(n)
                              ? n.dispatchEvent(new Event('resetform'))
                              : (0, r.warn)(
                                  `_bindResetFormAction - element not allowed: ${t}`,
                                ));
                        }
                        var c;
                        return (
                          this.enableScripting &&
                            (null === (c = this.linkService.eventBus) ||
                              void 0 === c ||
                              c.dispatch('dispatcheventinsandbox', {
                                source: this,
                                detail: {
                                  id: 'app',
                                  ids: l,
                                  name: 'ResetForm',
                                },
                              })),
                          !1
                        );
                      };
                    }
                  }
                  class g extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                      });
                    }
                    render() {
                      this.container.className = 'textAnnotation';
                      const e = document.createElement('img');
                      return (
                        (e.src =
                          this.imageResourcesPath +
                          'annotation-' +
                          this.data.name.toLowerCase() +
                          '.svg'),
                        (e.alt = '[{{type}} Annotation]'),
                        (e.dataset.l10nId = 'text_annotation_type'),
                        (e.dataset.l10nArgs = JSON.stringify({
                          type: this.data.name,
                        })),
                        this.data.hasPopup || this._createPopup(e, this.data),
                        this.container.append(e),
                        this.container
                      );
                    }
                  }
                  class m extends p {
                    render() {
                      return (
                        this.data.alternativeText &&
                          (this.container.title = this.data.alternativeText),
                        this.container
                      );
                    }
                    _getKeyModifier(e) {
                      const { isWin: t, isMac: n } = p.platform;
                      return (t && e.ctrlKey) || (n && e.metaKey);
                    }
                    _setEventListener(e, t, n, r) {
                      t.includes('mouse')
                        ? e.addEventListener(t, (e) => {
                            var t;
                            null === (t = this.linkService.eventBus) ||
                              void 0 === t ||
                              t.dispatch('dispatcheventinsandbox', {
                                source: this,
                                detail: {
                                  id: this.data.id,
                                  name: n,
                                  value: r(e),
                                  shift: e.shiftKey,
                                  modifier: this._getKeyModifier(e),
                                },
                              });
                          })
                        : e.addEventListener(t, (e) => {
                            var t;
                            null === (t = this.linkService.eventBus) ||
                              void 0 === t ||
                              t.dispatch('dispatcheventinsandbox', {
                                source: this,
                                detail: {
                                  id: this.data.id,
                                  name: n,
                                  value: r(e),
                                },
                              });
                          });
                    }
                    _setEventListeners(e, t, n) {
                      for (const [i, o] of t) {
                        var r;
                        ('Action' === o ||
                          (null !== (r = this.data.actions) &&
                            void 0 !== r &&
                            r[o])) &&
                          this._setEventListener(e, i, o, n);
                      }
                    }
                    _setBackgroundColor(e) {
                      const t = this.data.backgroundColor || null;
                      e.style.backgroundColor =
                        null === t
                          ? 'transparent'
                          : r.Util.makeHexColor(t[0], t[1], t[2]);
                    }
                    _setTextStyle(e) {
                      const t = ['left', 'center', 'right'],
                        { fontColor: n } = this.data.defaultAppearanceData,
                        i = this.data.defaultAppearanceData.fontSize || 9,
                        o = e.style;
                      let a;
                      if (this.data.multiLine) {
                        const e = Math.abs(
                            this.data.rect[3] - this.data.rect[1],
                          ),
                          t = e / (Math.round(e / (r.LINE_FACTOR * i)) || 1);
                        a = Math.min(i, Math.round(t / r.LINE_FACTOR));
                      } else {
                        const e = Math.abs(
                          this.data.rect[3] - this.data.rect[1],
                        );
                        a = Math.min(i, Math.round(e / r.LINE_FACTOR));
                      }
                      (o.fontSize = `calc(${a}px * var(--scale-factor))`),
                        (o.color = r.Util.makeHexColor(n[0], n[1], n[2])),
                        null !== this.data.textAlignment &&
                          (o.textAlign = t[this.data.textAlignment]);
                    }
                    _setRequired(e, t) {
                      t
                        ? e.setAttribute('required', !0)
                        : e.removeAttribute('required'),
                        e.setAttribute('aria-required', t);
                    }
                  }
                  class v extends m {
                    constructor(e) {
                      super(e, {
                        isRenderable:
                          e.renderForms ||
                          (!e.data.hasAppearance && !!e.data.fieldValue),
                      });
                    }
                    setPropertyOnSiblings(e, t, n, r) {
                      const i = this.annotationStorage;
                      for (const o of this._getElementsByName(e.name, e.id))
                        o.domElement && (o.domElement[t] = n),
                          i.setValue(o.id, { [r]: n });
                    }
                    render() {
                      const e = this.annotationStorage,
                        t = this.data.id;
                      this.container.className = 'textWidgetAnnotation';
                      let n = null;
                      if (this.renderForms) {
                        const i = e.getValue(t, {
                          value: this.data.fieldValue,
                        });
                        let o = i.formattedValue || i.value || '';
                        const a = e.getValue(t, {
                          charLimit: this.data.maxLen,
                        }).charLimit;
                        a && o.length > a && (o = o.slice(0, a));
                        const s = {
                          userValue: o,
                          formattedValue: null,
                          valueOnFocus: '',
                        };
                        this.data.multiLine
                          ? ((n = document.createElement('textarea')),
                            (n.textContent = o),
                            this.data.doNotScroll &&
                              (n.style.overflowY = 'hidden'))
                          : ((n = document.createElement('input')),
                            (n.type = 'text'),
                            n.setAttribute('value', o),
                            this.data.doNotScroll &&
                              (n.style.overflowX = 'hidden')),
                          h.add(n),
                          n.setAttribute('data-element-id', t),
                          (n.disabled = this.data.readOnly),
                          (n.name = this.data.fieldName),
                          (n.tabIndex = c),
                          this._setRequired(n, this.data.required),
                          a && (n.maxLength = a),
                          n.addEventListener('input', (r) => {
                            e.setValue(t, { value: r.target.value }),
                              this.setPropertyOnSiblings(
                                n,
                                'value',
                                r.target.value,
                                'value',
                              );
                          }),
                          n.addEventListener('resetform', (e) => {
                            var t;
                            const r =
                              null !== (t = this.data.defaultFieldValue) &&
                              void 0 !== t
                                ? t
                                : '';
                            (n.value = s.userValue = r),
                              (s.formattedValue = null);
                          });
                        let l = (e) => {
                          const { formattedValue: t } = s;
                          null != t && (e.target.value = t),
                            (e.target.scrollLeft = 0);
                        };
                        if (this.enableScripting && this.hasJSActions) {
                          var r;
                          n.addEventListener('focus', (e) => {
                            s.userValue && (e.target.value = s.userValue),
                              (s.valueOnFocus = e.target.value);
                          }),
                            n.addEventListener('updatefromsandbox', (n) => {
                              const r = {
                                value(n) {
                                  var r;
                                  (s.userValue =
                                    null !== (r = n.detail.value) &&
                                    void 0 !== r
                                      ? r
                                      : ''),
                                    e.setValue(t, {
                                      value: s.userValue.toString(),
                                    }),
                                    (n.target.value = s.userValue);
                                },
                                formattedValue(n) {
                                  const { formattedValue: r } = n.detail;
                                  (s.formattedValue = r),
                                    null != r &&
                                      n.target !== document.activeElement &&
                                      (n.target.value = r),
                                    e.setValue(t, { formattedValue: r });
                                },
                                selRange(e) {
                                  e.target.setSelectionRange(
                                    ...e.detail.selRange,
                                  );
                                },
                                charLimit: (n) => {
                                  var r;
                                  const { charLimit: i } = n.detail,
                                    { target: o } = n;
                                  if (0 === i)
                                    return void o.removeAttribute('maxLength');
                                  o.setAttribute('maxLength', i);
                                  let a = s.userValue;
                                  !a ||
                                    a.length <= i ||
                                    ((a = a.slice(0, i)),
                                    (o.value = s.userValue = a),
                                    e.setValue(t, { value: a }),
                                    null === (r = this.linkService.eventBus) ||
                                      void 0 === r ||
                                      r.dispatch('dispatcheventinsandbox', {
                                        source: this,
                                        detail: {
                                          id: t,
                                          name: 'Keystroke',
                                          value: a,
                                          willCommit: !0,
                                          commitKey: 1,
                                          selStart: o.selectionStart,
                                          selEnd: o.selectionEnd,
                                        },
                                      }));
                                },
                              };
                              this._dispatchEventFromSandbox(r, n);
                            }),
                            n.addEventListener('keydown', (e) => {
                              var n;
                              let r = -1;
                              if (
                                ('Escape' === e.key
                                  ? (r = 0)
                                  : 'Enter' === e.key
                                    ? (r = 2)
                                    : 'Tab' === e.key && (r = 3),
                                -1 === r)
                              )
                                return;
                              const { value: i } = e.target;
                              s.valueOnFocus !== i &&
                                ((s.userValue = i),
                                null === (n = this.linkService.eventBus) ||
                                  void 0 === n ||
                                  n.dispatch('dispatcheventinsandbox', {
                                    source: this,
                                    detail: {
                                      id: t,
                                      name: 'Keystroke',
                                      value: i,
                                      willCommit: !0,
                                      commitKey: r,
                                      selStart: e.target.selectionStart,
                                      selEnd: e.target.selectionEnd,
                                    },
                                  }));
                            });
                          const i = l;
                          (l = null),
                            n.addEventListener('blur', (e) => {
                              const { value: n } = e.target;
                              var r;
                              (s.userValue = n),
                                this._mouseState.isDown &&
                                  s.valueOnFocus !== n &&
                                  (null === (r = this.linkService.eventBus) ||
                                    void 0 === r ||
                                    r.dispatch('dispatcheventinsandbox', {
                                      source: this,
                                      detail: {
                                        id: t,
                                        name: 'Keystroke',
                                        value: n,
                                        willCommit: !0,
                                        commitKey: 1,
                                        selStart: e.target.selectionStart,
                                        selEnd: e.target.selectionEnd,
                                      },
                                    })),
                                i(e);
                            }),
                            null !== (r = this.data.actions) &&
                              void 0 !== r &&
                              r.Keystroke &&
                              n.addEventListener('beforeinput', (e) => {
                                var n;
                                const { data: r, target: i } = e,
                                  {
                                    value: o,
                                    selectionStart: a,
                                    selectionEnd: s,
                                  } = i;
                                let l = a,
                                  c = s;
                                switch (e.inputType) {
                                  case 'deleteWordBackward': {
                                    const e = o
                                      .substring(0, a)
                                      .match(/\w*[^\w]*$/);
                                    e && (l -= e[0].length);
                                    break;
                                  }
                                  case 'deleteWordForward': {
                                    const e = o
                                      .substring(a)
                                      .match(/^[^\w]*\w*/);
                                    e && (c += e[0].length);
                                    break;
                                  }
                                  case 'deleteContentBackward':
                                    a === s && (l -= 1);
                                    break;
                                  case 'deleteContentForward':
                                    a === s && (c += 1);
                                }
                                e.preventDefault(),
                                  null === (n = this.linkService.eventBus) ||
                                    void 0 === n ||
                                    n.dispatch('dispatcheventinsandbox', {
                                      source: this,
                                      detail: {
                                        id: t,
                                        name: 'Keystroke',
                                        value: o,
                                        change: r || '',
                                        willCommit: !1,
                                        selStart: l,
                                        selEnd: c,
                                      },
                                    });
                              }),
                            this._setEventListeners(
                              n,
                              [
                                ['focus', 'Focus'],
                                ['blur', 'Blur'],
                                ['mousedown', 'Mouse Down'],
                                ['mouseenter', 'Mouse Enter'],
                                ['mouseleave', 'Mouse Exit'],
                                ['mouseup', 'Mouse Up'],
                              ],
                              (e) => e.target.value,
                            );
                        }
                        if (
                          (l && n.addEventListener('blur', l), this.data.comb)
                        ) {
                          const e = (this.data.rect[2] - this.data.rect[0]) / a;
                          n.classList.add('comb'),
                            (n.style.letterSpacing = `calc(${e}px * var(--scale-factor) - 1ch)`);
                        }
                      } else
                        (n = document.createElement('div')),
                          (n.textContent = this.data.fieldValue),
                          (n.style.verticalAlign = 'middle'),
                          (n.style.display = 'table-cell');
                      return (
                        this._setTextStyle(n),
                        this._setBackgroundColor(n),
                        this._setDefaultPropertiesFromJS(n),
                        this.container.append(n),
                        this.container
                      );
                    }
                  }
                  class b extends m {
                    constructor(e) {
                      super(e, { isRenderable: e.renderForms });
                    }
                    render() {
                      const e = this.annotationStorage,
                        t = this.data,
                        n = t.id;
                      let r = e.getValue(n, {
                        value: t.exportValue === t.fieldValue,
                      }).value;
                      'string' == typeof r &&
                        ((r = 'Off' !== r), e.setValue(n, { value: r })),
                        (this.container.className =
                          'buttonWidgetAnnotation checkBox');
                      const i = document.createElement('input');
                      return (
                        h.add(i),
                        i.setAttribute('data-element-id', n),
                        (i.disabled = t.readOnly),
                        this._setRequired(i, this.data.required),
                        (i.type = 'checkbox'),
                        (i.name = t.fieldName),
                        r && i.setAttribute('checked', !0),
                        i.setAttribute('exportValue', t.exportValue),
                        (i.tabIndex = c),
                        i.addEventListener('change', (r) => {
                          const { name: i, checked: o } = r.target;
                          for (const r of this._getElementsByName(i, n)) {
                            const n = o && r.exportValue === t.exportValue;
                            r.domElement && (r.domElement.checked = n),
                              e.setValue(r.id, { value: n });
                          }
                          e.setValue(n, { value: o });
                        }),
                        i.addEventListener('resetform', (e) => {
                          const n = t.defaultFieldValue || 'Off';
                          e.target.checked = n === t.exportValue;
                        }),
                        this.enableScripting &&
                          this.hasJSActions &&
                          (i.addEventListener('updatefromsandbox', (t) => {
                            const r = {
                              value(t) {
                                (t.target.checked = 'Off' !== t.detail.value),
                                  e.setValue(n, { value: t.target.checked });
                              },
                            };
                            this._dispatchEventFromSandbox(r, t);
                          }),
                          this._setEventListeners(
                            i,
                            [
                              ['change', 'Validate'],
                              ['change', 'Action'],
                              ['focus', 'Focus'],
                              ['blur', 'Blur'],
                              ['mousedown', 'Mouse Down'],
                              ['mouseenter', 'Mouse Enter'],
                              ['mouseleave', 'Mouse Exit'],
                              ['mouseup', 'Mouse Up'],
                            ],
                            (e) => e.target.checked,
                          )),
                        this._setBackgroundColor(i),
                        this._setDefaultPropertiesFromJS(i),
                        this.container.append(i),
                        this.container
                      );
                    }
                  }
                  class y extends m {
                    constructor(e) {
                      super(e, { isRenderable: e.renderForms });
                    }
                    render() {
                      this.container.className =
                        'buttonWidgetAnnotation radioButton';
                      const e = this.annotationStorage,
                        t = this.data,
                        n = t.id;
                      let r = e.getValue(n, {
                        value: t.fieldValue === t.buttonValue,
                      }).value;
                      'string' == typeof r &&
                        ((r = r !== t.buttonValue),
                        e.setValue(n, { value: r }));
                      const i = document.createElement('input');
                      if (
                        (h.add(i),
                        i.setAttribute('data-element-id', n),
                        (i.disabled = t.readOnly),
                        this._setRequired(i, this.data.required),
                        (i.type = 'radio'),
                        (i.name = t.fieldName),
                        r && i.setAttribute('checked', !0),
                        (i.tabIndex = c),
                        i.addEventListener('change', (t) => {
                          const { name: r, checked: i } = t.target;
                          for (const t of this._getElementsByName(r, n))
                            e.setValue(t.id, { value: !1 });
                          e.setValue(n, { value: i });
                        }),
                        i.addEventListener('resetform', (e) => {
                          const n = t.defaultFieldValue;
                          e.target.checked = null != n && n === t.buttonValue;
                        }),
                        this.enableScripting && this.hasJSActions)
                      ) {
                        const r = t.buttonValue;
                        i.addEventListener('updatefromsandbox', (t) => {
                          const i = {
                            value: (t) => {
                              const i = r === t.detail.value;
                              for (const r of this._getElementsByName(
                                t.target.name,
                              )) {
                                const t = i && r.id === n;
                                r.domElement && (r.domElement.checked = t),
                                  e.setValue(r.id, { value: t });
                              }
                            },
                          };
                          this._dispatchEventFromSandbox(i, t);
                        }),
                          this._setEventListeners(
                            i,
                            [
                              ['change', 'Validate'],
                              ['change', 'Action'],
                              ['focus', 'Focus'],
                              ['blur', 'Blur'],
                              ['mousedown', 'Mouse Down'],
                              ['mouseenter', 'Mouse Enter'],
                              ['mouseleave', 'Mouse Exit'],
                              ['mouseup', 'Mouse Up'],
                            ],
                            (e) => e.target.checked,
                          );
                      }
                      return (
                        this._setBackgroundColor(i),
                        this._setDefaultPropertiesFromJS(i),
                        this.container.append(i),
                        this.container
                      );
                    }
                  }
                  class _ extends f {
                    constructor(e) {
                      super(e, { ignoreBorder: e.data.hasAppearance });
                    }
                    render() {
                      const e = super.render();
                      (e.className = 'buttonWidgetAnnotation pushButton'),
                        this.data.alternativeText &&
                          (e.title = this.data.alternativeText);
                      const t = e.lastChild;
                      return (
                        this.enableScripting &&
                          this.hasJSActions &&
                          t &&
                          (this._setDefaultPropertiesFromJS(t),
                          t.addEventListener('updatefromsandbox', (e) => {
                            this._dispatchEventFromSandbox({}, e);
                          })),
                        e
                      );
                    }
                  }
                  class w extends m {
                    constructor(e) {
                      super(e, { isRenderable: e.renderForms });
                    }
                    render() {
                      this.container.className = 'choiceWidgetAnnotation';
                      const e = this.annotationStorage,
                        t = this.data.id,
                        n = e.getValue(t, { value: this.data.fieldValue }),
                        r = document.createElement('select');
                      h.add(r),
                        r.setAttribute('data-element-id', t),
                        (r.disabled = this.data.readOnly),
                        this._setRequired(r, this.data.required),
                        (r.name = this.data.fieldName),
                        (r.tabIndex = c);
                      let i = this.data.combo && this.data.options.length > 0;
                      this.data.combo ||
                        ((r.size = this.data.options.length),
                        this.data.multiSelect && (r.multiple = !0)),
                        r.addEventListener('resetform', (e) => {
                          const t = this.data.defaultFieldValue;
                          for (const e of r.options) e.selected = e.value === t;
                        });
                      for (const e of this.data.options) {
                        const t = document.createElement('option');
                        (t.textContent = e.displayValue),
                          (t.value = e.exportValue),
                          n.value.includes(e.exportValue) &&
                            (t.setAttribute('selected', !0), (i = !1)),
                          r.append(t);
                      }
                      let o = null;
                      if (i) {
                        const e = document.createElement('option');
                        (e.value = ' '),
                          e.setAttribute('hidden', !0),
                          e.setAttribute('selected', !0),
                          r.prepend(e),
                          (o = () => {
                            e.remove(),
                              r.removeEventListener('input', o),
                              (o = null);
                          }),
                          r.addEventListener('input', o);
                      }
                      const a = (e, t) => {
                          const n = t ? 'value' : 'textContent',
                            r = e.target.options;
                          return e.target.multiple
                            ? Array.prototype.filter
                                .call(r, (e) => e.selected)
                                .map((e) => e[n])
                            : -1 === r.selectedIndex
                              ? null
                              : r[r.selectedIndex][n];
                        },
                        s = (e) => {
                          const t = e.target.options;
                          return Array.prototype.map.call(t, (e) => ({
                            displayValue: e.textContent,
                            exportValue: e.value,
                          }));
                        };
                      return (
                        this.enableScripting && this.hasJSActions
                          ? (r.addEventListener('updatefromsandbox', (n) => {
                              const i = {
                                value(n) {
                                  var i;
                                  null === (i = o) || void 0 === i || i();
                                  const s = n.detail.value,
                                    l = new Set(Array.isArray(s) ? s : [s]);
                                  for (const e of r.options)
                                    e.selected = l.has(e.value);
                                  e.setValue(t, { value: a(n, !0) });
                                },
                                multipleSelection(e) {
                                  r.multiple = !0;
                                },
                                remove(n) {
                                  const i = r.options,
                                    o = n.detail.remove;
                                  (i[o].selected = !1),
                                    r.remove(o),
                                    i.length > 0 &&
                                      -1 ===
                                        Array.prototype.findIndex.call(
                                          i,
                                          (e) => e.selected,
                                        ) &&
                                      (i[0].selected = !0),
                                    e.setValue(t, {
                                      value: a(n, !0),
                                      items: s(n),
                                    });
                                },
                                clear(n) {
                                  for (; 0 !== r.length; ) r.remove(0);
                                  e.setValue(t, { value: null, items: [] });
                                },
                                insert(n) {
                                  const {
                                      index: i,
                                      displayValue: o,
                                      exportValue: l,
                                    } = n.detail.insert,
                                    c = r.children[i],
                                    h = document.createElement('option');
                                  (h.textContent = o),
                                    (h.value = l),
                                    c ? c.before(h) : r.append(h),
                                    e.setValue(t, {
                                      value: a(n, !0),
                                      items: s(n),
                                    });
                                },
                                items(n) {
                                  const { items: i } = n.detail;
                                  for (; 0 !== r.length; ) r.remove(0);
                                  for (const e of i) {
                                    const { displayValue: t, exportValue: n } =
                                        e,
                                      i = document.createElement('option');
                                    (i.textContent = t),
                                      (i.value = n),
                                      r.append(i);
                                  }
                                  r.options.length > 0 &&
                                    (r.options[0].selected = !0),
                                    e.setValue(t, {
                                      value: a(n, !0),
                                      items: s(n),
                                    });
                                },
                                indices(n) {
                                  const r = new Set(n.detail.indices);
                                  for (const e of n.target.options)
                                    e.selected = r.has(e.index);
                                  e.setValue(t, { value: a(n, !0) });
                                },
                                editable(e) {
                                  e.target.disabled = !e.detail.editable;
                                },
                              };
                              this._dispatchEventFromSandbox(i, n);
                            }),
                            r.addEventListener('input', (n) => {
                              var r;
                              const i = a(n, !0),
                                o = a(n, !1);
                              e.setValue(t, { value: i }),
                                null === (r = this.linkService.eventBus) ||
                                  void 0 === r ||
                                  r.dispatch('dispatcheventinsandbox', {
                                    source: this,
                                    detail: {
                                      id: t,
                                      name: 'Keystroke',
                                      value: o,
                                      changeEx: i,
                                      willCommit: !0,
                                      commitKey: 1,
                                      keyDown: !1,
                                    },
                                  });
                            }),
                            this._setEventListeners(
                              r,
                              [
                                ['focus', 'Focus'],
                                ['blur', 'Blur'],
                                ['mousedown', 'Mouse Down'],
                                ['mouseenter', 'Mouse Enter'],
                                ['mouseleave', 'Mouse Exit'],
                                ['mouseup', 'Mouse Up'],
                                ['input', 'Action'],
                              ],
                              (e) => e.target.checked,
                            ))
                          : r.addEventListener('input', function (n) {
                              e.setValue(t, { value: a(n, !0) });
                            }),
                        this.data.combo && this._setTextStyle(r),
                        this._setBackgroundColor(r),
                        this._setDefaultPropertiesFromJS(r),
                        this.container.append(r),
                        this.container
                      );
                    }
                  }
                  class S extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                      });
                    }
                    render() {
                      if (
                        ((this.container.className = 'popupAnnotation'),
                        [
                          'Line',
                          'Square',
                          'Circle',
                          'PolyLine',
                          'Polygon',
                          'Ink',
                        ].includes(this.data.parentType))
                      )
                        return this.container;
                      const e = `[data-annotation-id="${this.data.parentId}"]`,
                        t = this.layer.querySelectorAll(e);
                      if (0 === t.length) return this.container;
                      const n = new A({
                          container: this.container,
                          trigger: Array.from(t),
                          color: this.data.color,
                          titleObj: this.data.titleObj,
                          modificationDate: this.data.modificationDate,
                          contentsObj: this.data.contentsObj,
                          richText: this.data.richText,
                        }),
                        i = this.page,
                        o = r.Util.normalizeRect([
                          this.data.parentRect[0],
                          i.view[3] - this.data.parentRect[1] + i.view[1],
                          this.data.parentRect[2],
                          i.view[3] - this.data.parentRect[3] + i.view[1],
                        ]),
                        a =
                          o[0] +
                          this.data.parentRect[2] -
                          this.data.parentRect[0],
                        s = o[1],
                        [l, c, h, u] = this.viewport.viewBox,
                        d = h - l,
                        p = u - c;
                      return (
                        (this.container.style.left = (100 * (a - l)) / d + '%'),
                        (this.container.style.top = (100 * (s - c)) / p + '%'),
                        this.container.append(n.render()),
                        this.container
                      );
                    }
                  }
                  class A {
                    constructor(e) {
                      (this.container = e.container),
                        (this.trigger = e.trigger),
                        (this.color = e.color),
                        (this.titleObj = e.titleObj),
                        (this.modificationDate = e.modificationDate),
                        (this.contentsObj = e.contentsObj),
                        (this.richText = e.richText),
                        (this.hideWrapper = e.hideWrapper || !1),
                        (this.pinned = !1);
                    }
                    render() {
                      var e, t;
                      const n = document.createElement('div');
                      (n.className = 'popupWrapper'),
                        (this.hideElement = this.hideWrapper
                          ? n
                          : this.container),
                        (this.hideElement.hidden = !0);
                      const o = document.createElement('div');
                      o.className = 'popup';
                      const a = this.color;
                      if (a) {
                        const e = 0.7 * (255 - a[0]) + a[0],
                          t = 0.7 * (255 - a[1]) + a[1],
                          n = 0.7 * (255 - a[2]) + a[2];
                        o.style.backgroundColor = r.Util.makeHexColor(
                          0 | e,
                          0 | t,
                          0 | n,
                        );
                      }
                      const l = document.createElement('h1');
                      (l.dir = this.titleObj.dir),
                        (l.textContent = this.titleObj.str),
                        o.append(l);
                      const c = i.PDFDateString.toDateObject(
                        this.modificationDate,
                      );
                      if (c) {
                        const e = document.createElement('span');
                        (e.className = 'popupDate'),
                          (e.textContent = '{{date}}, {{time}}'),
                          (e.dataset.l10nId = 'annotation_date_string'),
                          (e.dataset.l10nArgs = JSON.stringify({
                            date: c.toLocaleDateString(),
                            time: c.toLocaleTimeString(),
                          })),
                          o.append(e);
                      }
                      if (
                        null === (e = this.richText) ||
                        void 0 === e ||
                        !e.str ||
                        (null !== (t = this.contentsObj) &&
                          void 0 !== t &&
                          t.str &&
                          this.contentsObj.str !== this.richText.str)
                      ) {
                        const e = this._formatContents(this.contentsObj);
                        o.append(e);
                      } else
                        s.XfaLayer.render({
                          xfaHtml: this.richText.html,
                          intent: 'richText',
                          div: o,
                        }),
                          (o.lastChild.className = 'richText popupContent');
                      Array.isArray(this.trigger) ||
                        (this.trigger = [this.trigger]);
                      for (const e of this.trigger)
                        e.addEventListener('click', this._toggle.bind(this)),
                          e.addEventListener(
                            'mouseover',
                            this._show.bind(this, !1),
                          ),
                          e.addEventListener(
                            'mouseout',
                            this._hide.bind(this, !1),
                          );
                      return (
                        o.addEventListener('click', this._hide.bind(this, !0)),
                        n.append(o),
                        n
                      );
                    }
                    _formatContents(e) {
                      let { str: t, dir: n } = e;
                      const r = document.createElement('p');
                      (r.className = 'popupContent'), (r.dir = n);
                      const i = t.split(/(?:\r\n?|\n)/);
                      for (let e = 0, t = i.length; e < t; ++e) {
                        const n = i[e];
                        r.append(document.createTextNode(n)),
                          e < t - 1 && r.append(document.createElement('br'));
                      }
                      return r;
                    }
                    _toggle() {
                      this.pinned ? this._hide(!0) : this._show(!0);
                    }
                    _show() {
                      arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0] &&
                        (this.pinned = !0),
                        this.hideElement.hidden &&
                          ((this.hideElement.hidden = !1),
                          (this.container.style.zIndex =
                            parseInt(this.container.style.zIndex) + 1e3));
                    }
                    _hide() {
                      (!(arguments.length > 0 && void 0 !== arguments[0]) ||
                        arguments[0]) &&
                        (this.pinned = !1),
                        this.hideElement.hidden ||
                          this.pinned ||
                          ((this.hideElement.hidden = !0),
                          (this.container.style.zIndex =
                            parseInt(this.container.style.zIndex) - 1e3));
                    }
                  }
                  class x extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      }),
                        (this.textContent = e.data.textContent);
                    }
                    render() {
                      if (
                        ((this.container.className = 'freeTextAnnotation'),
                        this.textContent)
                      ) {
                        const e = document.createElement('div');
                        (e.className = 'annotationTextContent'),
                          e.setAttribute('role', 'comment');
                        for (const t of this.textContent) {
                          const n = document.createElement('span');
                          (n.textContent = t), e.append(n);
                        }
                        this.container.append(e);
                      }
                      return (
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.container
                      );
                    }
                  }
                  class P extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      });
                    }
                    render() {
                      this.container.className = 'lineAnnotation';
                      const e = this.data,
                        { width: t, height: n } = u(e.rect),
                        r = this.svgFactory.create(t, n, !0),
                        i = this.svgFactory.createElement('svg:line');
                      return (
                        i.setAttribute('x1', e.rect[2] - e.lineCoordinates[0]),
                        i.setAttribute('y1', e.rect[3] - e.lineCoordinates[1]),
                        i.setAttribute('x2', e.rect[2] - e.lineCoordinates[2]),
                        i.setAttribute('y2', e.rect[3] - e.lineCoordinates[3]),
                        i.setAttribute(
                          'stroke-width',
                          e.borderStyle.width || 1,
                        ),
                        i.setAttribute('stroke', 'transparent'),
                        i.setAttribute('fill', 'transparent'),
                        r.append(i),
                        this.container.append(r),
                        this._createPopup(i, e),
                        this.container
                      );
                    }
                  }
                  class E extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      });
                    }
                    render() {
                      this.container.className = 'squareAnnotation';
                      const e = this.data,
                        { width: t, height: n } = u(e.rect),
                        r = this.svgFactory.create(t, n, !0),
                        i = e.borderStyle.width,
                        o = this.svgFactory.createElement('svg:rect');
                      return (
                        o.setAttribute('x', i / 2),
                        o.setAttribute('y', i / 2),
                        o.setAttribute('width', t - i),
                        o.setAttribute('height', n - i),
                        o.setAttribute('stroke-width', i || 1),
                        o.setAttribute('stroke', 'transparent'),
                        o.setAttribute('fill', 'transparent'),
                        r.append(o),
                        this.container.append(r),
                        this._createPopup(o, e),
                        this.container
                      );
                    }
                  }
                  class C extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      });
                    }
                    render() {
                      this.container.className = 'circleAnnotation';
                      const e = this.data,
                        { width: t, height: n } = u(e.rect),
                        r = this.svgFactory.create(t, n, !0),
                        i = e.borderStyle.width,
                        o = this.svgFactory.createElement('svg:ellipse');
                      return (
                        o.setAttribute('cx', t / 2),
                        o.setAttribute('cy', n / 2),
                        o.setAttribute('rx', t / 2 - i / 2),
                        o.setAttribute('ry', n / 2 - i / 2),
                        o.setAttribute('stroke-width', i || 1),
                        o.setAttribute('stroke', 'transparent'),
                        o.setAttribute('fill', 'transparent'),
                        r.append(o),
                        this.container.append(r),
                        this._createPopup(o, e),
                        this.container
                      );
                    }
                  }
                  class T extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      }),
                        (this.containerClassName = 'polylineAnnotation'),
                        (this.svgElementName = 'svg:polyline');
                    }
                    render() {
                      this.container.className = this.containerClassName;
                      const e = this.data,
                        { width: t, height: n } = u(e.rect),
                        r = this.svgFactory.create(t, n, !0);
                      let i = [];
                      for (const t of e.vertices) {
                        const n = t.x - e.rect[0],
                          r = e.rect[3] - t.y;
                        i.push(n + ',' + r);
                      }
                      i = i.join(' ');
                      const o = this.svgFactory.createElement(
                        this.svgElementName,
                      );
                      return (
                        o.setAttribute('points', i),
                        o.setAttribute(
                          'stroke-width',
                          e.borderStyle.width || 1,
                        ),
                        o.setAttribute('stroke', 'transparent'),
                        o.setAttribute('fill', 'transparent'),
                        r.append(o),
                        this.container.append(r),
                        this._createPopup(o, e),
                        this.container
                      );
                    }
                  }
                  class k extends T {
                    constructor(e) {
                      super(e),
                        (this.containerClassName = 'polygonAnnotation'),
                        (this.svgElementName = 'svg:polygon');
                    }
                  }
                  class M extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      });
                    }
                    render() {
                      return (
                        (this.container.className = 'caretAnnotation'),
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.container
                      );
                    }
                  }
                  class R extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      }),
                        (this.containerClassName = 'inkAnnotation'),
                        (this.svgElementName = 'svg:polyline');
                    }
                    render() {
                      this.container.className = this.containerClassName;
                      const e = this.data,
                        { width: t, height: n } = u(e.rect),
                        r = this.svgFactory.create(t, n, !0);
                      for (const t of e.inkLists) {
                        let n = [];
                        for (const r of t) {
                          const t = r.x - e.rect[0],
                            i = e.rect[3] - r.y;
                          n.push(`${t},${i}`);
                        }
                        n = n.join(' ');
                        const i = this.svgFactory.createElement(
                          this.svgElementName,
                        );
                        i.setAttribute('points', n),
                          i.setAttribute(
                            'stroke-width',
                            e.borderStyle.width || 1,
                          ),
                          i.setAttribute('stroke', 'transparent'),
                          i.setAttribute('fill', 'transparent'),
                          this._createPopup(i, e),
                          r.append(i);
                      }
                      return this.container.append(r), this.container;
                    }
                  }
                  class O extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                        createQuadrilaterals: !0,
                      });
                    }
                    render() {
                      return (
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.quadrilaterals
                          ? this._renderQuadrilaterals('highlightAnnotation')
                          : ((this.container.className = 'highlightAnnotation'),
                            this.container)
                      );
                    }
                  }
                  class D extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                        createQuadrilaterals: !0,
                      });
                    }
                    render() {
                      return (
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.quadrilaterals
                          ? this._renderQuadrilaterals('underlineAnnotation')
                          : ((this.container.className = 'underlineAnnotation'),
                            this.container)
                      );
                    }
                  }
                  class I extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                        createQuadrilaterals: !0,
                      });
                    }
                    render() {
                      return (
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.quadrilaterals
                          ? this._renderQuadrilaterals('squigglyAnnotation')
                          : ((this.container.className = 'squigglyAnnotation'),
                            this.container)
                      );
                    }
                  }
                  class L extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                        createQuadrilaterals: !0,
                      });
                    }
                    render() {
                      return (
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.quadrilaterals
                          ? this._renderQuadrilaterals('strikeoutAnnotation')
                          : ((this.container.className = 'strikeoutAnnotation'),
                            this.container)
                      );
                    }
                  }
                  class F extends p {
                    constructor(e) {
                      var t, n, r;
                      super(e, {
                        isRenderable: !!(
                          e.data.hasPopup ||
                          (null !== (t = e.data.titleObj) &&
                            void 0 !== t &&
                            t.str) ||
                          (null !== (n = e.data.contentsObj) &&
                            void 0 !== n &&
                            n.str) ||
                          (null !== (r = e.data.richText) &&
                            void 0 !== r &&
                            r.str)
                        ),
                        ignoreBorder: !0,
                      });
                    }
                    render() {
                      return (
                        (this.container.className = 'stampAnnotation'),
                        this.data.hasPopup ||
                          this._createPopup(null, this.data),
                        this.container
                      );
                    }
                  }
                  class N extends p {
                    constructor(e) {
                      var t;
                      super(e, { isRenderable: !0 });
                      const { filename: n, content: r } = this.data.file;
                      (this.filename = (0, i.getFilenameFromUrl)(n)),
                        (this.content = r),
                        null === (t = this.linkService.eventBus) ||
                          void 0 === t ||
                          t.dispatch('fileattachmentannotation', {
                            source: this,
                            filename: n,
                            content: r,
                          });
                    }
                    render() {
                      var e, t;
                      this.container.className = 'fileAttachmentAnnotation';
                      const n = document.createElement('div');
                      return (
                        (n.className = 'popupTriggerArea'),
                        n.addEventListener(
                          'dblclick',
                          this._download.bind(this),
                        ),
                        !this.data.hasPopup &&
                          ((null !== (e = this.data.titleObj) &&
                            void 0 !== e &&
                            e.str) ||
                            (null !== (t = this.data.contentsObj) &&
                              void 0 !== t &&
                              t.str) ||
                            this.data.richText) &&
                          this._createPopup(n, this.data),
                        this.container.append(n),
                        this.container
                      );
                    }
                    _download() {
                      var e;
                      null === (e = this.downloadManager) ||
                        void 0 === e ||
                        e.openOrDownloadData(
                          this.container,
                          this.content,
                          this.filename,
                        );
                    }
                  }
                  class j {
                    static render(e) {
                      const {
                        annotations: t,
                        div: n,
                        viewport: a,
                        accessibilityManager: s,
                      } = e;
                      l(this, j, W).call(this, n, a);
                      let c = 0;
                      for (const h of t) {
                        if (h.annotationType !== r.AnnotationType.POPUP) {
                          const { width: e, height: t } = u(h.rect);
                          if (e <= 0 || t <= 0) continue;
                        }
                        const t = d.create({
                          data: h,
                          layer: n,
                          page: e.page,
                          viewport: a,
                          linkService: e.linkService,
                          downloadManager: e.downloadManager,
                          imageResourcesPath: e.imageResourcesPath || '',
                          renderForms: !1 !== e.renderForms,
                          svgFactory: new i.DOMSVGFactory(),
                          annotationStorage:
                            e.annotationStorage || new o.AnnotationStorage(),
                          enableScripting: e.enableScripting,
                          hasJSActions: e.hasJSActions,
                          fieldObjects: e.fieldObjects,
                          mouseState: e.mouseState || { isDown: !1 },
                        });
                        if (t.isRenderable) {
                          const e = t.render();
                          if (
                            (h.hidden && (e.style.visibility = 'hidden'),
                            Array.isArray(e))
                          )
                            for (const t of e)
                              (t.style.zIndex = c++),
                                l(j, j, B).call(j, t, h.id, n, s);
                          else
                            (e.style.zIndex = c++),
                              t instanceof S
                                ? n.prepend(e)
                                : l(j, j, B).call(j, e, h.id, n, s);
                        }
                      }
                      l(this, j, z).call(this, n, e.annotationCanvasMap);
                    }
                    static update(e) {
                      const { annotationCanvasMap: t, div: n, viewport: r } = e;
                      l(this, j, W).call(this, n, r),
                        l(this, j, z).call(this, n, t),
                        (n.hidden = !1);
                    }
                  }
                  function B(e, t, n, r) {
                    const o = e.firstChild || e;
                    (o.id = `${i.AnnotationPrefix}${t}`),
                      n.append(e),
                      null == r || r.moveElementInDOM(n, e, o, !1);
                  }
                  function W(e, t) {
                    let { width: n, height: r, rotation: i } = t;
                    const { style: o } = e,
                      a = i % 180 != 0,
                      s = Math.floor(n) + 'px',
                      l = Math.floor(r) + 'px';
                    (o.width = a ? l : s),
                      (o.height = a ? s : l),
                      e.setAttribute('data-main-rotation', i);
                  }
                  function z(e, t) {
                    if (t) {
                      for (const [n, r] of t) {
                        const t = e.querySelector(
                          `[data-annotation-id="${n}"]`,
                        );
                        if (!t) continue;
                        const { firstChild: i } = t;
                        i
                          ? 'CANVAS' === i.nodeName
                            ? i.replaceWith(r)
                            : i.before(r)
                          : t.append(r);
                      }
                      t.clear();
                    }
                  }
                  t.AnnotationLayer = j;
                },
                (e, t) => {
                  'use strict';
                  function n(e) {
                    return Math.floor(255 * Math.max(0, Math.min(1, e)))
                      .toString(16)
                      .padStart(2, '0');
                  }
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.ColorConverters = void 0),
                    (t.ColorConverters = class {
                      static CMYK_G(e) {
                        let [t, n, r, i] = e;
                        return [
                          'G',
                          1 - Math.min(1, 0.3 * t + 0.59 * r + 0.11 * n + i),
                        ];
                      }
                      static G_CMYK(e) {
                        let [t] = e;
                        return ['CMYK', 0, 0, 0, 1 - t];
                      }
                      static G_RGB(e) {
                        let [t] = e;
                        return ['RGB', t, t, t];
                      }
                      static G_HTML(e) {
                        let [t] = e;
                        const r = n(t);
                        return `#${r}${r}${r}`;
                      }
                      static RGB_G(e) {
                        let [t, n, r] = e;
                        return ['G', 0.3 * t + 0.59 * n + 0.11 * r];
                      }
                      static RGB_HTML(e) {
                        let [t, r, i] = e;
                        return `#${n(t)}${n(r)}${n(i)}`;
                      }
                      static T_HTML() {
                        return '#00000000';
                      }
                      static CMYK_RGB(e) {
                        let [t, n, r, i] = e;
                        return [
                          'RGB',
                          1 - Math.min(1, t + i),
                          1 - Math.min(1, r + i),
                          1 - Math.min(1, n + i),
                        ];
                      }
                      static CMYK_HTML(e) {
                        const t = this.CMYK_RGB(e).slice(1);
                        return this.RGB_HTML(t);
                      }
                      static RGB_CMYK(e) {
                        let [t, n, r] = e;
                        const i = 1 - t,
                          o = 1 - n,
                          a = 1 - r;
                        return ['CMYK', i, o, a, Math.min(i, o, a)];
                      }
                    });
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.XfaLayer = void 0);
                  var r = n(145);
                  t.XfaLayer = class {
                    static setupStorage(e, t, n, r, i) {
                      const o = r.getValue(t, { value: null });
                      switch (n.name) {
                        case 'textarea':
                          if (
                            (null !== o.value && (e.textContent = o.value),
                            'print' === i)
                          )
                            break;
                          e.addEventListener('input', (e) => {
                            r.setValue(t, { value: e.target.value });
                          });
                          break;
                        case 'input':
                          if (
                            'radio' === n.attributes.type ||
                            'checkbox' === n.attributes.type
                          ) {
                            if (
                              (o.value === n.attributes.xfaOn
                                ? e.setAttribute('checked', !0)
                                : o.value === n.attributes.xfaOff &&
                                  e.removeAttribute('checked'),
                              'print' === i)
                            )
                              break;
                            e.addEventListener('change', (e) => {
                              r.setValue(t, {
                                value: e.target.checked
                                  ? e.target.getAttribute('xfaOn')
                                  : e.target.getAttribute('xfaOff'),
                              });
                            });
                          } else {
                            if (
                              (null !== o.value &&
                                e.setAttribute('value', o.value),
                              'print' === i)
                            )
                              break;
                            e.addEventListener('input', (e) => {
                              r.setValue(t, { value: e.target.value });
                            });
                          }
                          break;
                        case 'select':
                          if (null !== o.value)
                            for (const e of n.children)
                              e.attributes.value === o.value &&
                                (e.attributes.selected = !0);
                          e.addEventListener('input', (e) => {
                            const n = e.target.options,
                              i =
                                -1 === n.selectedIndex
                                  ? ''
                                  : n[n.selectedIndex].value;
                            r.setValue(t, { value: i });
                          });
                      }
                    }
                    static setAttributes(e) {
                      let {
                        html: t,
                        element: n,
                        storage: r = null,
                        intent: i,
                        linkService: o,
                      } = e;
                      const { attributes: a } = n,
                        s = t instanceof HTMLAnchorElement;
                      'radio' === a.type && (a.name = `${a.name}-${i}`);
                      for (const [e, n] of Object.entries(a))
                        if (null != n)
                          switch (e) {
                            case 'class':
                              n.length && t.setAttribute(e, n.join(' '));
                              break;
                            case 'dataId':
                              break;
                            case 'id':
                              t.setAttribute('data-element-id', n);
                              break;
                            case 'style':
                              Object.assign(t.style, n);
                              break;
                            case 'textContent':
                              t.textContent = n;
                              break;
                            default:
                              (!s || ('href' !== e && 'newWindow' !== e)) &&
                                t.setAttribute(e, n);
                          }
                      s && o.addLinkAttributes(t, a.href, a.newWindow),
                        r && a.dataId && this.setupStorage(t, a.dataId, n, r);
                    }
                    static render(e) {
                      const t = e.annotationStorage,
                        n = e.linkService,
                        i = e.xfaHtml,
                        o = e.intent || 'display',
                        a = document.createElement(i.name);
                      i.attributes &&
                        this.setAttributes({
                          html: a,
                          element: i,
                          intent: o,
                          linkService: n,
                        });
                      const s = [[i, -1, a]],
                        l = e.div;
                      if ((l.append(a), e.viewport)) {
                        const t = `matrix(${e.viewport.transform.join(',')})`;
                        l.style.transform = t;
                      }
                      'richText' !== o &&
                        l.setAttribute('class', 'xfaLayer xfaFont');
                      const c = [];
                      for (; s.length > 0; ) {
                        var h;
                        const [e, i, a] = s.at(-1);
                        if (i + 1 === e.children.length) {
                          s.pop();
                          continue;
                        }
                        const l = e.children[++s.at(-1)[1]];
                        if (null === l) continue;
                        const { name: u } = l;
                        if ('#text' === u) {
                          const e = document.createTextNode(l.value);
                          c.push(e), a.append(e);
                          continue;
                        }
                        let d;
                        if (
                          ((d =
                            null != l &&
                            null !== (h = l.attributes) &&
                            void 0 !== h &&
                            h.xmlns
                              ? document.createElementNS(l.attributes.xmlns, u)
                              : document.createElement(u)),
                          a.append(d),
                          l.attributes &&
                            this.setAttributes({
                              html: d,
                              element: l,
                              storage: t,
                              intent: o,
                              linkService: n,
                            }),
                          l.children && l.children.length > 0)
                        )
                          s.push([l, -1, d]);
                        else if (l.value) {
                          const e = document.createTextNode(l.value);
                          r.XfaText.shouldBuildText(u) && c.push(e),
                            d.append(e);
                        }
                      }
                      for (const e of l.querySelectorAll(
                        '.xfaNonInteractive input, .xfaNonInteractive textarea',
                      ))
                        e.setAttribute('readOnly', !0);
                      return { textDivs: c };
                    }
                    static update(e) {
                      const t = `matrix(${e.viewport.transform.join(',')})`;
                      (e.div.style.transform = t), (e.div.hidden = !1);
                    }
                  };
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.TextLayerRenderTask = void 0),
                    (t.renderTextLayer = function (e) {
                      const t = new p({
                        textContent: e.textContent,
                        textContentStream: e.textContentStream,
                        container: e.container,
                        viewport: e.viewport,
                        textDivs: e.textDivs,
                        textContentItemsStr: e.textContentItemsStr,
                        enhanceTextSelection: e.enhanceTextSelection,
                      });
                      return t._render(e.timeout), t;
                    });
                  var r = n(1),
                    i = n(133);
                  const o = 30,
                    a = new Map(),
                    s = /^\s+$/g;
                  function l(e, t, n, i) {
                    const l = document.createElement('span'),
                      c = e._enhanceTextSelection
                        ? {
                            angle: 0,
                            canvasWidth: 0,
                            hasText: '' !== t.str,
                            hasEOL: t.hasEOL,
                            originalTransform: null,
                            paddingBottom: 0,
                            paddingLeft: 0,
                            paddingRight: 0,
                            paddingTop: 0,
                            scale: 1,
                            fontSize: 0,
                          }
                        : {
                            angle: 0,
                            canvasWidth: 0,
                            hasText: '' !== t.str,
                            hasEOL: t.hasEOL,
                            fontSize: 0,
                          };
                    e._textDivs.push(l);
                    const h = r.Util.transform(
                      e._viewport.transform,
                      t.transform,
                    );
                    let u = Math.atan2(h[1], h[0]);
                    const d = n[t.fontName];
                    d.vertical && (u += Math.PI / 2);
                    const p = Math.hypot(h[2], h[3]),
                      f =
                        p *
                        (function (e, t) {
                          const n = a.get(e);
                          if (n) return n;
                          t.save(), (t.font = `30px ${e}`);
                          const r = t.measureText('');
                          let i = r.fontBoundingBoxAscent,
                            s = Math.abs(r.fontBoundingBoxDescent);
                          if (i) {
                            t.restore();
                            const n = i / (i + s);
                            return a.set(e, n), n;
                          }
                          (t.strokeStyle = 'red'),
                            t.clearRect(0, 0, o, o),
                            t.strokeText('g', 0, 0);
                          let l = t.getImageData(0, 0, o, o).data;
                          s = 0;
                          for (let e = l.length - 1 - 3; e >= 0; e -= 4)
                            if (l[e] > 0) {
                              s = Math.ceil(e / 4 / o);
                              break;
                            }
                          t.clearRect(0, 0, o, o),
                            t.strokeText('A', 0, o),
                            (l = t.getImageData(0, 0, o, o).data),
                            (i = 0);
                          for (let e = 0, t = l.length; e < t; e += 4)
                            if (l[e] > 0) {
                              i = o - Math.floor(e / 4 / o);
                              break;
                            }
                          if ((t.restore(), i)) {
                            const t = i / (i + s);
                            return a.set(e, t), t;
                          }
                          return a.set(e, 0.8), 0.8;
                        })(d.fontFamily, i);
                    let g, m;
                    0 === u
                      ? ((g = h[4]), (m = h[5] - f))
                      : ((g = h[4] + f * Math.sin(u)),
                        (m = h[5] - f * Math.cos(u))),
                      (l.style.left = `${g}px`),
                      (l.style.top = `${m}px`),
                      (l.style.fontSize = `${p}px`),
                      (l.style.fontFamily = d.fontFamily),
                      (c.fontSize = p),
                      l.setAttribute('role', 'presentation'),
                      (l.textContent = t.str),
                      (l.dir = t.dir),
                      e._fontInspectorEnabled &&
                        (l.dataset.fontName = t.fontName),
                      0 !== u && (c.angle = u * (180 / Math.PI));
                    let v = !1;
                    if (
                      t.str.length > 1 ||
                      (e._enhanceTextSelection && s.test(t.str))
                    )
                      v = !0;
                    else if (
                      ' ' !== t.str &&
                      t.transform[0] !== t.transform[3]
                    ) {
                      const e = Math.abs(t.transform[0]),
                        n = Math.abs(t.transform[3]);
                      e !== n &&
                        Math.max(e, n) / Math.min(e, n) > 1.5 &&
                        (v = !0);
                    }
                    if (
                      (v &&
                        (d.vertical
                          ? (c.canvasWidth = t.height * e._viewport.scale)
                          : (c.canvasWidth = t.width * e._viewport.scale)),
                      e._textDivProperties.set(l, c),
                      e._textContentStream && e._layoutText(l),
                      e._enhanceTextSelection && c.hasText)
                    ) {
                      let n = 1,
                        i = 0;
                      0 !== u && ((n = Math.cos(u)), (i = Math.sin(u)));
                      const o =
                          (d.vertical ? t.height : t.width) * e._viewport.scale,
                        a = p;
                      let s, c;
                      0 !== u
                        ? ((s = [n, i, -i, n, g, m]),
                          (c = r.Util.getAxialAlignedBoundingBox(
                            [0, 0, o, a],
                            s,
                          )))
                        : (c = [g, m, g + o, m + a]),
                        e._bounds.push({
                          left: c[0],
                          top: c[1],
                          right: c[2],
                          bottom: c[3],
                          div: l,
                          size: [o, a],
                          m: s,
                        });
                    }
                  }
                  function c(e) {
                    if (e._canceled) return;
                    const t = e._textDivs,
                      n = e._capability,
                      r = t.length;
                    if (r > 1e5)
                      return (e._renderingDone = !0), void n.resolve();
                    if (!e._textContentStream)
                      for (let n = 0; n < r; n++) e._layoutText(t[n]);
                    (e._renderingDone = !0), n.resolve();
                  }
                  function h(e, t, n) {
                    let r = 0;
                    for (let i = 0; i < n; i++) {
                      const n = e[t++];
                      n > 0 && (r = r ? Math.min(n, r) : n);
                    }
                    return r;
                  }
                  function u(e) {
                    const t = e._bounds,
                      n = e._viewport,
                      i = (function (e, t, n) {
                        const r = n.map(function (e, t) {
                          return {
                            x1: e.left,
                            y1: e.top,
                            x2: e.right,
                            y2: e.bottom,
                            index: t,
                            x1New: void 0,
                            x2New: void 0,
                          };
                        });
                        d(e, r);
                        const i = new Array(n.length);
                        for (const e of r) {
                          const t = e.index;
                          i[t] = {
                            left: e.x1New,
                            top: 0,
                            right: e.x2New,
                            bottom: 0,
                          };
                        }
                        n.map(function (t, n) {
                          const o = i[n],
                            a = r[n];
                          (a.x1 = t.top),
                            (a.y1 = e - o.right),
                            (a.x2 = t.bottom),
                            (a.y2 = e - o.left),
                            (a.index = n),
                            (a.x1New = void 0),
                            (a.x2New = void 0);
                        }),
                          d(t, r);
                        for (const e of r) {
                          const t = e.index;
                          (i[t].top = e.x1New), (i[t].bottom = e.x2New);
                        }
                        return i;
                      })(n.width, n.height, t);
                    for (let n = 0; n < i.length; n++) {
                      const o = t[n].div,
                        a = e._textDivProperties.get(o);
                      if (0 === a.angle) {
                        (a.paddingLeft = t[n].left - i[n].left),
                          (a.paddingTop = t[n].top - i[n].top),
                          (a.paddingRight = i[n].right - t[n].right),
                          (a.paddingBottom = i[n].bottom - t[n].bottom),
                          e._textDivProperties.set(o, a);
                        continue;
                      }
                      const s = i[n],
                        l = t[n],
                        c = l.m,
                        u = c[0],
                        d = c[1],
                        p = [[0, 0], [0, l.size[1]], [l.size[0], 0], l.size],
                        f = new Float64Array(64);
                      for (let e = 0, t = p.length; e < t; e++) {
                        const t = r.Util.applyTransform(p[e], c);
                        (f[e + 0] = u && (s.left - t[0]) / u),
                          (f[e + 4] = d && (s.top - t[1]) / d),
                          (f[e + 8] = u && (s.right - t[0]) / u),
                          (f[e + 12] = d && (s.bottom - t[1]) / d),
                          (f[e + 16] = d && (s.left - t[0]) / -d),
                          (f[e + 20] = u && (s.top - t[1]) / u),
                          (f[e + 24] = d && (s.right - t[0]) / -d),
                          (f[e + 28] = u && (s.bottom - t[1]) / u),
                          (f[e + 32] = u && (s.left - t[0]) / -u),
                          (f[e + 36] = d && (s.top - t[1]) / -d),
                          (f[e + 40] = u && (s.right - t[0]) / -u),
                          (f[e + 44] = d && (s.bottom - t[1]) / -d),
                          (f[e + 48] = d && (s.left - t[0]) / d),
                          (f[e + 52] = u && (s.top - t[1]) / -u),
                          (f[e + 56] = d && (s.right - t[0]) / d),
                          (f[e + 60] = u && (s.bottom - t[1]) / -u);
                      }
                      const g = 1 + Math.min(Math.abs(u), Math.abs(d));
                      (a.paddingLeft = h(f, 32, 16) / g),
                        (a.paddingTop = h(f, 48, 16) / g),
                        (a.paddingRight = h(f, 0, 16) / g),
                        (a.paddingBottom = h(f, 16, 16) / g),
                        e._textDivProperties.set(o, a);
                    }
                  }
                  function d(e, t) {
                    t.sort(function (e, t) {
                      return e.x1 - t.x1 || e.index - t.index;
                    });
                    const n = [
                      {
                        start: -1 / 0,
                        end: 1 / 0,
                        boundary: {
                          x1: -1 / 0,
                          y1: -1 / 0,
                          x2: 0,
                          y2: 1 / 0,
                          index: -1,
                          x1New: 0,
                          x2New: 0,
                        },
                      },
                    ];
                    for (const e of t) {
                      let t = 0;
                      for (; t < n.length && n[t].end <= e.y1; ) t++;
                      let r,
                        i,
                        o = n.length - 1;
                      for (; o >= 0 && n[o].start >= e.y2; ) o--;
                      let a,
                        s,
                        l = -1 / 0;
                      for (a = t; a <= o; a++) {
                        let t;
                        (r = n[a]),
                          (i = r.boundary),
                          (t =
                            i.x2 > e.x1
                              ? i.index > e.index
                                ? i.x1New
                                : e.x1
                              : void 0 === i.x2New
                                ? (i.x2 + e.x1) / 2
                                : i.x2New),
                          t > l && (l = t);
                      }
                      for (e.x1New = l, a = t; a <= o; a++)
                        (r = n[a]),
                          (i = r.boundary),
                          void 0 === i.x2New
                            ? i.x2 > e.x1
                              ? i.index > e.index && (i.x2New = i.x2)
                              : (i.x2New = l)
                            : i.x2New > l && (i.x2New = Math.max(l, i.x2));
                      const c = [];
                      let h = null;
                      for (a = t; a <= o; a++) {
                        (r = n[a]), (i = r.boundary);
                        const t = i.x2 > e.x2 ? i : e;
                        h === t
                          ? (c.at(-1).end = r.end)
                          : (c.push({
                              start: r.start,
                              end: r.end,
                              boundary: t,
                            }),
                            (h = t));
                      }
                      for (
                        n[t].start < e.y1 &&
                          ((c[0].start = e.y1),
                          c.unshift({
                            start: n[t].start,
                            end: e.y1,
                            boundary: n[t].boundary,
                          })),
                          e.y2 < n[o].end &&
                            ((c.at(-1).end = e.y2),
                            c.push({
                              start: e.y2,
                              end: n[o].end,
                              boundary: n[o].boundary,
                            })),
                          a = t;
                        a <= o;
                        a++
                      ) {
                        if (((r = n[a]), (i = r.boundary), void 0 !== i.x2New))
                          continue;
                        let e = !1;
                        for (s = t - 1; !e && s >= 0 && n[s].start >= i.y1; s--)
                          e = n[s].boundary === i;
                        for (
                          s = o + 1;
                          !e && s < n.length && n[s].end <= i.y2;
                          s++
                        )
                          e = n[s].boundary === i;
                        for (s = 0; !e && s < c.length; s++)
                          e = c[s].boundary === i;
                        e || (i.x2New = l);
                      }
                      Array.prototype.splice.apply(n, [t, o - t + 1, ...c]);
                    }
                    for (const t of n) {
                      const n = t.boundary;
                      void 0 === n.x2New && (n.x2New = Math.max(e, n.x2));
                    }
                  }
                  class p {
                    constructor(e) {
                      var t;
                      let {
                        textContent: n,
                        textContentStream: o,
                        container: a,
                        viewport: s,
                        textDivs: l,
                        textContentItemsStr: c,
                        enhanceTextSelection: h,
                      } = e;
                      h &&
                        (0, i.deprecated)(
                          'The `enhanceTextSelection` functionality will be removed in the future.',
                        ),
                        (this._textContent = n),
                        (this._textContentStream = o),
                        (this._container = a),
                        (this._document = a.ownerDocument),
                        (this._viewport = s),
                        (this._textDivs = l || []),
                        (this._textContentItemsStr = c || []),
                        (this._enhanceTextSelection = !!h),
                        (this._fontInspectorEnabled = !(
                          null === (t = globalThis.FontInspector) ||
                          void 0 === t ||
                          !t.enabled
                        )),
                        (this._reader = null),
                        (this._layoutTextLastFontSize = null),
                        (this._layoutTextLastFontFamily = null),
                        (this._layoutTextCtx = null),
                        (this._textDivProperties = new WeakMap()),
                        (this._renderingDone = !1),
                        (this._canceled = !1),
                        (this._capability = (0, r.createPromiseCapability)()),
                        (this._renderTimer = null),
                        (this._bounds = []),
                        (this._devicePixelRatio =
                          globalThis.devicePixelRatio || 1),
                        this._capability.promise
                          .finally(() => {
                            this._enhanceTextSelection ||
                              (this._textDivProperties = null),
                              this._layoutTextCtx &&
                                ((this._layoutTextCtx.canvas.width = 0),
                                (this._layoutTextCtx.canvas.height = 0),
                                (this._layoutTextCtx = null));
                          })
                          .catch(() => {});
                    }
                    get promise() {
                      return this._capability.promise;
                    }
                    cancel() {
                      (this._canceled = !0),
                        this._reader &&
                          (this._reader
                            .cancel(
                              new r.AbortException('TextLayer task cancelled.'),
                            )
                            .catch(() => {}),
                          (this._reader = null)),
                        null !== this._renderTimer &&
                          (clearTimeout(this._renderTimer),
                          (this._renderTimer = null)),
                        this._capability.reject(
                          new Error('TextLayer task cancelled.'),
                        );
                    }
                    _processItems(e, t) {
                      for (let n = 0, r = e.length; n < r; n++)
                        if (void 0 !== e[n].str)
                          this._textContentItemsStr.push(e[n].str),
                            l(this, e[n], t, this._layoutTextCtx);
                        else if (
                          'beginMarkedContentProps' === e[n].type ||
                          'beginMarkedContent' === e[n].type
                        ) {
                          const t = this._container;
                          (this._container = document.createElement('span')),
                            this._container.classList.add('markedContent'),
                            null !== e[n].id &&
                              this._container.setAttribute('id', `${e[n].id}`),
                            t.append(this._container);
                        } else
                          'endMarkedContent' === e[n].type &&
                            (this._container = this._container.parentNode);
                    }
                    _layoutText(e) {
                      const t = this._textDivProperties.get(e);
                      let n = '';
                      if (0 !== t.canvasWidth && t.hasText) {
                        const { fontFamily: r } = e.style,
                          { fontSize: i } = t;
                        (i === this._layoutTextLastFontSize &&
                          r === this._layoutTextLastFontFamily) ||
                          ((this._layoutTextCtx.font = `${i * this._devicePixelRatio}px ${r}`),
                          (this._layoutTextLastFontSize = i),
                          (this._layoutTextLastFontFamily = r));
                        const { width: o } = this._layoutTextCtx.measureText(
                          e.textContent,
                        );
                        if (o > 0) {
                          const e =
                            (this._devicePixelRatio * t.canvasWidth) / o;
                          this._enhanceTextSelection && (t.scale = e),
                            (n = `scaleX(${e})`);
                        }
                      }
                      if (
                        (0 !== t.angle && (n = `rotate(${t.angle}deg) ${n}`),
                        n.length > 0 &&
                          (this._enhanceTextSelection &&
                            (t.originalTransform = n),
                          (e.style.transform = n)),
                        t.hasText && this._container.append(e),
                        t.hasEOL)
                      ) {
                        const e = document.createElement('br');
                        e.setAttribute('role', 'presentation'),
                          this._container.append(e);
                      }
                    }
                    _render() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : 0;
                      const t = (0, r.createPromiseCapability)();
                      let n = Object.create(null);
                      const i = this._document.createElement('canvas');
                      if (
                        ((i.height = i.width = o),
                        (this._layoutTextCtx = i.getContext('2d', {
                          alpha: !1,
                        })),
                        this._textContent)
                      ) {
                        const e = this._textContent.items,
                          n = this._textContent.styles;
                        this._processItems(e, n), t.resolve();
                      } else {
                        if (!this._textContentStream)
                          throw new Error(
                            'Neither "textContent" nor "textContentStream" parameters specified.',
                          );
                        {
                          const e = () => {
                            this._reader.read().then((r) => {
                              let { value: i, done: o } = r;
                              o
                                ? t.resolve()
                                : (Object.assign(n, i.styles),
                                  this._processItems(i.items, n),
                                  e());
                            }, t.reject);
                          };
                          (this._reader = this._textContentStream.getReader()),
                            e();
                        }
                      }
                      t.promise.then(() => {
                        (n = null),
                          e
                            ? (this._renderTimer = setTimeout(() => {
                                c(this), (this._renderTimer = null);
                              }, e))
                            : c(this);
                      }, this._capability.reject);
                    }
                    expandTextDivs() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (!this._enhanceTextSelection || !this._renderingDone)
                        return;
                      null !== this._bounds && (u(this), (this._bounds = null));
                      const t = [],
                        n = [];
                      for (let r = 0, i = this._textDivs.length; r < i; r++) {
                        const i = this._textDivs[r],
                          o = this._textDivProperties.get(i);
                        o.hasText &&
                          (e
                            ? ((t.length = 0),
                              (n.length = 0),
                              o.originalTransform &&
                                t.push(o.originalTransform),
                              o.paddingTop > 0
                                ? (n.push(`${o.paddingTop}px`),
                                  t.push(`translateY(${-o.paddingTop}px)`))
                                : n.push(0),
                              o.paddingRight > 0
                                ? n.push(o.paddingRight / o.scale + 'px')
                                : n.push(0),
                              o.paddingBottom > 0
                                ? n.push(`${o.paddingBottom}px`)
                                : n.push(0),
                              o.paddingLeft > 0
                                ? (n.push(o.paddingLeft / o.scale + 'px'),
                                  t.push(
                                    `translateX(${-o.paddingLeft / o.scale}px)`,
                                  ))
                                : n.push(0),
                              (i.style.padding = n.join(' ')),
                              t.length && (i.style.transform = t.join(' ')))
                            : ((i.style.padding = null),
                              (i.style.transform = o.originalTransform)));
                      }
                    }
                  }
                  t.TextLayerRenderTask = p;
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.SVGGraphics = void 0);
                  var r = n(133),
                    i = n(1),
                    o = n(3);
                  let a = class {
                    constructor() {
                      (0, i.unreachable)('Not implemented: SVGGraphics');
                    }
                  };
                  t.SVGGraphics = a;
                  {
                    const s = {
                        fontStyle: 'normal',
                        fontWeight: 'normal',
                        fillColor: '#000000',
                      },
                      l = 'http://www.w3.org/XML/1998/namespace',
                      c = 'http://www.w3.org/1999/xlink',
                      h = ['butt', 'round', 'square'],
                      u = ['miter', 'round', 'bevel'],
                      d = function (e) {
                        let t =
                            arguments.length > 1 && void 0 !== arguments[1]
                              ? arguments[1]
                              : '',
                          n =
                            arguments.length > 2 &&
                            void 0 !== arguments[2] &&
                            arguments[2];
                        if (
                          URL.createObjectURL &&
                          'undefined' != typeof Blob &&
                          !n
                        )
                          return URL.createObjectURL(
                            new Blob([e], { type: t }),
                          );
                        const r =
                          'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
                        let i = `data:${t};base64,`;
                        for (let t = 0, n = e.length; t < n; t += 3) {
                          const o = 255 & e[t],
                            a = 255 & e[t + 1],
                            s = 255 & e[t + 2];
                          i +=
                            r[o >> 2] +
                            r[((3 & o) << 4) | (a >> 4)] +
                            r[t + 1 < n ? ((15 & a) << 2) | (s >> 6) : 64] +
                            r[t + 2 < n ? 63 & s : 64];
                        }
                        return i;
                      },
                      p = (function () {
                        const e = new Uint8Array([
                            137, 80, 78, 71, 13, 10, 26, 10,
                          ]),
                          t = new Int32Array(256);
                        for (let e = 0; e < 256; e++) {
                          let n = e;
                          for (let e = 0; e < 8; e++)
                            n =
                              1 & n
                                ? 3988292384 ^ ((n >> 1) & 2147483647)
                                : (n >> 1) & 2147483647;
                          t[e] = n;
                        }
                        function n(e, n, r, i) {
                          let o = i;
                          const a = n.length;
                          (r[o] = (a >> 24) & 255),
                            (r[o + 1] = (a >> 16) & 255),
                            (r[o + 2] = (a >> 8) & 255),
                            (r[o + 3] = 255 & a),
                            (o += 4),
                            (r[o] = 255 & e.charCodeAt(0)),
                            (r[o + 1] = 255 & e.charCodeAt(1)),
                            (r[o + 2] = 255 & e.charCodeAt(2)),
                            (r[o + 3] = 255 & e.charCodeAt(3)),
                            (o += 4),
                            r.set(n, o),
                            (o += n.length);
                          const s = (function (e, n, r) {
                            let i = -1;
                            for (let o = n; o < r; o++) {
                              const n = 255 & (i ^ e[o]);
                              i = (i >>> 8) ^ t[n];
                            }
                            return ~i;
                          })(r, i + 4, o);
                          (r[o] = (s >> 24) & 255),
                            (r[o + 1] = (s >> 16) & 255),
                            (r[o + 2] = (s >> 8) & 255),
                            (r[o + 3] = 255 & s);
                        }
                        function r(e) {
                          let t = e.length;
                          const n = 65535,
                            r = Math.ceil(t / n),
                            i = new Uint8Array(2 + t + 5 * r + 4);
                          let o = 0;
                          (i[o++] = 120), (i[o++] = 156);
                          let a = 0;
                          for (; t > n; )
                            (i[o++] = 0),
                              (i[o++] = 255),
                              (i[o++] = 255),
                              (i[o++] = 0),
                              (i[o++] = 0),
                              i.set(e.subarray(a, a + n), o),
                              (o += n),
                              (a += n),
                              (t -= n);
                          (i[o++] = 1),
                            (i[o++] = 255 & t),
                            (i[o++] = (t >> 8) & 255),
                            (i[o++] = 255 & ~t),
                            (i[o++] = ((65535 & ~t) >> 8) & 255),
                            i.set(e.subarray(a), o),
                            (o += e.length - a);
                          const s = (function (e, t, n) {
                            let r = 1,
                              i = 0;
                            for (let o = t; o < n; ++o)
                              (r = (r + (255 & e[o])) % 65521),
                                (i = (i + r) % 65521);
                            return (i << 16) | r;
                          })(e, 0, e.length);
                          return (
                            (i[o++] = (s >> 24) & 255),
                            (i[o++] = (s >> 16) & 255),
                            (i[o++] = (s >> 8) & 255),
                            (i[o++] = 255 & s),
                            i
                          );
                        }
                        function a(t, a, s, l) {
                          const c = t.width,
                            h = t.height;
                          let u, p, f;
                          const g = t.data;
                          switch (a) {
                            case i.ImageKind.GRAYSCALE_1BPP:
                              (p = 0), (u = 1), (f = (c + 7) >> 3);
                              break;
                            case i.ImageKind.RGB_24BPP:
                              (p = 2), (u = 8), (f = 3 * c);
                              break;
                            case i.ImageKind.RGBA_32BPP:
                              (p = 6), (u = 8), (f = 4 * c);
                              break;
                            default:
                              throw new Error('invalid format');
                          }
                          const m = new Uint8Array((1 + f) * h);
                          let v = 0,
                            b = 0;
                          for (let e = 0; e < h; ++e)
                            (m[v++] = 0),
                              m.set(g.subarray(b, b + f), v),
                              (b += f),
                              (v += f);
                          if (a === i.ImageKind.GRAYSCALE_1BPP && l) {
                            v = 0;
                            for (let e = 0; e < h; e++) {
                              v++;
                              for (let e = 0; e < f; e++) m[v++] ^= 255;
                            }
                          }
                          const y = new Uint8Array([
                              (c >> 24) & 255,
                              (c >> 16) & 255,
                              (c >> 8) & 255,
                              255 & c,
                              (h >> 24) & 255,
                              (h >> 16) & 255,
                              (h >> 8) & 255,
                              255 & h,
                              u,
                              p,
                              0,
                              0,
                              0,
                            ]),
                            _ = (function (e) {
                              if (!o.isNodeJS) return r(e);
                              try {
                                let t;
                                t =
                                  parseInt(process.versions.node) >= 8
                                    ? e
                                    : Buffer.from(e);
                                const n = __webpack_require__(
                                  45036,
                                ).deflateSync(t, { level: 9 });
                                return n instanceof Uint8Array
                                  ? n
                                  : new Uint8Array(n);
                              } catch (e) {
                                (0, i.warn)(
                                  'Not compressing PNG because zlib.deflateSync is unavailable: ' +
                                    e,
                                );
                              }
                              return r(e);
                            })(m),
                            w = e.length + 36 + y.length + _.length,
                            S = new Uint8Array(w);
                          let A = 0;
                          return (
                            S.set(e, A),
                            (A += e.length),
                            n('IHDR', y, S, A),
                            (A += 12 + y.length),
                            n('IDATA', _, S, A),
                            (A += 12 + _.length),
                            n('IEND', new Uint8Array(0), S, A),
                            d(S, 'image/png', s)
                          );
                        }
                        return function (e, t, n) {
                          return a(
                            e,
                            void 0 === e.kind
                              ? i.ImageKind.GRAYSCALE_1BPP
                              : e.kind,
                            t,
                            n,
                          );
                        };
                      })();
                    class f {
                      constructor() {
                        (this.fontSizeScale = 1),
                          (this.fontWeight = s.fontWeight),
                          (this.fontSize = 0),
                          (this.textMatrix = i.IDENTITY_MATRIX),
                          (this.fontMatrix = i.FONT_IDENTITY_MATRIX),
                          (this.leading = 0),
                          (this.textRenderingMode = i.TextRenderingMode.FILL),
                          (this.textMatrixScale = 1),
                          (this.x = 0),
                          (this.y = 0),
                          (this.lineX = 0),
                          (this.lineY = 0),
                          (this.charSpacing = 0),
                          (this.wordSpacing = 0),
                          (this.textHScale = 1),
                          (this.textRise = 0),
                          (this.fillColor = s.fillColor),
                          (this.strokeColor = '#000000'),
                          (this.fillAlpha = 1),
                          (this.strokeAlpha = 1),
                          (this.lineWidth = 1),
                          (this.lineJoin = ''),
                          (this.lineCap = ''),
                          (this.miterLimit = 0),
                          (this.dashArray = []),
                          (this.dashPhase = 0),
                          (this.dependencies = []),
                          (this.activeClipUrl = null),
                          (this.clipGroup = null),
                          (this.maskId = '');
                      }
                      clone() {
                        return Object.create(this);
                      }
                      setCurrentPoint(e, t) {
                        (this.x = e), (this.y = t);
                      }
                    }
                    function g(e) {
                      let t = [];
                      const n = [];
                      for (const r of e)
                        'save' !== r.fn
                          ? 'restore' === r.fn
                            ? (t = n.pop())
                            : t.push(r)
                          : (t.push({ fnId: 92, fn: 'group', items: [] }),
                            n.push(t),
                            (t = t.at(-1).items));
                      return t;
                    }
                    function m(e) {
                      if (Number.isInteger(e)) return e.toString();
                      const t = e.toFixed(10);
                      let n = t.length - 1;
                      if ('0' !== t[n]) return t;
                      do {
                        n--;
                      } while ('0' === t[n]);
                      return t.substring(0, '.' === t[n] ? n : n + 1);
                    }
                    function v(e) {
                      if (0 === e[4] && 0 === e[5]) {
                        if (0 === e[1] && 0 === e[2])
                          return 1 === e[0] && 1 === e[3]
                            ? ''
                            : `scale(${m(e[0])} ${m(e[3])})`;
                        if (e[0] === e[3] && e[1] === -e[2])
                          return `rotate(${m((180 * Math.acos(e[0])) / Math.PI)})`;
                      } else if (
                        1 === e[0] &&
                        0 === e[1] &&
                        0 === e[2] &&
                        1 === e[3]
                      )
                        return `translate(${m(e[4])} ${m(e[5])})`;
                      return `matrix(${m(e[0])} ${m(e[1])} ${m(e[2])} ${m(e[3])} ${m(e[4])} ${m(e[5])})`;
                    }
                    let b = 0,
                      y = 0,
                      _ = 0;
                    t.SVGGraphics = a = class {
                      constructor(e, t) {
                        let n =
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2];
                        (0, r.deprecated)(
                          'The SVG back-end is no longer maintained and *may* be removed in the future.',
                        ),
                          (this.svgFactory = new r.DOMSVGFactory()),
                          (this.current = new f()),
                          (this.transformMatrix = i.IDENTITY_MATRIX),
                          (this.transformStack = []),
                          (this.extraStack = []),
                          (this.commonObjs = e),
                          (this.objs = t),
                          (this.pendingClip = null),
                          (this.pendingEOFill = !1),
                          (this.embedFonts = !1),
                          (this.embeddedFonts = Object.create(null)),
                          (this.cssStyle = null),
                          (this.forceDataSchema = !!n),
                          (this._operatorIdMapping = []);
                        for (const e in i.OPS)
                          this._operatorIdMapping[i.OPS[e]] = e;
                      }
                      save() {
                        this.transformStack.push(this.transformMatrix);
                        const e = this.current;
                        this.extraStack.push(e), (this.current = e.clone());
                      }
                      restore() {
                        (this.transformMatrix = this.transformStack.pop()),
                          (this.current = this.extraStack.pop()),
                          (this.pendingClip = null),
                          (this.tgrp = null);
                      }
                      group(e) {
                        this.save(), this.executeOpTree(e), this.restore();
                      }
                      loadDependencies(e) {
                        const t = e.fnArray,
                          n = e.argsArray;
                        for (let e = 0, r = t.length; e < r; e++)
                          if (t[e] === i.OPS.dependency)
                            for (const t of n[e]) {
                              const e = t.startsWith('g_')
                                  ? this.commonObjs
                                  : this.objs,
                                n = new Promise((n) => {
                                  e.get(t, n);
                                });
                              this.current.dependencies.push(n);
                            }
                        return Promise.all(this.current.dependencies);
                      }
                      transform(e, t, n, r, o, a) {
                        const s = [e, t, n, r, o, a];
                        (this.transformMatrix = i.Util.transform(
                          this.transformMatrix,
                          s,
                        )),
                          (this.tgrp = null);
                      }
                      getSVG(e, t) {
                        this.viewport = t;
                        const n = this._initialize(t);
                        return this.loadDependencies(e).then(
                          () => (
                            (this.transformMatrix = i.IDENTITY_MATRIX),
                            this.executeOpTree(this.convertOpList(e)),
                            n
                          ),
                        );
                      }
                      convertOpList(e) {
                        const t = this._operatorIdMapping,
                          n = e.argsArray,
                          r = e.fnArray,
                          i = [];
                        for (let e = 0, o = r.length; e < o; e++) {
                          const o = r[e];
                          i.push({ fnId: o, fn: t[o], args: n[e] });
                        }
                        return g(i);
                      }
                      executeOpTree(e) {
                        for (const t of e) {
                          const e = t.fn,
                            n = t.fnId,
                            r = t.args;
                          switch (0 | n) {
                            case i.OPS.beginText:
                              this.beginText();
                              break;
                            case i.OPS.dependency:
                              break;
                            case i.OPS.setLeading:
                              this.setLeading(r);
                              break;
                            case i.OPS.setLeadingMoveText:
                              this.setLeadingMoveText(r[0], r[1]);
                              break;
                            case i.OPS.setFont:
                              this.setFont(r);
                              break;
                            case i.OPS.showText:
                            case i.OPS.showSpacedText:
                              this.showText(r[0]);
                              break;
                            case i.OPS.endText:
                              this.endText();
                              break;
                            case i.OPS.moveText:
                              this.moveText(r[0], r[1]);
                              break;
                            case i.OPS.setCharSpacing:
                              this.setCharSpacing(r[0]);
                              break;
                            case i.OPS.setWordSpacing:
                              this.setWordSpacing(r[0]);
                              break;
                            case i.OPS.setHScale:
                              this.setHScale(r[0]);
                              break;
                            case i.OPS.setTextMatrix:
                              this.setTextMatrix(
                                r[0],
                                r[1],
                                r[2],
                                r[3],
                                r[4],
                                r[5],
                              );
                              break;
                            case i.OPS.setTextRise:
                              this.setTextRise(r[0]);
                              break;
                            case i.OPS.setTextRenderingMode:
                              this.setTextRenderingMode(r[0]);
                              break;
                            case i.OPS.setLineWidth:
                              this.setLineWidth(r[0]);
                              break;
                            case i.OPS.setLineJoin:
                              this.setLineJoin(r[0]);
                              break;
                            case i.OPS.setLineCap:
                              this.setLineCap(r[0]);
                              break;
                            case i.OPS.setMiterLimit:
                              this.setMiterLimit(r[0]);
                              break;
                            case i.OPS.setFillRGBColor:
                              this.setFillRGBColor(r[0], r[1], r[2]);
                              break;
                            case i.OPS.setStrokeRGBColor:
                              this.setStrokeRGBColor(r[0], r[1], r[2]);
                              break;
                            case i.OPS.setStrokeColorN:
                              this.setStrokeColorN(r);
                              break;
                            case i.OPS.setFillColorN:
                              this.setFillColorN(r);
                              break;
                            case i.OPS.shadingFill:
                              this.shadingFill(r[0]);
                              break;
                            case i.OPS.setDash:
                              this.setDash(r[0], r[1]);
                              break;
                            case i.OPS.setRenderingIntent:
                              this.setRenderingIntent(r[0]);
                              break;
                            case i.OPS.setFlatness:
                              this.setFlatness(r[0]);
                              break;
                            case i.OPS.setGState:
                              this.setGState(r[0]);
                              break;
                            case i.OPS.fill:
                              this.fill();
                              break;
                            case i.OPS.eoFill:
                              this.eoFill();
                              break;
                            case i.OPS.stroke:
                              this.stroke();
                              break;
                            case i.OPS.fillStroke:
                              this.fillStroke();
                              break;
                            case i.OPS.eoFillStroke:
                              this.eoFillStroke();
                              break;
                            case i.OPS.clip:
                              this.clip('nonzero');
                              break;
                            case i.OPS.eoClip:
                              this.clip('evenodd');
                              break;
                            case i.OPS.paintSolidColorImageMask:
                              this.paintSolidColorImageMask();
                              break;
                            case i.OPS.paintImageXObject:
                              this.paintImageXObject(r[0]);
                              break;
                            case i.OPS.paintInlineImageXObject:
                              this.paintInlineImageXObject(r[0]);
                              break;
                            case i.OPS.paintImageMaskXObject:
                              this.paintImageMaskXObject(r[0]);
                              break;
                            case i.OPS.paintFormXObjectBegin:
                              this.paintFormXObjectBegin(r[0], r[1]);
                              break;
                            case i.OPS.paintFormXObjectEnd:
                              this.paintFormXObjectEnd();
                              break;
                            case i.OPS.closePath:
                              this.closePath();
                              break;
                            case i.OPS.closeStroke:
                              this.closeStroke();
                              break;
                            case i.OPS.closeFillStroke:
                              this.closeFillStroke();
                              break;
                            case i.OPS.closeEOFillStroke:
                              this.closeEOFillStroke();
                              break;
                            case i.OPS.nextLine:
                              this.nextLine();
                              break;
                            case i.OPS.transform:
                              this.transform(
                                r[0],
                                r[1],
                                r[2],
                                r[3],
                                r[4],
                                r[5],
                              );
                              break;
                            case i.OPS.constructPath:
                              this.constructPath(r[0], r[1]);
                              break;
                            case i.OPS.endPath:
                              this.endPath();
                              break;
                            case 92:
                              this.group(t.items);
                              break;
                            default:
                              (0, i.warn)(`Unimplemented operator ${e}`);
                          }
                        }
                      }
                      setWordSpacing(e) {
                        this.current.wordSpacing = e;
                      }
                      setCharSpacing(e) {
                        this.current.charSpacing = e;
                      }
                      nextLine() {
                        this.moveText(0, this.current.leading);
                      }
                      setTextMatrix(e, t, n, r, i, o) {
                        const a = this.current;
                        (a.textMatrix = a.lineMatrix = [e, t, n, r, i, o]),
                          (a.textMatrixScale = Math.hypot(e, t)),
                          (a.x = a.lineX = 0),
                          (a.y = a.lineY = 0),
                          (a.xcoords = []),
                          (a.ycoords = []),
                          (a.tspan =
                            this.svgFactory.createElement('svg:tspan')),
                          a.tspan.setAttributeNS(
                            null,
                            'font-family',
                            a.fontFamily,
                          ),
                          a.tspan.setAttributeNS(
                            null,
                            'font-size',
                            `${m(a.fontSize)}px`,
                          ),
                          a.tspan.setAttributeNS(null, 'y', m(-a.y)),
                          (a.txtElement =
                            this.svgFactory.createElement('svg:text')),
                          a.txtElement.append(a.tspan);
                      }
                      beginText() {
                        const e = this.current;
                        (e.x = e.lineX = 0),
                          (e.y = e.lineY = 0),
                          (e.textMatrix = i.IDENTITY_MATRIX),
                          (e.lineMatrix = i.IDENTITY_MATRIX),
                          (e.textMatrixScale = 1),
                          (e.tspan =
                            this.svgFactory.createElement('svg:tspan')),
                          (e.txtElement =
                            this.svgFactory.createElement('svg:text')),
                          (e.txtgrp = this.svgFactory.createElement('svg:g')),
                          (e.xcoords = []),
                          (e.ycoords = []);
                      }
                      moveText(e, t) {
                        const n = this.current;
                        (n.x = n.lineX += e),
                          (n.y = n.lineY += t),
                          (n.xcoords = []),
                          (n.ycoords = []),
                          (n.tspan =
                            this.svgFactory.createElement('svg:tspan')),
                          n.tspan.setAttributeNS(
                            null,
                            'font-family',
                            n.fontFamily,
                          ),
                          n.tspan.setAttributeNS(
                            null,
                            'font-size',
                            `${m(n.fontSize)}px`,
                          ),
                          n.tspan.setAttributeNS(null, 'y', m(-n.y));
                      }
                      showText(e) {
                        const t = this.current,
                          n = t.font,
                          r = t.fontSize;
                        if (0 === r) return;
                        const o = t.fontSizeScale,
                          a = t.charSpacing,
                          c = t.wordSpacing,
                          h = t.fontDirection,
                          u = t.textHScale * h,
                          d = n.vertical,
                          p = d ? 1 : -1,
                          f = n.defaultVMetrics,
                          g = r * t.fontMatrix[0];
                        let b = 0;
                        for (const i of e) {
                          if (null === i) {
                            b += h * c;
                            continue;
                          }
                          if ('number' == typeof i) {
                            b += (p * i * r) / 1e3;
                            continue;
                          }
                          const e = (i.isSpace ? c : 0) + a,
                            s = i.fontChar;
                          let l,
                            u,
                            m,
                            v = i.width;
                          if (d) {
                            let e;
                            const t = i.vmetric || f;
                            (e = i.vmetric ? t[1] : 0.5 * v), (e = -e * g);
                            const n = t[2] * g;
                            (v = t ? -t[0] : v), (l = e / o), (u = (b + n) / o);
                          } else (l = b / o), (u = 0);
                          (i.isInFont || n.missingFile) &&
                            (t.xcoords.push(t.x + l),
                            d && t.ycoords.push(-t.y + u),
                            (t.tspan.textContent += s)),
                            (m = d ? v * g - e * h : v * g + e * h),
                            (b += m);
                        }
                        t.tspan.setAttributeNS(
                          null,
                          'x',
                          t.xcoords.map(m).join(' '),
                        ),
                          d
                            ? t.tspan.setAttributeNS(
                                null,
                                'y',
                                t.ycoords.map(m).join(' '),
                              )
                            : t.tspan.setAttributeNS(null, 'y', m(-t.y)),
                          d ? (t.y -= b) : (t.x += b * u),
                          t.tspan.setAttributeNS(
                            null,
                            'font-family',
                            t.fontFamily,
                          ),
                          t.tspan.setAttributeNS(
                            null,
                            'font-size',
                            `${m(t.fontSize)}px`,
                          ),
                          t.fontStyle !== s.fontStyle &&
                            t.tspan.setAttributeNS(
                              null,
                              'font-style',
                              t.fontStyle,
                            ),
                          t.fontWeight !== s.fontWeight &&
                            t.tspan.setAttributeNS(
                              null,
                              'font-weight',
                              t.fontWeight,
                            );
                        const y =
                          t.textRenderingMode &
                          i.TextRenderingMode.FILL_STROKE_MASK;
                        if (
                          (y === i.TextRenderingMode.FILL ||
                          y === i.TextRenderingMode.FILL_STROKE
                            ? (t.fillColor !== s.fillColor &&
                                t.tspan.setAttributeNS(
                                  null,
                                  'fill',
                                  t.fillColor,
                                ),
                              t.fillAlpha < 1 &&
                                t.tspan.setAttributeNS(
                                  null,
                                  'fill-opacity',
                                  t.fillAlpha,
                                ))
                            : t.textRenderingMode ===
                                i.TextRenderingMode.ADD_TO_PATH
                              ? t.tspan.setAttributeNS(
                                  null,
                                  'fill',
                                  'transparent',
                                )
                              : t.tspan.setAttributeNS(null, 'fill', 'none'),
                          y === i.TextRenderingMode.STROKE ||
                            y === i.TextRenderingMode.FILL_STROKE)
                        ) {
                          const e = 1 / (t.textMatrixScale || 1);
                          this._setStrokeAttributes(t.tspan, e);
                        }
                        let _ = t.textMatrix;
                        0 !== t.textRise &&
                          ((_ = _.slice()), (_[5] += t.textRise)),
                          t.txtElement.setAttributeNS(
                            null,
                            'transform',
                            `${v(_)} scale(${m(u)}, -1)`,
                          ),
                          t.txtElement.setAttributeNS(
                            l,
                            'xml:space',
                            'preserve',
                          ),
                          t.txtElement.append(t.tspan),
                          t.txtgrp.append(t.txtElement),
                          this._ensureTransformGroup().append(t.txtElement);
                      }
                      setLeadingMoveText(e, t) {
                        this.setLeading(-t), this.moveText(e, t);
                      }
                      addFontStyle(e) {
                        if (!e.data)
                          throw new Error(
                            'addFontStyle: No font data available, ensure that the "fontExtraProperties" API parameter is set.',
                          );
                        this.cssStyle ||
                          ((this.cssStyle =
                            this.svgFactory.createElement('svg:style')),
                          this.cssStyle.setAttributeNS(
                            null,
                            'type',
                            'text/css',
                          ),
                          this.defs.append(this.cssStyle));
                        const t = d(e.data, e.mimetype, this.forceDataSchema);
                        this.cssStyle.textContent += `@font-face { font-family: "${e.loadedName}"; src: url(${t}); }\n`;
                      }
                      setFont(e) {
                        const t = this.current,
                          n = this.commonObjs.get(e[0]);
                        let r = e[1];
                        (t.font = n),
                          !this.embedFonts ||
                            n.missingFile ||
                            this.embeddedFonts[n.loadedName] ||
                            (this.addFontStyle(n),
                            (this.embeddedFonts[n.loadedName] = n)),
                          (t.fontMatrix =
                            n.fontMatrix || i.FONT_IDENTITY_MATRIX);
                        let o = 'normal';
                        n.black ? (o = '900') : n.bold && (o = 'bold');
                        const a = n.italic ? 'italic' : 'normal';
                        r < 0
                          ? ((r = -r), (t.fontDirection = -1))
                          : (t.fontDirection = 1),
                          (t.fontSize = r),
                          (t.fontFamily = n.loadedName),
                          (t.fontWeight = o),
                          (t.fontStyle = a),
                          (t.tspan =
                            this.svgFactory.createElement('svg:tspan')),
                          t.tspan.setAttributeNS(null, 'y', m(-t.y)),
                          (t.xcoords = []),
                          (t.ycoords = []);
                      }
                      endText() {
                        var e;
                        const t = this.current;
                        t.textRenderingMode &
                          i.TextRenderingMode.ADD_TO_PATH_FLAG &&
                          null !== (e = t.txtElement) &&
                          void 0 !== e &&
                          e.hasChildNodes() &&
                          ((t.element = t.txtElement),
                          this.clip('nonzero'),
                          this.endPath());
                      }
                      setLineWidth(e) {
                        e > 0 && (this.current.lineWidth = e);
                      }
                      setLineCap(e) {
                        this.current.lineCap = h[e];
                      }
                      setLineJoin(e) {
                        this.current.lineJoin = u[e];
                      }
                      setMiterLimit(e) {
                        this.current.miterLimit = e;
                      }
                      setStrokeAlpha(e) {
                        this.current.strokeAlpha = e;
                      }
                      setStrokeRGBColor(e, t, n) {
                        this.current.strokeColor = i.Util.makeHexColor(e, t, n);
                      }
                      setFillAlpha(e) {
                        this.current.fillAlpha = e;
                      }
                      setFillRGBColor(e, t, n) {
                        (this.current.fillColor = i.Util.makeHexColor(e, t, n)),
                          (this.current.tspan =
                            this.svgFactory.createElement('svg:tspan')),
                          (this.current.xcoords = []),
                          (this.current.ycoords = []);
                      }
                      setStrokeColorN(e) {
                        this.current.strokeColor = this._makeColorN_Pattern(e);
                      }
                      setFillColorN(e) {
                        this.current.fillColor = this._makeColorN_Pattern(e);
                      }
                      shadingFill(e) {
                        const t = this.viewport.width,
                          n = this.viewport.height,
                          r = i.Util.inverseTransform(this.transformMatrix),
                          o = i.Util.applyTransform([0, 0], r),
                          a = i.Util.applyTransform([0, n], r),
                          s = i.Util.applyTransform([t, 0], r),
                          l = i.Util.applyTransform([t, n], r),
                          c = Math.min(o[0], a[0], s[0], l[0]),
                          h = Math.min(o[1], a[1], s[1], l[1]),
                          u = Math.max(o[0], a[0], s[0], l[0]),
                          d = Math.max(o[1], a[1], s[1], l[1]),
                          p = this.svgFactory.createElement('svg:rect');
                        p.setAttributeNS(null, 'x', c),
                          p.setAttributeNS(null, 'y', h),
                          p.setAttributeNS(null, 'width', u - c),
                          p.setAttributeNS(null, 'height', d - h),
                          p.setAttributeNS(
                            null,
                            'fill',
                            this._makeShadingPattern(e),
                          ),
                          this.current.fillAlpha < 1 &&
                            p.setAttributeNS(
                              null,
                              'fill-opacity',
                              this.current.fillAlpha,
                            ),
                          this._ensureTransformGroup().append(p);
                      }
                      _makeColorN_Pattern(e) {
                        return 'TilingPattern' === e[0]
                          ? this._makeTilingPattern(e)
                          : this._makeShadingPattern(e);
                      }
                      _makeTilingPattern(e) {
                        const t = e[1],
                          n = e[2],
                          r = e[3] || i.IDENTITY_MATRIX,
                          [o, a, s, l] = e[4],
                          c = e[5],
                          h = e[6],
                          u = e[7],
                          d = 'shading' + _++,
                          [p, f, g, m] = i.Util.normalizeRect([
                            ...i.Util.applyTransform([o, a], r),
                            ...i.Util.applyTransform([s, l], r),
                          ]),
                          [v, b] = i.Util.singularValueDecompose2dScale(r),
                          y = c * v,
                          w = h * b,
                          S = this.svgFactory.createElement('svg:pattern');
                        S.setAttributeNS(null, 'id', d),
                          S.setAttributeNS(
                            null,
                            'patternUnits',
                            'userSpaceOnUse',
                          ),
                          S.setAttributeNS(null, 'width', y),
                          S.setAttributeNS(null, 'height', w),
                          S.setAttributeNS(null, 'x', `${p}`),
                          S.setAttributeNS(null, 'y', `${f}`);
                        const A = this.svg,
                          x = this.transformMatrix,
                          P = this.current.fillColor,
                          E = this.current.strokeColor,
                          C = this.svgFactory.create(g - p, m - f);
                        if (
                          ((this.svg = C), (this.transformMatrix = r), 2 === u)
                        ) {
                          const e = i.Util.makeHexColor(...t);
                          (this.current.fillColor = e),
                            (this.current.strokeColor = e);
                        }
                        return (
                          this.executeOpTree(this.convertOpList(n)),
                          (this.svg = A),
                          (this.transformMatrix = x),
                          (this.current.fillColor = P),
                          (this.current.strokeColor = E),
                          S.append(C.childNodes[0]),
                          this.defs.append(S),
                          `url(#${d})`
                        );
                      }
                      _makeShadingPattern(e) {
                        switch (
                          ('string' == typeof e && (e = this.objs.get(e)), e[0])
                        ) {
                          case 'RadialAxial':
                            const t = 'shading' + _++,
                              n = e[3];
                            let r;
                            switch (e[1]) {
                              case 'axial':
                                const n = e[4],
                                  i = e[5];
                                (r =
                                  this.svgFactory.createElement(
                                    'svg:linearGradient',
                                  )),
                                  r.setAttributeNS(null, 'id', t),
                                  r.setAttributeNS(
                                    null,
                                    'gradientUnits',
                                    'userSpaceOnUse',
                                  ),
                                  r.setAttributeNS(null, 'x1', n[0]),
                                  r.setAttributeNS(null, 'y1', n[1]),
                                  r.setAttributeNS(null, 'x2', i[0]),
                                  r.setAttributeNS(null, 'y2', i[1]);
                                break;
                              case 'radial':
                                const o = e[4],
                                  a = e[5],
                                  s = e[6],
                                  l = e[7];
                                (r =
                                  this.svgFactory.createElement(
                                    'svg:radialGradient',
                                  )),
                                  r.setAttributeNS(null, 'id', t),
                                  r.setAttributeNS(
                                    null,
                                    'gradientUnits',
                                    'userSpaceOnUse',
                                  ),
                                  r.setAttributeNS(null, 'cx', a[0]),
                                  r.setAttributeNS(null, 'cy', a[1]),
                                  r.setAttributeNS(null, 'r', l),
                                  r.setAttributeNS(null, 'fx', o[0]),
                                  r.setAttributeNS(null, 'fy', o[1]),
                                  r.setAttributeNS(null, 'fr', s);
                                break;
                              default:
                                throw new Error(
                                  `Unknown RadialAxial type: ${e[1]}`,
                                );
                            }
                            for (const e of n) {
                              const t =
                                this.svgFactory.createElement('svg:stop');
                              t.setAttributeNS(null, 'offset', e[0]),
                                t.setAttributeNS(null, 'stop-color', e[1]),
                                r.append(t);
                            }
                            return this.defs.append(r), `url(#${t})`;
                          case 'Mesh':
                            return (
                              (0, i.warn)('Unimplemented pattern Mesh'), null
                            );
                          case 'Dummy':
                            return 'hotpink';
                          default:
                            throw new Error(`Unknown IR type: ${e[0]}`);
                        }
                      }
                      setDash(e, t) {
                        (this.current.dashArray = e),
                          (this.current.dashPhase = t);
                      }
                      constructPath(e, t) {
                        const n = this.current;
                        let r = n.x,
                          o = n.y,
                          a = [],
                          s = 0;
                        for (const n of e)
                          switch (0 | n) {
                            case i.OPS.rectangle:
                              (r = t[s++]), (o = t[s++]);
                              const e = r + t[s++],
                                n = o + t[s++];
                              a.push(
                                'M',
                                m(r),
                                m(o),
                                'L',
                                m(e),
                                m(o),
                                'L',
                                m(e),
                                m(n),
                                'L',
                                m(r),
                                m(n),
                                'Z',
                              );
                              break;
                            case i.OPS.moveTo:
                              (r = t[s++]),
                                (o = t[s++]),
                                a.push('M', m(r), m(o));
                              break;
                            case i.OPS.lineTo:
                              (r = t[s++]),
                                (o = t[s++]),
                                a.push('L', m(r), m(o));
                              break;
                            case i.OPS.curveTo:
                              (r = t[s + 4]),
                                (o = t[s + 5]),
                                a.push(
                                  'C',
                                  m(t[s]),
                                  m(t[s + 1]),
                                  m(t[s + 2]),
                                  m(t[s + 3]),
                                  m(r),
                                  m(o),
                                ),
                                (s += 6);
                              break;
                            case i.OPS.curveTo2:
                              a.push(
                                'C',
                                m(r),
                                m(o),
                                m(t[s]),
                                m(t[s + 1]),
                                m(t[s + 2]),
                                m(t[s + 3]),
                              ),
                                (r = t[s + 2]),
                                (o = t[s + 3]),
                                (s += 4);
                              break;
                            case i.OPS.curveTo3:
                              (r = t[s + 2]),
                                (o = t[s + 3]),
                                a.push(
                                  'C',
                                  m(t[s]),
                                  m(t[s + 1]),
                                  m(r),
                                  m(o),
                                  m(r),
                                  m(o),
                                ),
                                (s += 4);
                              break;
                            case i.OPS.closePath:
                              a.push('Z');
                          }
                        (a = a.join(' ')),
                          n.path &&
                          e.length > 0 &&
                          e[0] !== i.OPS.rectangle &&
                          e[0] !== i.OPS.moveTo
                            ? (a = n.path.getAttributeNS(null, 'd') + a)
                            : ((n.path =
                                this.svgFactory.createElement('svg:path')),
                              this._ensureTransformGroup().append(n.path)),
                          n.path.setAttributeNS(null, 'd', a),
                          n.path.setAttributeNS(null, 'fill', 'none'),
                          (n.element = n.path),
                          n.setCurrentPoint(r, o);
                      }
                      endPath() {
                        const e = this.current;
                        if (((e.path = null), !this.pendingClip)) return;
                        if (!e.element) return void (this.pendingClip = null);
                        const t = 'clippath' + b++,
                          n = this.svgFactory.createElement('svg:clipPath');
                        n.setAttributeNS(null, 'id', t),
                          n.setAttributeNS(
                            null,
                            'transform',
                            v(this.transformMatrix),
                          );
                        const r = e.element.cloneNode(!0);
                        if (
                          ('evenodd' === this.pendingClip
                            ? r.setAttributeNS(null, 'clip-rule', 'evenodd')
                            : r.setAttributeNS(null, 'clip-rule', 'nonzero'),
                          (this.pendingClip = null),
                          n.append(r),
                          this.defs.append(n),
                          e.activeClipUrl)
                        ) {
                          e.clipGroup = null;
                          for (const e of this.extraStack) e.clipGroup = null;
                          n.setAttributeNS(null, 'clip-path', e.activeClipUrl);
                        }
                        (e.activeClipUrl = `url(#${t})`), (this.tgrp = null);
                      }
                      clip(e) {
                        this.pendingClip = e;
                      }
                      closePath() {
                        const e = this.current;
                        if (e.path) {
                          const t = `${e.path.getAttributeNS(null, 'd')}Z`;
                          e.path.setAttributeNS(null, 'd', t);
                        }
                      }
                      setLeading(e) {
                        this.current.leading = -e;
                      }
                      setTextRise(e) {
                        this.current.textRise = e;
                      }
                      setTextRenderingMode(e) {
                        this.current.textRenderingMode = e;
                      }
                      setHScale(e) {
                        this.current.textHScale = e / 100;
                      }
                      setRenderingIntent(e) {}
                      setFlatness(e) {}
                      setGState(e) {
                        for (const [t, n] of e)
                          switch (t) {
                            case 'LW':
                              this.setLineWidth(n);
                              break;
                            case 'LC':
                              this.setLineCap(n);
                              break;
                            case 'LJ':
                              this.setLineJoin(n);
                              break;
                            case 'ML':
                              this.setMiterLimit(n);
                              break;
                            case 'D':
                              this.setDash(n[0], n[1]);
                              break;
                            case 'RI':
                              this.setRenderingIntent(n);
                              break;
                            case 'FL':
                              this.setFlatness(n);
                              break;
                            case 'Font':
                              this.setFont(n);
                              break;
                            case 'CA':
                              this.setStrokeAlpha(n);
                              break;
                            case 'ca':
                              this.setFillAlpha(n);
                              break;
                            default:
                              (0, i.warn)(
                                `Unimplemented graphic state operator ${t}`,
                              );
                          }
                      }
                      fill() {
                        const e = this.current;
                        e.element &&
                          (e.element.setAttributeNS(null, 'fill', e.fillColor),
                          e.element.setAttributeNS(
                            null,
                            'fill-opacity',
                            e.fillAlpha,
                          ),
                          this.endPath());
                      }
                      stroke() {
                        const e = this.current;
                        e.element &&
                          (this._setStrokeAttributes(e.element),
                          e.element.setAttributeNS(null, 'fill', 'none'),
                          this.endPath());
                      }
                      _setStrokeAttributes(e) {
                        let t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : 1;
                        const n = this.current;
                        let r = n.dashArray;
                        1 !== t &&
                          r.length > 0 &&
                          (r = r.map(function (e) {
                            return t * e;
                          })),
                          e.setAttributeNS(null, 'stroke', n.strokeColor),
                          e.setAttributeNS(
                            null,
                            'stroke-opacity',
                            n.strokeAlpha,
                          ),
                          e.setAttributeNS(
                            null,
                            'stroke-miterlimit',
                            m(n.miterLimit),
                          ),
                          e.setAttributeNS(null, 'stroke-linecap', n.lineCap),
                          e.setAttributeNS(null, 'stroke-linejoin', n.lineJoin),
                          e.setAttributeNS(
                            null,
                            'stroke-width',
                            m(t * n.lineWidth) + 'px',
                          ),
                          e.setAttributeNS(
                            null,
                            'stroke-dasharray',
                            r.map(m).join(' '),
                          ),
                          e.setAttributeNS(
                            null,
                            'stroke-dashoffset',
                            m(t * n.dashPhase) + 'px',
                          );
                      }
                      eoFill() {
                        this.current.element &&
                          this.current.element.setAttributeNS(
                            null,
                            'fill-rule',
                            'evenodd',
                          ),
                          this.fill();
                      }
                      fillStroke() {
                        this.stroke(), this.fill();
                      }
                      eoFillStroke() {
                        this.current.element &&
                          this.current.element.setAttributeNS(
                            null,
                            'fill-rule',
                            'evenodd',
                          ),
                          this.fillStroke();
                      }
                      closeStroke() {
                        this.closePath(), this.stroke();
                      }
                      closeFillStroke() {
                        this.closePath(), this.fillStroke();
                      }
                      closeEOFillStroke() {
                        this.closePath(), this.eoFillStroke();
                      }
                      paintSolidColorImageMask() {
                        const e = this.svgFactory.createElement('svg:rect');
                        e.setAttributeNS(null, 'x', '0'),
                          e.setAttributeNS(null, 'y', '0'),
                          e.setAttributeNS(null, 'width', '1px'),
                          e.setAttributeNS(null, 'height', '1px'),
                          e.setAttributeNS(
                            null,
                            'fill',
                            this.current.fillColor,
                          ),
                          this._ensureTransformGroup().append(e);
                      }
                      paintImageXObject(e) {
                        const t = e.startsWith('g_')
                          ? this.commonObjs.get(e)
                          : this.objs.get(e);
                        t
                          ? this.paintInlineImageXObject(t)
                          : (0, i.warn)(
                              `Dependent image with object ID ${e} is not ready yet`,
                            );
                      }
                      paintInlineImageXObject(e, t) {
                        const n = e.width,
                          r = e.height,
                          i = p(e, this.forceDataSchema, !!t),
                          o = this.svgFactory.createElement('svg:rect');
                        o.setAttributeNS(null, 'x', '0'),
                          o.setAttributeNS(null, 'y', '0'),
                          o.setAttributeNS(null, 'width', m(n)),
                          o.setAttributeNS(null, 'height', m(r)),
                          (this.current.element = o),
                          this.clip('nonzero');
                        const a = this.svgFactory.createElement('svg:image');
                        a.setAttributeNS(c, 'xlink:href', i),
                          a.setAttributeNS(null, 'x', '0'),
                          a.setAttributeNS(null, 'y', m(-r)),
                          a.setAttributeNS(null, 'width', m(n) + 'px'),
                          a.setAttributeNS(null, 'height', m(r) + 'px'),
                          a.setAttributeNS(
                            null,
                            'transform',
                            `scale(${m(1 / n)} ${m(-1 / r)})`,
                          ),
                          t
                            ? t.append(a)
                            : this._ensureTransformGroup().append(a);
                      }
                      paintImageMaskXObject(e) {
                        const t = this.current,
                          n = e.width,
                          r = e.height,
                          i = t.fillColor;
                        t.maskId = 'mask' + y++;
                        const o = this.svgFactory.createElement('svg:mask');
                        o.setAttributeNS(null, 'id', t.maskId);
                        const a = this.svgFactory.createElement('svg:rect');
                        a.setAttributeNS(null, 'x', '0'),
                          a.setAttributeNS(null, 'y', '0'),
                          a.setAttributeNS(null, 'width', m(n)),
                          a.setAttributeNS(null, 'height', m(r)),
                          a.setAttributeNS(null, 'fill', i),
                          a.setAttributeNS(null, 'mask', `url(#${t.maskId})`),
                          this.defs.append(o),
                          this._ensureTransformGroup().append(a),
                          this.paintInlineImageXObject(e, o);
                      }
                      paintFormXObjectBegin(e, t) {
                        if (
                          (Array.isArray(e) &&
                            6 === e.length &&
                            this.transform(e[0], e[1], e[2], e[3], e[4], e[5]),
                          t)
                        ) {
                          const e = t[2] - t[0],
                            n = t[3] - t[1],
                            r = this.svgFactory.createElement('svg:rect');
                          r.setAttributeNS(null, 'x', t[0]),
                            r.setAttributeNS(null, 'y', t[1]),
                            r.setAttributeNS(null, 'width', m(e)),
                            r.setAttributeNS(null, 'height', m(n)),
                            (this.current.element = r),
                            this.clip('nonzero'),
                            this.endPath();
                        }
                      }
                      paintFormXObjectEnd() {}
                      _initialize(e) {
                        const t = this.svgFactory.create(e.width, e.height),
                          n = this.svgFactory.createElement('svg:defs');
                        t.append(n), (this.defs = n);
                        const r = this.svgFactory.createElement('svg:g');
                        return (
                          r.setAttributeNS(null, 'transform', v(e.transform)),
                          t.append(r),
                          (this.svg = r),
                          t
                        );
                      }
                      _ensureClipGroup() {
                        if (!this.current.clipGroup) {
                          const e = this.svgFactory.createElement('svg:g');
                          e.setAttributeNS(
                            null,
                            'clip-path',
                            this.current.activeClipUrl,
                          ),
                            this.svg.append(e),
                            (this.current.clipGroup = e);
                        }
                        return this.current.clipGroup;
                      }
                      _ensureTransformGroup() {
                        return (
                          this.tgrp ||
                            ((this.tgrp =
                              this.svgFactory.createElement('svg:g')),
                            this.tgrp.setAttributeNS(
                              null,
                              'transform',
                              v(this.transformMatrix),
                            ),
                            this.current.activeClipUrl
                              ? this._ensureClipGroup().append(this.tgrp)
                              : this.svg.append(this.tgrp)),
                          this.tgrp
                        );
                      }
                    };
                  }
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFNodeStream = void 0);
                  var r = n(1),
                    i = n(158);
                  const o = __webpack_require__(27922),
                    a = __webpack_require__(15212),
                    s = __webpack_require__(85777),
                    l = __webpack_require__(76929),
                    c = /^file:\/\/\/[a-zA-Z]:\//;
                  t.PDFNodeStream = class {
                    constructor(e) {
                      (this.source = e),
                        (this.url = (function (e) {
                          const t = l.parse(e);
                          return 'file:' === t.protocol || t.host
                            ? t
                            : /^[a-z]:[/\\]/i.test(e)
                              ? l.parse(`file:///${e}`)
                              : (t.host || (t.protocol = 'file:'), t);
                        })(e.url)),
                        (this.isHttp =
                          'http:' === this.url.protocol ||
                          'https:' === this.url.protocol),
                        (this.isFsUrl = 'file:' === this.url.protocol),
                        (this.httpHeaders =
                          (this.isHttp && e.httpHeaders) || {}),
                        (this._fullRequestReader = null),
                        (this._rangeRequestReaders = []);
                    }
                    get _progressiveDataLength() {
                      var e, t;
                      return null !==
                        (e =
                          null === (t = this._fullRequestReader) || void 0 === t
                            ? void 0
                            : t._loaded) && void 0 !== e
                        ? e
                        : 0;
                    }
                    getFullReader() {
                      return (
                        (0, r.assert)(
                          !this._fullRequestReader,
                          'PDFNodeStream.getFullReader can only be called once.',
                        ),
                        (this._fullRequestReader = this.isFsUrl
                          ? new g(this)
                          : new p(this)),
                        this._fullRequestReader
                      );
                    }
                    getRangeReader(e, t) {
                      if (t <= this._progressiveDataLength) return null;
                      const n = this.isFsUrl
                        ? new m(this, e, t)
                        : new f(this, e, t);
                      return this._rangeRequestReaders.push(n), n;
                    }
                    cancelAllRequests(e) {
                      this._fullRequestReader &&
                        this._fullRequestReader.cancel(e);
                      for (const t of this._rangeRequestReaders.slice(0))
                        t.cancel(e);
                    }
                  };
                  class h {
                    constructor(e) {
                      (this._url = e.url),
                        (this._done = !1),
                        (this._storedError = null),
                        (this.onProgress = null);
                      const t = e.source;
                      (this._contentLength = t.length),
                        (this._loaded = 0),
                        (this._filename = null),
                        (this._disableRange = t.disableRange || !1),
                        (this._rangeChunkSize = t.rangeChunkSize),
                        this._rangeChunkSize ||
                          this._disableRange ||
                          (this._disableRange = !0),
                        (this._isStreamingSupported = !t.disableStream),
                        (this._isRangeSupported = !t.disableRange),
                        (this._readableStream = null),
                        (this._readCapability = (0,
                        r.createPromiseCapability)()),
                        (this._headersCapability = (0,
                        r.createPromiseCapability)());
                    }
                    get headersReady() {
                      return this._headersCapability.promise;
                    }
                    get filename() {
                      return this._filename;
                    }
                    get contentLength() {
                      return this._contentLength;
                    }
                    get isRangeSupported() {
                      return this._isRangeSupported;
                    }
                    get isStreamingSupported() {
                      return this._isStreamingSupported;
                    }
                    async read() {
                      if ((await this._readCapability.promise, this._done))
                        return { value: void 0, done: !0 };
                      if (this._storedError) throw this._storedError;
                      const e = this._readableStream.read();
                      return null === e
                        ? ((this._readCapability = (0,
                          r.createPromiseCapability)()),
                          this.read())
                        : ((this._loaded += e.length),
                          this.onProgress &&
                            this.onProgress({
                              loaded: this._loaded,
                              total: this._contentLength,
                            }),
                          { value: new Uint8Array(e).buffer, done: !1 });
                    }
                    cancel(e) {
                      this._readableStream
                        ? this._readableStream.destroy(e)
                        : this._error(e);
                    }
                    _error(e) {
                      (this._storedError = e), this._readCapability.resolve();
                    }
                    _setReadableStream(e) {
                      (this._readableStream = e),
                        e.on('readable', () => {
                          this._readCapability.resolve();
                        }),
                        e.on('end', () => {
                          e.destroy(),
                            (this._done = !0),
                            this._readCapability.resolve();
                        }),
                        e.on('error', (e) => {
                          this._error(e);
                        }),
                        !this._isStreamingSupported &&
                          this._isRangeSupported &&
                          this._error(
                            new r.AbortException('streaming is disabled'),
                          ),
                        this._storedError &&
                          this._readableStream.destroy(this._storedError);
                    }
                  }
                  class u {
                    constructor(e) {
                      (this._url = e.url),
                        (this._done = !1),
                        (this._storedError = null),
                        (this.onProgress = null),
                        (this._loaded = 0),
                        (this._readableStream = null),
                        (this._readCapability = (0,
                        r.createPromiseCapability)());
                      const t = e.source;
                      this._isStreamingSupported = !t.disableStream;
                    }
                    get isStreamingSupported() {
                      return this._isStreamingSupported;
                    }
                    async read() {
                      if ((await this._readCapability.promise, this._done))
                        return { value: void 0, done: !0 };
                      if (this._storedError) throw this._storedError;
                      const e = this._readableStream.read();
                      return null === e
                        ? ((this._readCapability = (0,
                          r.createPromiseCapability)()),
                          this.read())
                        : ((this._loaded += e.length),
                          this.onProgress &&
                            this.onProgress({ loaded: this._loaded }),
                          { value: new Uint8Array(e).buffer, done: !1 });
                    }
                    cancel(e) {
                      this._readableStream
                        ? this._readableStream.destroy(e)
                        : this._error(e);
                    }
                    _error(e) {
                      (this._storedError = e), this._readCapability.resolve();
                    }
                    _setReadableStream(e) {
                      (this._readableStream = e),
                        e.on('readable', () => {
                          this._readCapability.resolve();
                        }),
                        e.on('end', () => {
                          e.destroy(),
                            (this._done = !0),
                            this._readCapability.resolve();
                        }),
                        e.on('error', (e) => {
                          this._error(e);
                        }),
                        this._storedError &&
                          this._readableStream.destroy(this._storedError);
                    }
                  }
                  function d(e, t) {
                    return {
                      protocol: e.protocol,
                      auth: e.auth,
                      host: e.hostname,
                      port: e.port,
                      path: e.path,
                      method: 'GET',
                      headers: t,
                    };
                  }
                  class p extends h {
                    constructor(e) {
                      super(e);
                      const t = (t) => {
                        if (404 === t.statusCode) {
                          const e = new r.MissingPDFException(
                            `Missing PDF "${this._url}".`,
                          );
                          return (
                            (this._storedError = e),
                            void this._headersCapability.reject(e)
                          );
                        }
                        this._headersCapability.resolve(),
                          this._setReadableStream(t);
                        const n = (e) =>
                            this._readableStream.headers[e.toLowerCase()],
                          { allowRangeRequests: o, suggestedLength: a } = (0,
                          i.validateRangeRequestCapabilities)({
                            getResponseHeader: n,
                            isHttp: e.isHttp,
                            rangeChunkSize: this._rangeChunkSize,
                            disableRange: this._disableRange,
                          });
                        (this._isRangeSupported = o),
                          (this._contentLength = a || this._contentLength),
                          (this._filename = (0, i.extractFilenameFromHeader)(
                            n,
                          ));
                      };
                      (this._request = null),
                        'http:' === this._url.protocol
                          ? (this._request = a.request(
                              d(this._url, e.httpHeaders),
                              t,
                            ))
                          : (this._request = s.request(
                              d(this._url, e.httpHeaders),
                              t,
                            )),
                        this._request.on('error', (e) => {
                          (this._storedError = e),
                            this._headersCapability.reject(e);
                        }),
                        this._request.end();
                    }
                  }
                  class f extends u {
                    constructor(e, t, n) {
                      super(e), (this._httpHeaders = {});
                      for (const t in e.httpHeaders) {
                        const n = e.httpHeaders[t];
                        void 0 !== n && (this._httpHeaders[t] = n);
                      }
                      this._httpHeaders.Range = `bytes=${t}-${n - 1}`;
                      const i = (e) => {
                        if (404 !== e.statusCode) this._setReadableStream(e);
                        else {
                          const e = new r.MissingPDFException(
                            `Missing PDF "${this._url}".`,
                          );
                          this._storedError = e;
                        }
                      };
                      (this._request = null),
                        'http:' === this._url.protocol
                          ? (this._request = a.request(
                              d(this._url, this._httpHeaders),
                              i,
                            ))
                          : (this._request = s.request(
                              d(this._url, this._httpHeaders),
                              i,
                            )),
                        this._request.on('error', (e) => {
                          this._storedError = e;
                        }),
                        this._request.end();
                    }
                  }
                  class g extends h {
                    constructor(e) {
                      super(e);
                      let t = decodeURIComponent(this._url.path);
                      c.test(this._url.href) && (t = t.replace(/^\//, '')),
                        o.lstat(t, (e, n) => {
                          if (e)
                            return (
                              'ENOENT' === e.code &&
                                (e = new r.MissingPDFException(
                                  `Missing PDF "${t}".`,
                                )),
                              (this._storedError = e),
                              void this._headersCapability.reject(e)
                            );
                          (this._contentLength = n.size),
                            this._setReadableStream(o.createReadStream(t)),
                            this._headersCapability.resolve();
                        });
                    }
                  }
                  class m extends u {
                    constructor(e, t, n) {
                      super(e);
                      let r = decodeURIComponent(this._url.path);
                      c.test(this._url.href) && (r = r.replace(/^\//, '')),
                        this._setReadableStream(
                          o.createReadStream(r, { start: t, end: n - 1 }),
                        );
                    }
                  }
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.createResponseStatusError = function (e, t) {
                      return 404 === e || (0 === e && t.startsWith('file:'))
                        ? new r.MissingPDFException('Missing PDF "' + t + '".')
                        : new r.UnexpectedResponseException(
                            `Unexpected server response (${e}) while retrieving PDF "${t}".`,
                            e,
                          );
                    }),
                    (t.extractFilenameFromHeader = function (e) {
                      const t = e('Content-Disposition');
                      if (t) {
                        let e = (0, i.getFilenameFromContentDispositionHeader)(
                          t,
                        );
                        if (e.includes('%'))
                          try {
                            e = decodeURIComponent(e);
                          } catch (e) {}
                        if ((0, o.isPdfFile)(e)) return e;
                      }
                      return null;
                    }),
                    (t.validateRangeRequestCapabilities = function (e) {
                      let {
                        getResponseHeader: t,
                        isHttp: n,
                        rangeChunkSize: r,
                        disableRange: i,
                      } = e;
                      const o = {
                          allowRangeRequests: !1,
                          suggestedLength: void 0,
                        },
                        a = parseInt(t('Content-Length'), 10);
                      return Number.isInteger(a)
                        ? ((o.suggestedLength = a),
                          a <= 2 * r ||
                            i ||
                            !n ||
                            'bytes' !== t('Accept-Ranges') ||
                            'identity' !==
                              (t('Content-Encoding') || 'identity') ||
                            (o.allowRangeRequests = !0),
                          o)
                        : o;
                    }),
                    (t.validateResponseStatus = function (e) {
                      return 200 === e || 206 === e;
                    });
                  var r = n(1),
                    i = n(159),
                    o = n(133);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.getFilenameFromContentDispositionHeader = function (e) {
                      let t = !0,
                        n = i('filename\\*', 'i').exec(e);
                      if (n) {
                        n = n[1];
                        let e = s(n);
                        return (e = unescape(e)), (e = l(e)), (e = c(e)), a(e);
                      }
                      if (
                        ((n = (function (e) {
                          const t = [];
                          let n;
                          const r = i('filename\\*((?!0\\d)\\d+)(\\*?)', 'ig');
                          for (; null !== (n = r.exec(e)); ) {
                            let [, e, r, i] = n;
                            if (((e = parseInt(e, 10)), e in t)) {
                              if (0 === e) break;
                            } else t[e] = [r, i];
                          }
                          const o = [];
                          for (let e = 0; e < t.length && e in t; ++e) {
                            let [n, r] = t[e];
                            (r = s(r)),
                              n && ((r = unescape(r)), 0 === e && (r = l(r))),
                              o.push(r);
                          }
                          return o.join('');
                        })(e)),
                        n)
                      )
                        return a(c(n));
                      if (((n = i('filename', 'i').exec(e)), n)) {
                        n = n[1];
                        let e = s(n);
                        return (e = c(e)), a(e);
                      }
                      function i(e, t) {
                        return new RegExp(
                          '(?:^|;)\\s*' +
                            e +
                            '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)',
                          t,
                        );
                      }
                      function o(e, n) {
                        if (e) {
                          if (!/^[\x00-\xFF]+$/.test(n)) return n;
                          try {
                            const i = new TextDecoder(e, { fatal: !0 }),
                              o = (0, r.stringToBytes)(n);
                            (n = i.decode(o)), (t = !1);
                          } catch (e) {}
                        }
                        return n;
                      }
                      function a(e) {
                        return (
                          t &&
                            /[\x80-\xff]/.test(e) &&
                            ((e = o('utf-8', e)),
                            t && (e = o('iso-8859-1', e))),
                          e
                        );
                      }
                      function s(e) {
                        if (e.startsWith('"')) {
                          const t = e.slice(1).split('\\"');
                          for (let e = 0; e < t.length; ++e) {
                            const n = t[e].indexOf('"');
                            -1 !== n &&
                              ((t[e] = t[e].slice(0, n)), (t.length = e + 1)),
                              (t[e] = t[e].replace(/\\(.)/g, '$1'));
                          }
                          e = t.join('"');
                        }
                        return e;
                      }
                      function l(e) {
                        const t = e.indexOf("'");
                        return -1 === t
                          ? e
                          : o(
                              e.slice(0, t),
                              e.slice(t + 1).replace(/^[^']*'/, ''),
                            );
                      }
                      function c(e) {
                        return !e.startsWith('=?') ||
                          /[\x00-\x19\x80-\xff]/.test(e)
                          ? e
                          : e.replace(
                              /=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g,
                              function (e, t, n, r) {
                                if ('q' === n || 'Q' === n)
                                  return o(
                                    t,
                                    (r = (r = r.replace(/_/g, ' ')).replace(
                                      /=([0-9a-fA-F]{2})/g,
                                      function (e, t) {
                                        return String.fromCharCode(
                                          parseInt(t, 16),
                                        );
                                      },
                                    )),
                                  );
                                try {
                                  r = atob(r);
                                } catch (e) {}
                                return o(t, r);
                              },
                            );
                      }
                      return '';
                    });
                  var r = n(1);
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFNetworkStream = void 0);
                  var r = n(1),
                    i = n(158);
                  class o {
                    constructor(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : {};
                      (this.url = e),
                        (this.isHttp = /^https?:/i.test(e)),
                        (this.httpHeaders =
                          (this.isHttp && t.httpHeaders) ||
                          Object.create(null)),
                        (this.withCredentials = t.withCredentials || !1),
                        (this.getXhr =
                          t.getXhr ||
                          function () {
                            return new XMLHttpRequest();
                          }),
                        (this.currXhrId = 0),
                        (this.pendingRequests = Object.create(null));
                    }
                    requestRange(e, t, n) {
                      const r = { begin: e, end: t };
                      for (const e in n) r[e] = n[e];
                      return this.request(r);
                    }
                    requestFull(e) {
                      return this.request(e);
                    }
                    request(e) {
                      const t = this.getXhr(),
                        n = this.currXhrId++,
                        r = (this.pendingRequests[n] = { xhr: t });
                      t.open('GET', this.url),
                        (t.withCredentials = this.withCredentials);
                      for (const e in this.httpHeaders) {
                        const n = this.httpHeaders[e];
                        void 0 !== n && t.setRequestHeader(e, n);
                      }
                      return (
                        this.isHttp && 'begin' in e && 'end' in e
                          ? (t.setRequestHeader(
                              'Range',
                              `bytes=${e.begin}-${e.end - 1}`,
                            ),
                            (r.expectedStatus = 206))
                          : (r.expectedStatus = 200),
                        (t.responseType = 'arraybuffer'),
                        e.onError &&
                          (t.onerror = function (n) {
                            e.onError(t.status);
                          }),
                        (t.onreadystatechange = this.onStateChange.bind(
                          this,
                          n,
                        )),
                        (t.onprogress = this.onProgress.bind(this, n)),
                        (r.onHeadersReceived = e.onHeadersReceived),
                        (r.onDone = e.onDone),
                        (r.onError = e.onError),
                        (r.onProgress = e.onProgress),
                        t.send(null),
                        n
                      );
                    }
                    onProgress(e, t) {
                      var n;
                      const r = this.pendingRequests[e];
                      r &&
                        (null === (n = r.onProgress) ||
                          void 0 === n ||
                          n.call(r, t));
                    }
                    onStateChange(e, t) {
                      const n = this.pendingRequests[e];
                      if (!n) return;
                      const i = n.xhr;
                      if (
                        (i.readyState >= 2 &&
                          n.onHeadersReceived &&
                          (n.onHeadersReceived(), delete n.onHeadersReceived),
                        4 !== i.readyState)
                      )
                        return;
                      if (!(e in this.pendingRequests)) return;
                      var o;
                      if (
                        (delete this.pendingRequests[e],
                        0 === i.status && this.isHttp)
                      )
                        return void (
                          null === (o = n.onError) ||
                          void 0 === o ||
                          o.call(n, i.status)
                        );
                      const a = i.status || 200;
                      var s;
                      if (
                        (200 !== a || 206 !== n.expectedStatus) &&
                        a !== n.expectedStatus
                      )
                        return void (
                          null === (s = n.onError) ||
                          void 0 === s ||
                          s.call(n, i.status)
                        );
                      const l = (function (e) {
                        const t = e.response;
                        return 'string' != typeof t
                          ? t
                          : (0, r.stringToBytes)(t).buffer;
                      })(i);
                      if (206 === a) {
                        const e = i.getResponseHeader('Content-Range'),
                          t = /bytes (\d+)-(\d+)\/(\d+)/.exec(e);
                        n.onDone({ begin: parseInt(t[1], 10), chunk: l });
                      } else if (l) n.onDone({ begin: 0, chunk: l });
                      else {
                        var c;
                        null === (c = n.onError) ||
                          void 0 === c ||
                          c.call(n, i.status);
                      }
                    }
                    getRequestXhr(e) {
                      return this.pendingRequests[e].xhr;
                    }
                    isPendingRequest(e) {
                      return e in this.pendingRequests;
                    }
                    abortRequest(e) {
                      const t = this.pendingRequests[e].xhr;
                      delete this.pendingRequests[e], t.abort();
                    }
                  }
                  t.PDFNetworkStream = class {
                    constructor(e) {
                      (this._source = e),
                        (this._manager = new o(e.url, {
                          httpHeaders: e.httpHeaders,
                          withCredentials: e.withCredentials,
                        })),
                        (this._rangeChunkSize = e.rangeChunkSize),
                        (this._fullRequestReader = null),
                        (this._rangeRequestReaders = []);
                    }
                    _onRangeRequestReaderClosed(e) {
                      const t = this._rangeRequestReaders.indexOf(e);
                      t >= 0 && this._rangeRequestReaders.splice(t, 1);
                    }
                    getFullReader() {
                      return (
                        (0, r.assert)(
                          !this._fullRequestReader,
                          'PDFNetworkStream.getFullReader can only be called once.',
                        ),
                        (this._fullRequestReader = new a(
                          this._manager,
                          this._source,
                        )),
                        this._fullRequestReader
                      );
                    }
                    getRangeReader(e, t) {
                      const n = new s(this._manager, e, t);
                      return (
                        (n.onClosed =
                          this._onRangeRequestReaderClosed.bind(this)),
                        this._rangeRequestReaders.push(n),
                        n
                      );
                    }
                    cancelAllRequests(e) {
                      var t;
                      null === (t = this._fullRequestReader) ||
                        void 0 === t ||
                        t.cancel(e);
                      for (const t of this._rangeRequestReaders.slice(0))
                        t.cancel(e);
                    }
                  };
                  class a {
                    constructor(e, t) {
                      this._manager = e;
                      const n = {
                        onHeadersReceived: this._onHeadersReceived.bind(this),
                        onDone: this._onDone.bind(this),
                        onError: this._onError.bind(this),
                        onProgress: this._onProgress.bind(this),
                      };
                      (this._url = t.url),
                        (this._fullRequestId = e.requestFull(n)),
                        (this._headersReceivedCapability = (0,
                        r.createPromiseCapability)()),
                        (this._disableRange = t.disableRange || !1),
                        (this._contentLength = t.length),
                        (this._rangeChunkSize = t.rangeChunkSize),
                        this._rangeChunkSize ||
                          this._disableRange ||
                          (this._disableRange = !0),
                        (this._isStreamingSupported = !1),
                        (this._isRangeSupported = !1),
                        (this._cachedChunks = []),
                        (this._requests = []),
                        (this._done = !1),
                        (this._storedError = void 0),
                        (this._filename = null),
                        (this.onProgress = null);
                    }
                    _onHeadersReceived() {
                      const e = this._fullRequestId,
                        t = this._manager.getRequestXhr(e),
                        n = (e) => t.getResponseHeader(e),
                        { allowRangeRequests: r, suggestedLength: o } = (0,
                        i.validateRangeRequestCapabilities)({
                          getResponseHeader: n,
                          isHttp: this._manager.isHttp,
                          rangeChunkSize: this._rangeChunkSize,
                          disableRange: this._disableRange,
                        });
                      r && (this._isRangeSupported = !0),
                        (this._contentLength = o || this._contentLength),
                        (this._filename = (0, i.extractFilenameFromHeader)(n)),
                        this._isRangeSupported && this._manager.abortRequest(e),
                        this._headersReceivedCapability.resolve();
                    }
                    _onDone(e) {
                      if (
                        (e &&
                          (this._requests.length > 0
                            ? this._requests
                                .shift()
                                .resolve({ value: e.chunk, done: !1 })
                            : this._cachedChunks.push(e.chunk)),
                        (this._done = !0),
                        !(this._cachedChunks.length > 0))
                      ) {
                        for (const e of this._requests)
                          e.resolve({ value: void 0, done: !0 });
                        this._requests.length = 0;
                      }
                    }
                    _onError(e) {
                      (this._storedError = (0, i.createResponseStatusError)(
                        e,
                        this._url,
                      )),
                        this._headersReceivedCapability.reject(
                          this._storedError,
                        );
                      for (const e of this._requests)
                        e.reject(this._storedError);
                      (this._requests.length = 0),
                        (this._cachedChunks.length = 0);
                    }
                    _onProgress(e) {
                      var t;
                      null === (t = this.onProgress) ||
                        void 0 === t ||
                        t.call(this, {
                          loaded: e.loaded,
                          total: e.lengthComputable
                            ? e.total
                            : this._contentLength,
                        });
                    }
                    get filename() {
                      return this._filename;
                    }
                    get isRangeSupported() {
                      return this._isRangeSupported;
                    }
                    get isStreamingSupported() {
                      return this._isStreamingSupported;
                    }
                    get contentLength() {
                      return this._contentLength;
                    }
                    get headersReady() {
                      return this._headersReceivedCapability.promise;
                    }
                    async read() {
                      if (this._storedError) throw this._storedError;
                      if (this._cachedChunks.length > 0)
                        return { value: this._cachedChunks.shift(), done: !1 };
                      if (this._done) return { value: void 0, done: !0 };
                      const e = (0, r.createPromiseCapability)();
                      return this._requests.push(e), e.promise;
                    }
                    cancel(e) {
                      (this._done = !0),
                        this._headersReceivedCapability.reject(e);
                      for (const e of this._requests)
                        e.resolve({ value: void 0, done: !0 });
                      (this._requests.length = 0),
                        this._manager.isPendingRequest(this._fullRequestId) &&
                          this._manager.abortRequest(this._fullRequestId),
                        (this._fullRequestReader = null);
                    }
                  }
                  class s {
                    constructor(e, t, n) {
                      this._manager = e;
                      const r = {
                        onDone: this._onDone.bind(this),
                        onError: this._onError.bind(this),
                        onProgress: this._onProgress.bind(this),
                      };
                      (this._url = e.url),
                        (this._requestId = e.requestRange(t, n, r)),
                        (this._requests = []),
                        (this._queuedChunk = null),
                        (this._done = !1),
                        (this._storedError = void 0),
                        (this.onProgress = null),
                        (this.onClosed = null);
                    }
                    _close() {
                      var e;
                      null === (e = this.onClosed) ||
                        void 0 === e ||
                        e.call(this, this);
                    }
                    _onDone(e) {
                      const t = e.chunk;
                      this._requests.length > 0
                        ? this._requests.shift().resolve({ value: t, done: !1 })
                        : (this._queuedChunk = t),
                        (this._done = !0);
                      for (const e of this._requests)
                        e.resolve({ value: void 0, done: !0 });
                      (this._requests.length = 0), this._close();
                    }
                    _onError(e) {
                      this._storedError = (0, i.createResponseStatusError)(
                        e,
                        this._url,
                      );
                      for (const e of this._requests)
                        e.reject(this._storedError);
                      (this._requests.length = 0), (this._queuedChunk = null);
                    }
                    _onProgress(e) {
                      var t;
                      this.isStreamingSupported ||
                        null === (t = this.onProgress) ||
                        void 0 === t ||
                        t.call(this, { loaded: e.loaded });
                    }
                    get isStreamingSupported() {
                      return !1;
                    }
                    async read() {
                      if (this._storedError) throw this._storedError;
                      if (null !== this._queuedChunk) {
                        const e = this._queuedChunk;
                        return (
                          (this._queuedChunk = null), { value: e, done: !1 }
                        );
                      }
                      if (this._done) return { value: void 0, done: !0 };
                      const e = (0, r.createPromiseCapability)();
                      return this._requests.push(e), e.promise;
                    }
                    cancel(e) {
                      this._done = !0;
                      for (const e of this._requests)
                        e.resolve({ value: void 0, done: !0 });
                      (this._requests.length = 0),
                        this._manager.isPendingRequest(this._requestId) &&
                          this._manager.abortRequest(this._requestId),
                        this._close();
                    }
                  }
                },
                (e, t, n) => {
                  'use strict';
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFFetchStream = void 0);
                  var r = n(1),
                    i = n(158);
                  function o(e, t, n) {
                    return {
                      method: 'GET',
                      headers: e,
                      signal: n.signal,
                      mode: 'cors',
                      credentials: t ? 'include' : 'same-origin',
                      redirect: 'follow',
                    };
                  }
                  function a(e) {
                    const t = new Headers();
                    for (const n in e) {
                      const r = e[n];
                      void 0 !== r && t.append(n, r);
                    }
                    return t;
                  }
                  t.PDFFetchStream = class {
                    constructor(e) {
                      (this.source = e),
                        (this.isHttp = /^https?:/i.test(e.url)),
                        (this.httpHeaders =
                          (this.isHttp && e.httpHeaders) || {}),
                        (this._fullRequestReader = null),
                        (this._rangeRequestReaders = []);
                    }
                    get _progressiveDataLength() {
                      var e, t;
                      return null !==
                        (e =
                          null === (t = this._fullRequestReader) || void 0 === t
                            ? void 0
                            : t._loaded) && void 0 !== e
                        ? e
                        : 0;
                    }
                    getFullReader() {
                      return (
                        (0, r.assert)(
                          !this._fullRequestReader,
                          'PDFFetchStream.getFullReader can only be called once.',
                        ),
                        (this._fullRequestReader = new s(this)),
                        this._fullRequestReader
                      );
                    }
                    getRangeReader(e, t) {
                      if (t <= this._progressiveDataLength) return null;
                      const n = new l(this, e, t);
                      return this._rangeRequestReaders.push(n), n;
                    }
                    cancelAllRequests(e) {
                      this._fullRequestReader &&
                        this._fullRequestReader.cancel(e);
                      for (const t of this._rangeRequestReaders.slice(0))
                        t.cancel(e);
                    }
                  };
                  class s {
                    constructor(e) {
                      (this._stream = e),
                        (this._reader = null),
                        (this._loaded = 0),
                        (this._filename = null);
                      const t = e.source;
                      (this._withCredentials = t.withCredentials || !1),
                        (this._contentLength = t.length),
                        (this._headersCapability = (0,
                        r.createPromiseCapability)()),
                        (this._disableRange = t.disableRange || !1),
                        (this._rangeChunkSize = t.rangeChunkSize),
                        this._rangeChunkSize ||
                          this._disableRange ||
                          (this._disableRange = !0),
                        (this._abortController = new AbortController()),
                        (this._isStreamingSupported = !t.disableStream),
                        (this._isRangeSupported = !t.disableRange),
                        (this._headers = a(this._stream.httpHeaders));
                      const n = t.url;
                      fetch(
                        n,
                        o(
                          this._headers,
                          this._withCredentials,
                          this._abortController,
                        ),
                      )
                        .then((e) => {
                          if (!(0, i.validateResponseStatus)(e.status))
                            throw (0, i.createResponseStatusError)(e.status, n);
                          (this._reader = e.body.getReader()),
                            this._headersCapability.resolve();
                          const t = (t) => e.headers.get(t),
                            { allowRangeRequests: o, suggestedLength: a } = (0,
                            i.validateRangeRequestCapabilities)({
                              getResponseHeader: t,
                              isHttp: this._stream.isHttp,
                              rangeChunkSize: this._rangeChunkSize,
                              disableRange: this._disableRange,
                            });
                          (this._isRangeSupported = o),
                            (this._contentLength = a || this._contentLength),
                            (this._filename = (0, i.extractFilenameFromHeader)(
                              t,
                            )),
                            !this._isStreamingSupported &&
                              this._isRangeSupported &&
                              this.cancel(
                                new r.AbortException('Streaming is disabled.'),
                              );
                        })
                        .catch(this._headersCapability.reject),
                        (this.onProgress = null);
                    }
                    get headersReady() {
                      return this._headersCapability.promise;
                    }
                    get filename() {
                      return this._filename;
                    }
                    get contentLength() {
                      return this._contentLength;
                    }
                    get isRangeSupported() {
                      return this._isRangeSupported;
                    }
                    get isStreamingSupported() {
                      return this._isStreamingSupported;
                    }
                    async read() {
                      await this._headersCapability.promise;
                      const { value: e, done: t } = await this._reader.read();
                      return t
                        ? { value: e, done: t }
                        : ((this._loaded += e.byteLength),
                          this.onProgress &&
                            this.onProgress({
                              loaded: this._loaded,
                              total: this._contentLength,
                            }),
                          { value: new Uint8Array(e).buffer, done: !1 });
                    }
                    cancel(e) {
                      this._reader && this._reader.cancel(e),
                        this._abortController.abort();
                    }
                  }
                  class l {
                    constructor(e, t, n) {
                      (this._stream = e),
                        (this._reader = null),
                        (this._loaded = 0);
                      const s = e.source;
                      (this._withCredentials = s.withCredentials || !1),
                        (this._readCapability = (0,
                        r.createPromiseCapability)()),
                        (this._isStreamingSupported = !s.disableStream),
                        (this._abortController = new AbortController()),
                        (this._headers = a(this._stream.httpHeaders)),
                        this._headers.append('Range', `bytes=${t}-${n - 1}`);
                      const l = s.url;
                      fetch(
                        l,
                        o(
                          this._headers,
                          this._withCredentials,
                          this._abortController,
                        ),
                      )
                        .then((e) => {
                          if (!(0, i.validateResponseStatus)(e.status))
                            throw (0, i.createResponseStatusError)(e.status, l);
                          this._readCapability.resolve(),
                            (this._reader = e.body.getReader());
                        })
                        .catch(this._readCapability.reject),
                        (this.onProgress = null);
                    }
                    get isStreamingSupported() {
                      return this._isStreamingSupported;
                    }
                    async read() {
                      await this._readCapability.promise;
                      const { value: e, done: t } = await this._reader.read();
                      return t
                        ? { value: e, done: t }
                        : ((this._loaded += e.byteLength),
                          this.onProgress &&
                            this.onProgress({ loaded: this._loaded }),
                          { value: new Uint8Array(e).buffer, done: !1 });
                    }
                    cancel(e) {
                      this._reader && this._reader.cancel(e),
                        this._abortController.abort();
                    }
                  }
                },
              ],
              __webpack_module_cache__ = {};
            function __w_pdfjs_require__(e) {
              var t = __webpack_module_cache__[e];
              if (void 0 !== t) return t.exports;
              var n = (__webpack_module_cache__[e] = { exports: {} });
              return (
                __webpack_modules__[e](n, n.exports, __w_pdfjs_require__),
                n.exports
              );
            }
            var __nested_webpack_exports__ = {};
            return (
              (() => {
                'use strict';
                var e = __nested_webpack_exports__;
                Object.defineProperty(e, '__esModule', { value: !0 }),
                  Object.defineProperty(e, 'AnnotationEditorLayer', {
                    enumerable: !0,
                    get: function () {
                      return i.AnnotationEditorLayer;
                    },
                  }),
                  Object.defineProperty(e, 'AnnotationEditorParamsType', {
                    enumerable: !0,
                    get: function () {
                      return t.AnnotationEditorParamsType;
                    },
                  }),
                  Object.defineProperty(e, 'AnnotationEditorType', {
                    enumerable: !0,
                    get: function () {
                      return t.AnnotationEditorType;
                    },
                  }),
                  Object.defineProperty(e, 'AnnotationEditorUIManager', {
                    enumerable: !0,
                    get: function () {
                      return o.AnnotationEditorUIManager;
                    },
                  }),
                  Object.defineProperty(e, 'AnnotationLayer', {
                    enumerable: !0,
                    get: function () {
                      return a.AnnotationLayer;
                    },
                  }),
                  Object.defineProperty(e, 'AnnotationMode', {
                    enumerable: !0,
                    get: function () {
                      return t.AnnotationMode;
                    },
                  }),
                  Object.defineProperty(e, 'CMapCompressionType', {
                    enumerable: !0,
                    get: function () {
                      return t.CMapCompressionType;
                    },
                  }),
                  Object.defineProperty(e, 'GlobalWorkerOptions', {
                    enumerable: !0,
                    get: function () {
                      return s.GlobalWorkerOptions;
                    },
                  }),
                  Object.defineProperty(e, 'InvalidPDFException', {
                    enumerable: !0,
                    get: function () {
                      return t.InvalidPDFException;
                    },
                  }),
                  Object.defineProperty(e, 'LoopbackPort', {
                    enumerable: !0,
                    get: function () {
                      return n.LoopbackPort;
                    },
                  }),
                  Object.defineProperty(e, 'MissingPDFException', {
                    enumerable: !0,
                    get: function () {
                      return t.MissingPDFException;
                    },
                  }),
                  Object.defineProperty(e, 'OPS', {
                    enumerable: !0,
                    get: function () {
                      return t.OPS;
                    },
                  }),
                  Object.defineProperty(e, 'PDFDataRangeTransport', {
                    enumerable: !0,
                    get: function () {
                      return n.PDFDataRangeTransport;
                    },
                  }),
                  Object.defineProperty(e, 'PDFDateString', {
                    enumerable: !0,
                    get: function () {
                      return r.PDFDateString;
                    },
                  }),
                  Object.defineProperty(e, 'PDFWorker', {
                    enumerable: !0,
                    get: function () {
                      return n.PDFWorker;
                    },
                  }),
                  Object.defineProperty(e, 'PasswordResponses', {
                    enumerable: !0,
                    get: function () {
                      return t.PasswordResponses;
                    },
                  }),
                  Object.defineProperty(e, 'PermissionFlag', {
                    enumerable: !0,
                    get: function () {
                      return t.PermissionFlag;
                    },
                  }),
                  Object.defineProperty(e, 'PixelsPerInch', {
                    enumerable: !0,
                    get: function () {
                      return r.PixelsPerInch;
                    },
                  }),
                  Object.defineProperty(e, 'RenderingCancelledException', {
                    enumerable: !0,
                    get: function () {
                      return r.RenderingCancelledException;
                    },
                  }),
                  Object.defineProperty(e, 'SVGGraphics', {
                    enumerable: !0,
                    get: function () {
                      return h.SVGGraphics;
                    },
                  }),
                  Object.defineProperty(e, 'UNSUPPORTED_FEATURES', {
                    enumerable: !0,
                    get: function () {
                      return t.UNSUPPORTED_FEATURES;
                    },
                  }),
                  Object.defineProperty(e, 'UnexpectedResponseException', {
                    enumerable: !0,
                    get: function () {
                      return t.UnexpectedResponseException;
                    },
                  }),
                  Object.defineProperty(e, 'Util', {
                    enumerable: !0,
                    get: function () {
                      return t.Util;
                    },
                  }),
                  Object.defineProperty(e, 'VerbosityLevel', {
                    enumerable: !0,
                    get: function () {
                      return t.VerbosityLevel;
                    },
                  }),
                  Object.defineProperty(e, 'XfaLayer', {
                    enumerable: !0,
                    get: function () {
                      return u.XfaLayer;
                    },
                  }),
                  Object.defineProperty(e, 'build', {
                    enumerable: !0,
                    get: function () {
                      return n.build;
                    },
                  }),
                  Object.defineProperty(e, 'createPromiseCapability', {
                    enumerable: !0,
                    get: function () {
                      return t.createPromiseCapability;
                    },
                  }),
                  Object.defineProperty(e, 'createValidAbsoluteUrl', {
                    enumerable: !0,
                    get: function () {
                      return t.createValidAbsoluteUrl;
                    },
                  }),
                  Object.defineProperty(e, 'getDocument', {
                    enumerable: !0,
                    get: function () {
                      return n.getDocument;
                    },
                  }),
                  Object.defineProperty(e, 'getFilenameFromUrl', {
                    enumerable: !0,
                    get: function () {
                      return r.getFilenameFromUrl;
                    },
                  }),
                  Object.defineProperty(e, 'getPdfFilenameFromUrl', {
                    enumerable: !0,
                    get: function () {
                      return r.getPdfFilenameFromUrl;
                    },
                  }),
                  Object.defineProperty(e, 'getXfaPageViewport', {
                    enumerable: !0,
                    get: function () {
                      return r.getXfaPageViewport;
                    },
                  }),
                  Object.defineProperty(e, 'isPdfFile', {
                    enumerable: !0,
                    get: function () {
                      return r.isPdfFile;
                    },
                  }),
                  Object.defineProperty(e, 'loadScript', {
                    enumerable: !0,
                    get: function () {
                      return r.loadScript;
                    },
                  }),
                  Object.defineProperty(e, 'renderTextLayer', {
                    enumerable: !0,
                    get: function () {
                      return c.renderTextLayer;
                    },
                  }),
                  Object.defineProperty(e, 'shadow', {
                    enumerable: !0,
                    get: function () {
                      return t.shadow;
                    },
                  }),
                  Object.defineProperty(e, 'version', {
                    enumerable: !0,
                    get: function () {
                      return n.version;
                    },
                  });
                var t = __w_pdfjs_require__(1),
                  n = __w_pdfjs_require__(129),
                  r = __w_pdfjs_require__(133),
                  i = __w_pdfjs_require__(147),
                  o = __w_pdfjs_require__(132),
                  a = __w_pdfjs_require__(152),
                  s = __w_pdfjs_require__(140),
                  l = __w_pdfjs_require__(3),
                  c = __w_pdfjs_require__(155),
                  h = __w_pdfjs_require__(156),
                  u = __w_pdfjs_require__(154);
                if (l.isNodeJS) {
                  const { PDFNodeStream: e } = __w_pdfjs_require__(157);
                  (0, n.setPDFNetworkStreamFactory)((t) => new e(t));
                } else {
                  const { PDFNetworkStream: e } = __w_pdfjs_require__(160),
                    { PDFFetchStream: t } = __w_pdfjs_require__(161);
                  (0, n.setPDFNetworkStreamFactory)((n) =>
                    (0, r.isValidFetchUrl)(n.url) ? new t(n) : new e(n),
                  );
                }
              })(),
              __nested_webpack_exports__
            );
          })()),
        (module.exports = factory());
    },
    97950: function (e, t, n) {
      var r;
      globalThis,
        (r = () =>
          (() => {
            'use strict';
            var e = [
                ,
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.DefaultXfaLayerFactory =
                      t.DefaultTextLayerFactory =
                      t.DefaultStructTreeLayerFactory =
                      t.DefaultAnnotationLayerFactory =
                      t.DefaultAnnotationEditorLayerFactory =
                        void 0);
                  var r = n(2),
                    i = n(5),
                    o = n(4),
                    a = n(6),
                    s = n(8),
                    l = n(9),
                    c = n(10);
                  (t.DefaultAnnotationLayerFactory = class {
                    createAnnotationLayerBuilder(e) {
                      let {
                        pageDiv: t,
                        pdfPage: n,
                        annotationStorage: r = null,
                        imageResourcesPath: s = '',
                        renderForms: l = !0,
                        l10n: c = o.NullL10n,
                        enableScripting: h = !1,
                        hasJSActionsPromise: u = null,
                        mouseState: d = null,
                        fieldObjectsPromise: p = null,
                        annotationCanvasMap: f = null,
                        accessibilityManager: g = null,
                      } = e;
                      return new i.AnnotationLayerBuilder({
                        pageDiv: t,
                        pdfPage: n,
                        imageResourcesPath: s,
                        renderForms: l,
                        linkService: new a.SimpleLinkService(),
                        l10n: c,
                        annotationStorage: r,
                        enableScripting: h,
                        hasJSActionsPromise: u,
                        fieldObjectsPromise: p,
                        mouseState: d,
                        annotationCanvasMap: f,
                        accessibilityManager: g,
                      });
                    }
                  }),
                    (t.DefaultAnnotationEditorLayerFactory = class {
                      createAnnotationEditorLayerBuilder(e) {
                        let {
                          uiManager: t = null,
                          pageDiv: n,
                          pdfPage: i,
                          accessibilityManager: o = null,
                          l10n: a,
                          annotationStorage: s = null,
                        } = e;
                        return new r.AnnotationEditorLayerBuilder({
                          uiManager: t,
                          pageDiv: n,
                          pdfPage: i,
                          accessibilityManager: o,
                          l10n: a,
                          annotationStorage: s,
                        });
                      }
                    }),
                    (t.DefaultStructTreeLayerFactory = class {
                      createStructTreeLayerBuilder(e) {
                        let { pdfPage: t } = e;
                        return new s.StructTreeLayerBuilder({ pdfPage: t });
                      }
                    }),
                    (t.DefaultTextLayerFactory = class {
                      createTextLayerBuilder(e) {
                        let {
                          textLayerDiv: t,
                          pageIndex: n,
                          viewport: r,
                          enhanceTextSelection: i = !1,
                          eventBus: o,
                          highlighter: a,
                          accessibilityManager: s = null,
                        } = e;
                        return new l.TextLayerBuilder({
                          textLayerDiv: t,
                          pageIndex: n,
                          viewport: r,
                          enhanceTextSelection: i,
                          eventBus: o,
                          highlighter: a,
                          accessibilityManager: s,
                        });
                      }
                    }),
                    (t.DefaultXfaLayerFactory = class {
                      createXfaLayerBuilder(e) {
                        let {
                          pageDiv: t,
                          pdfPage: n,
                          annotationStorage: r = null,
                        } = e;
                        return new c.XfaLayerBuilder({
                          pageDiv: t,
                          pdfPage: n,
                          annotationStorage: r,
                          linkService: new a.SimpleLinkService(),
                        });
                      }
                    });
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.AnnotationEditorLayerBuilder = void 0);
                  var r = n(3),
                    i = n(4);
                  function o(e, t, n) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.set(e, n);
                  }
                  function a(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, s(e, t, 'set'), n),
                      n
                    );
                  }
                  function s(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var l = new WeakMap();
                  t.AnnotationEditorLayerBuilder = class {
                    constructor(e) {
                      o(this, l, { writable: !0, value: void 0 }),
                        (this.pageDiv = e.pageDiv),
                        (this.pdfPage = e.pdfPage),
                        (this.annotationStorage = e.annotationStorage || null),
                        (this.accessibilityManager = e.accessibilityManager),
                        (this.l10n = e.l10n || i.NullL10n),
                        (this.annotationEditorLayer = null),
                        (this.div = null),
                        (this._cancelled = !1),
                        a(this, l, e.uiManager);
                    }
                    async render(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : 'display';
                      if ('display' !== t) return;
                      if (this._cancelled) return;
                      const n = e.clone({ dontFlip: !0 });
                      if (this.div)
                        return (
                          this.annotationEditorLayer.update({ viewport: n }),
                          void this.show()
                        );
                      var i, o;
                      (this.div = document.createElement('div')),
                        (this.div.className = 'annotationEditorLayer'),
                        (this.div.tabIndex = 0),
                        this.pageDiv.append(this.div),
                        (this.annotationEditorLayer =
                          new r.AnnotationEditorLayer({
                            uiManager:
                              ((i = this),
                              (o = l),
                              (function (e, t) {
                                return t.get ? t.get.call(e) : t.value;
                              })(i, s(i, o, 'get'))),
                            div: this.div,
                            annotationStorage: this.annotationStorage,
                            accessibilityManager: this.accessibilityManager,
                            pageIndex: this.pdfPage._pageIndex,
                            l10n: this.l10n,
                            viewport: n,
                          }));
                      const a = {
                        viewport: n,
                        div: this.div,
                        annotations: null,
                        intent: t,
                      };
                      this.annotationEditorLayer.render(a);
                    }
                    cancel() {
                      (this._cancelled = !0), this.destroy();
                    }
                    hide() {
                      this.div && (this.div.hidden = !0);
                    }
                    show() {
                      this.div && (this.div.hidden = !1);
                    }
                    destroy() {
                      this.div &&
                        ((this.pageDiv = null),
                        this.annotationEditorLayer.destroy(),
                        this.div.remove());
                    }
                  };
                },
                (e) => {
                  let t;
                  (t =
                    'undefined' != typeof window &&
                    window['pdfjs-dist/build/pdf']
                      ? window['pdfjs-dist/build/pdf']
                      : n(66907)),
                    (e.exports = t);
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.NullL10n = void 0),
                    (t.fixupLangCode = function (e) {
                      return i[null == e ? void 0 : e.toLowerCase()] || e;
                    }),
                    (t.getL10nFallback = r);
                  const n = {
                    of_pages: 'of {{pagesCount}}',
                    page_of_pages: '({{pageNumber}} of {{pagesCount}})',
                    document_properties_kb: '{{size_kb}} KB ({{size_b}} bytes)',
                    document_properties_mb: '{{size_mb}} MB ({{size_b}} bytes)',
                    document_properties_date_string: '{{date}}, {{time}}',
                    document_properties_page_size_unit_inches: 'in',
                    document_properties_page_size_unit_millimeters: 'mm',
                    document_properties_page_size_orientation_portrait:
                      'portrait',
                    document_properties_page_size_orientation_landscape:
                      'landscape',
                    document_properties_page_size_name_a3: 'A3',
                    document_properties_page_size_name_a4: 'A4',
                    document_properties_page_size_name_letter: 'Letter',
                    document_properties_page_size_name_legal: 'Legal',
                    document_properties_page_size_dimension_string:
                      '{{width}} × {{height}} {{unit}} ({{orientation}})',
                    document_properties_page_size_dimension_name_string:
                      '{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})',
                    document_properties_linearized_yes: 'Yes',
                    document_properties_linearized_no: 'No',
                    print_progress_percent: '{{progress}}%',
                    'toggle_sidebar.title': 'Toggle Sidebar',
                    'toggle_sidebar_notification2.title':
                      'Toggle Sidebar (document contains outline/attachments/layers)',
                    additional_layers: 'Additional Layers',
                    page_landmark: 'Page {{page}}',
                    thumb_page_title: 'Page {{page}}',
                    thumb_page_canvas: 'Thumbnail of Page {{page}}',
                    find_reached_top:
                      'Reached top of document, continued from bottom',
                    find_reached_bottom:
                      'Reached end of document, continued from top',
                    'find_match_count[one]': '{{current}} of {{total}} match',
                    'find_match_count[other]':
                      '{{current}} of {{total}} matches',
                    'find_match_count_limit[one]': 'More than {{limit}} match',
                    'find_match_count_limit[other]':
                      'More than {{limit}} matches',
                    find_not_found: 'Phrase not found',
                    error_version_info:
                      'PDF.js v{{version}} (build: {{build}})',
                    error_message: 'Message: {{message}}',
                    error_stack: 'Stack: {{stack}}',
                    error_file: 'File: {{file}}',
                    error_line: 'Line: {{line}}',
                    rendering_error:
                      'An error occurred while rendering the page.',
                    page_scale_width: 'Page Width',
                    page_scale_fit: 'Page Fit',
                    page_scale_auto: 'Automatic Zoom',
                    page_scale_actual: 'Actual Size',
                    page_scale_percent: '{{scale}}%',
                    loading: 'Loading…',
                    loading_error: 'An error occurred while loading the PDF.',
                    invalid_file_error: 'Invalid or corrupted PDF file.',
                    missing_file_error: 'Missing PDF file.',
                    unexpected_response_error: 'Unexpected server response.',
                    printing_not_supported:
                      'Warning: Printing is not fully supported by this browser.',
                    printing_not_ready:
                      'Warning: The PDF is not fully loaded for printing.',
                    web_fonts_disabled:
                      'Web fonts are disabled: unable to use embedded PDF fonts.',
                    free_text_default_content: 'Enter text…',
                    editor_free_text_aria_label: 'FreeText Editor',
                    editor_ink_aria_label: 'Ink Editor',
                    editor_ink_canvas_aria_label: 'User-created image',
                  };
                  function r(e, t) {
                    switch (e) {
                      case 'find_match_count':
                        e = `find_match_count[${1 === t.total ? 'one' : 'other'}]`;
                        break;
                      case 'find_match_count_limit':
                        e = `find_match_count_limit[${1 === t.limit ? 'one' : 'other'}]`;
                    }
                    return n[e] || '';
                  }
                  const i = {
                      en: 'en-US',
                      es: 'es-ES',
                      fy: 'fy-NL',
                      ga: 'ga-IE',
                      gu: 'gu-IN',
                      hi: 'hi-IN',
                      hy: 'hy-AM',
                      nb: 'nb-NO',
                      ne: 'ne-NP',
                      nn: 'nn-NO',
                      pa: 'pa-IN',
                      pt: 'pt-PT',
                      sv: 'sv-SE',
                      zh: 'zh-CN',
                    },
                    o = {
                      async getLanguage() {
                        return 'en-us';
                      },
                      async getDirection() {
                        return 'ltr';
                      },
                      async get(e) {
                        let t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null;
                        return (function (e, t) {
                          return t
                            ? e.replace(/\{\{\s*(\w+)\s*\}\}/g, (e, n) =>
                                n in t ? t[n] : '{{' + n + '}}',
                              )
                            : e;
                        })(
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : r(e, t),
                          t,
                        );
                      },
                      async translate(e) {},
                    };
                  t.NullL10n = o;
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.AnnotationLayerBuilder = void 0);
                  var r = n(3),
                    i = n(4);
                  t.AnnotationLayerBuilder = class {
                    constructor(e) {
                      let {
                        pageDiv: t,
                        pdfPage: n,
                        linkService: r,
                        downloadManager: o,
                        annotationStorage: a = null,
                        imageResourcesPath: s = '',
                        renderForms: l = !0,
                        l10n: c = i.NullL10n,
                        enableScripting: h = !1,
                        hasJSActionsPromise: u = null,
                        fieldObjectsPromise: d = null,
                        mouseState: p = null,
                        annotationCanvasMap: f = null,
                        accessibilityManager: g = null,
                      } = e;
                      (this.pageDiv = t),
                        (this.pdfPage = n),
                        (this.linkService = r),
                        (this.downloadManager = o),
                        (this.imageResourcesPath = s),
                        (this.renderForms = l),
                        (this.l10n = c),
                        (this.annotationStorage = a),
                        (this.enableScripting = h),
                        (this._hasJSActionsPromise = u),
                        (this._fieldObjectsPromise = d),
                        (this._mouseState = p),
                        (this._annotationCanvasMap = f),
                        (this._accessibilityManager = g),
                        (this.div = null),
                        (this._cancelled = !1);
                    }
                    async render(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : 'display';
                      const [n, i = !1, o = null] = await Promise.all([
                        this.pdfPage.getAnnotations({ intent: t }),
                        this._hasJSActionsPromise,
                        this._fieldObjectsPromise,
                      ]);
                      if (this._cancelled || 0 === n.length) return;
                      const a = {
                        viewport: e.clone({ dontFlip: !0 }),
                        div: this.div,
                        annotations: n,
                        page: this.pdfPage,
                        imageResourcesPath: this.imageResourcesPath,
                        renderForms: this.renderForms,
                        linkService: this.linkService,
                        downloadManager: this.downloadManager,
                        annotationStorage: this.annotationStorage,
                        enableScripting: this.enableScripting,
                        hasJSActions: i,
                        fieldObjects: o,
                        mouseState: this._mouseState,
                        annotationCanvasMap: this._annotationCanvasMap,
                        accessibilityManager: this._accessibilityManager,
                      };
                      this.div
                        ? r.AnnotationLayer.update(a)
                        : ((this.div = document.createElement('div')),
                          (this.div.className = 'annotationLayer'),
                          this.pageDiv.append(this.div),
                          (a.div = this.div),
                          r.AnnotationLayer.render(a),
                          this.l10n.translate(this.div));
                    }
                    cancel() {
                      this._cancelled = !0;
                    }
                    hide() {
                      this.div && (this.div.hidden = !0);
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.SimpleLinkService =
                      t.PDFLinkService =
                      t.LinkTarget =
                        void 0);
                  var r = n(7);
                  function i(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function o(e, t, n) {
                    return (
                      (function (e, t) {
                        if (e !== t)
                          throw new TypeError(
                            'Private static access of wrong provenance',
                          );
                      })(e, t),
                      n
                    );
                  }
                  function a(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function s(e, t) {
                    var n = (function (e, t, n) {
                      if (!t.has(e))
                        throw new TypeError(
                          'attempted to ' +
                            n +
                            ' private field on non-instance',
                        );
                      return t.get(e);
                    })(e, t, 'get');
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, n);
                  }
                  const l = { NONE: 0, SELF: 1, BLANK: 2, PARENT: 3, TOP: 4 };
                  function c(e) {
                    let {
                      url: t,
                      target: n,
                      rel: i,
                      enabled: o = !0,
                    } = arguments.length > 1 && void 0 !== arguments[1]
                      ? arguments[1]
                      : {};
                    if (!t || 'string' != typeof t)
                      throw new Error('A valid "url" parameter must provided.');
                    const a = (0, r.removeNullCharacters)(t);
                    o
                      ? (e.href = e.title = a)
                      : ((e.href = ''),
                        (e.title = `Disabled: ${a}`),
                        (e.onclick = () => !1));
                    let s = '';
                    switch (n) {
                      case l.NONE:
                        break;
                      case l.SELF:
                        s = '_self';
                        break;
                      case l.BLANK:
                        s = '_blank';
                        break;
                      case l.PARENT:
                        s = '_parent';
                        break;
                      case l.TOP:
                        s = '_top';
                    }
                    (e.target = s),
                      (e.rel =
                        'string' == typeof i
                          ? i
                          : 'noopener noreferrer nofollow');
                  }
                  t.LinkTarget = l;
                  var h = new WeakMap(),
                    u = new WeakSet();
                  class d {
                    constructor() {
                      let {
                        eventBus: e,
                        externalLinkTarget: t = null,
                        externalLinkRel: n = null,
                        ignoreDestinationZoom: r = !1,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      var o, a;
                      i((o = this), (a = u)),
                        a.add(o),
                        (function (e, t, n) {
                          i(e, t), t.set(e, n);
                        })(this, h, { writable: !0, value: new Map() }),
                        (this.eventBus = e),
                        (this.externalLinkTarget = t),
                        (this.externalLinkRel = n),
                        (this.externalLinkEnabled = !0),
                        (this._ignoreDestinationZoom = r),
                        (this.baseUrl = null),
                        (this.pdfDocument = null),
                        (this.pdfViewer = null),
                        (this.pdfHistory = null);
                    }
                    setDocument(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      (this.baseUrl = t),
                        (this.pdfDocument = e),
                        s(this, h).clear();
                    }
                    setViewer(e) {
                      this.pdfViewer = e;
                    }
                    setHistory(e) {
                      this.pdfHistory = e;
                    }
                    get pagesCount() {
                      return this.pdfDocument ? this.pdfDocument.numPages : 0;
                    }
                    get page() {
                      return this.pdfViewer.currentPageNumber;
                    }
                    set page(e) {
                      this.pdfViewer.currentPageNumber = e;
                    }
                    get rotation() {
                      return this.pdfViewer.pagesRotation;
                    }
                    set rotation(e) {
                      this.pdfViewer.pagesRotation = e;
                    }
                    async goToDestination(e) {
                      if (!this.pdfDocument) return;
                      let t, n;
                      'string' == typeof e
                        ? ((t = e),
                          (n = await this.pdfDocument.getDestination(e)))
                        : ((t = null), (n = await e)),
                        Array.isArray(n)
                          ? a(this, u, p).call(this, e, t, n)
                          : console.error(
                              `PDFLinkService.goToDestination: "${n}" is not a valid destination array, for dest="${e}".`,
                            );
                    }
                    goToPage(e) {
                      if (!this.pdfDocument) return;
                      const t =
                        ('string' == typeof e &&
                          this.pdfViewer.pageLabelToPageNumber(e)) ||
                        0 | e;
                      Number.isInteger(t) && t > 0 && t <= this.pagesCount
                        ? (this.pdfHistory &&
                            (this.pdfHistory.pushCurrentPosition(),
                            this.pdfHistory.pushPage(t)),
                          this.pdfViewer.scrollPageIntoView({ pageNumber: t }))
                        : console.error(
                            `PDFLinkService.goToPage: "${e}" is not a valid page.`,
                          );
                    }
                    addLinkAttributes(e, t) {
                      c(e, {
                        url: t,
                        target:
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2]
                            ? l.BLANK
                            : this.externalLinkTarget,
                        rel: this.externalLinkRel,
                        enabled: this.externalLinkEnabled,
                      });
                    }
                    getDestinationHash(e) {
                      if ('string' == typeof e) {
                        if (e.length > 0)
                          return this.getAnchorUrl('#' + escape(e));
                      } else if (Array.isArray(e)) {
                        const t = JSON.stringify(e);
                        if (t.length > 0)
                          return this.getAnchorUrl('#' + escape(t));
                      }
                      return this.getAnchorUrl('');
                    }
                    getAnchorUrl(e) {
                      return (this.baseUrl || '') + e;
                    }
                    setHash(e) {
                      if (!this.pdfDocument) return;
                      let t, n;
                      if (e.includes('=')) {
                        const i = (0, r.parseQueryString)(e);
                        if (
                          (i.has('search') &&
                            this.eventBus.dispatch('findfromurlhash', {
                              source: this,
                              query: i.get('search').replace(/"/g, ''),
                              phraseSearch: 'true' === i.get('phrase'),
                            }),
                          i.has('page') && (t = 0 | i.get('page') || 1),
                          i.has('zoom'))
                        ) {
                          const e = i.get('zoom').split(','),
                            t = e[0],
                            r = parseFloat(t);
                          t.includes('Fit')
                            ? 'Fit' === t || 'FitB' === t
                              ? (n = [null, { name: t }])
                              : 'FitH' === t ||
                                  'FitBH' === t ||
                                  'FitV' === t ||
                                  'FitBV' === t
                                ? (n = [
                                    null,
                                    { name: t },
                                    e.length > 1 ? 0 | e[1] : null,
                                  ])
                                : 'FitR' === t
                                  ? 5 !== e.length
                                    ? console.error(
                                        'PDFLinkService.setHash: Not enough parameters for "FitR".',
                                      )
                                    : (n = [
                                        null,
                                        { name: t },
                                        0 | e[1],
                                        0 | e[2],
                                        0 | e[3],
                                        0 | e[4],
                                      ])
                                  : console.error(
                                      `PDFLinkService.setHash: "${t}" is not a valid zoom value.`,
                                    )
                            : (n = [
                                null,
                                { name: 'XYZ' },
                                e.length > 1 ? 0 | e[1] : null,
                                e.length > 2 ? 0 | e[2] : null,
                                r ? r / 100 : t,
                              ]);
                        }
                        n
                          ? this.pdfViewer.scrollPageIntoView({
                              pageNumber: t || this.page,
                              destArray: n,
                              allowNegativeOffset: !0,
                            })
                          : t && (this.page = t),
                          i.has('pagemode') &&
                            this.eventBus.dispatch('pagemode', {
                              source: this,
                              mode: i.get('pagemode'),
                            }),
                          i.has('nameddest') &&
                            this.goToDestination(i.get('nameddest'));
                      } else {
                        n = unescape(e);
                        try {
                          (n = JSON.parse(n)),
                            Array.isArray(n) || (n = n.toString());
                        } catch (e) {}
                        if ('string' == typeof n || o(d, d, f).call(d, n))
                          return void this.goToDestination(n);
                        console.error(
                          `PDFLinkService.setHash: "${unescape(e)}" is not a valid destination.`,
                        );
                      }
                    }
                    executeNamedAction(e) {
                      var t, n;
                      switch (e) {
                        case 'GoBack':
                          null === (t = this.pdfHistory) ||
                            void 0 === t ||
                            t.back();
                          break;
                        case 'GoForward':
                          null === (n = this.pdfHistory) ||
                            void 0 === n ||
                            n.forward();
                          break;
                        case 'NextPage':
                          this.pdfViewer.nextPage();
                          break;
                        case 'PrevPage':
                          this.pdfViewer.previousPage();
                          break;
                        case 'LastPage':
                          this.page = this.pagesCount;
                          break;
                        case 'FirstPage':
                          this.page = 1;
                      }
                      this.eventBus.dispatch('namedaction', {
                        source: this,
                        action: e,
                      });
                    }
                    cachePageRef(e, t) {
                      if (!t) return;
                      const n = 0 === t.gen ? `${t.num}R` : `${t.num}R${t.gen}`;
                      s(this, h).set(n, e);
                    }
                    _cachedPageNumber(e) {
                      if (!e) return null;
                      const t = 0 === e.gen ? `${e.num}R` : `${e.num}R${e.gen}`;
                      return s(this, h).get(t) || null;
                    }
                    isPageVisible(e) {
                      return this.pdfViewer.isPageVisible(e);
                    }
                    isPageCached(e) {
                      return this.pdfViewer.isPageCached(e);
                    }
                  }
                  function p(e) {
                    let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null,
                      n = arguments.length > 2 ? arguments[2] : void 0;
                    const r = n[0];
                    let i;
                    if ('object' == typeof r && null !== r) {
                      if (((i = this._cachedPageNumber(r)), !i))
                        return void this.pdfDocument
                          .getPageIndex(r)
                          .then((i) => {
                            this.cachePageRef(i + 1, r),
                              a(this, u, p).call(this, e, t, n);
                          })
                          .catch(() => {
                            console.error(
                              `PDFLinkService.#goToDestinationHelper: "${r}" is not a valid page reference, for dest="${e}".`,
                            );
                          });
                    } else {
                      if (!Number.isInteger(r))
                        return void console.error(
                          `PDFLinkService.#goToDestinationHelper: "${r}" is not a valid destination reference, for dest="${e}".`,
                        );
                      i = r + 1;
                    }
                    !i || i < 1 || i > this.pagesCount
                      ? console.error(
                          `PDFLinkService.#goToDestinationHelper: "${i}" is not a valid page number, for dest="${e}".`,
                        )
                      : (this.pdfHistory &&
                          (this.pdfHistory.pushCurrentPosition(),
                          this.pdfHistory.push({
                            namedDest: t,
                            explicitDest: n,
                            pageNumber: i,
                          })),
                        this.pdfViewer.scrollPageIntoView({
                          pageNumber: i,
                          destArray: n,
                          ignoreDestinationZoom: this._ignoreDestinationZoom,
                        }));
                  }
                  function f(e) {
                    if (!Array.isArray(e)) return !1;
                    const t = e.length;
                    if (t < 2) return !1;
                    const n = e[0];
                    if (
                      !(
                        ('object' == typeof n &&
                          Number.isInteger(n.num) &&
                          Number.isInteger(n.gen)) ||
                        (Number.isInteger(n) && n >= 0)
                      )
                    )
                      return !1;
                    const r = e[1];
                    if ('object' != typeof r || 'string' != typeof r.name)
                      return !1;
                    let i = !0;
                    switch (r.name) {
                      case 'XYZ':
                        if (5 !== t) return !1;
                        break;
                      case 'Fit':
                      case 'FitB':
                        return 2 === t;
                      case 'FitH':
                      case 'FitBH':
                      case 'FitV':
                      case 'FitBV':
                        if (3 !== t) return !1;
                        break;
                      case 'FitR':
                        if (6 !== t) return !1;
                        i = !1;
                        break;
                      default:
                        return !1;
                    }
                    for (let n = 2; n < t; n++) {
                      const t = e[n];
                      if (!('number' == typeof t || (i && null === t)))
                        return !1;
                    }
                    return !0;
                  }
                  (t.PDFLinkService = d),
                    (t.SimpleLinkService = class {
                      constructor() {
                        this.externalLinkEnabled = !0;
                      }
                      get pagesCount() {
                        return 0;
                      }
                      get page() {
                        return 0;
                      }
                      set page(e) {}
                      get rotation() {
                        return 0;
                      }
                      set rotation(e) {}
                      async goToDestination(e) {}
                      goToPage(e) {}
                      addLinkAttributes(e, t) {
                        c(e, { url: t, enabled: this.externalLinkEnabled });
                      }
                      getDestinationHash(e) {
                        return '#';
                      }
                      getAnchorUrl(e) {
                        return '#';
                      }
                      setHash(e) {}
                      executeNamedAction(e) {}
                      cachePageRef(e, t) {}
                      isPageVisible(e) {
                        return !0;
                      }
                      isPageCached(e) {
                        return !0;
                      }
                    });
                },
                (e, t) => {
                  function n(e, t, n) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.set(e, n);
                  }
                  function r(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, o(e, t, 'get'));
                  }
                  function i(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, o(e, t, 'set'), n),
                      n
                    );
                  }
                  function o(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.animationStarted =
                      t.VERTICAL_PADDING =
                      t.UNKNOWN_SCALE =
                      t.TextLayerMode =
                      t.SpreadMode =
                      t.SidebarView =
                      t.ScrollMode =
                      t.SCROLLBAR_PADDING =
                      t.RenderingStates =
                      t.RendererType =
                      t.ProgressBar =
                      t.PresentationModeState =
                      t.OutputScale =
                      t.MIN_SCALE =
                      t.MAX_SCALE =
                      t.MAX_AUTO_SCALE =
                      t.DEFAULT_SCALE_VALUE =
                      t.DEFAULT_SCALE_DELTA =
                      t.DEFAULT_SCALE =
                      t.AutoPrintRegExp =
                        void 0),
                    (t.apiPageLayoutToViewerModes = function (e) {
                      let t = s.VERTICAL,
                        n = l.NONE;
                      switch (e) {
                        case 'SinglePage':
                          t = s.PAGE;
                          break;
                        case 'OneColumn':
                          break;
                        case 'TwoPageLeft':
                          t = s.PAGE;
                        case 'TwoColumnLeft':
                          n = l.ODD;
                          break;
                        case 'TwoPageRight':
                          t = s.PAGE;
                        case 'TwoColumnRight':
                          n = l.EVEN;
                      }
                      return { scrollMode: t, spreadMode: n };
                    }),
                    (t.apiPageModeToSidebarView = function (e) {
                      switch (e) {
                        case 'UseNone':
                          return a.NONE;
                        case 'UseThumbs':
                          return a.THUMBS;
                        case 'UseOutlines':
                          return a.OUTLINE;
                        case 'UseAttachments':
                          return a.ATTACHMENTS;
                        case 'UseOC':
                          return a.LAYERS;
                      }
                      return a.NONE;
                    }),
                    (t.approximateFraction = function (e) {
                      if (Math.floor(e) === e) return [e, 1];
                      const t = 1 / e;
                      if (t > 8) return [1, 8];
                      if (Math.floor(t) === t) return [1, t];
                      const n = e > 1 ? t : e;
                      let r,
                        i = 0,
                        o = 1,
                        a = 1,
                        s = 1;
                      for (;;) {
                        const e = i + a,
                          t = o + s;
                        if (t > 8) break;
                        n <= e / t ? ((a = e), (s = t)) : ((i = e), (o = t));
                      }
                      return (
                        (r =
                          n - i / o < a / s - n
                            ? n === e
                              ? [i, o]
                              : [o, i]
                            : n === e
                              ? [a, s]
                              : [s, a]),
                        r
                      );
                    }),
                    (t.backtrackBeforeAllVisibleElements = d),
                    (t.binarySearchFirstItem = u),
                    (t.docStyle = void 0),
                    (t.getActiveOrFocusedElement = function () {
                      let e = document,
                        t = e.activeElement || e.querySelector(':focus');
                      for (
                        ;
                        null !== (n = t) && void 0 !== n && n.shadowRoot;

                      ) {
                        var n;
                        (e = t.shadowRoot),
                          (t = e.activeElement || e.querySelector(':focus'));
                      }
                      return t;
                    }),
                    (t.getPageSizeInches = function (e) {
                      let { view: t, userUnit: n, rotate: r } = e;
                      const [i, o, a, s] = t,
                        l = r % 180 != 0,
                        c = ((a - i) / 72) * n,
                        h = ((s - o) / 72) * n;
                      return { width: l ? h : c, height: l ? c : h };
                    }),
                    (t.getVisibleElements = function (e) {
                      let {
                        scrollEl: t,
                        views: n,
                        sortByVisibility: r = !1,
                        horizontal: i = !1,
                        rtl: o = !1,
                      } = e;
                      const a = t.scrollTop,
                        s = a + t.clientHeight,
                        l = t.scrollLeft,
                        c = l + t.clientWidth,
                        h = [],
                        p = new Set(),
                        f = n.length;
                      let g = u(
                        n,
                        i
                          ? function (e) {
                              const t = e.div,
                                n = t.offsetLeft + t.clientLeft,
                                r = n + t.clientWidth;
                              return o ? n < c : r > l;
                            }
                          : function (e) {
                              const t = e.div;
                              return (
                                t.offsetTop + t.clientTop + t.clientHeight > a
                              );
                            },
                      );
                      g > 0 && g < f && !i && (g = d(g, n, a));
                      let m = i ? c : -1;
                      for (let e = g; e < f; e++) {
                        const t = n[e],
                          r = t.div,
                          o = r.offsetLeft + r.clientLeft,
                          u = r.offsetTop + r.clientTop,
                          d = r.clientWidth,
                          f = r.clientHeight,
                          g = o + d,
                          v = u + f;
                        if (-1 === m) v >= s && (m = v);
                        else if ((i ? o : u) > m) break;
                        if (v <= a || u >= s || g <= l || o >= c) continue;
                        const b = Math.max(0, a - u) + Math.max(0, v - s),
                          y =
                            (d - (Math.max(0, l - o) + Math.max(0, g - c))) / d,
                          _ = (((f - b) / f) * y * 100) | 0;
                        h.push({
                          id: t.id,
                          x: o,
                          y: u,
                          view: t,
                          percent: _,
                          widthPercent: (100 * y) | 0,
                        }),
                          p.add(t.id);
                      }
                      const v = h[0],
                        b = h.at(-1);
                      return (
                        r &&
                          h.sort(function (e, t) {
                            const n = e.percent - t.percent;
                            return Math.abs(n) > 0.001 ? -n : e.id - t.id;
                          }),
                        { first: v, last: b, views: h, ids: p }
                      );
                    }),
                    (t.isPortraitOrientation = function (e) {
                      return e.width <= e.height;
                    }),
                    (t.isValidRotation = function (e) {
                      return Number.isInteger(e) && e % 90 == 0;
                    }),
                    (t.isValidScrollMode = function (e) {
                      return (
                        Number.isInteger(e) &&
                        Object.values(s).includes(e) &&
                        e !== s.UNKNOWN
                      );
                    }),
                    (t.isValidSpreadMode = function (e) {
                      return (
                        Number.isInteger(e) &&
                        Object.values(l).includes(e) &&
                        e !== l.UNKNOWN
                      );
                    }),
                    (t.noContextMenuHandler = function (e) {
                      e.preventDefault();
                    }),
                    (t.normalizeWheelEventDelta = function (e) {
                      let t = p(e);
                      return (
                        0 === e.deltaMode
                          ? (t /= 900)
                          : 1 === e.deltaMode && (t /= 30),
                        t
                      );
                    }),
                    (t.normalizeWheelEventDirection = p),
                    (t.parseQueryString = function (e) {
                      const t = new Map();
                      for (const [n, r] of new URLSearchParams(e))
                        t.set(n.toLowerCase(), r);
                      return t;
                    }),
                    (t.removeNullCharacters = function (e) {
                      let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      return 'string' != typeof e
                        ? (console.error('The argument must be a string.'), e)
                        : (t && (e = e.replace(h, ' ')), e.replace(c, ''));
                    }),
                    (t.roundToDivide = function (e, t) {
                      const n = e % t;
                      return 0 === n ? e : Math.round(e - n + t);
                    }),
                    (t.scrollIntoView = function (e, t) {
                      let n =
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2],
                        r = e.offsetParent;
                      if (!r)
                        return void console.error(
                          'offsetParent is not set -- cannot scroll',
                        );
                      let i = e.offsetTop + e.clientTop,
                        o = e.offsetLeft + e.clientLeft;
                      for (
                        ;
                        (r.clientHeight === r.scrollHeight &&
                          r.clientWidth === r.scrollWidth) ||
                        (n &&
                          (r.classList.contains('markedContent') ||
                            'hidden' === getComputedStyle(r).overflow));

                      )
                        if (
                          ((i += r.offsetTop),
                          (o += r.offsetLeft),
                          (r = r.offsetParent),
                          !r)
                        )
                          return;
                      t &&
                        (void 0 !== t.top && (i += t.top),
                        void 0 !== t.left &&
                          ((o += t.left), (r.scrollLeft = o))),
                        (r.scrollTop = i);
                    }),
                    (t.watchScroll = function (e, t) {
                      const n = function (n) {
                          i ||
                            (i = window.requestAnimationFrame(function () {
                              i = null;
                              const n = e.scrollLeft,
                                o = r.lastX;
                              n !== o && (r.right = n > o), (r.lastX = n);
                              const a = e.scrollTop,
                                s = r.lastY;
                              a !== s && (r.down = a > s), (r.lastY = a), t(r);
                            }));
                        },
                        r = {
                          right: !0,
                          down: !0,
                          lastX: e.scrollLeft,
                          lastY: e.scrollTop,
                          _eventHandler: n,
                        };
                      let i = null;
                      return e.addEventListener('scroll', n, !0), r;
                    }),
                    (t.DEFAULT_SCALE_VALUE = 'auto'),
                    (t.DEFAULT_SCALE = 1),
                    (t.DEFAULT_SCALE_DELTA = 1.1),
                    (t.MIN_SCALE = 0.1),
                    (t.MAX_SCALE = 10),
                    (t.UNKNOWN_SCALE = 0),
                    (t.MAX_AUTO_SCALE = 1.25),
                    (t.SCROLLBAR_PADDING = 40),
                    (t.VERTICAL_PADDING = 5),
                    (t.RenderingStates = {
                      INITIAL: 0,
                      RUNNING: 1,
                      PAUSED: 2,
                      FINISHED: 3,
                    }),
                    (t.PresentationModeState = {
                      UNKNOWN: 0,
                      NORMAL: 1,
                      CHANGING: 2,
                      FULLSCREEN: 3,
                    });
                  const a = {
                    UNKNOWN: -1,
                    NONE: 0,
                    THUMBS: 1,
                    OUTLINE: 2,
                    ATTACHMENTS: 3,
                    LAYERS: 4,
                  };
                  (t.SidebarView = a),
                    (t.RendererType = { CANVAS: 'canvas', SVG: 'svg' }),
                    (t.TextLayerMode = {
                      DISABLE: 0,
                      ENABLE: 1,
                      ENABLE_ENHANCE: 2,
                    });
                  const s = {
                    UNKNOWN: -1,
                    VERTICAL: 0,
                    HORIZONTAL: 1,
                    WRAPPED: 2,
                    PAGE: 3,
                  };
                  t.ScrollMode = s;
                  const l = { UNKNOWN: -1, NONE: 0, ODD: 1, EVEN: 2 };
                  (t.SpreadMode = l),
                    (t.AutoPrintRegExp = /\bprint\s*\(/),
                    (t.OutputScale = class {
                      constructor() {
                        const e = window.devicePixelRatio || 1;
                        (this.sx = e), (this.sy = e);
                      }
                      get scaled() {
                        return 1 !== this.sx || 1 !== this.sy;
                      }
                    });
                  const c = /\x00/g,
                    h = /[\x01-\x1F]/g;
                  function u(e, t) {
                    let n =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : 0,
                      r = e.length - 1;
                    if (r < 0 || !t(e[r])) return e.length;
                    if (t(e[n])) return n;
                    for (; n < r; ) {
                      const i = (n + r) >> 1;
                      t(e[i]) ? (r = i) : (n = i + 1);
                    }
                    return n;
                  }
                  function d(e, t, n) {
                    if (e < 2) return e;
                    let r = t[e].div,
                      i = r.offsetTop + r.clientTop;
                    i >= n &&
                      ((r = t[e - 1].div), (i = r.offsetTop + r.clientTop));
                    for (
                      let n = e - 2;
                      n >= 0 &&
                      ((r = t[n].div),
                      !(r.offsetTop + r.clientTop + r.clientHeight <= i));
                      --n
                    )
                      e = n;
                    return e;
                  }
                  function p(e) {
                    let t = Math.hypot(e.deltaX, e.deltaY);
                    const n = Math.atan2(e.deltaY, e.deltaX);
                    return (
                      -0.25 * Math.PI < n && n < 0.75 * Math.PI && (t = -t), t
                    );
                  }
                  const f = new Promise(function (e) {
                    window.requestAnimationFrame(e);
                  });
                  t.animationStarted = f;
                  const g = document.documentElement.style;
                  t.docStyle = g;
                  var m = new WeakMap(),
                    v = new WeakMap(),
                    b = new WeakMap();
                  t.ProgressBar = class {
                    constructor(e) {
                      if (
                        (n(this, m, { writable: !0, value: null }),
                        n(this, v, { writable: !0, value: 0 }),
                        n(this, b, { writable: !0, value: !0 }),
                        arguments.length > 1)
                      )
                        throw new Error(
                          'ProgressBar no longer accepts any additional options, please use CSS rules to modify its appearance instead.',
                        );
                      const t = document.getElementById(e);
                      i(this, m, t.classList);
                    }
                    get percent() {
                      return r(this, v);
                    }
                    set percent(e) {
                      var t, n, o;
                      i(
                        this,
                        v,
                        ((t = e),
                        (n = 0),
                        (o = 100),
                        Math.min(Math.max(t, n), o)),
                      ),
                        isNaN(e)
                          ? r(this, m).add('indeterminate')
                          : (r(this, m).remove('indeterminate'),
                            g.setProperty(
                              '--progressBar-percent',
                              `${r(this, v)}%`,
                            ));
                    }
                    setWidth(e) {
                      if (!e) return;
                      const t = e.parentNode.offsetWidth - e.offsetWidth;
                      t > 0 &&
                        g.setProperty('--progressBar-end-offset', `${t}px`);
                    }
                    hide() {
                      r(this, b) && (i(this, b, !1), r(this, m).add('hidden'));
                    }
                    show() {
                      r(this, b) ||
                        (i(this, b, !0), r(this, m).remove('hidden'));
                    }
                  };
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.StructTreeLayerBuilder = void 0);
                  const n = {
                      Document: null,
                      DocumentFragment: null,
                      Part: 'group',
                      Sect: 'group',
                      Div: 'group',
                      Aside: 'note',
                      NonStruct: 'none',
                      P: null,
                      H: 'heading',
                      Title: null,
                      FENote: 'note',
                      Sub: 'group',
                      Lbl: null,
                      Span: null,
                      Em: null,
                      Strong: null,
                      Link: 'link',
                      Annot: 'note',
                      Form: 'form',
                      Ruby: null,
                      RB: null,
                      RT: null,
                      RP: null,
                      Warichu: null,
                      WT: null,
                      WP: null,
                      L: 'list',
                      LI: 'listitem',
                      LBody: null,
                      Table: 'table',
                      TR: 'row',
                      TH: 'columnheader',
                      TD: 'cell',
                      THead: 'columnheader',
                      TBody: null,
                      TFoot: null,
                      Caption: null,
                      Figure: 'figure',
                      Formula: null,
                      Artifact: null,
                    },
                    r = /^H(\d+)$/;
                  t.StructTreeLayerBuilder = class {
                    constructor(e) {
                      let { pdfPage: t } = e;
                      this.pdfPage = t;
                    }
                    render(e) {
                      return this._walk(e);
                    }
                    _setAttributes(e, t) {
                      void 0 !== e.alt && t.setAttribute('aria-label', e.alt),
                        void 0 !== e.id && t.setAttribute('aria-owns', e.id),
                        void 0 !== e.lang && t.setAttribute('lang', e.lang);
                    }
                    _walk(e) {
                      if (!e) return null;
                      const t = document.createElement('span');
                      if ('role' in e) {
                        const { role: i } = e,
                          o = i.match(r);
                        o
                          ? (t.setAttribute('role', 'heading'),
                            t.setAttribute('aria-level', o[1]))
                          : n[i] && t.setAttribute('role', n[i]);
                      }
                      if ((this._setAttributes(e, t), e.children))
                        if (1 === e.children.length && 'id' in e.children[0])
                          this._setAttributes(e.children[0], t);
                        else
                          for (const n of e.children) t.append(this._walk(n));
                      return t;
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.TextLayerBuilder = void 0);
                  var r = n(3);
                  t.TextLayerBuilder = class {
                    constructor(e) {
                      let {
                        textLayerDiv: t,
                        eventBus: n,
                        pageIndex: r,
                        viewport: i,
                        highlighter: o = null,
                        enhanceTextSelection: a = !1,
                        accessibilityManager: s = null,
                      } = e;
                      (this.textLayerDiv = t),
                        (this.eventBus = n),
                        (this.textContent = null),
                        (this.textContentItemsStr = []),
                        (this.textContentStream = null),
                        (this.renderingDone = !1),
                        (this.pageNumber = r + 1),
                        (this.viewport = i),
                        (this.textDivs = []),
                        (this.textLayerRenderTask = null),
                        (this.highlighter = o),
                        (this.enhanceTextSelection = a),
                        (this.accessibilityManager = s),
                        this._bindMouse();
                    }
                    _finishRendering() {
                      if (
                        ((this.renderingDone = !0), !this.enhanceTextSelection)
                      ) {
                        const e = document.createElement('div');
                        (e.className = 'endOfContent'),
                          this.textLayerDiv.append(e);
                      }
                      this.eventBus.dispatch('textlayerrendered', {
                        source: this,
                        pageNumber: this.pageNumber,
                        numTextDivs: this.textDivs.length,
                      });
                    }
                    render() {
                      var e, t;
                      let n =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : 0;
                      if (
                        (!this.textContent && !this.textContentStream) ||
                        this.renderingDone
                      )
                        return;
                      this.cancel(),
                        (this.textDivs.length = 0),
                        null === (e = this.highlighter) ||
                          void 0 === e ||
                          e.setTextMapping(
                            this.textDivs,
                            this.textContentItemsStr,
                          ),
                        null === (t = this.accessibilityManager) ||
                          void 0 === t ||
                          t.setTextMapping(this.textDivs);
                      const i = document.createDocumentFragment();
                      (this.textLayerRenderTask = (0, r.renderTextLayer)({
                        textContent: this.textContent,
                        textContentStream: this.textContentStream,
                        container: i,
                        viewport: this.viewport,
                        textDivs: this.textDivs,
                        textContentItemsStr: this.textContentItemsStr,
                        timeout: n,
                        enhanceTextSelection: this.enhanceTextSelection,
                      })),
                        this.textLayerRenderTask.promise.then(
                          () => {
                            var e, t;
                            this.textLayerDiv.append(i),
                              this._finishRendering(),
                              null === (e = this.highlighter) ||
                                void 0 === e ||
                                e.enable(),
                              null === (t = this.accessibilityManager) ||
                                void 0 === t ||
                                t.enable();
                          },
                          function (e) {},
                        );
                    }
                    cancel() {
                      var e, t;
                      this.textLayerRenderTask &&
                        (this.textLayerRenderTask.cancel(),
                        (this.textLayerRenderTask = null)),
                        null === (e = this.highlighter) ||
                          void 0 === e ||
                          e.disable(),
                        null === (t = this.accessibilityManager) ||
                          void 0 === t ||
                          t.disable();
                    }
                    setTextContentStream(e) {
                      this.cancel(), (this.textContentStream = e);
                    }
                    setTextContent(e) {
                      this.cancel(), (this.textContent = e);
                    }
                    _bindMouse() {
                      const e = this.textLayerDiv;
                      let t = null;
                      e.addEventListener('mousedown', (n) => {
                        if (
                          this.enhanceTextSelection &&
                          this.textLayerRenderTask
                        )
                          return (
                            this.textLayerRenderTask.expandTextDivs(!0),
                            void (t && (clearTimeout(t), (t = null)))
                          );
                        const r = e.querySelector('.endOfContent');
                        if (!r) return;
                        let i = n.target !== e;
                        if (
                          ((i =
                            i &&
                            'none' !==
                              window
                                .getComputedStyle(r)
                                .getPropertyValue('-moz-user-select')),
                          i)
                        ) {
                          const t = e.getBoundingClientRect(),
                            i = Math.max(0, (n.pageY - t.top) / t.height);
                          r.style.top = (100 * i).toFixed(2) + '%';
                        }
                        r.classList.add('active');
                      }),
                        e.addEventListener('mouseup', () => {
                          if (
                            this.enhanceTextSelection &&
                            this.textLayerRenderTask
                          )
                            return void (t = setTimeout(() => {
                              this.textLayerRenderTask &&
                                this.textLayerRenderTask.expandTextDivs(!1),
                                (t = null);
                            }, 300));
                          const n = e.querySelector('.endOfContent');
                          n &&
                            ((n.style.top = ''), n.classList.remove('active'));
                        });
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.XfaLayerBuilder = void 0);
                  var r = n(3);
                  t.XfaLayerBuilder = class {
                    constructor(e) {
                      let {
                        pageDiv: t,
                        pdfPage: n,
                        annotationStorage: r = null,
                        linkService: i,
                        xfaHtml: o = null,
                      } = e;
                      (this.pageDiv = t),
                        (this.pdfPage = n),
                        (this.annotationStorage = r),
                        (this.linkService = i),
                        (this.xfaHtml = o),
                        (this.div = null),
                        (this._cancelled = !1);
                    }
                    render(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : 'display';
                      if ('print' === t) {
                        const n = {
                            viewport: e.clone({ dontFlip: !0 }),
                            div: this.div,
                            xfaHtml: this.xfaHtml,
                            annotationStorage: this.annotationStorage,
                            linkService: this.linkService,
                            intent: t,
                          },
                          i = document.createElement('div');
                        this.pageDiv.append(i), (n.div = i);
                        const o = r.XfaLayer.render(n);
                        return Promise.resolve(o);
                      }
                      return this.pdfPage
                        .getXfa()
                        .then((n) => {
                          if (this._cancelled || !n) return { textDivs: [] };
                          const i = {
                            viewport: e.clone({ dontFlip: !0 }),
                            div: this.div,
                            xfaHtml: n,
                            annotationStorage: this.annotationStorage,
                            linkService: this.linkService,
                            intent: t,
                          };
                          return this.div
                            ? r.XfaLayer.update(i)
                            : ((this.div = document.createElement('div')),
                              this.pageDiv.append(this.div),
                              (i.div = this.div),
                              r.XfaLayer.render(i));
                        })
                        .catch((e) => {
                          console.error(e);
                        });
                    }
                    cancel() {
                      this._cancelled = !0;
                    }
                    hide() {
                      this.div && (this.div.hidden = !0);
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFViewer = t.PDFSinglePageViewer = void 0);
                  var r = n(7),
                    i = n(12);
                  class o extends i.BaseViewer {}
                  t.PDFViewer = o;
                  class a extends i.BaseViewer {
                    _resetView() {
                      super._resetView(),
                        (this._scrollMode = r.ScrollMode.PAGE),
                        (this._spreadMode = r.SpreadMode.NONE);
                    }
                    set scrollMode(e) {}
                    _updateScrollMode() {}
                    set spreadMode(e) {}
                    _updateSpreadMode() {}
                  }
                  t.PDFSinglePageViewer = a;
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PagesCountLimit =
                      t.PDFPageViewBuffer =
                      t.BaseViewer =
                        void 0);
                  var r = n(3),
                    i = n(7),
                    o = n(2),
                    a = n(5),
                    s = n(4),
                    l = n(13),
                    c = n(16),
                    h = n(6),
                    u = n(8),
                    d = n(17),
                    p = n(9),
                    f = n(10);
                  let g;
                  function m(e, t) {
                    b(e, t), t.add(e);
                  }
                  function v(e, t, n) {
                    b(e, t), t.set(e, n);
                  }
                  function b(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function y(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function _(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, S(e, t, 'get'));
                  }
                  function w(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, S(e, t, 'set'), n),
                      n
                    );
                  }
                  function S(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  const A = 'enablePermissions',
                    x = {
                      FORCE_SCROLL_MODE_PAGE: 15e3,
                      FORCE_LAZY_PAGE_INIT: 7500,
                      PAUSE_EAGER_PAGE_INIT: 250,
                    };
                  function P(e) {
                    return (
                      Object.values(r.AnnotationEditorType).includes(e) &&
                      e !== r.AnnotationEditorType.DISABLE
                    );
                  }
                  t.PagesCountLimit = x;
                  var E = new WeakMap(),
                    C = new WeakMap(),
                    T = new WeakSet();
                  g = Symbol.iterator;
                  class k {
                    constructor(e) {
                      m(this, T),
                        v(this, E, { writable: !0, value: new Set() }),
                        v(this, C, { writable: !0, value: 0 }),
                        w(this, C, e);
                    }
                    push(e) {
                      const t = _(this, E);
                      t.has(e) && t.delete(e),
                        t.add(e),
                        t.size > _(this, C) && y(this, T, M).call(this);
                    }
                    resize(e) {
                      let t =
                        arguments.length > 1 && void 0 !== arguments[1]
                          ? arguments[1]
                          : null;
                      w(this, C, e);
                      const n = _(this, E);
                      if (t) {
                        const e = n.size;
                        let r = 1;
                        for (const i of n)
                          if ((t.has(i.id) && (n.delete(i), n.add(i)), ++r > e))
                            break;
                      }
                      for (; n.size > _(this, C); ) y(this, T, M).call(this);
                    }
                    has(e) {
                      return _(this, E).has(e);
                    }
                    [g]() {
                      return _(this, E).keys();
                    }
                  }
                  function M() {
                    const e = _(this, E).keys().next().value;
                    null == e || e.destroy(), _(this, E).delete(e);
                  }
                  t.PDFPageViewBuffer = k;
                  var R = new WeakMap(),
                    O = new WeakMap(),
                    D = new WeakMap(),
                    I = new WeakMap(),
                    L = new WeakMap(),
                    F = new WeakMap(),
                    N = new WeakMap(),
                    j = new WeakMap(),
                    B = new WeakSet(),
                    W = new WeakSet(),
                    z = new WeakSet(),
                    $ = new WeakSet(),
                    U = new WeakSet(),
                    H = new WeakSet(),
                    V = new WeakSet(),
                    q = new WeakSet(),
                    G = new WeakSet();
                  class X {
                    constructor(e) {
                      var t, n, o, a, l;
                      if (
                        (m(this, G),
                        m(this, q),
                        m(this, V),
                        m(this, H),
                        m(this, U),
                        m(this, $),
                        m(this, z),
                        m(this, W),
                        m(this, B),
                        v(this, R, { writable: !0, value: null }),
                        v(this, O, {
                          writable: !0,
                          value: r.AnnotationEditorType.DISABLE,
                        }),
                        v(this, D, { writable: !0, value: null }),
                        v(this, I, {
                          writable: !0,
                          value: r.AnnotationMode.ENABLE_FORMS,
                        }),
                        v(this, L, { writable: !0, value: !1 }),
                        v(this, F, { writable: !0, value: 0 }),
                        v(this, N, { writable: !0, value: null }),
                        v(this, j, { writable: !0, value: null }),
                        this.constructor === X)
                      )
                        throw new Error('Cannot initialize BaseViewer.');
                      const u = '2.16.105';
                      if (r.version !== u)
                        throw new Error(
                          `The API version "${r.version}" does not match the Viewer version "${u}".`,
                        );
                      if (
                        ((this.container = e.container),
                        (this.viewer =
                          e.viewer || e.container.firstElementChild),
                        'DIV' !==
                          (null === (t = this.container) || void 0 === t
                            ? void 0
                            : t.tagName.toUpperCase()) ||
                          'DIV' !==
                            (null === (n = this.viewer) || void 0 === n
                              ? void 0
                              : n.tagName.toUpperCase()))
                      )
                        throw new Error(
                          'Invalid `container` and/or `viewer` option.',
                        );
                      if (
                        this.container.offsetParent &&
                        'absolute' !== getComputedStyle(this.container).position
                      )
                        throw new Error(
                          'The `container` must be absolutely positioned.',
                        );
                      (this.eventBus = e.eventBus),
                        (this.linkService =
                          e.linkService || new h.SimpleLinkService()),
                        (this.downloadManager = e.downloadManager || null),
                        (this.findController = e.findController || null),
                        (this._scriptingManager = e.scriptingManager || null),
                        (this.removePageBorders = e.removePageBorders || !1),
                        (this.textLayerMode =
                          null !== (o = e.textLayerMode) && void 0 !== o
                            ? o
                            : i.TextLayerMode.ENABLE),
                        w(
                          this,
                          I,
                          null !== (a = e.annotationMode) && void 0 !== a
                            ? a
                            : r.AnnotationMode.ENABLE_FORMS,
                        ),
                        w(
                          this,
                          O,
                          null !== (l = e.annotationEditorMode) && void 0 !== l
                            ? l
                            : r.AnnotationEditorType.DISABLE,
                        ),
                        (this.imageResourcesPath = e.imageResourcesPath || ''),
                        (this.enablePrintAutoRotate =
                          e.enablePrintAutoRotate || !1),
                        (this.renderer = e.renderer || i.RendererType.CANVAS),
                        (this.useOnlyCssZoom = e.useOnlyCssZoom || !1),
                        (this.maxCanvasPixels = e.maxCanvasPixels),
                        (this.l10n = e.l10n || s.NullL10n),
                        w(this, L, e.enablePermissions || !1),
                        (this.pageColors = e.pageColors || null),
                        !this.pageColors ||
                          (CSS.supports('color', this.pageColors.background) &&
                            CSS.supports(
                              'color',
                              this.pageColors.foreground,
                            )) ||
                          ((this.pageColors.background ||
                            this.pageColors.foreground) &&
                            console.warn(
                              "BaseViewer: Ignoring `pageColors`-option, since the browser doesn't support the values used.",
                            ),
                          (this.pageColors = null)),
                        (this.defaultRenderingQueue = !e.renderingQueue),
                        this.defaultRenderingQueue
                          ? ((this.renderingQueue = new c.PDFRenderingQueue()),
                            this.renderingQueue.setViewer(this))
                          : (this.renderingQueue = e.renderingQueue),
                        (this.scroll = (0, i.watchScroll)(
                          this.container,
                          this._scrollUpdate.bind(this),
                        )),
                        (this.presentationModeState =
                          i.PresentationModeState.UNKNOWN),
                        (this._onBeforeDraw = this._onAfterDraw = null),
                        this._resetView(),
                        this.removePageBorders &&
                          this.viewer.classList.add('removePageBorders'),
                        this.updateContainerHeightCss();
                    }
                    get pagesCount() {
                      return this._pages.length;
                    }
                    getPageView(e) {
                      return this._pages[e];
                    }
                    get pageViewsReady() {
                      return (
                        !!this._pagesCapability.settled &&
                        this._pages.every(function (e) {
                          return null == e ? void 0 : e.pdfPage;
                        })
                      );
                    }
                    get renderForms() {
                      return _(this, I) === r.AnnotationMode.ENABLE_FORMS;
                    }
                    get enableScripting() {
                      return !!this._scriptingManager;
                    }
                    get currentPageNumber() {
                      return this._currentPageNumber;
                    }
                    set currentPageNumber(e) {
                      if (!Number.isInteger(e))
                        throw new Error('Invalid page number.');
                      this.pdfDocument &&
                        (this._setCurrentPageNumber(e, !0) ||
                          console.error(
                            `currentPageNumber: "${e}" is not a valid page.`,
                          ));
                    }
                    _setCurrentPageNumber(e) {
                      var t, n;
                      let r =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      if (this._currentPageNumber === e)
                        return r && y(this, H, ee).call(this), !0;
                      if (!(0 < e && e <= this.pagesCount)) return !1;
                      const i = this._currentPageNumber;
                      return (
                        (this._currentPageNumber = e),
                        this.eventBus.dispatch('pagechanging', {
                          source: this,
                          pageNumber: e,
                          pageLabel:
                            null !==
                              (t =
                                null === (n = this._pageLabels) || void 0 === n
                                  ? void 0
                                  : n[e - 1]) && void 0 !== t
                              ? t
                              : null,
                          previous: i,
                        }),
                        r && y(this, H, ee).call(this),
                        !0
                      );
                    }
                    get currentPageLabel() {
                      var e, t;
                      return null !==
                        (e =
                          null === (t = this._pageLabels) || void 0 === t
                            ? void 0
                            : t[this._currentPageNumber - 1]) && void 0 !== e
                        ? e
                        : null;
                    }
                    set currentPageLabel(e) {
                      if (!this.pdfDocument) return;
                      let t = 0 | e;
                      if (this._pageLabels) {
                        const n = this._pageLabels.indexOf(e);
                        n >= 0 && (t = n + 1);
                      }
                      this._setCurrentPageNumber(t, !0) ||
                        console.error(
                          `currentPageLabel: "${e}" is not a valid page.`,
                        );
                    }
                    get currentScale() {
                      return this._currentScale !== i.UNKNOWN_SCALE
                        ? this._currentScale
                        : i.DEFAULT_SCALE;
                    }
                    set currentScale(e) {
                      if (isNaN(e)) throw new Error('Invalid numeric scale.');
                      this.pdfDocument && this._setScale(e, !1);
                    }
                    get currentScaleValue() {
                      return this._currentScaleValue;
                    }
                    set currentScaleValue(e) {
                      this.pdfDocument && this._setScale(e, !1);
                    }
                    get pagesRotation() {
                      return this._pagesRotation;
                    }
                    set pagesRotation(e) {
                      if (!(0, i.isValidRotation)(e))
                        throw new Error('Invalid pages rotation angle.');
                      if (!this.pdfDocument) return;
                      if (
                        ((e %= 360) < 0 && (e += 360),
                        this._pagesRotation === e)
                      )
                        return;
                      this._pagesRotation = e;
                      const t = this._currentPageNumber,
                        n = { rotation: e };
                      for (const e of this._pages) e.update(n);
                      this._currentScaleValue &&
                        this._setScale(this._currentScaleValue, !0),
                        this.eventBus.dispatch('rotationchanging', {
                          source: this,
                          pagesRotation: e,
                          pageNumber: t,
                        }),
                        this.defaultRenderingQueue && this.update();
                    }
                    get firstPagePromise() {
                      return this.pdfDocument
                        ? this._firstPageCapability.promise
                        : null;
                    }
                    get onePageRendered() {
                      return this.pdfDocument
                        ? this._onePageRenderedCapability.promise
                        : null;
                    }
                    get pagesPromise() {
                      return this.pdfDocument
                        ? this._pagesCapability.promise
                        : null;
                    }
                    setDocument(e) {
                      if (
                        (this.pdfDocument &&
                          (this.eventBus.dispatch('pagesdestroy', {
                            source: this,
                          }),
                          this._cancelRendering(),
                          this._resetView(),
                          this.findController &&
                            this.findController.setDocument(null),
                          this._scriptingManager &&
                            this._scriptingManager.setDocument(null),
                          _(this, D) &&
                            (_(this, D).destroy(), w(this, D, null))),
                        (this.pdfDocument = e),
                        !e)
                      )
                        return;
                      const t = e.isPureXfa,
                        n = e.numPages,
                        o = e.getPage(1),
                        a = e.getOptionalContentConfig(),
                        s = _(this, L) ? e.getPermissions() : Promise.resolve();
                      if (n > x.FORCE_SCROLL_MODE_PAGE) {
                        console.warn(
                          'Forcing PAGE-scrolling for performance reasons, given the length of the document.',
                        );
                        const e = (this._scrollMode = i.ScrollMode.PAGE);
                        this.eventBus.dispatch('scrollmodechanged', {
                          source: this,
                          mode: e,
                        });
                      }
                      this._pagesCapability.promise.then(
                        () => {
                          this.eventBus.dispatch('pagesloaded', {
                            source: this,
                            pagesCount: n,
                          });
                        },
                        () => {},
                      ),
                        (this._onBeforeDraw = (e) => {
                          const t = this._pages[e.pageNumber - 1];
                          t && _(this, R).push(t);
                        }),
                        this.eventBus._on('pagerender', this._onBeforeDraw),
                        (this._onAfterDraw = (e) => {
                          e.cssTransform ||
                            this._onePageRenderedCapability.settled ||
                            (this._onePageRenderedCapability.resolve({
                              timestamp: e.timestamp,
                            }),
                            this.eventBus._off(
                              'pagerendered',
                              this._onAfterDraw,
                            ),
                            (this._onAfterDraw = null),
                            _(this, j) &&
                              (document.removeEventListener(
                                'visibilitychange',
                                _(this, j),
                              ),
                              w(this, j, null)));
                        }),
                        this.eventBus._on('pagerendered', this._onAfterDraw),
                        Promise.all([o, s])
                          .then((o) => {
                            let [s, c] = o;
                            if (e !== this.pdfDocument) return;
                            this._firstPageCapability.resolve(s),
                              (this._optionalContentConfigPromise = a);
                            const {
                              annotationEditorMode: h,
                              annotationMode: u,
                              textLayerMode: d,
                            } = y(this, B, Y).call(this, c);
                            if (h !== r.AnnotationEditorType.DISABLE) {
                              const e = h;
                              t
                                ? console.warn(
                                    'Warning: XFA-editing is not implemented.',
                                  )
                                : P(e)
                                  ? (w(
                                      this,
                                      D,
                                      new r.AnnotationEditorUIManager(
                                        this.container,
                                        this.eventBus,
                                      ),
                                    ),
                                    e !== r.AnnotationEditorType.NONE &&
                                      _(this, D).updateMode(e))
                                  : console.error(
                                      `Invalid AnnotationEditor mode: ${e}`,
                                    );
                            }
                            const p =
                                this._scrollMode === i.ScrollMode.PAGE
                                  ? null
                                  : this.viewer,
                              f = this.currentScale,
                              g = s.getViewport({
                                scale: f * r.PixelsPerInch.PDF_TO_CSS_UNITS,
                              }),
                              m =
                                d === i.TextLayerMode.DISABLE || t
                                  ? null
                                  : this,
                              v = u !== r.AnnotationMode.DISABLE ? this : null,
                              b = t ? this : null,
                              S = _(this, D) ? this : null;
                            for (let e = 1; e <= n; ++e) {
                              const t = new l.PDFPageView({
                                container: p,
                                eventBus: this.eventBus,
                                id: e,
                                scale: f,
                                defaultViewport: g.clone(),
                                optionalContentConfigPromise: a,
                                renderingQueue: this.renderingQueue,
                                textLayerFactory: m,
                                textLayerMode: d,
                                annotationLayerFactory: v,
                                annotationMode: u,
                                xfaLayerFactory: b,
                                annotationEditorLayerFactory: S,
                                textHighlighterFactory: this,
                                structTreeLayerFactory: this,
                                imageResourcesPath: this.imageResourcesPath,
                                renderer: this.renderer,
                                useOnlyCssZoom: this.useOnlyCssZoom,
                                maxCanvasPixels: this.maxCanvasPixels,
                                pageColors: this.pageColors,
                                l10n: this.l10n,
                              });
                              this._pages.push(t);
                            }
                            const A = this._pages[0];
                            A &&
                              (A.setPdfPage(s),
                              this.linkService.cachePageRef(1, s.ref)),
                              this._scrollMode === i.ScrollMode.PAGE
                                ? y(this, z, Z).call(this)
                                : this._spreadMode !== i.SpreadMode.NONE &&
                                  this._updateSpreadMode(),
                              y(this, W, K)
                                .call(this)
                                .then(async () => {
                                  if (
                                    (this.findController &&
                                      this.findController.setDocument(e),
                                    this._scriptingManager &&
                                      this._scriptingManager.setDocument(e),
                                    _(this, D) &&
                                      this.eventBus.dispatch(
                                        'annotationeditormodechanged',
                                        { source: this, mode: _(this, O) },
                                      ),
                                    e.loadingParams.disableAutoFetch ||
                                      n > x.FORCE_LAZY_PAGE_INIT)
                                  )
                                    return void this._pagesCapability.resolve();
                                  let t = n - 1;
                                  if (t <= 0) this._pagesCapability.resolve();
                                  else
                                    for (let r = 2; r <= n; ++r) {
                                      const n = e.getPage(r).then(
                                        (e) => {
                                          const n = this._pages[r - 1];
                                          n.pdfPage || n.setPdfPage(e),
                                            this.linkService.cachePageRef(
                                              r,
                                              e.ref,
                                            ),
                                            0 == --t &&
                                              this._pagesCapability.resolve();
                                        },
                                        (e) => {
                                          console.error(
                                            `Unable to get page ${r} to initialize viewer`,
                                            e,
                                          ),
                                            0 == --t &&
                                              this._pagesCapability.resolve();
                                        },
                                      );
                                      r % x.PAUSE_EAGER_PAGE_INIT == 0 &&
                                        (await n);
                                    }
                                }),
                              this.eventBus.dispatch('pagesinit', {
                                source: this,
                              }),
                              e.getMetadata().then((t) => {
                                let { info: n } = t;
                                e === this.pdfDocument &&
                                  n.Language &&
                                  (this.viewer.lang = n.Language);
                              }),
                              this.defaultRenderingQueue && this.update();
                          })
                          .catch((e) => {
                            console.error('Unable to initialize viewer', e),
                              this._pagesCapability.reject(e);
                          });
                    }
                    setPageLabels(e) {
                      if (this.pdfDocument) {
                        e
                          ? Array.isArray(e) &&
                            this.pdfDocument.numPages === e.length
                            ? (this._pageLabels = e)
                            : ((this._pageLabels = null),
                              console.error(
                                'setPageLabels: Invalid page labels.',
                              ))
                          : (this._pageLabels = null);
                        for (let e = 0, r = this._pages.length; e < r; e++) {
                          var t, n;
                          this._pages[e].setPageLabel(
                            null !==
                              (t =
                                null === (n = this._pageLabels) || void 0 === n
                                  ? void 0
                                  : n[e]) && void 0 !== t
                              ? t
                              : null,
                          );
                        }
                      }
                    }
                    _resetView() {
                      (this._pages = []),
                        (this._currentPageNumber = 1),
                        (this._currentScale = i.UNKNOWN_SCALE),
                        (this._currentScaleValue = null),
                        (this._pageLabels = null),
                        w(this, R, new k(10)),
                        (this._location = null),
                        (this._pagesRotation = 0),
                        (this._optionalContentConfigPromise = null),
                        (this._firstPageCapability = (0,
                        r.createPromiseCapability)()),
                        (this._onePageRenderedCapability = (0,
                        r.createPromiseCapability)()),
                        (this._pagesCapability = (0,
                        r.createPromiseCapability)()),
                        (this._scrollMode = i.ScrollMode.VERTICAL),
                        (this._previousScrollMode = i.ScrollMode.UNKNOWN),
                        (this._spreadMode = i.SpreadMode.NONE),
                        w(this, N, {
                          previousPageNumber: 1,
                          scrollDown: !0,
                          pages: [],
                        }),
                        this._onBeforeDraw &&
                          (this.eventBus._off('pagerender', this._onBeforeDraw),
                          (this._onBeforeDraw = null)),
                        this._onAfterDraw &&
                          (this.eventBus._off(
                            'pagerendered',
                            this._onAfterDraw,
                          ),
                          (this._onAfterDraw = null)),
                        _(this, j) &&
                          (document.removeEventListener(
                            'visibilitychange',
                            _(this, j),
                          ),
                          w(this, j, null)),
                        (this.viewer.textContent = ''),
                        this._updateScrollMode(),
                        this.viewer.removeAttribute('lang'),
                        this.viewer.classList.remove(A);
                    }
                    _scrollUpdate() {
                      0 !== this.pagesCount && this.update();
                    }
                    _setScaleUpdatePages(e, t) {
                      let n =
                          arguments.length > 2 &&
                          void 0 !== arguments[2] &&
                          arguments[2],
                        o =
                          arguments.length > 3 &&
                          void 0 !== arguments[3] &&
                          arguments[3];
                      if (
                        ((this._currentScaleValue = t.toString()),
                        y(this, U, J).call(this, e))
                      )
                        return void (
                          o &&
                          this.eventBus.dispatch('scalechanging', {
                            source: this,
                            scale: e,
                            presetValue: t,
                          })
                        );
                      i.docStyle.setProperty(
                        '--scale-factor',
                        e * r.PixelsPerInch.PDF_TO_CSS_UNITS,
                      );
                      const a = { scale: e };
                      for (const e of this._pages) e.update(a);
                      if (((this._currentScale = e), !n)) {
                        let e,
                          t = this._currentPageNumber;
                        !this._location ||
                          this.isInPresentationMode ||
                          this.isChangingPresentationMode ||
                          ((t = this._location.pageNumber),
                          (e = [
                            null,
                            { name: 'XYZ' },
                            this._location.left,
                            this._location.top,
                            null,
                          ])),
                          this.scrollPageIntoView({
                            pageNumber: t,
                            destArray: e,
                            allowNegativeOffset: !0,
                          });
                      }
                      this.eventBus.dispatch('scalechanging', {
                        source: this,
                        scale: e,
                        presetValue: o ? t : void 0,
                      }),
                        this.defaultRenderingQueue && this.update(),
                        this.updateContainerHeightCss();
                    }
                    get _pageWidthScaleFactor() {
                      return this._spreadMode !== i.SpreadMode.NONE &&
                        this._scrollMode !== i.ScrollMode.HORIZONTAL
                        ? 2
                        : 1;
                    }
                    _setScale(e) {
                      let t =
                          arguments.length > 1 &&
                          void 0 !== arguments[1] &&
                          arguments[1],
                        n = parseFloat(e);
                      if (n > 0) this._setScaleUpdatePages(n, e, t, !1);
                      else {
                        const r = this._pages[this._currentPageNumber - 1];
                        if (!r) return;
                        let o = i.SCROLLBAR_PADDING,
                          a = i.VERTICAL_PADDING;
                        this.isInPresentationMode
                          ? (o = a = 4)
                          : this.removePageBorders
                            ? (o = a = 0)
                            : this._scrollMode === i.ScrollMode.HORIZONTAL &&
                              ([o, a] = [a, o]);
                        const s =
                            (((this.container.clientWidth - o) / r.width) *
                              r.scale) /
                            this._pageWidthScaleFactor,
                          l =
                            ((this.container.clientHeight - a) / r.height) *
                            r.scale;
                        switch (e) {
                          case 'page-actual':
                            n = 1;
                            break;
                          case 'page-width':
                            n = s;
                            break;
                          case 'page-height':
                            n = l;
                            break;
                          case 'page-fit':
                            n = Math.min(s, l);
                            break;
                          case 'auto':
                            const t = (0, i.isPortraitOrientation)(r)
                              ? s
                              : Math.min(l, s);
                            n = Math.min(i.MAX_AUTO_SCALE, t);
                            break;
                          default:
                            return void console.error(
                              `_setScale: "${e}" is an unknown zoom value.`,
                            );
                        }
                        this._setScaleUpdatePages(n, e, t, !0);
                      }
                    }
                    pageLabelToPageNumber(e) {
                      if (!this._pageLabels) return null;
                      const t = this._pageLabels.indexOf(e);
                      return t < 0 ? null : t + 1;
                    }
                    scrollPageIntoView(e) {
                      let {
                        pageNumber: t,
                        destArray: n = null,
                        allowNegativeOffset: o = !1,
                        ignoreDestinationZoom: a = !1,
                      } = e;
                      if (!this.pdfDocument) return;
                      const s = Number.isInteger(t) && this._pages[t - 1];
                      if (!s)
                        return void console.error(
                          `scrollPageIntoView: "${t}" is not a valid pageNumber parameter.`,
                        );
                      if (this.isInPresentationMode || !n)
                        return void this._setCurrentPageNumber(t, !0);
                      let l,
                        c,
                        h = 0,
                        u = 0,
                        d = 0,
                        p = 0;
                      const f = s.rotation % 180 != 0,
                        g =
                          (f ? s.height : s.width) /
                          s.scale /
                          r.PixelsPerInch.PDF_TO_CSS_UNITS,
                        m =
                          (f ? s.width : s.height) /
                          s.scale /
                          r.PixelsPerInch.PDF_TO_CSS_UNITS;
                      let v = 0;
                      switch (n[1].name) {
                        case 'XYZ':
                          (h = n[2]),
                            (u = n[3]),
                            (v = n[4]),
                            (h = null !== h ? h : 0),
                            (u = null !== u ? u : m);
                          break;
                        case 'Fit':
                        case 'FitB':
                          v = 'page-fit';
                          break;
                        case 'FitH':
                        case 'FitBH':
                          (u = n[2]),
                            (v = 'page-width'),
                            null === u && this._location
                              ? ((h = this._location.left),
                                (u = this._location.top))
                              : ('number' != typeof u || u < 0) && (u = m);
                          break;
                        case 'FitV':
                        case 'FitBV':
                          (h = n[2]), (d = g), (p = m), (v = 'page-height');
                          break;
                        case 'FitR':
                          (h = n[2]),
                            (u = n[3]),
                            (d = n[4] - h),
                            (p = n[5] - u);
                          const e = this.removePageBorders
                              ? 0
                              : i.SCROLLBAR_PADDING,
                            t = this.removePageBorders ? 0 : i.VERTICAL_PADDING;
                          (l =
                            (this.container.clientWidth - e) /
                            d /
                            r.PixelsPerInch.PDF_TO_CSS_UNITS),
                            (c =
                              (this.container.clientHeight - t) /
                              p /
                              r.PixelsPerInch.PDF_TO_CSS_UNITS),
                            (v = Math.min(Math.abs(l), Math.abs(c)));
                          break;
                        default:
                          return void console.error(
                            `scrollPageIntoView: "${n[1].name}" is not a valid destination type.`,
                          );
                      }
                      if (
                        (a ||
                          (v && v !== this._currentScale
                            ? (this.currentScaleValue = v)
                            : this._currentScale === i.UNKNOWN_SCALE &&
                              (this.currentScaleValue = i.DEFAULT_SCALE_VALUE)),
                        'page-fit' === v && !n[4])
                      )
                        return void y(this, $, Q).call(this, s);
                      const b = [
                        s.viewport.convertToViewportPoint(h, u),
                        s.viewport.convertToViewportPoint(h + d, u + p),
                      ];
                      let _ = Math.min(b[0][0], b[1][0]),
                        w = Math.min(b[0][1], b[1][1]);
                      o || ((_ = Math.max(_, 0)), (w = Math.max(w, 0))),
                        y(this, $, Q).call(this, s, { left: _, top: w });
                    }
                    _updateLocation(e) {
                      const t = this._currentScale,
                        n = this._currentScaleValue,
                        r = parseFloat(n) === t ? Math.round(1e4 * t) / 100 : n,
                        i = e.id,
                        o = this._pages[i - 1],
                        a = this.container,
                        s = o.getPagePoint(
                          a.scrollLeft - e.x,
                          a.scrollTop - e.y,
                        ),
                        l = Math.round(s[0]),
                        c = Math.round(s[1]);
                      let h = `#page=${i}`;
                      this.isInPresentationMode ||
                        (h += `&zoom=${r},${l},${c}`),
                        (this._location = {
                          pageNumber: i,
                          scale: r,
                          top: c,
                          left: l,
                          rotation: this._pagesRotation,
                          pdfOpenParams: h,
                        });
                    }
                    update() {
                      const e = this._getVisiblePages(),
                        t = e.views,
                        n = t.length;
                      if (0 === n) return;
                      const r = Math.max(10, 2 * n + 1);
                      _(this, R).resize(r, e.ids),
                        this.renderingQueue.renderHighestPriority(e);
                      const o =
                          this._spreadMode === i.SpreadMode.NONE &&
                          (this._scrollMode === i.ScrollMode.PAGE ||
                            this._scrollMode === i.ScrollMode.VERTICAL),
                        a = this._currentPageNumber;
                      let s = !1;
                      for (const e of t) {
                        if (e.percent < 100) break;
                        if (e.id === a && o) {
                          s = !0;
                          break;
                        }
                      }
                      this._setCurrentPageNumber(s ? a : t[0].id),
                        this._updateLocation(e.first),
                        this.eventBus.dispatch('updateviewarea', {
                          source: this,
                          location: this._location,
                        });
                    }
                    containsElement(e) {
                      return this.container.contains(e);
                    }
                    focus() {
                      this.container.focus();
                    }
                    get _isContainerRtl() {
                      return (
                        'rtl' === getComputedStyle(this.container).direction
                      );
                    }
                    get isInPresentationMode() {
                      return (
                        this.presentationModeState ===
                        i.PresentationModeState.FULLSCREEN
                      );
                    }
                    get isChangingPresentationMode() {
                      return (
                        this.presentationModeState ===
                        i.PresentationModeState.CHANGING
                      );
                    }
                    get isHorizontalScrollbarEnabled() {
                      return (
                        !this.isInPresentationMode &&
                        this.container.scrollWidth > this.container.clientWidth
                      );
                    }
                    get isVerticalScrollbarEnabled() {
                      return (
                        !this.isInPresentationMode &&
                        this.container.scrollHeight >
                          this.container.clientHeight
                      );
                    }
                    _getVisiblePages() {
                      const e =
                          this._scrollMode === i.ScrollMode.PAGE
                            ? _(this, N).pages
                            : this._pages,
                        t = this._scrollMode === i.ScrollMode.HORIZONTAL,
                        n = t && this._isContainerRtl;
                      return (0, i.getVisibleElements)({
                        scrollEl: this.container,
                        views: e,
                        sortByVisibility: !0,
                        horizontal: t,
                        rtl: n,
                      });
                    }
                    isPageVisible(e) {
                      return (
                        !!this.pdfDocument &&
                        (Number.isInteger(e) && e > 0 && e <= this.pagesCount
                          ? this._getVisiblePages().ids.has(e)
                          : (console.error(
                              `isPageVisible: "${e}" is not a valid page.`,
                            ),
                            !1))
                      );
                    }
                    isPageCached(e) {
                      if (!this.pdfDocument) return !1;
                      if (
                        !(Number.isInteger(e) && e > 0 && e <= this.pagesCount)
                      )
                        return (
                          console.error(
                            `isPageCached: "${e}" is not a valid page.`,
                          ),
                          !1
                        );
                      const t = this._pages[e - 1];
                      return _(this, R).has(t);
                    }
                    cleanup() {
                      for (const e of this._pages)
                        e.renderingState !== i.RenderingStates.FINISHED &&
                          e.reset();
                    }
                    _cancelRendering() {
                      for (const e of this._pages) e.cancelRendering();
                    }
                    forceRendering(e) {
                      const t = e || this._getVisiblePages(),
                        n = y(this, q, ne).call(this, t),
                        r =
                          this._spreadMode !== i.SpreadMode.NONE &&
                          this._scrollMode !== i.ScrollMode.HORIZONTAL,
                        o = this.renderingQueue.getHighestPriority(
                          t,
                          this._pages,
                          n,
                          r,
                        );
                      return (
                        y(this, G, re).call(this, t.ids),
                        !!o &&
                          (y(this, V, te)
                            .call(this, o)
                            .then(() => {
                              this.renderingQueue.renderView(o);
                            }),
                          !0)
                      );
                    }
                    createTextLayerBuilder(e) {
                      let {
                        textLayerDiv: t,
                        pageIndex: n,
                        viewport: r,
                        enhanceTextSelection: i = !1,
                        eventBus: o,
                        highlighter: a,
                        accessibilityManager: s = null,
                      } = e;
                      return new p.TextLayerBuilder({
                        textLayerDiv: t,
                        eventBus: o,
                        pageIndex: n,
                        viewport: r,
                        enhanceTextSelection: !this.isInPresentationMode && i,
                        highlighter: a,
                        accessibilityManager: s,
                      });
                    }
                    createTextHighlighter(e) {
                      let { pageIndex: t, eventBus: n } = e;
                      return new d.TextHighlighter({
                        eventBus: n,
                        pageIndex: t,
                        findController: this.isInPresentationMode
                          ? null
                          : this.findController,
                      });
                    }
                    createAnnotationLayerBuilder(e) {
                      var t, n, r, i;
                      let {
                        pageDiv: o,
                        pdfPage: l,
                        annotationStorage: c = null ===
                          (t = this.pdfDocument) || void 0 === t
                          ? void 0
                          : t.annotationStorage,
                        imageResourcesPath: h = '',
                        renderForms: u = !0,
                        l10n: d = s.NullL10n,
                        enableScripting: p = this.enableScripting,
                        hasJSActionsPromise: f = null ===
                          (n = this.pdfDocument) || void 0 === n
                          ? void 0
                          : n.hasJSActions(),
                        mouseState: g = null === (r = this._scriptingManager) ||
                        void 0 === r
                          ? void 0
                          : r.mouseState,
                        fieldObjectsPromise: m = null ===
                          (i = this.pdfDocument) || void 0 === i
                          ? void 0
                          : i.getFieldObjects(),
                        annotationCanvasMap: v = null,
                        accessibilityManager: b = null,
                      } = e;
                      return new a.AnnotationLayerBuilder({
                        pageDiv: o,
                        pdfPage: l,
                        annotationStorage: c,
                        imageResourcesPath: h,
                        renderForms: u,
                        linkService: this.linkService,
                        downloadManager: this.downloadManager,
                        l10n: d,
                        enableScripting: p,
                        hasJSActionsPromise: f,
                        mouseState: g,
                        fieldObjectsPromise: m,
                        annotationCanvasMap: v,
                        accessibilityManager: b,
                      });
                    }
                    createAnnotationEditorLayerBuilder(e) {
                      var t;
                      let {
                        uiManager: n = _(this, D),
                        pageDiv: r,
                        pdfPage: i,
                        accessibilityManager: a = null,
                        l10n: s,
                        annotationStorage: l = null ===
                          (t = this.pdfDocument) || void 0 === t
                          ? void 0
                          : t.annotationStorage,
                      } = e;
                      return new o.AnnotationEditorLayerBuilder({
                        uiManager: n,
                        pageDiv: r,
                        pdfPage: i,
                        annotationStorage: l,
                        accessibilityManager: a,
                        l10n: s,
                      });
                    }
                    createXfaLayerBuilder(e) {
                      var t;
                      let {
                        pageDiv: n,
                        pdfPage: r,
                        annotationStorage: i = null ===
                          (t = this.pdfDocument) || void 0 === t
                          ? void 0
                          : t.annotationStorage,
                      } = e;
                      return new f.XfaLayerBuilder({
                        pageDiv: n,
                        pdfPage: r,
                        annotationStorage: i,
                        linkService: this.linkService,
                      });
                    }
                    createStructTreeLayerBuilder(e) {
                      let { pdfPage: t } = e;
                      return new u.StructTreeLayerBuilder({ pdfPage: t });
                    }
                    get hasEqualPageSizes() {
                      const e = this._pages[0];
                      for (let t = 1, n = this._pages.length; t < n; ++t) {
                        const n = this._pages[t];
                        if (n.width !== e.width || n.height !== e.height)
                          return !1;
                      }
                      return !0;
                    }
                    getPagesOverview() {
                      return this._pages.map((e) => {
                        const t = e.pdfPage.getViewport({ scale: 1 });
                        return !this.enablePrintAutoRotate ||
                          (0, i.isPortraitOrientation)(t)
                          ? {
                              width: t.width,
                              height: t.height,
                              rotation: t.rotation,
                            }
                          : {
                              width: t.height,
                              height: t.width,
                              rotation: (t.rotation - 90) % 360,
                            };
                      });
                    }
                    get optionalContentConfigPromise() {
                      return this.pdfDocument
                        ? this._optionalContentConfigPromise
                          ? this._optionalContentConfigPromise
                          : (console.error(
                              'optionalContentConfigPromise: Not initialized yet.',
                            ),
                            this.pdfDocument.getOptionalContentConfig())
                        : Promise.resolve(null);
                    }
                    set optionalContentConfigPromise(e) {
                      if (!(e instanceof Promise))
                        throw new Error(
                          `Invalid optionalContentConfigPromise: ${e}`,
                        );
                      if (!this.pdfDocument) return;
                      if (!this._optionalContentConfigPromise) return;
                      this._optionalContentConfigPromise = e;
                      const t = { optionalContentConfigPromise: e };
                      for (const e of this._pages) e.update(t);
                      this.update(),
                        this.eventBus.dispatch('optionalcontentconfigchanged', {
                          source: this,
                          promise: e,
                        });
                    }
                    get scrollMode() {
                      return this._scrollMode;
                    }
                    set scrollMode(e) {
                      if (this._scrollMode !== e) {
                        if (!(0, i.isValidScrollMode)(e))
                          throw new Error(`Invalid scroll mode: ${e}`);
                        this.pagesCount > x.FORCE_SCROLL_MODE_PAGE ||
                          ((this._previousScrollMode = this._scrollMode),
                          (this._scrollMode = e),
                          this.eventBus.dispatch('scrollmodechanged', {
                            source: this,
                            mode: e,
                          }),
                          this._updateScrollMode(this._currentPageNumber));
                      }
                    }
                    _updateScrollMode() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      const t = this._scrollMode,
                        n = this.viewer;
                      n.classList.toggle(
                        'scrollHorizontal',
                        t === i.ScrollMode.HORIZONTAL,
                      ),
                        n.classList.toggle(
                          'scrollWrapped',
                          t === i.ScrollMode.WRAPPED,
                        ),
                        this.pdfDocument &&
                          e &&
                          (t === i.ScrollMode.PAGE
                            ? y(this, z, Z).call(this)
                            : this._previousScrollMode === i.ScrollMode.PAGE &&
                              this._updateSpreadMode(),
                          this._currentScaleValue &&
                            isNaN(this._currentScaleValue) &&
                            this._setScale(this._currentScaleValue, !0),
                          this._setCurrentPageNumber(e, !0),
                          this.update());
                    }
                    get spreadMode() {
                      return this._spreadMode;
                    }
                    set spreadMode(e) {
                      if (this._spreadMode !== e) {
                        if (!(0, i.isValidSpreadMode)(e))
                          throw new Error(`Invalid spread mode: ${e}`);
                        (this._spreadMode = e),
                          this.eventBus.dispatch('spreadmodechanged', {
                            source: this,
                            mode: e,
                          }),
                          this._updateSpreadMode(this._currentPageNumber);
                      }
                    }
                    _updateSpreadMode() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      if (!this.pdfDocument) return;
                      const t = this.viewer,
                        n = this._pages;
                      if (this._scrollMode === i.ScrollMode.PAGE)
                        y(this, z, Z).call(this);
                      else if (
                        ((t.textContent = ''),
                        this._spreadMode === i.SpreadMode.NONE)
                      )
                        for (const e of this._pages) t.append(e.div);
                      else {
                        const e = this._spreadMode - 1;
                        let r = null;
                        for (let i = 0, o = n.length; i < o; ++i)
                          null === r
                            ? ((r = document.createElement('div')),
                              (r.className = 'spread'),
                              t.append(r))
                            : i % 2 === e &&
                              ((r = r.cloneNode(!1)), t.append(r)),
                            r.append(n[i].div);
                      }
                      e &&
                        (this._currentScaleValue &&
                          isNaN(this._currentScaleValue) &&
                          this._setScale(this._currentScaleValue, !0),
                        this._setCurrentPageNumber(e, !0),
                        this.update());
                    }
                    _getPageAdvance(e) {
                      let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      switch (this._scrollMode) {
                        case i.ScrollMode.WRAPPED: {
                          const { views: n } = this._getVisiblePages(),
                            r = new Map();
                          for (const {
                            id: e,
                            y: t,
                            percent: i,
                            widthPercent: o,
                          } of n) {
                            if (0 === i || o < 100) continue;
                            let n = r.get(t);
                            n || r.set(t, n || (n = [])), n.push(e);
                          }
                          for (const n of r.values()) {
                            const r = n.indexOf(e);
                            if (-1 === r) continue;
                            const i = n.length;
                            if (1 === i) break;
                            if (t)
                              for (let t = r - 1, i = 0; t >= i; t--) {
                                const r = n[t],
                                  i = n[t + 1] - 1;
                                if (r < i) return e - i;
                              }
                            else
                              for (let t = r + 1, o = i; t < o; t++) {
                                const r = n[t],
                                  i = n[t - 1] + 1;
                                if (r > i) return i - e;
                              }
                            if (t) {
                              const t = n[0];
                              if (t < e) return e - t + 1;
                            } else {
                              const t = n[i - 1];
                              if (t > e) return t - e + 1;
                            }
                            break;
                          }
                          break;
                        }
                        case i.ScrollMode.HORIZONTAL:
                          break;
                        case i.ScrollMode.PAGE:
                        case i.ScrollMode.VERTICAL: {
                          if (this._spreadMode === i.SpreadMode.NONE) break;
                          const n = this._spreadMode - 1;
                          if (t && e % 2 !== n) break;
                          if (!t && e % 2 === n) break;
                          const { views: r } = this._getVisiblePages(),
                            o = t ? e - 1 : e + 1;
                          for (const {
                            id: e,
                            percent: t,
                            widthPercent: n,
                          } of r)
                            if (e === o) {
                              if (t > 0 && 100 === n) return 2;
                              break;
                            }
                          break;
                        }
                      }
                      return 1;
                    }
                    nextPage() {
                      const e = this._currentPageNumber,
                        t = this.pagesCount;
                      if (e >= t) return !1;
                      const n = this._getPageAdvance(e, !1) || 1;
                      return (this.currentPageNumber = Math.min(e + n, t)), !0;
                    }
                    previousPage() {
                      const e = this._currentPageNumber;
                      if (e <= 1) return !1;
                      const t = this._getPageAdvance(e, !0) || 1;
                      return (this.currentPageNumber = Math.max(e - t, 1)), !0;
                    }
                    increaseScale() {
                      let e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 1,
                        t = this._currentScale;
                      do {
                        (t = (t * i.DEFAULT_SCALE_DELTA).toFixed(2)),
                          (t = Math.ceil(10 * t) / 10),
                          (t = Math.min(i.MAX_SCALE, t));
                      } while (--e > 0 && t < i.MAX_SCALE);
                      this.currentScaleValue = t;
                    }
                    decreaseScale() {
                      let e =
                          arguments.length > 0 && void 0 !== arguments[0]
                            ? arguments[0]
                            : 1,
                        t = this._currentScale;
                      do {
                        (t = (t / i.DEFAULT_SCALE_DELTA).toFixed(2)),
                          (t = Math.floor(10 * t) / 10),
                          (t = Math.max(i.MIN_SCALE, t));
                      } while (--e > 0 && t > i.MIN_SCALE);
                      this.currentScaleValue = t;
                    }
                    updateContainerHeightCss() {
                      const e = this.container.clientHeight;
                      e !== _(this, F) &&
                        (w(this, F, e),
                        i.docStyle.setProperty(
                          '--viewer-container-height',
                          `${e}px`,
                        ));
                    }
                    get annotationEditorMode() {
                      return _(this, D)
                        ? _(this, O)
                        : r.AnnotationEditorType.DISABLE;
                    }
                    set annotationEditorMode(e) {
                      if (!_(this, D))
                        throw new Error('The AnnotationEditor is not enabled.');
                      if (_(this, O) !== e) {
                        if (!P(e))
                          throw new Error(
                            `Invalid AnnotationEditor mode: ${e}`,
                          );
                        this.pdfDocument &&
                          (w(this, O, e),
                          this.eventBus.dispatch(
                            'annotationeditormodechanged',
                            { source: this, mode: e },
                          ),
                          _(this, D).updateMode(e));
                      }
                    }
                    set annotationEditorParams(e) {
                      let { type: t, value: n } = e;
                      if (!_(this, D))
                        throw new Error('The AnnotationEditor is not enabled.');
                      _(this, D).updateParams(t, n);
                    }
                    refresh() {
                      if (!this.pdfDocument) return;
                      const e = {};
                      for (const t of this._pages) t.update(e);
                      this.update();
                    }
                  }
                  function Y(e) {
                    const t = {
                      annotationEditorMode: _(this, O),
                      annotationMode: _(this, I),
                      textLayerMode: this.textLayerMode,
                    };
                    return e
                      ? (e.includes(r.PermissionFlag.COPY) ||
                          this.viewer.classList.add(A),
                        e.includes(r.PermissionFlag.MODIFY_CONTENTS) ||
                          (t.annotationEditorMode =
                            r.AnnotationEditorType.DISABLE),
                        e.includes(r.PermissionFlag.MODIFY_ANNOTATIONS) ||
                          e.includes(r.PermissionFlag.FILL_INTERACTIVE_FORMS) ||
                          _(this, I) !== r.AnnotationMode.ENABLE_FORMS ||
                          (t.annotationMode = r.AnnotationMode.ENABLE),
                        t)
                      : t;
                  }
                  function K() {
                    if (
                      'hidden' === document.visibilityState ||
                      !this.container.offsetParent ||
                      0 === this._getVisiblePages().views.length
                    )
                      return Promise.resolve();
                    const e = new Promise((e) => {
                      w(this, j, () => {
                        'hidden' === document.visibilityState &&
                          (e(),
                          document.removeEventListener(
                            'visibilitychange',
                            _(this, j),
                          ),
                          w(this, j, null));
                      }),
                        document.addEventListener(
                          'visibilitychange',
                          _(this, j),
                        );
                    });
                    return Promise.race([
                      this._onePageRenderedCapability.promise,
                      e,
                    ]);
                  }
                  function Z() {
                    if (this._scrollMode !== i.ScrollMode.PAGE)
                      throw new Error(
                        '#ensurePageViewVisible: Invalid scrollMode value.',
                      );
                    const e = this._currentPageNumber,
                      t = _(this, N),
                      n = this.viewer;
                    if (
                      ((n.textContent = ''),
                      (t.pages.length = 0),
                      this._spreadMode !== i.SpreadMode.NONE ||
                        this.isInPresentationMode)
                    ) {
                      const r = new Set(),
                        i = this._spreadMode - 1;
                      -1 === i
                        ? r.add(e - 1)
                        : e % 2 !== i
                          ? (r.add(e - 1), r.add(e))
                          : (r.add(e - 2), r.add(e - 1));
                      const o = document.createElement('div');
                      if (
                        ((o.className = 'spread'), this.isInPresentationMode)
                      ) {
                        const e = document.createElement('div');
                        (e.className = 'dummyPage'), o.append(e);
                      }
                      for (const e of r) {
                        const n = this._pages[e];
                        n && (o.append(n.div), t.pages.push(n));
                      }
                      n.append(o);
                    } else {
                      const r = this._pages[e - 1];
                      n.append(r.div), t.pages.push(r);
                    }
                    (t.scrollDown = e >= t.previousPageNumber),
                      (t.previousPageNumber = e);
                  }
                  function Q(e) {
                    let t =
                      arguments.length > 1 && void 0 !== arguments[1]
                        ? arguments[1]
                        : null;
                    const { div: n, id: r } = e;
                    if (
                      (this._scrollMode === i.ScrollMode.PAGE &&
                        (this._setCurrentPageNumber(r),
                        y(this, z, Z).call(this),
                        this.update()),
                      !t && !this.isInPresentationMode)
                    ) {
                      const e = n.offsetLeft + n.clientLeft,
                        r = e + n.clientWidth,
                        { scrollLeft: o, clientWidth: a } = this.container;
                      (this._scrollMode === i.ScrollMode.HORIZONTAL ||
                        e < o ||
                        r > o + a) &&
                        (t = { left: 0, top: 0 });
                    }
                    (0, i.scrollIntoView)(n, t);
                  }
                  function J(e) {
                    return (
                      e === this._currentScale ||
                      Math.abs(e - this._currentScale) < 1e-15
                    );
                  }
                  function ee() {
                    const e = this._pages[this._currentPageNumber - 1];
                    this.isInPresentationMode &&
                      this._setScale(this._currentScaleValue, !0),
                      y(this, $, Q).call(this, e);
                  }
                  async function te(e) {
                    if (e.pdfPage) return e.pdfPage;
                    try {
                      var t, n;
                      const r = await this.pdfDocument.getPage(e.id);
                      return (
                        e.pdfPage || e.setPdfPage(r),
                        (null !==
                          (t = (n = this.linkService)._cachedPageNumber) &&
                          void 0 !== t &&
                          t.call(n, r.ref)) ||
                          this.linkService.cachePageRef(e.id, r.ref),
                        r
                      );
                    } catch (e) {
                      return (
                        console.error('Unable to get page for page view', e),
                        null
                      );
                    }
                  }
                  function ne(e) {
                    var t, n;
                    if (
                      1 ===
                      (null === (t = e.first) || void 0 === t ? void 0 : t.id)
                    )
                      return !0;
                    if (
                      (null === (n = e.last) || void 0 === n
                        ? void 0
                        : n.id) === this.pagesCount
                    )
                      return !1;
                    switch (this._scrollMode) {
                      case i.ScrollMode.PAGE:
                        return _(this, N).scrollDown;
                      case i.ScrollMode.HORIZONTAL:
                        return this.scroll.right;
                    }
                    return this.scroll.down;
                  }
                  function re(e) {
                    for (const t of e) {
                      const e = this._pages[t - 1];
                      null == e || e.toggleLoadingIconSpinner(!0);
                    }
                    for (const t of _(this, R))
                      e.has(t.id) || t.toggleLoadingIconSpinner(!1);
                  }
                  t.BaseViewer = X;
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFPageView = void 0);
                  var r = n(3),
                    i = n(7),
                    o = n(14),
                    a = n(4),
                    s = n(15);
                  function l(e, t, n) {
                    !(function (e, t) {
                      if (t.has(e))
                        throw new TypeError(
                          'Cannot initialize the same private elements twice on an object',
                        );
                    })(e, t),
                      t.set(e, n);
                  }
                  function c(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, u(e, t, 'get'));
                  }
                  function h(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, u(e, t, 'set'), n),
                      n
                    );
                  }
                  function u(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  const d = o.compatibilityParams.maxCanvasPixels || 16777216;
                  var p = new WeakMap(),
                    f = new WeakMap();
                  t.PDFPageView = class {
                    constructor(e) {
                      var t, n, o, s;
                      l(this, p, {
                        writable: !0,
                        value: r.AnnotationMode.ENABLE_FORMS,
                      }),
                        l(this, f, {
                          writable: !0,
                          value: {
                            initialOptionalContent: !0,
                            regularAnnotations: !0,
                          },
                        });
                      const u = e.container,
                        g = e.defaultViewport;
                      (this.id = e.id),
                        (this.renderingId = 'page' + this.id),
                        (this.pdfPage = null),
                        (this.pageLabel = null),
                        (this.rotation = 0),
                        (this.scale = e.scale || i.DEFAULT_SCALE),
                        (this.viewport = g),
                        (this.pdfPageRotate = g.rotation),
                        (this._optionalContentConfigPromise =
                          e.optionalContentConfigPromise || null),
                        (this.hasRestrictedScaling = !1),
                        (this.textLayerMode =
                          null !== (t = e.textLayerMode) && void 0 !== t
                            ? t
                            : i.TextLayerMode.ENABLE),
                        h(
                          this,
                          p,
                          null !== (n = e.annotationMode) && void 0 !== n
                            ? n
                            : r.AnnotationMode.ENABLE_FORMS,
                        ),
                        (this.imageResourcesPath = e.imageResourcesPath || ''),
                        (this.useOnlyCssZoom = e.useOnlyCssZoom || !1),
                        (this.maxCanvasPixels = e.maxCanvasPixels || d),
                        (this.pageColors = e.pageColors || null),
                        (this.eventBus = e.eventBus),
                        (this.renderingQueue = e.renderingQueue),
                        (this.textLayerFactory = e.textLayerFactory),
                        (this.annotationLayerFactory =
                          e.annotationLayerFactory),
                        (this.annotationEditorLayerFactory =
                          e.annotationEditorLayerFactory),
                        (this.xfaLayerFactory = e.xfaLayerFactory),
                        (this.textHighlighter =
                          null === (o = e.textHighlighterFactory) ||
                          void 0 === o
                            ? void 0
                            : o.createTextHighlighter({
                                pageIndex: this.id - 1,
                                eventBus: this.eventBus,
                              })),
                        (this.structTreeLayerFactory =
                          e.structTreeLayerFactory),
                        (this.renderer = e.renderer || i.RendererType.CANVAS),
                        (this.l10n = e.l10n || a.NullL10n),
                        (this.paintTask = null),
                        (this.paintedViewportMap = new WeakMap()),
                        (this.renderingState = i.RenderingStates.INITIAL),
                        (this.resume = null),
                        (this._renderError = null),
                        (this._isStandalone = !(
                          null !== (s = this.renderingQueue) &&
                          void 0 !== s &&
                          s.hasViewer()
                        )),
                        (this._annotationCanvasMap = null),
                        (this.annotationLayer = null),
                        (this.annotationEditorLayer = null),
                        (this.textLayer = null),
                        (this.zoomLayer = null),
                        (this.xfaLayer = null),
                        (this.structTreeLayer = null);
                      const m = document.createElement('div');
                      if (
                        ((m.className = 'page'),
                        (m.style.width =
                          Math.floor(this.viewport.width) + 'px'),
                        (m.style.height =
                          Math.floor(this.viewport.height) + 'px'),
                        m.setAttribute('data-page-number', this.id),
                        m.setAttribute('role', 'region'),
                        this.l10n
                          .get('page_landmark', { page: this.id })
                          .then((e) => {
                            m.setAttribute('aria-label', e);
                          }),
                        (this.div = m),
                        null == u || u.append(m),
                        this._isStandalone)
                      ) {
                        const { optionalContentConfigPromise: t } = e;
                        t &&
                          t.then((e) => {
                            t === this._optionalContentConfigPromise &&
                              (c(this, f).initialOptionalContent =
                                e.hasInitialVisibility);
                          });
                      }
                    }
                    setPdfPage(e) {
                      (this.pdfPage = e), (this.pdfPageRotate = e.rotate);
                      const t = (this.rotation + this.pdfPageRotate) % 360;
                      (this.viewport = e.getViewport({
                        scale: this.scale * r.PixelsPerInch.PDF_TO_CSS_UNITS,
                        rotation: t,
                      })),
                        this.reset();
                    }
                    destroy() {
                      this.reset(), this.pdfPage && this.pdfPage.cleanup();
                    }
                    async _renderAnnotationLayer() {
                      let e = null;
                      try {
                        await this.annotationLayer.render(
                          this.viewport,
                          'display',
                        );
                      } catch (t) {
                        console.error(`_renderAnnotationLayer: "${t}".`),
                          (e = t);
                      } finally {
                        this.eventBus.dispatch('annotationlayerrendered', {
                          source: this,
                          pageNumber: this.id,
                          error: e,
                        });
                      }
                    }
                    async _renderAnnotationEditorLayer() {
                      let e = null;
                      try {
                        await this.annotationEditorLayer.render(
                          this.viewport,
                          'display',
                        );
                      } catch (t) {
                        console.error(`_renderAnnotationEditorLayer: "${t}".`),
                          (e = t);
                      } finally {
                        this.eventBus.dispatch(
                          'annotationeditorlayerrendered',
                          { source: this, pageNumber: this.id, error: e },
                        );
                      }
                    }
                    async _renderXfaLayer() {
                      let e = null;
                      try {
                        const e = await this.xfaLayer.render(
                          this.viewport,
                          'display',
                        );
                        this.textHighlighter &&
                          this._buildXfaTextContentItems(e.textDivs);
                      } catch (t) {
                        console.error(`_renderXfaLayer: "${t}".`), (e = t);
                      } finally {
                        this.eventBus.dispatch('xfalayerrendered', {
                          source: this,
                          pageNumber: this.id,
                          error: e,
                        });
                      }
                    }
                    async _buildXfaTextContentItems(e) {
                      const t = await this.pdfPage.getTextContent(),
                        n = [];
                      for (const e of t.items) n.push(e.str);
                      this.textHighlighter.setTextMapping(e, n),
                        this.textHighlighter.enable();
                    }
                    _resetZoomLayer() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (!this.zoomLayer) return;
                      const t = this.zoomLayer.firstChild;
                      this.paintedViewportMap.delete(t),
                        (t.width = 0),
                        (t.height = 0),
                        e && this.zoomLayer.remove(),
                        (this.zoomLayer = null);
                    }
                    reset() {
                      var e, t, n;
                      let {
                        keepZoomLayer: r = !1,
                        keepAnnotationLayer: o = !1,
                        keepAnnotationEditorLayer: a = !1,
                        keepXfaLayer: s = !1,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      this.cancelRendering({
                        keepAnnotationLayer: o,
                        keepAnnotationEditorLayer: a,
                        keepXfaLayer: s,
                      }),
                        (this.renderingState = i.RenderingStates.INITIAL);
                      const l = this.div;
                      (l.style.width = Math.floor(this.viewport.width) + 'px'),
                        (l.style.height =
                          Math.floor(this.viewport.height) + 'px');
                      const c = l.childNodes,
                        h = (r && this.zoomLayer) || null,
                        u =
                          (o &&
                            (null === (e = this.annotationLayer) || void 0 === e
                              ? void 0
                              : e.div)) ||
                          null,
                        d =
                          (a &&
                            (null === (t = this.annotationEditorLayer) ||
                            void 0 === t
                              ? void 0
                              : t.div)) ||
                          null,
                        p =
                          (s &&
                            (null === (n = this.xfaLayer) || void 0 === n
                              ? void 0
                              : n.div)) ||
                          null;
                      for (let e = c.length - 1; e >= 0; e--) {
                        const t = c[e];
                        switch (t) {
                          case h:
                          case u:
                          case d:
                          case p:
                            continue;
                        }
                        t.remove();
                      }
                      var f;
                      l.removeAttribute('data-loaded'),
                        u && this.annotationLayer.hide(),
                        d
                          ? this.annotationEditorLayer.hide()
                          : null === (f = this.annotationEditorLayer) ||
                            void 0 === f ||
                            f.destroy(),
                        p && this.xfaLayer.hide(),
                        h ||
                          (this.canvas &&
                            (this.paintedViewportMap.delete(this.canvas),
                            (this.canvas.width = 0),
                            (this.canvas.height = 0),
                            delete this.canvas),
                          this._resetZoomLayer()),
                        this.svg &&
                          (this.paintedViewportMap.delete(this.svg),
                          delete this.svg),
                        (this.loadingIconDiv = document.createElement('div')),
                        (this.loadingIconDiv.className =
                          'loadingIcon notVisible'),
                        this._isStandalone && this.toggleLoadingIconSpinner(!0),
                        this.loadingIconDiv.setAttribute('role', 'img'),
                        this.l10n.get('loading').then((e) => {
                          var t;
                          null === (t = this.loadingIconDiv) ||
                            void 0 === t ||
                            t.setAttribute('aria-label', e);
                        }),
                        l.append(this.loadingIconDiv);
                    }
                    update(e) {
                      let {
                        scale: t = 0,
                        rotation: n = null,
                        optionalContentConfigPromise: o = null,
                      } = e;
                      (this.scale = t || this.scale),
                        'number' == typeof n && (this.rotation = n),
                        o instanceof Promise &&
                          ((this._optionalContentConfigPromise = o),
                          o.then((e) => {
                            o === this._optionalContentConfigPromise &&
                              (c(this, f).initialOptionalContent =
                                e.hasInitialVisibility);
                          }));
                      const a = (this.rotation + this.pdfPageRotate) % 360;
                      if (
                        ((this.viewport = this.viewport.clone({
                          scale: this.scale * r.PixelsPerInch.PDF_TO_CSS_UNITS,
                          rotation: a,
                        })),
                        this._isStandalone &&
                          i.docStyle.setProperty(
                            '--scale-factor',
                            this.viewport.scale,
                          ),
                        this.svg)
                      )
                        return (
                          this.cssTransform({
                            target: this.svg,
                            redrawAnnotationLayer: !0,
                            redrawAnnotationEditorLayer: !0,
                            redrawXfaLayer: !0,
                          }),
                          void this.eventBus.dispatch('pagerendered', {
                            source: this,
                            pageNumber: this.id,
                            cssTransform: !0,
                            timestamp: performance.now(),
                            error: this._renderError,
                          })
                        );
                      let s = !1;
                      if (this.canvas && this.maxCanvasPixels > 0) {
                        const e = this.outputScale;
                        ((Math.floor(this.viewport.width) * e.sx) | 0) *
                          ((Math.floor(this.viewport.height) * e.sy) | 0) >
                          this.maxCanvasPixels && (s = !0);
                      }
                      if (this.canvas) {
                        if (
                          this.useOnlyCssZoom ||
                          (this.hasRestrictedScaling && s)
                        )
                          return (
                            this.cssTransform({
                              target: this.canvas,
                              redrawAnnotationLayer: !0,
                              redrawAnnotationEditorLayer: !0,
                              redrawXfaLayer: !0,
                            }),
                            void this.eventBus.dispatch('pagerendered', {
                              source: this,
                              pageNumber: this.id,
                              cssTransform: !0,
                              timestamp: performance.now(),
                              error: this._renderError,
                            })
                          );
                        this.zoomLayer ||
                          this.canvas.hidden ||
                          ((this.zoomLayer = this.canvas.parentNode),
                          (this.zoomLayer.style.position = 'absolute'));
                      }
                      this.zoomLayer &&
                        this.cssTransform({
                          target: this.zoomLayer.firstChild,
                        }),
                        this.reset({
                          keepZoomLayer: !0,
                          keepAnnotationLayer: !0,
                          keepAnnotationEditorLayer: !0,
                          keepXfaLayer: !0,
                        });
                    }
                    cancelRendering() {
                      let {
                        keepAnnotationLayer: e = !1,
                        keepAnnotationEditorLayer: t = !1,
                        keepXfaLayer: n = !1,
                      } = arguments.length > 0 && void 0 !== arguments[0]
                        ? arguments[0]
                        : {};
                      var r;
                      this.paintTask &&
                        (this.paintTask.cancel(), (this.paintTask = null)),
                        (this.resume = null),
                        this.textLayer &&
                          (this.textLayer.cancel(), (this.textLayer = null)),
                        !this.annotationLayer ||
                          (e && this.annotationLayer.div) ||
                          (this.annotationLayer.cancel(),
                          (this.annotationLayer = null),
                          (this._annotationCanvasMap = null)),
                        !this.annotationEditorLayer ||
                          (t && this.annotationEditorLayer.div) ||
                          (this.annotationEditorLayer.cancel(),
                          (this.annotationEditorLayer = null)),
                        !this.xfaLayer ||
                          (n && this.xfaLayer.div) ||
                          (this.xfaLayer.cancel(),
                          (this.xfaLayer = null),
                          null === (r = this.textHighlighter) ||
                            void 0 === r ||
                            r.disable()),
                        this._onTextLayerRendered &&
                          (this.eventBus._off(
                            'textlayerrendered',
                            this._onTextLayerRendered,
                          ),
                          (this._onTextLayerRendered = null));
                    }
                    cssTransform(e) {
                      let {
                        target: t,
                        redrawAnnotationLayer: n = !1,
                        redrawAnnotationEditorLayer: r = !1,
                        redrawXfaLayer: i = !1,
                      } = e;
                      const o = this.viewport.width,
                        a = this.viewport.height,
                        s = this.div;
                      (t.style.width =
                        t.parentNode.style.width =
                        s.style.width =
                          Math.floor(o) + 'px'),
                        (t.style.height =
                          t.parentNode.style.height =
                          s.style.height =
                            Math.floor(a) + 'px');
                      const l =
                          this.viewport.rotation -
                          this.paintedViewportMap.get(t).rotation,
                        c = Math.abs(l);
                      let h = 1,
                        u = 1;
                      if (
                        ((90 !== c && 270 !== c) || ((h = a / o), (u = o / a)),
                        (t.style.transform = `rotate(${l}deg) scale(${h}, ${u})`),
                        this.textLayer)
                      ) {
                        const e = this.textLayer.viewport,
                          t = this.viewport.rotation - e.rotation,
                          n = Math.abs(t);
                        let r = o / e.width;
                        (90 !== n && 270 !== n) || (r = o / e.height);
                        const i = this.textLayer.textLayerDiv;
                        let a, s;
                        switch (n) {
                          case 0:
                            a = s = 0;
                            break;
                          case 90:
                            (a = 0), (s = '-' + i.style.height);
                            break;
                          case 180:
                            (a = '-' + i.style.width),
                              (s = '-' + i.style.height);
                            break;
                          case 270:
                            (a = '-' + i.style.width), (s = 0);
                            break;
                          default:
                            console.error('Bad rotation value.');
                        }
                        (i.style.transform = `rotate(${n}deg) scale(${r}) translate(${a}, ${s})`),
                          (i.style.transformOrigin = '0% 0%');
                      }
                      n &&
                        this.annotationLayer &&
                        this._renderAnnotationLayer(),
                        r &&
                          this.annotationEditorLayer &&
                          this._renderAnnotationEditorLayer(),
                        i && this.xfaLayer && this._renderXfaLayer();
                    }
                    get width() {
                      return this.viewport.width;
                    }
                    get height() {
                      return this.viewport.height;
                    }
                    getPagePoint(e, t) {
                      return this.viewport.convertToPdfPoint(e, t);
                    }
                    toggleLoadingIconSpinner() {
                      var e;
                      let t =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      null === (e = this.loadingIconDiv) ||
                        void 0 === e ||
                        e.classList.toggle('notVisible', !t);
                    }
                    draw() {
                      var e,
                        t,
                        n,
                        o = this;
                      this.renderingState !== i.RenderingStates.INITIAL &&
                        (console.error('Must be in new state before drawing'),
                        this.reset());
                      const { div: a, pdfPage: l } = this;
                      if (!l)
                        return (
                          (this.renderingState = i.RenderingStates.FINISHED),
                          this.loadingIconDiv &&
                            (this.loadingIconDiv.remove(),
                            delete this.loadingIconDiv),
                          Promise.reject(new Error('pdfPage is not loaded'))
                        );
                      this.renderingState = i.RenderingStates.RUNNING;
                      const h = document.createElement('div');
                      (h.style.width = a.style.width),
                        (h.style.height = a.style.height),
                        h.classList.add('canvasWrapper');
                      const u =
                        (null === (e = this.annotationLayer) || void 0 === e
                          ? void 0
                          : e.div) ||
                        (null === (t = this.annotationEditorLayer) ||
                        void 0 === t
                          ? void 0
                          : t.div);
                      u ? u.before(h) : a.append(h);
                      let d = null;
                      if (
                        this.textLayerMode !== i.TextLayerMode.DISABLE &&
                        this.textLayerFactory
                      ) {
                        this._accessibilityManager ||
                          (this._accessibilityManager =
                            new s.TextAccessibilityManager());
                        const e = document.createElement('div');
                        (e.className = 'textLayer'),
                          (e.style.width = h.style.width),
                          (e.style.height = h.style.height),
                          u ? u.before(e) : a.append(e),
                          (d = this.textLayerFactory.createTextLayerBuilder({
                            textLayerDiv: e,
                            pageIndex: this.id - 1,
                            viewport: this.viewport,
                            enhanceTextSelection:
                              this.textLayerMode ===
                              i.TextLayerMode.ENABLE_ENHANCE,
                            eventBus: this.eventBus,
                            highlighter: this.textHighlighter,
                            accessibilityManager: this._accessibilityManager,
                          }));
                      }
                      (this.textLayer = d),
                        c(this, p) !== r.AnnotationMode.DISABLE &&
                          this.annotationLayerFactory &&
                          (this._annotationCanvasMap ||
                            (this._annotationCanvasMap = new Map()),
                          this.annotationLayer ||
                            (this.annotationLayer =
                              this.annotationLayerFactory.createAnnotationLayerBuilder(
                                {
                                  pageDiv: a,
                                  pdfPage: l,
                                  imageResourcesPath: this.imageResourcesPath,
                                  renderForms:
                                    c(this, p) ===
                                    r.AnnotationMode.ENABLE_FORMS,
                                  l10n: this.l10n,
                                  annotationCanvasMap:
                                    this._annotationCanvasMap,
                                  accessibilityManager:
                                    this._accessibilityManager,
                                },
                              ))),
                        null !== (n = this.xfaLayer) &&
                          void 0 !== n &&
                          n.div &&
                          a.append(this.xfaLayer.div);
                      let g = null;
                      this.renderingQueue &&
                        (g = (e) => {
                          if (!this.renderingQueue.isHighestPriority(this))
                            return (
                              (this.renderingState = i.RenderingStates.PAUSED),
                              void (this.resume = () => {
                                (this.renderingState =
                                  i.RenderingStates.RUNNING),
                                  e();
                              })
                            );
                          e();
                        });
                      const m = async function () {
                          let e =
                            arguments.length > 0 && void 0 !== arguments[0]
                              ? arguments[0]
                              : null;
                          if (
                            (v === o.paintTask && (o.paintTask = null),
                            e instanceof r.RenderingCancelledException)
                          )
                            o._renderError = null;
                          else if (
                            ((o._renderError = e),
                            (o.renderingState = i.RenderingStates.FINISHED),
                            o.loadingIconDiv &&
                              (o.loadingIconDiv.remove(),
                              delete o.loadingIconDiv),
                            o._resetZoomLayer(!0),
                            (c(o, f).regularAnnotations = !v.separateAnnots),
                            o.eventBus.dispatch('pagerendered', {
                              source: o,
                              pageNumber: o.id,
                              cssTransform: !1,
                              timestamp: performance.now(),
                              error: o._renderError,
                            }),
                            e)
                          )
                            throw e;
                        },
                        v =
                          this.renderer === i.RendererType.SVG
                            ? this.paintOnSvg(h)
                            : this.paintOnCanvas(h);
                      (v.onRenderContinue = g), (this.paintTask = v);
                      const b = v.promise.then(
                        () =>
                          m(null).then(() => {
                            if (d) {
                              const e = l.streamTextContent({
                                includeMarkedContent: !0,
                              });
                              d.setTextContentStream(e), d.render();
                            }
                            this.annotationLayer &&
                              this._renderAnnotationLayer().then(() => {
                                this.annotationEditorLayerFactory &&
                                  (this.annotationEditorLayer ||
                                    (this.annotationEditorLayer =
                                      this.annotationEditorLayerFactory.createAnnotationEditorLayerBuilder(
                                        {
                                          pageDiv: a,
                                          pdfPage: l,
                                          l10n: this.l10n,
                                          accessibilityManager:
                                            this._accessibilityManager,
                                        },
                                      )),
                                  this._renderAnnotationEditorLayer());
                              });
                          }),
                        function (e) {
                          return m(e);
                        },
                      );
                      return (
                        this.xfaLayerFactory &&
                          (this.xfaLayer ||
                            (this.xfaLayer =
                              this.xfaLayerFactory.createXfaLayerBuilder({
                                pageDiv: a,
                                pdfPage: l,
                              })),
                          this._renderXfaLayer()),
                        this.structTreeLayerFactory &&
                          this.textLayer &&
                          this.canvas &&
                          ((this._onTextLayerRendered = (e) => {
                            e.pageNumber === this.id &&
                              (this.eventBus._off(
                                'textlayerrendered',
                                this._onTextLayerRendered,
                              ),
                              (this._onTextLayerRendered = null),
                              this.canvas &&
                                this.pdfPage.getStructTree().then((e) => {
                                  if (!e) return;
                                  if (!this.canvas) return;
                                  const t = this.structTreeLayer.render(e);
                                  t.classList.add('structTree'),
                                    this.canvas.append(t);
                                }));
                          }),
                          this.eventBus._on(
                            'textlayerrendered',
                            this._onTextLayerRendered,
                          ),
                          (this.structTreeLayer =
                            this.structTreeLayerFactory.createStructTreeLayerBuilder(
                              { pdfPage: l },
                            ))),
                        a.setAttribute('data-loaded', !0),
                        this.eventBus.dispatch('pagerender', {
                          source: this,
                          pageNumber: this.id,
                        }),
                        b
                      );
                    }
                    paintOnCanvas(e) {
                      const t = (0, r.createPromiseCapability)(),
                        n = {
                          promise: t.promise,
                          onRenderContinue(e) {
                            e();
                          },
                          cancel() {
                            m.cancel();
                          },
                          get separateAnnots() {
                            return m.separateAnnots;
                          },
                        },
                        o = this.viewport,
                        a = document.createElement('canvas');
                      a.setAttribute('role', 'presentation'), (a.hidden = !0);
                      let s = !0;
                      const l = function () {
                        s && ((a.hidden = !1), (s = !1));
                      };
                      e.append(a), (this.canvas = a);
                      const h = a.getContext('2d', { alpha: !1 }),
                        u = (this.outputScale = new i.OutputScale());
                      if (this.useOnlyCssZoom) {
                        const e = o.clone({
                          scale: r.PixelsPerInch.PDF_TO_CSS_UNITS,
                        });
                        (u.sx *= e.width / o.width),
                          (u.sy *= e.height / o.height);
                      }
                      if (this.maxCanvasPixels > 0) {
                        const e = o.width * o.height,
                          t = Math.sqrt(this.maxCanvasPixels / e);
                        u.sx > t || u.sy > t
                          ? ((u.sx = t),
                            (u.sy = t),
                            (this.hasRestrictedScaling = !0))
                          : (this.hasRestrictedScaling = !1);
                      }
                      const d = (0, i.approximateFraction)(u.sx),
                        f = (0, i.approximateFraction)(u.sy);
                      (a.width = (0, i.roundToDivide)(o.width * u.sx, d[0])),
                        (a.height = (0, i.roundToDivide)(
                          o.height * u.sy,
                          f[0],
                        )),
                        (a.style.width =
                          (0, i.roundToDivide)(o.width, d[1]) + 'px'),
                        (a.style.height =
                          (0, i.roundToDivide)(o.height, f[1]) + 'px'),
                        this.paintedViewportMap.set(a, o);
                      const g = {
                          canvasContext: h,
                          transform: u.scaled ? [u.sx, 0, 0, u.sy, 0, 0] : null,
                          viewport: this.viewport,
                          annotationMode: c(this, p),
                          optionalContentConfigPromise:
                            this._optionalContentConfigPromise,
                          annotationCanvasMap: this._annotationCanvasMap,
                          pageColors: this.pageColors,
                        },
                        m = this.pdfPage.render(g);
                      return (
                        (m.onContinue = function (e) {
                          l(), n.onRenderContinue ? n.onRenderContinue(e) : e();
                        }),
                        m.promise.then(
                          function () {
                            l(), t.resolve();
                          },
                          function (e) {
                            l(), t.reject(e);
                          },
                        ),
                        n
                      );
                    }
                    paintOnSvg(e) {
                      let t = !1;
                      const n = () => {
                          if (t)
                            throw new r.RenderingCancelledException(
                              `Rendering cancelled, page ${this.id}`,
                              'svg',
                            );
                        },
                        o = this.pdfPage,
                        a = this.viewport.clone({
                          scale: r.PixelsPerInch.PDF_TO_CSS_UNITS,
                        });
                      return {
                        promise: o
                          .getOperatorList({ annotationMode: c(this, p) })
                          .then(
                            (t) => (
                              n(),
                              new r.SVGGraphics(o.commonObjs, o.objs)
                                .getSVG(t, a)
                                .then((t) => {
                                  n(),
                                    (this.svg = t),
                                    this.paintedViewportMap.set(t, a),
                                    (t.style.width = e.style.width),
                                    (t.style.height = e.style.height),
                                    (this.renderingState =
                                      i.RenderingStates.FINISHED),
                                    e.append(t);
                                })
                            ),
                          ),
                        onRenderContinue(e) {
                          e();
                        },
                        cancel() {
                          t = !0;
                        },
                        get separateAnnots() {
                          return !1;
                        },
                      };
                    }
                    setPageLabel(e) {
                      (this.pageLabel = 'string' == typeof e ? e : null),
                        null !== this.pageLabel
                          ? this.div.setAttribute(
                              'data-page-label',
                              this.pageLabel,
                            )
                          : this.div.removeAttribute('data-page-label');
                    }
                    get thumbnailCanvas() {
                      const {
                        initialOptionalContent: e,
                        regularAnnotations: t,
                      } = c(this, f);
                      return e && t ? this.canvas : null;
                    }
                  };
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.compatibilityParams =
                      t.OptionKind =
                      t.AppOptions =
                        void 0);
                  const n = Object.create(null);
                  t.compatibilityParams = n;
                  {
                    const e = navigator.userAgent || '',
                      t = navigator.platform || '',
                      r = navigator.maxTouchPoints || 1,
                      i = /Android/.test(e);
                    (/\b(iPad|iPhone|iPod)(?=;)/.test(e) ||
                      ('MacIntel' === t && r > 1) ||
                      i) &&
                      (n.maxCanvasPixels = 5242880);
                  }
                  const r = { VIEWER: 2, API: 4, WORKER: 8, PREFERENCE: 128 };
                  t.OptionKind = r;
                  const i = {
                    annotationEditorMode: {
                      value: -1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    annotationMode: { value: 2, kind: r.VIEWER + r.PREFERENCE },
                    cursorToolOnLoad: {
                      value: 0,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    defaultZoomValue: {
                      value: '',
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    disableHistory: { value: !1, kind: r.VIEWER },
                    disablePageLabels: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    enablePermissions: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    enablePrintAutoRotate: {
                      value: !0,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    enableScripting: {
                      value: !0,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    externalLinkRel: {
                      value: 'noopener noreferrer nofollow',
                      kind: r.VIEWER,
                    },
                    externalLinkTarget: {
                      value: 0,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    historyUpdateUrl: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    ignoreDestinationZoom: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    imageResourcesPath: { value: './images/', kind: r.VIEWER },
                    maxCanvasPixels: { value: 16777216, kind: r.VIEWER },
                    forcePageColors: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    pageColorsBackground: {
                      value: 'Canvas',
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    pageColorsForeground: {
                      value: 'CanvasText',
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    pdfBugEnabled: { value: !1, kind: r.VIEWER + r.PREFERENCE },
                    printResolution: { value: 150, kind: r.VIEWER },
                    sidebarViewOnLoad: {
                      value: -1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    scrollModeOnLoad: {
                      value: -1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    spreadModeOnLoad: {
                      value: -1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    textLayerMode: { value: 1, kind: r.VIEWER + r.PREFERENCE },
                    useOnlyCssZoom: {
                      value: !1,
                      kind: r.VIEWER + r.PREFERENCE,
                    },
                    viewerCssTheme: { value: 0, kind: r.VIEWER + r.PREFERENCE },
                    viewOnLoad: { value: 0, kind: r.VIEWER + r.PREFERENCE },
                    cMapPacked: { value: !0, kind: r.API },
                    cMapUrl: { value: '../web/cmaps/', kind: r.API },
                    disableAutoFetch: { value: !1, kind: r.API + r.PREFERENCE },
                    disableFontFace: { value: !1, kind: r.API + r.PREFERENCE },
                    disableRange: { value: !1, kind: r.API + r.PREFERENCE },
                    disableStream: { value: !1, kind: r.API + r.PREFERENCE },
                    docBaseUrl: { value: '', kind: r.API },
                    enableXfa: { value: !0, kind: r.API + r.PREFERENCE },
                    fontExtraProperties: { value: !1, kind: r.API },
                    isEvalSupported: { value: !0, kind: r.API },
                    maxImageSize: { value: -1, kind: r.API },
                    pdfBug: { value: !1, kind: r.API },
                    standardFontDataUrl: {
                      value: '../web/standard_fonts/',
                      kind: r.API,
                    },
                    verbosity: { value: 1, kind: r.API },
                    workerPort: { value: null, kind: r.WORKER },
                    workerSrc: {
                      value: '../build/pdf.worker.js',
                      kind: r.WORKER,
                    },
                  };
                  (i.defaultUrl = {
                    value: 'compressed.tracemonkey-pldi-09.pdf',
                    kind: r.VIEWER,
                  }),
                    (i.disablePreferences = { value: !1, kind: r.VIEWER }),
                    (i.locale = {
                      value: navigator.language || 'en-US',
                      kind: r.VIEWER,
                    }),
                    (i.renderer = {
                      value: 'canvas',
                      kind: r.VIEWER + r.PREFERENCE,
                    }),
                    (i.sandboxBundleSrc = {
                      value: '../build/pdf.sandbox.js',
                      kind: r.VIEWER,
                    });
                  const o = Object.create(null);
                  t.AppOptions = class {
                    constructor() {
                      throw new Error('Cannot initialize AppOptions.');
                    }
                    static get(e) {
                      const t = o[e];
                      if (void 0 !== t) return t;
                      const r = i[e];
                      var a;
                      return void 0 !== r
                        ? null !== (a = n[e]) && void 0 !== a
                          ? a
                          : r.value
                        : void 0;
                    }
                    static getAll() {
                      let e =
                        arguments.length > 0 && void 0 !== arguments[0]
                          ? arguments[0]
                          : null;
                      const t = Object.create(null);
                      for (const s in i) {
                        var a;
                        const l = i[s];
                        if (e) {
                          if (!(e & l.kind)) continue;
                          if (e === r.PREFERENCE) {
                            const e = l.value,
                              n = typeof e;
                            if (
                              'boolean' === n ||
                              'string' === n ||
                              ('number' === n && Number.isInteger(e))
                            ) {
                              t[s] = e;
                              continue;
                            }
                            throw new Error(
                              `Invalid type for preference: ${s}`,
                            );
                          }
                        }
                        const c = o[s];
                        t[s] =
                          void 0 !== c
                            ? c
                            : null !== (a = n[s]) && void 0 !== a
                              ? a
                              : l.value;
                      }
                      return t;
                    }
                    static set(e, t) {
                      o[e] = t;
                    }
                    static setAll(e) {
                      for (const t in e) o[t] = e[t];
                    }
                    static remove(e) {
                      delete o[e];
                    }
                    static _hasUserOptions() {
                      return Object.keys(o).length > 0;
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.TextAccessibilityManager = void 0);
                  var r = n(7);
                  function i(e, t, n) {
                    o(e, t), t.set(e, n);
                  }
                  function o(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function a(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  function s(e, t, n) {
                    return (
                      (function (e, t) {
                        if (e !== t)
                          throw new TypeError(
                            'Private static access of wrong provenance',
                          );
                      })(e, t),
                      n
                    );
                  }
                  function l(e, t) {
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, h(e, t, 'get'));
                  }
                  function c(e, t, n) {
                    return (
                      (function (e, t, n) {
                        if (t.set) t.set.call(e, n);
                        else {
                          if (!t.writable)
                            throw new TypeError(
                              'attempted to set read only private field',
                            );
                          t.value = n;
                        }
                      })(e, h(e, t, 'set'), n),
                      n
                    );
                  }
                  function h(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to ' + n + ' private field on non-instance',
                      );
                    return t.get(e);
                  }
                  var u = new WeakMap(),
                    d = new WeakMap(),
                    p = new WeakMap(),
                    f = new WeakMap(),
                    g = new WeakSet();
                  class m {
                    constructor() {
                      var e, t;
                      o((e = this), (t = g)),
                        t.add(e),
                        i(this, u, { writable: !0, value: !1 }),
                        i(this, d, { writable: !0, value: null }),
                        i(this, p, { writable: !0, value: new Map() }),
                        i(this, f, { writable: !0, value: new Map() });
                    }
                    setTextMapping(e) {
                      c(this, d, e);
                    }
                    enable() {
                      if (l(this, u))
                        throw new Error(
                          'TextAccessibilityManager is already enabled.',
                        );
                      if (!l(this, d))
                        throw new Error(
                          'Text divs and strings have not been set.',
                        );
                      if (
                        (c(this, u, !0),
                        c(this, d, l(this, d).slice()),
                        l(this, d).sort(s(m, m, v)),
                        l(this, p).size > 0)
                      ) {
                        const e = l(this, d);
                        for (const [t, n] of l(this, p))
                          document.getElementById(t)
                            ? a(this, g, b).call(this, t, e[n])
                            : l(this, p).delete(t);
                      }
                      for (const [e, t] of l(this, f))
                        this.addPointerInTextLayer(e, t);
                      l(this, f).clear();
                    }
                    disable() {
                      l(this, u) &&
                        (l(this, f).clear(), c(this, d, null), c(this, u, !1));
                    }
                    removePointerInTextLayer(e) {
                      var t;
                      if (!l(this, u)) return void l(this, f).delete(e);
                      const n = l(this, d);
                      if (!n || 0 === n.length) return;
                      const { id: r } = e,
                        i = l(this, p).get(r);
                      if (void 0 === i) return;
                      const o = n[i];
                      l(this, p).delete(r);
                      let a = o.getAttribute('aria-owns');
                      null !== (t = a) &&
                        void 0 !== t &&
                        t.includes(r) &&
                        ((a = a
                          .split(' ')
                          .filter((e) => e !== r)
                          .join(' ')),
                        a
                          ? o.setAttribute('aria-owns', a)
                          : (o.removeAttribute('aria-owns'),
                            o.setAttribute('role', 'presentation')));
                    }
                    addPointerInTextLayer(e, t) {
                      const { id: n } = e;
                      if (!n) return;
                      if (!l(this, u)) return void l(this, f).set(e, t);
                      t && this.removePointerInTextLayer(e);
                      const i = l(this, d);
                      if (!i || 0 === i.length) return;
                      const o = (0, r.binarySearchFirstItem)(
                          i,
                          (t) => s(m, m, v).call(m, e, t) < 0,
                        ),
                        c = Math.max(0, o - 1);
                      a(this, g, b).call(this, n, i[c]), l(this, p).set(n, c);
                    }
                    moveElementInDOM(e, t, n, i) {
                      if (
                        (this.addPointerInTextLayer(n, i), !e.hasChildNodes())
                      )
                        return void e.append(t);
                      const o = Array.from(e.childNodes).filter((e) => e !== t);
                      if (0 === o.length) return;
                      const a = n || t,
                        l = (0, r.binarySearchFirstItem)(
                          o,
                          (e) => s(m, m, v).call(m, a, e) < 0,
                        );
                      0 === l ? o[0].before(t) : o[l - 1].after(t);
                    }
                  }
                  function v(e, t) {
                    const n = e.getBoundingClientRect(),
                      r = t.getBoundingClientRect();
                    if (0 === n.width && 0 === n.height) return 1;
                    if (0 === r.width && 0 === r.height) return -1;
                    const i = n.y,
                      o = n.y + n.height,
                      a = n.y + n.height / 2,
                      s = r.y,
                      l = r.y + r.height,
                      c = r.y + r.height / 2;
                    return a <= s && c >= o
                      ? -1
                      : c <= i && a >= l
                        ? 1
                        : n.x + n.width / 2 - (r.x + r.width / 2);
                  }
                  function b(e, t) {
                    const n = t.getAttribute('aria-owns');
                    (null != n && n.includes(e)) ||
                      t.setAttribute('aria-owns', n ? `${n} ${e}` : e),
                      t.removeAttribute('role');
                  }
                  t.TextAccessibilityManager = m;
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFRenderingQueue = void 0);
                  var r = n(3),
                    i = n(7);
                  t.PDFRenderingQueue = class {
                    constructor() {
                      (this.pdfViewer = null),
                        (this.pdfThumbnailViewer = null),
                        (this.onIdle = null),
                        (this.highestPriorityPage = null),
                        (this.idleTimeout = null),
                        (this.printing = !1),
                        (this.isThumbnailViewEnabled = !1);
                    }
                    setViewer(e) {
                      this.pdfViewer = e;
                    }
                    setThumbnailViewer(e) {
                      this.pdfThumbnailViewer = e;
                    }
                    isHighestPriority(e) {
                      return this.highestPriorityPage === e.renderingId;
                    }
                    hasViewer() {
                      return !!this.pdfViewer;
                    }
                    renderHighestPriority(e) {
                      var t;
                      this.idleTimeout &&
                        (clearTimeout(this.idleTimeout),
                        (this.idleTimeout = null)),
                        this.pdfViewer.forceRendering(e) ||
                          (this.isThumbnailViewEnabled &&
                            null !== (t = this.pdfThumbnailViewer) &&
                            void 0 !== t &&
                            t.forceRendering()) ||
                          this.printing ||
                          (this.onIdle &&
                            (this.idleTimeout = setTimeout(
                              this.onIdle.bind(this),
                              3e4,
                            )));
                    }
                    getHighestPriority(e, t, n) {
                      let r =
                        arguments.length > 3 &&
                        void 0 !== arguments[3] &&
                        arguments[3];
                      const i = e.views,
                        o = i.length;
                      if (0 === o) return null;
                      for (let e = 0; e < o; e++) {
                        const t = i[e].view;
                        if (!this.isViewFinished(t)) return t;
                      }
                      const a = e.first.id,
                        s = e.last.id;
                      if (s - a + 1 > o) {
                        const r = e.ids;
                        for (let e = 1, i = s - a; e < i; e++) {
                          const i = n ? a + e : s - e;
                          if (r.has(i)) continue;
                          const o = t[i - 1];
                          if (!this.isViewFinished(o)) return o;
                        }
                      }
                      let l = n ? s : a - 2,
                        c = t[l];
                      return (c && !this.isViewFinished(c)) ||
                        (r &&
                          ((l += n ? 1 : -1),
                          (c = t[l]),
                          c && !this.isViewFinished(c)))
                        ? c
                        : null;
                    }
                    isViewFinished(e) {
                      return e.renderingState === i.RenderingStates.FINISHED;
                    }
                    renderView(e) {
                      switch (e.renderingState) {
                        case i.RenderingStates.FINISHED:
                          return !1;
                        case i.RenderingStates.PAUSED:
                          (this.highestPriorityPage = e.renderingId),
                            e.resume();
                          break;
                        case i.RenderingStates.RUNNING:
                          this.highestPriorityPage = e.renderingId;
                          break;
                        case i.RenderingStates.INITIAL:
                          (this.highestPriorityPage = e.renderingId),
                            e
                              .draw()
                              .finally(() => {
                                this.renderHighestPriority();
                              })
                              .catch((e) => {
                                e instanceof r.RenderingCancelledException ||
                                  console.error(`renderView: "${e}"`);
                              });
                      }
                      return !0;
                    }
                  };
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.TextHighlighter = void 0),
                    (t.TextHighlighter = class {
                      constructor(e) {
                        let {
                          findController: t,
                          eventBus: n,
                          pageIndex: r,
                        } = e;
                        (this.findController = t),
                          (this.matches = []),
                          (this.eventBus = n),
                          (this.pageIdx = r),
                          (this._onUpdateTextLayerMatches = null),
                          (this.textDivs = null),
                          (this.textContentItemsStr = null),
                          (this.enabled = !1);
                      }
                      setTextMapping(e, t) {
                        (this.textDivs = e), (this.textContentItemsStr = t);
                      }
                      enable() {
                        if (!this.textDivs || !this.textContentItemsStr)
                          throw new Error(
                            'Text divs and strings have not been set.',
                          );
                        if (this.enabled)
                          throw new Error(
                            'TextHighlighter is already enabled.',
                          );
                        (this.enabled = !0),
                          this._onUpdateTextLayerMatches ||
                            ((this._onUpdateTextLayerMatches = (e) => {
                              (e.pageIndex !== this.pageIdx &&
                                -1 !== e.pageIndex) ||
                                this._updateMatches();
                            }),
                            this.eventBus._on(
                              'updatetextlayermatches',
                              this._onUpdateTextLayerMatches,
                            )),
                          this._updateMatches();
                      }
                      disable() {
                        this.enabled &&
                          ((this.enabled = !1),
                          this._onUpdateTextLayerMatches &&
                            (this.eventBus._off(
                              'updatetextlayermatches',
                              this._onUpdateTextLayerMatches,
                            ),
                            (this._onUpdateTextLayerMatches = null)));
                      }
                      _convertMatches(e, t) {
                        if (!e) return [];
                        const { textContentItemsStr: n } = this;
                        let r = 0,
                          i = 0;
                        const o = n.length - 1,
                          a = [];
                        for (let s = 0, l = e.length; s < l; s++) {
                          let l = e[s];
                          for (; r !== o && l >= i + n[r].length; )
                            (i += n[r].length), r++;
                          r === n.length &&
                            console.error('Could not find a matching mapping');
                          const c = { begin: { divIdx: r, offset: l - i } };
                          for (l += t[s]; r !== o && l > i + n[r].length; )
                            (i += n[r].length), r++;
                          (c.end = { divIdx: r, offset: l - i }), a.push(c);
                        }
                        return a;
                      }
                      _renderMatches(e) {
                        if (0 === e.length) return;
                        const { findController: t, pageIdx: n } = this,
                          { textContentItemsStr: r, textDivs: i } = this,
                          o = n === t.selected.pageIdx,
                          a = t.selected.matchIdx;
                        let s = null;
                        const l = { divIdx: -1, offset: void 0 };
                        function c(e, t) {
                          const n = e.divIdx;
                          return (i[n].textContent = ''), h(n, 0, e.offset, t);
                        }
                        function h(e, t, n, o) {
                          let a = i[e];
                          if (a.nodeType === Node.TEXT_NODE) {
                            const t = document.createElement('span');
                            a.before(t), t.append(a), (i[e] = t), (a = t);
                          }
                          const s = r[e].substring(t, n),
                            l = document.createTextNode(s);
                          if (o) {
                            const e = document.createElement('span');
                            return (
                              (e.className = `${o} appended`),
                              e.append(l),
                              a.append(e),
                              o.includes('selected') ? e.offsetLeft : 0
                            );
                          }
                          return a.append(l), 0;
                        }
                        let u = a,
                          d = u + 1;
                        if (t.state.highlightAll) (u = 0), (d = e.length);
                        else if (!o) return;
                        for (let r = u; r < d; r++) {
                          const u = e[r],
                            d = u.begin,
                            p = u.end,
                            f = o && r === a,
                            g = f ? ' selected' : '';
                          let m = 0;
                          if (
                            (s && d.divIdx === s.divIdx
                              ? h(s.divIdx, s.offset, d.offset)
                              : (null !== s && h(s.divIdx, s.offset, l.offset),
                                c(d)),
                            d.divIdx === p.divIdx)
                          )
                            m = h(
                              d.divIdx,
                              d.offset,
                              p.offset,
                              'highlight' + g,
                            );
                          else {
                            m = h(
                              d.divIdx,
                              d.offset,
                              l.offset,
                              'highlight begin' + g,
                            );
                            for (let e = d.divIdx + 1, t = p.divIdx; e < t; e++)
                              i[e].className = 'highlight middle' + g;
                            c(p, 'highlight end' + g);
                          }
                          (s = p),
                            f &&
                              t.scrollMatchIntoView({
                                element: i[d.divIdx],
                                selectedLeft: m,
                                pageIndex: n,
                                matchIndex: a,
                              });
                        }
                        s && h(s.divIdx, s.offset, l.offset);
                      }
                      _updateMatches() {
                        if (!this.enabled) return;
                        const {
                            findController: e,
                            matches: t,
                            pageIdx: n,
                          } = this,
                          { textContentItemsStr: r, textDivs: i } = this;
                        let o = -1;
                        for (let e = 0, n = t.length; e < n; e++) {
                          const n = t[e];
                          for (
                            let e = Math.max(o, n.begin.divIdx),
                              t = n.end.divIdx;
                            e <= t;
                            e++
                          ) {
                            const t = i[e];
                            (t.textContent = r[e]), (t.className = '');
                          }
                          o = n.end.divIdx + 1;
                        }
                        if (null == e || !e.highlightMatches) return;
                        const a = e.pageMatches[n] || null,
                          s = e.pageMatchesLength[n] || null;
                        (this.matches = this._convertMatches(a, s)),
                          this._renderMatches(this.matches);
                      }
                    });
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.DownloadManager = void 0);
                  var r = n(3);
                  function i(e, t) {
                    const n = document.createElement('a');
                    if (!n.click)
                      throw new Error(
                        'DownloadManager: "a.click()" is not supported.',
                      );
                    (n.href = e),
                      (n.target = '_parent'),
                      'download' in n && (n.download = t),
                      (document.body || document.documentElement).append(n),
                      n.click(),
                      n.remove();
                  }
                  t.DownloadManager = class {
                    constructor() {
                      this._openBlobUrls = new WeakMap();
                    }
                    downloadUrl(e, t) {
                      (0, r.createValidAbsoluteUrl)(e, 'http://example.com')
                        ? i(e + '#pdfjs.action=download', t)
                        : console.error(`downloadUrl - not a valid URL: ${e}`);
                    }
                    downloadData(e, t, n) {
                      i(URL.createObjectURL(new Blob([e], { type: n })), t);
                    }
                    openOrDownloadData(e, t, n) {
                      const i = (0, r.isPdfFile)(n),
                        o = i ? 'application/pdf' : '';
                      if (i) {
                        let r,
                          i = this._openBlobUrls.get(e);
                        i ||
                          ((i = URL.createObjectURL(
                            new Blob([t], { type: o }),
                          )),
                          this._openBlobUrls.set(e, i)),
                          (r = '?file=' + encodeURIComponent(i + '#' + n));
                        try {
                          return window.open(r), !0;
                        } catch (t) {
                          console.error(`openOrDownloadData: ${t}`),
                            URL.revokeObjectURL(i),
                            this._openBlobUrls.delete(e);
                        }
                      }
                      return this.downloadData(t, n, o), !1;
                    }
                    download(e, t, n) {
                      i(URL.createObjectURL(e), n);
                    }
                  };
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.WaitOnType = t.EventBus = t.AutomationEventBus = void 0),
                    (t.waitOnEventOrTimeout = function (e) {
                      let { target: t, name: i, delay: o = 0 } = e;
                      return new Promise(function (e, a) {
                        if (
                          'object' != typeof t ||
                          !i ||
                          'string' != typeof i ||
                          !(Number.isInteger(o) && o >= 0)
                        )
                          throw new Error(
                            'waitOnEventOrTimeout - invalid parameters.',
                          );
                        function s(n) {
                          t instanceof r
                            ? t._off(i, l)
                            : t.removeEventListener(i, l),
                            h && clearTimeout(h),
                            e(n);
                        }
                        const l = s.bind(null, n.EVENT);
                        t instanceof r ? t._on(i, l) : t.addEventListener(i, l);
                        const c = s.bind(null, n.TIMEOUT),
                          h = setTimeout(c, o);
                      });
                    });
                  const n = { EVENT: 'event', TIMEOUT: 'timeout' };
                  t.WaitOnType = n;
                  class r {
                    constructor() {
                      this._listeners = Object.create(null);
                    }
                    on(e, t) {
                      let n =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                      this._on(e, t, {
                        external: !0,
                        once: null == n ? void 0 : n.once,
                      });
                    }
                    off(e, t) {
                      let n =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                      this._off(e, t, {
                        external: !0,
                        once: null == n ? void 0 : n.once,
                      });
                    }
                    dispatch(e, t) {
                      const n = this._listeners[e];
                      if (!n || 0 === n.length) return;
                      let r;
                      for (const {
                        listener: i,
                        external: o,
                        once: a,
                      } of n.slice(0))
                        a && this._off(e, i),
                          o ? (r || (r = [])).push(i) : i(t);
                      if (r) {
                        for (const e of r) e(t);
                        r = null;
                      }
                    }
                    _on(e, t) {
                      var n;
                      let r =
                        arguments.length > 2 && void 0 !== arguments[2]
                          ? arguments[2]
                          : null;
                      ((n = this._listeners)[e] || (n[e] = [])).push({
                        listener: t,
                        external: !0 === (null == r ? void 0 : r.external),
                        once: !0 === (null == r ? void 0 : r.once),
                      });
                    }
                    _off(e, t) {
                      const n = this._listeners[e];
                      if (n)
                        for (let e = 0, r = n.length; e < r; e++)
                          if (n[e].listener === t) return void n.splice(e, 1);
                    }
                  }
                  (t.EventBus = r),
                    (t.AutomationEventBus = class extends r {
                      dispatch(e, t) {
                        throw new Error(
                          'Not implemented: AutomationEventBus.dispatch',
                        );
                      }
                    });
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.GenericL10n = void 0),
                    n(21);
                  var r = n(4);
                  const i = document.webL10n;
                  t.GenericL10n = class {
                    constructor(e) {
                      (this._lang = e),
                        (this._ready = new Promise((t, n) => {
                          i.setLanguage((0, r.fixupLangCode)(e), () => {
                            t(i);
                          });
                        }));
                    }
                    async getLanguage() {
                      return (await this._ready).getLanguage();
                    }
                    async getDirection() {
                      return (await this._ready).getDirection();
                    }
                    async get(e) {
                      let t =
                          arguments.length > 1 && void 0 !== arguments[1]
                            ? arguments[1]
                            : null,
                        n =
                          arguments.length > 2 && void 0 !== arguments[2]
                            ? arguments[2]
                            : (0, r.getL10nFallback)(e, t);
                      return (await this._ready).get(e, t, n);
                    }
                    async translate(e) {
                      return (await this._ready).translate(e);
                    }
                  };
                },
                () => {
                  document.webL10n = (function (e, t) {
                    var n = {},
                      r = '',
                      i = 'textContent',
                      o = '',
                      a = {},
                      s = 'loading';
                    function l(e, t, n) {
                      (t = t || function (e) {}), (n = n || function () {});
                      var r = new XMLHttpRequest();
                      r.open('GET', e, !0),
                        r.overrideMimeType &&
                          r.overrideMimeType('text/plain; charset=utf-8'),
                        (r.onreadystatechange = function () {
                          4 == r.readyState &&
                            (200 == r.status || 0 === r.status
                              ? t(r.responseText)
                              : n());
                        }),
                        (r.onerror = n),
                        (r.ontimeout = n);
                      try {
                        r.send(null);
                      } catch (e) {
                        n();
                      }
                    }
                    function c(e, t, o, a) {
                      var s = e.replace(/[^\/]*$/, '') || './';
                      function c(e) {
                        return e.lastIndexOf('\\') < 0
                          ? e
                          : e
                              .replace(/\\\\/g, '\\')
                              .replace(/\\n/g, '\n')
                              .replace(/\\r/g, '\r')
                              .replace(/\\t/g, '\t')
                              .replace(/\\b/g, '\b')
                              .replace(/\\f/g, '\f')
                              .replace(/\\{/g, '{')
                              .replace(/\\}/g, '}')
                              .replace(/\\"/g, '"')
                              .replace(/\\'/g, "'");
                      }
                      l(
                        e,
                        function (e) {
                          (r += e),
                            (function (e, n) {
                              var r = {},
                                i = /^\s*|\s*$/,
                                o = /^\s*#|^\s*$/,
                                a = /^\s*\[(.*)\]\s*$/,
                                h = /^\s*@import\s+url\((.*)\)\s*$/i,
                                u = /^([^=\s]*)\s*=\s*(.+)$/;
                              function d(e, n, l) {
                                var d = e.replace(i, '').split(/[\r\n]+/),
                                  f = '*',
                                  g = t.split('-', 1)[0],
                                  m = !1,
                                  v = '';
                                !(function e() {
                                  for (;;) {
                                    if (!d.length) return void l();
                                    var i = d.shift();
                                    if (!o.test(i)) {
                                      if (n) {
                                        if ((v = a.exec(i))) {
                                          (f = v[1].toLowerCase()),
                                            (m =
                                              '*' !== f && f !== t && f !== g);
                                          continue;
                                        }
                                        if (m) continue;
                                        if ((v = h.exec(i)))
                                          return void p(s + v[1], e);
                                      }
                                      var b = i.match(u);
                                      b && 3 == b.length && (r[b[1]] = c(b[2]));
                                    }
                                  }
                                })();
                              }
                              function p(e, t) {
                                l(
                                  e,
                                  function (e) {
                                    d(e, !1, t);
                                  },
                                  function () {
                                    console.warn(e + ' not found.'), t();
                                  },
                                );
                              }
                              d(e, !0, function () {
                                n(r);
                              });
                            })(e, function (e) {
                              for (var t in e) {
                                var r,
                                  a,
                                  s = t.lastIndexOf('.');
                                s > 0
                                  ? ((r = t.substring(0, s)),
                                    (a = t.substring(s + 1)))
                                  : ((r = t), (a = i)),
                                  n[r] || (n[r] = {}),
                                  (n[r][a] = e[t]);
                              }
                              o && o();
                            });
                        },
                        a,
                      );
                    }
                    function h(e, i) {
                      e && (e = e.toLowerCase()),
                        (i = i || function () {}),
                        (n = {}),
                        (r = ''),
                        (o = ''),
                        (o = e);
                      var a = t.querySelectorAll(
                          'link[type="application/l10n"]',
                        ),
                        l = a.length;
                      if (0 !== l) {
                        var h,
                          u,
                          d = 0;
                        u = function () {
                          ++d >= l && (i(), (s = 'complete'));
                        };
                        for (var p = 0; p < l; p++) new v(a[p]).load(e, u);
                      } else {
                        var f = (h = t.querySelector(
                          'script[type="application/l10n"]',
                        ))
                          ? JSON.parse(h.innerHTML)
                          : null;
                        if (f && f.locales && f.default_locale) {
                          if (
                            (console.log(
                              'using the embedded JSON directory, early way out',
                            ),
                            !(n = f.locales[e]))
                          ) {
                            var g = f.default_locale.toLowerCase();
                            for (var m in f.locales) {
                              if ((m = m.toLowerCase()) === e) {
                                n = f.locales[e];
                                break;
                              }
                              m === g && (n = f.locales[g]);
                            }
                          }
                          i();
                        } else
                          console.log('no resource to load, early way out');
                        s = 'complete';
                      }
                      function v(e) {
                        var t = e.href;
                        this.load = function (e, n) {
                          c(t, e, n, function () {
                            console.warn(t + ' not found.'),
                              console.warn('"' + e + '" resource not found'),
                              (o = ''),
                              n();
                          });
                        };
                      }
                    }
                    function u(e, t, r) {
                      var i = n[e];
                      if (!i) {
                        if ((console.warn('#' + e + ' is undefined.'), !r))
                          return null;
                        i = r;
                      }
                      var o = {};
                      for (var a in i) {
                        var s = i[a];
                        (s = p((s = d(s, t, e, a)), t, e)), (o[a] = s);
                      }
                      return o;
                    }
                    function d(e, t, r, i) {
                      var o = /\{\[\s*([a-zA-Z]+)\(([a-zA-Z]+)\)\s*\]\}/.exec(
                        e,
                      );
                      if (!o || !o.length) return e;
                      var s,
                        l = o[1],
                        c = o[2];
                      return (
                        t && c in t ? (s = t[c]) : c in n && (s = n[c]),
                        l in a && (e = (0, a[l])(e, s, r, i)),
                        e
                      );
                    }
                    function p(e, t, r) {
                      return e.replace(/\{\{\s*(.+?)\s*\}\}/g, function (e, i) {
                        return t && i in t
                          ? t[i]
                          : i in n
                            ? n[i]
                            : (console.log(
                                'argument {{' +
                                  i +
                                  '}} for #' +
                                  r +
                                  ' is undefined.',
                              ),
                              e);
                      });
                    }
                    function f(e) {
                      var n = (function (e) {
                        if (!e) return {};
                        var t = e.getAttribute('data-l10n-id'),
                          n = e.getAttribute('data-l10n-args'),
                          r = {};
                        if (n)
                          try {
                            r = JSON.parse(n);
                          } catch (e) {
                            console.warn('could not parse arguments for #' + t);
                          }
                        return { id: t, args: r };
                      })(e);
                      if (n.id) {
                        var r = u(n.id, n.args);
                        if (r) {
                          if (r[i]) {
                            if (
                              0 ===
                              (function (e) {
                                if (e.children) return e.children.length;
                                if (void 0 !== e.childElementCount)
                                  return e.childElementCount;
                                for (
                                  var t = 0, n = 0;
                                  n < e.childNodes.length;
                                  n++
                                )
                                  t += 1 === e.nodeType ? 1 : 0;
                                return t;
                              })(e)
                            )
                              e[i] = r[i];
                            else {
                              for (
                                var o = e.childNodes,
                                  a = !1,
                                  s = 0,
                                  l = o.length;
                                s < l;
                                s++
                              )
                                3 === o[s].nodeType &&
                                  /\S/.test(o[s].nodeValue) &&
                                  (a
                                    ? (o[s].nodeValue = '')
                                    : ((o[s].nodeValue = r[i]), (a = !0)));
                              if (!a) {
                                var c = t.createTextNode(r[i]);
                                e.prepend(c);
                              }
                            }
                            delete r[i];
                          }
                          for (var h in r) e[h] = r[h];
                        } else console.warn('#' + n.id + ' is undefined.');
                      }
                    }
                    return (
                      (a.plural = function (e, t, r, s) {
                        var l = parseFloat(t);
                        if (isNaN(l)) return e;
                        if (s != i) return e;
                        a._pluralRules ||
                          (a._pluralRules = (function (e) {
                            function t(e, t) {
                              return -1 !== t.indexOf(e);
                            }
                            function n(e, t, n) {
                              return t <= e && e <= n;
                            }
                            var r = {
                                0: function (e) {
                                  return 'other';
                                },
                                1: function (e) {
                                  return n(e % 100, 3, 10)
                                    ? 'few'
                                    : 0 === e
                                      ? 'zero'
                                      : n(e % 100, 11, 99)
                                        ? 'many'
                                        : 2 == e
                                          ? 'two'
                                          : 1 == e
                                            ? 'one'
                                            : 'other';
                                },
                                2: function (e) {
                                  return 0 !== e && e % 10 == 0
                                    ? 'many'
                                    : 2 == e
                                      ? 'two'
                                      : 1 == e
                                        ? 'one'
                                        : 'other';
                                },
                                3: function (e) {
                                  return 1 == e ? 'one' : 'other';
                                },
                                4: function (e) {
                                  return n(e, 0, 1) ? 'one' : 'other';
                                },
                                5: function (e) {
                                  return n(e, 0, 2) && 2 != e ? 'one' : 'other';
                                },
                                6: function (e) {
                                  return 0 === e
                                    ? 'zero'
                                    : e % 10 == 1 && e % 100 != 11
                                      ? 'one'
                                      : 'other';
                                },
                                7: function (e) {
                                  return 2 == e
                                    ? 'two'
                                    : 1 == e
                                      ? 'one'
                                      : 'other';
                                },
                                8: function (e) {
                                  return n(e, 3, 6)
                                    ? 'few'
                                    : n(e, 7, 10)
                                      ? 'many'
                                      : 2 == e
                                        ? 'two'
                                        : 1 == e
                                          ? 'one'
                                          : 'other';
                                },
                                9: function (e) {
                                  return 0 === e ||
                                    (1 != e && n(e % 100, 1, 19))
                                    ? 'few'
                                    : 1 == e
                                      ? 'one'
                                      : 'other';
                                },
                                10: function (e) {
                                  return n(e % 10, 2, 9) && !n(e % 100, 11, 19)
                                    ? 'few'
                                    : e % 10 != 1 || n(e % 100, 11, 19)
                                      ? 'other'
                                      : 'one';
                                },
                                11: function (e) {
                                  return n(e % 10, 2, 4) && !n(e % 100, 12, 14)
                                    ? 'few'
                                    : e % 10 == 0 ||
                                        n(e % 10, 5, 9) ||
                                        n(e % 100, 11, 14)
                                      ? 'many'
                                      : e % 10 == 1 && e % 100 != 11
                                        ? 'one'
                                        : 'other';
                                },
                                12: function (e) {
                                  return n(e, 2, 4)
                                    ? 'few'
                                    : 1 == e
                                      ? 'one'
                                      : 'other';
                                },
                                13: function (e) {
                                  return n(e % 10, 2, 4) && !n(e % 100, 12, 14)
                                    ? 'few'
                                    : (1 != e && n(e % 10, 0, 1)) ||
                                        n(e % 10, 5, 9) ||
                                        n(e % 100, 12, 14)
                                      ? 'many'
                                      : 1 == e
                                        ? 'one'
                                        : 'other';
                                },
                                14: function (e) {
                                  return n(e % 100, 3, 4)
                                    ? 'few'
                                    : e % 100 == 2
                                      ? 'two'
                                      : e % 100 == 1
                                        ? 'one'
                                        : 'other';
                                },
                                15: function (e) {
                                  return 0 === e || n(e % 100, 2, 10)
                                    ? 'few'
                                    : n(e % 100, 11, 19)
                                      ? 'many'
                                      : 1 == e
                                        ? 'one'
                                        : 'other';
                                },
                                16: function (e) {
                                  return e % 10 == 1 && 11 != e
                                    ? 'one'
                                    : 'other';
                                },
                                17: function (e) {
                                  return 3 == e
                                    ? 'few'
                                    : 0 === e
                                      ? 'zero'
                                      : 6 == e
                                        ? 'many'
                                        : 2 == e
                                          ? 'two'
                                          : 1 == e
                                            ? 'one'
                                            : 'other';
                                },
                                18: function (e) {
                                  return 0 === e
                                    ? 'zero'
                                    : n(e, 0, 2) && 0 !== e && 2 != e
                                      ? 'one'
                                      : 'other';
                                },
                                19: function (e) {
                                  return n(e, 2, 10)
                                    ? 'few'
                                    : n(e, 0, 1)
                                      ? 'one'
                                      : 'other';
                                },
                                20: function (e) {
                                  return (!n(e % 10, 3, 4) && e % 10 != 9) ||
                                    n(e % 100, 10, 19) ||
                                    n(e % 100, 70, 79) ||
                                    n(e % 100, 90, 99)
                                    ? e % 1e6 == 0 && 0 !== e
                                      ? 'many'
                                      : e % 10 != 2 || t(e % 100, [12, 72, 92])
                                        ? e % 10 != 1 ||
                                          t(e % 100, [11, 71, 91])
                                          ? 'other'
                                          : 'one'
                                        : 'two'
                                    : 'few';
                                },
                                21: function (e) {
                                  return 0 === e
                                    ? 'zero'
                                    : 1 == e
                                      ? 'one'
                                      : 'other';
                                },
                                22: function (e) {
                                  return n(e, 0, 1) || n(e, 11, 99)
                                    ? 'one'
                                    : 'other';
                                },
                                23: function (e) {
                                  return n(e % 10, 1, 2) || e % 20 == 0
                                    ? 'one'
                                    : 'other';
                                },
                                24: function (e) {
                                  return n(e, 3, 10) || n(e, 13, 19)
                                    ? 'few'
                                    : t(e, [2, 12])
                                      ? 'two'
                                      : t(e, [1, 11])
                                        ? 'one'
                                        : 'other';
                                },
                              },
                              i = {
                                af: 3,
                                ak: 4,
                                am: 4,
                                ar: 1,
                                asa: 3,
                                az: 0,
                                be: 11,
                                bem: 3,
                                bez: 3,
                                bg: 3,
                                bh: 4,
                                bm: 0,
                                bn: 3,
                                bo: 0,
                                br: 20,
                                brx: 3,
                                bs: 11,
                                ca: 3,
                                cgg: 3,
                                chr: 3,
                                cs: 12,
                                cy: 17,
                                da: 3,
                                de: 3,
                                dv: 3,
                                dz: 0,
                                ee: 3,
                                el: 3,
                                en: 3,
                                eo: 3,
                                es: 3,
                                et: 3,
                                eu: 3,
                                fa: 0,
                                ff: 5,
                                fi: 3,
                                fil: 4,
                                fo: 3,
                                fr: 5,
                                fur: 3,
                                fy: 3,
                                ga: 8,
                                gd: 24,
                                gl: 3,
                                gsw: 3,
                                gu: 3,
                                guw: 4,
                                gv: 23,
                                ha: 3,
                                haw: 3,
                                he: 2,
                                hi: 4,
                                hr: 11,
                                hu: 0,
                                id: 0,
                                ig: 0,
                                ii: 0,
                                is: 3,
                                it: 3,
                                iu: 7,
                                ja: 0,
                                jmc: 3,
                                jv: 0,
                                ka: 0,
                                kab: 5,
                                kaj: 3,
                                kcg: 3,
                                kde: 0,
                                kea: 0,
                                kk: 3,
                                kl: 3,
                                km: 0,
                                kn: 0,
                                ko: 0,
                                ksb: 3,
                                ksh: 21,
                                ku: 3,
                                kw: 7,
                                lag: 18,
                                lb: 3,
                                lg: 3,
                                ln: 4,
                                lo: 0,
                                lt: 10,
                                lv: 6,
                                mas: 3,
                                mg: 4,
                                mk: 16,
                                ml: 3,
                                mn: 3,
                                mo: 9,
                                mr: 3,
                                ms: 0,
                                mt: 15,
                                my: 0,
                                nah: 3,
                                naq: 7,
                                nb: 3,
                                nd: 3,
                                ne: 3,
                                nl: 3,
                                nn: 3,
                                no: 3,
                                nr: 3,
                                nso: 4,
                                ny: 3,
                                nyn: 3,
                                om: 3,
                                or: 3,
                                pa: 3,
                                pap: 3,
                                pl: 13,
                                ps: 3,
                                pt: 3,
                                rm: 3,
                                ro: 9,
                                rof: 3,
                                ru: 11,
                                rwk: 3,
                                sah: 0,
                                saq: 3,
                                se: 7,
                                seh: 3,
                                ses: 0,
                                sg: 0,
                                sh: 11,
                                shi: 19,
                                sk: 12,
                                sl: 14,
                                sma: 7,
                                smi: 7,
                                smj: 7,
                                smn: 7,
                                sms: 7,
                                sn: 3,
                                so: 3,
                                sq: 3,
                                sr: 11,
                                ss: 3,
                                ssy: 3,
                                st: 3,
                                sv: 3,
                                sw: 3,
                                syr: 3,
                                ta: 3,
                                te: 3,
                                teo: 3,
                                th: 0,
                                ti: 4,
                                tig: 3,
                                tk: 3,
                                tl: 4,
                                tn: 3,
                                to: 0,
                                tr: 0,
                                ts: 3,
                                tzm: 22,
                                uk: 11,
                                ur: 3,
                                ve: 3,
                                vi: 0,
                                vun: 3,
                                wa: 4,
                                wae: 3,
                                wo: 0,
                                xh: 3,
                                xog: 3,
                                yo: 0,
                                zh: 0,
                                zu: 3,
                              }[e.replace(/-.*$/, '')];
                            return i in r
                              ? r[i]
                              : (console.warn(
                                  'plural form unknown for [' + e + ']',
                                ),
                                function () {
                                  return 'other';
                                });
                          })(o));
                        var c = '[' + a._pluralRules(l) + ']';
                        return (
                          0 === l && r + '[zero]' in n
                            ? (e = n[r + '[zero]'][s])
                            : 1 == l && r + '[one]' in n
                              ? (e = n[r + '[one]'][s])
                              : 2 == l && r + '[two]' in n
                                ? (e = n[r + '[two]'][s])
                                : r + c in n
                                  ? (e = n[r + c][s])
                                  : r + '[other]' in n &&
                                    (e = n[r + '[other]'][s]),
                          e
                        );
                      }),
                      {
                        get: function (e, t, n) {
                          var r,
                            o = e.lastIndexOf('.'),
                            a = i;
                          o > 0 &&
                            ((a = e.substring(o + 1)), (e = e.substring(0, o))),
                            n && ((r = {})[a] = n);
                          var s = u(e, t, r);
                          return s && a in s ? s[a] : '{{' + e + '}}';
                        },
                        getData: function () {
                          return n;
                        },
                        getText: function () {
                          return r;
                        },
                        getLanguage: function () {
                          return o;
                        },
                        setLanguage: function (e, t) {
                          h(e, function () {
                            t && t();
                          });
                        },
                        getDirection: function () {
                          var e = o.split('-', 1)[0];
                          return ['ar', 'he', 'fa', 'ps', 'ur'].indexOf(e) >= 0
                            ? 'rtl'
                            : 'ltr';
                        },
                        translate: function (e) {
                          for (
                            var n = (function (e) {
                                return e
                                  ? e.querySelectorAll('*[data-l10n-id]')
                                  : [];
                              })((e = e || t.documentElement)),
                              r = n.length,
                              i = 0;
                            i < r;
                            i++
                          )
                            f(n[i]);
                          f(e);
                        },
                        getReadyState: function () {
                          return s;
                        },
                        ready: function (n) {
                          n &&
                            ('complete' == s || 'interactive' == s
                              ? e.setTimeout(function () {
                                  n();
                                })
                              : t.addEventListener &&
                                t.addEventListener('localized', function e() {
                                  t.removeEventListener('localized', e), n();
                                }));
                        },
                      }
                    );
                  })(window, document);
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFFindController = t.FindState = void 0);
                  var r = n(7),
                    i = n(3),
                    o = n(23);
                  function a(e, t) {
                    s(e, t), t.add(e);
                  }
                  function s(e, t) {
                    if (t.has(e))
                      throw new TypeError(
                        'Cannot initialize the same private elements twice on an object',
                      );
                  }
                  function l(e, t) {
                    var n = (function (e, t, n) {
                      if (!t.has(e))
                        throw new TypeError(
                          'attempted to ' +
                            n +
                            ' private field on non-instance',
                        );
                      return t.get(e);
                    })(e, t, 'get');
                    return (function (e, t) {
                      return t.get ? t.get.call(e) : t.value;
                    })(e, n);
                  }
                  function c(e, t, n) {
                    if (!t.has(e))
                      throw new TypeError(
                        'attempted to get private field on non-instance',
                      );
                    return n;
                  }
                  const h = { FOUND: 0, NOT_FOUND: 1, WRAPPED: 2, PENDING: 3 };
                  t.FindState = h;
                  const u = {
                      '‐': '-',
                      '‘': "'",
                      '’': "'",
                      '‚': "'",
                      '‛': "'",
                      '“': '"',
                      '”': '"',
                      '„': '"',
                      '‟': '"',
                      '¼': '1/4',
                      '½': '1/2',
                      '¾': '3/4',
                    },
                    d = new Set([
                      12441, 12442, 2381, 2509, 2637, 2765, 2893, 3021, 3149,
                      3277, 3387, 3388, 3405, 3530, 3642, 3770, 3972, 4153,
                      4154, 5908, 5940, 6098, 6752, 6980, 7082, 7083, 7154,
                      7155, 11647, 43014, 43052, 43204, 43347, 43456, 43766,
                      44013, 3158, 3953, 3954, 3962, 3963, 3964, 3965, 3968,
                      3956,
                    ]),
                    p = [...d.values()]
                      .map((e) => String.fromCharCode(e))
                      .join(''),
                    f = /\p{M}+/gu,
                    g = /([.*+?^${}()|[\]\\])|(\p{P})|(\s+)|(\p{M})|(\p{L})/gu,
                    m = /([^\p{M}])\p{M}*$/u,
                    v = /^\p{M}*([^\p{M}])/u,
                    b = /[\uAC00-\uD7AF\uFA6C\uFACF-\uFAD1\uFAD5-\uFAD7]+/g,
                    y = new Map();
                  let _ = null,
                    w = null;
                  function S(e) {
                    const t = [];
                    let n, r;
                    for (; null !== (n = b.exec(e)); ) {
                      let { index: e } = n;
                      for (const r of n[0]) {
                        let n = y.get(r);
                        n || ((n = r.normalize('NFD').length), y.set(r, n)),
                          t.push([n, e++]);
                      }
                    }
                    if (0 === t.length && _) r = _;
                    else if (t.length > 0 && w) r = w;
                    else {
                      const e = `([${Object.keys(u).join('')}])|(\\p{M}+(?:-\\n)?)|(\\S-\\n)|(\\n)`;
                      r =
                        0 === t.length
                          ? (_ = new RegExp(e + '|(\\u0000)', 'gum'))
                          : (w = new RegExp(
                              e +
                                '|([\\u1100-\\u1112\\ud7a4-\\ud7af\\ud84a\\ud84c\\ud850\\ud854\\ud857\\ud85f])',
                              'gum',
                            ));
                    }
                    const i = [];
                    for (; null !== (n = f.exec(e)); )
                      i.push([n[0].length, n.index]);
                    let o = e.normalize('NFD');
                    const a = [[0, 0]];
                    let s = 0,
                      l = 0,
                      c = 0,
                      h = 0,
                      d = 0,
                      p = !1;
                    return (
                      (o = o.replace(r, (e, n, r, o, f, g, m) => {
                        var v;
                        if (((m -= h), n)) {
                          const t = u[e],
                            n = t.length;
                          for (let e = 1; e < n; e++)
                            a.push([m - c + e, c - e]);
                          return (c -= n - 1), t;
                        }
                        if (r) {
                          var b;
                          const e = r.endsWith('\n'),
                            t = e ? r.length - 2 : r.length;
                          p = !0;
                          let n = t;
                          m + d ===
                            (null === (b = i[s]) || void 0 === b
                              ? void 0
                              : b[1]) && ((n -= i[s][0]), ++s);
                          for (let e = 1; e <= n; e++)
                            a.push([m - 1 - c + e, c - e]);
                          return (
                            (c -= n),
                            (h += n),
                            e
                              ? ((m += t - 1),
                                a.push([m - c + 1, 1 + c]),
                                (c += 1),
                                (h += 1),
                                (d += 1),
                                r.slice(0, t))
                              : r
                          );
                        }
                        if (o)
                          return (
                            a.push([m - c + 1, 1 + c]),
                            (c += 1),
                            (h += 1),
                            (d += 1),
                            o.charAt(0)
                          );
                        if (f)
                          return (
                            a.push([m - c + 1, c - 1]),
                            (c -= 1),
                            (h += 1),
                            (d += 1),
                            ' '
                          );
                        if (
                          m + d ===
                          (null === (v = t[l]) || void 0 === v ? void 0 : v[1])
                        ) {
                          const e = t[l][0] - 1;
                          ++l;
                          for (let t = 1; t <= e; t++)
                            a.push([m - (c - t), c - t]);
                          (c -= e), (h += e);
                        }
                        return g;
                      })),
                      a.push([o.length, c]),
                      [o, a, p]
                    );
                  }
                  function A(e, t, n) {
                    if (!e) return [t, n];
                    const i = t,
                      o = t + n;
                    let a = (0, r.binarySearchFirstItem)(e, (e) => e[0] >= i);
                    e[a][0] > i && --a;
                    let s = (0, r.binarySearchFirstItem)(
                      e,
                      (e) => e[0] >= o,
                      a,
                    );
                    return (
                      e[s][0] > o && --s, [i + e[a][1], n + e[s][1] - e[a][1]]
                    );
                  }
                  var x = new WeakSet(),
                    P = new WeakSet(),
                    E = new WeakMap(),
                    C = new WeakSet(),
                    T = new WeakSet(),
                    k = new WeakSet(),
                    M = new WeakSet(),
                    R = new WeakSet(),
                    O = new WeakSet(),
                    D = new WeakSet(),
                    I = new WeakSet(),
                    L = new WeakSet(),
                    F = new WeakSet(),
                    N = new WeakSet(),
                    j = new WeakSet(),
                    B = new WeakSet(),
                    W = new WeakSet(),
                    z = new WeakSet(),
                    $ = new WeakSet(),
                    U = new WeakSet();
                  function H(e) {
                    if (!e) return;
                    const t = this._pdfDocument,
                      { type: n } = e;
                    (null === this._state || c(this, C, G).call(this, e)) &&
                      (this._dirtyMatch = !0),
                      (this._state = e),
                      'highlightallchange' !== n &&
                        c(this, U, ce).call(this, h.PENDING),
                      this._firstPageCapability.promise.then(() => {
                        if (
                          !this._pdfDocument ||
                          (t && this._pdfDocument !== t)
                        )
                          return;
                        c(this, O, Q).call(this);
                        const e = !this._highlightMatches,
                          r = !!this._findTimeout;
                        this._findTimeout &&
                          (clearTimeout(this._findTimeout),
                          (this._findTimeout = null)),
                          n
                            ? this._dirtyMatch
                              ? c(this, L, te).call(this)
                              : 'again' === n
                                ? (c(this, L, te).call(this),
                                  e &&
                                    this._state.highlightAll &&
                                    c(this, I, ee).call(this))
                                : 'highlightallchange' === n
                                  ? (r
                                      ? c(this, L, te).call(this)
                                      : (this._highlightMatches = !0),
                                    c(this, I, ee).call(this))
                                  : c(this, L, te).call(this)
                            : (this._findTimeout = setTimeout(() => {
                                c(this, L, te).call(this),
                                  (this._findTimeout = null);
                              }, 250));
                      });
                  }
                  function V() {
                    (this._highlightMatches = !1),
                      (this._scrollMatches = !1),
                      (this._pdfDocument = null),
                      (this._pageMatches = []),
                      (this._pageMatchesLength = []),
                      (this._state = null),
                      (this._selected = { pageIdx: -1, matchIdx: -1 }),
                      (this._offset = {
                        pageIdx: null,
                        matchIdx: null,
                        wrapped: !1,
                      }),
                      (this._extractTextPromises = []),
                      (this._pageContents = []),
                      (this._pageDiffs = []),
                      (this._hasDiacritics = []),
                      (this._matchesCountTotal = 0),
                      (this._pagesToSearch = null),
                      (this._pendingFindMatches = new Set()),
                      (this._resumePageIdx = null),
                      (this._dirtyMatch = !1),
                      clearTimeout(this._findTimeout),
                      (this._findTimeout = null),
                      (this._firstPageCapability = (0,
                      i.createPromiseCapability)());
                  }
                  function q() {
                    return (
                      this._state.query !== this._rawQuery &&
                        ((this._rawQuery = this._state.query),
                        ([this._normalizedQuery] = S(this._state.query))),
                      this._normalizedQuery
                    );
                  }
                  function G(e) {
                    if (e.query !== this._state.query) return !0;
                    switch (e.type) {
                      case 'again':
                        const e = this._selected.pageIdx + 1,
                          t = this._linkService;
                        return (
                          e >= 1 &&
                          e <= t.pagesCount &&
                          e !== t.page &&
                          !t.isPageVisible(e)
                        );
                      case 'highlightallchange':
                        return !1;
                    }
                    return !0;
                  }
                  function X(e, t, n) {
                    let r = e.slice(0, t).match(m);
                    if (r) {
                      const n = e.charCodeAt(t),
                        i = r[1].charCodeAt(0);
                      if (
                        (0, o.getCharacterType)(n) ===
                        (0, o.getCharacterType)(i)
                      )
                        return !1;
                    }
                    if (((r = e.slice(t + n).match(v)), r)) {
                      const i = e.charCodeAt(t + n - 1),
                        a = r[1].charCodeAt(0);
                      if (
                        (0, o.getCharacterType)(i) ===
                        (0, o.getCharacterType)(a)
                      )
                        return !1;
                    }
                    return !0;
                  }
                  function Y(e, t, n, r) {
                    const i = [],
                      o = [],
                      a = this._pageDiffs[n];
                    let s;
                    for (; null !== (s = e.exec(r)); ) {
                      if (
                        t &&
                        !c(this, T, X).call(this, r, s.index, s[0].length)
                      )
                        continue;
                      const [e, n] = A(a, s.index, s[0].length);
                      n && (i.push(e), o.push(n));
                    }
                    (this._pageMatches[n] = i),
                      (this._pageMatchesLength[n] = o);
                  }
                  function K(e, t) {
                    const { matchDiacritics: n } = this._state;
                    let r = !1;
                    const i = '[ ]*';
                    return (
                      (e = e.replace(g, (e, i, o, a, s, l) =>
                        i
                          ? `[ ]*\\${i}[ ]*`
                          : o
                            ? `[ ]*${o}[ ]*`
                            : a
                              ? '[ ]+'
                              : n
                                ? s || l
                                : s
                                  ? d.has(s.charCodeAt(0))
                                    ? s
                                    : ''
                                  : t
                                    ? ((r = !0), `${l}\\p{M}*`)
                                    : l,
                      )).endsWith(i) && (e = e.slice(0, e.length - 4)),
                      n && t && ((r = !0), (e = `${e}(?=[${p}]|[^\\p{M}]|$)`)),
                      [r, e]
                    );
                  }
                  function Z(e) {
                    let t = l(this, E);
                    if (0 === t.length) return;
                    const {
                        caseSensitive: n,
                        entireWord: r,
                        phraseSearch: i,
                      } = this._state,
                      o = this._pageContents[e],
                      a = this._hasDiacritics[e];
                    let s = !1;
                    if (i) [s, t] = c(this, M, K).call(this, t, a);
                    else {
                      const e = t.match(/\S+/g);
                      e &&
                        (t = e
                          .sort()
                          .reverse()
                          .map((e) => {
                            const [t, n] = c(this, M, K).call(this, e, a);
                            return s || (s = t), `(${n})`;
                          })
                          .join('|'));
                    }
                    (t = new RegExp(t, `g${s ? 'u' : ''}${n ? '' : 'i'}`)),
                      c(this, k, Y).call(this, t, r, e, o),
                      this._state.highlightAll && c(this, D, J).call(this, e),
                      this._resumePageIdx === e &&
                        ((this._resumePageIdx = null),
                        c(this, N, re).call(this));
                    const h = this._pageMatches[e].length;
                    h > 0 &&
                      ((this._matchesCountTotal += h),
                      c(this, $, le).call(this));
                  }
                  function Q() {
                    if (this._extractTextPromises.length > 0) return;
                    let e = Promise.resolve();
                    for (
                      let t = 0, n = this._linkService.pagesCount;
                      t < n;
                      t++
                    ) {
                      const n = (0, i.createPromiseCapability)();
                      (this._extractTextPromises[t] = n.promise),
                        (e = e.then(() =>
                          this._pdfDocument
                            .getPage(t + 1)
                            .then((e) => e.getTextContent())
                            .then(
                              (e) => {
                                const r = [];
                                for (const t of e.items)
                                  r.push(t.str), t.hasEOL && r.push('\n');
                                ([
                                  this._pageContents[t],
                                  this._pageDiffs[t],
                                  this._hasDiacritics[t],
                                ] = S(r.join(''))),
                                  n.resolve();
                              },
                              (e) => {
                                console.error(
                                  `Unable to get text content for page ${t + 1}`,
                                  e,
                                ),
                                  (this._pageContents[t] = ''),
                                  (this._pageDiffs[t] = null),
                                  (this._hasDiacritics[t] = !1),
                                  n.resolve();
                              },
                            ),
                        ));
                    }
                  }
                  function J(e) {
                    this._scrollMatches &&
                      this._selected.pageIdx === e &&
                      (this._linkService.page = e + 1),
                      this._eventBus.dispatch('updatetextlayermatches', {
                        source: this,
                        pageIndex: e,
                      });
                  }
                  function ee() {
                    this._eventBus.dispatch('updatetextlayermatches', {
                      source: this,
                      pageIndex: -1,
                    });
                  }
                  function te() {
                    const e = this._state.findPrevious,
                      t = this._linkService.page - 1,
                      n = this._linkService.pagesCount;
                    if (((this._highlightMatches = !0), this._dirtyMatch)) {
                      (this._dirtyMatch = !1),
                        (this._selected.pageIdx = this._selected.matchIdx = -1),
                        (this._offset.pageIdx = t),
                        (this._offset.matchIdx = null),
                        (this._offset.wrapped = !1),
                        (this._resumePageIdx = null),
                        (this._pageMatches.length = 0),
                        (this._pageMatchesLength.length = 0),
                        (this._matchesCountTotal = 0),
                        c(this, I, ee).call(this);
                      for (let e = 0; e < n; e++)
                        this._pendingFindMatches.has(e) ||
                          (this._pendingFindMatches.add(e),
                          this._extractTextPromises[e].then(() => {
                            this._pendingFindMatches.delete(e),
                              c(this, R, Z).call(this, e);
                          }));
                    }
                    if ('' === l(this, E))
                      return void c(this, U, ce).call(this, h.FOUND);
                    if (this._resumePageIdx) return;
                    const r = this._offset;
                    if (((this._pagesToSearch = n), null !== r.matchIdx)) {
                      const t = this._pageMatches[r.pageIdx].length;
                      if ((!e && r.matchIdx + 1 < t) || (e && r.matchIdx > 0))
                        return (
                          (r.matchIdx = e ? r.matchIdx - 1 : r.matchIdx + 1),
                          void c(this, B, oe).call(this, !0)
                        );
                      c(this, j, ie).call(this, e);
                    }
                    c(this, N, re).call(this);
                  }
                  function ne(e) {
                    const t = this._offset,
                      n = e.length,
                      r = this._state.findPrevious;
                    return n
                      ? ((t.matchIdx = r ? n - 1 : 0),
                        c(this, B, oe).call(this, !0),
                        !0)
                      : (c(this, j, ie).call(this, r),
                        !!(
                          t.wrapped &&
                          ((t.matchIdx = null), this._pagesToSearch < 0)
                        ) && (c(this, B, oe).call(this, !1), !0));
                  }
                  function re() {
                    null !== this._resumePageIdx &&
                      console.error('There can only be one pending page.');
                    let e = null;
                    do {
                      const t = this._offset.pageIdx;
                      if (((e = this._pageMatches[t]), !e)) {
                        this._resumePageIdx = t;
                        break;
                      }
                    } while (!c(this, F, ne).call(this, e));
                  }
                  function ie(e) {
                    const t = this._offset,
                      n = this._linkService.pagesCount;
                    (t.pageIdx = e ? t.pageIdx - 1 : t.pageIdx + 1),
                      (t.matchIdx = null),
                      this._pagesToSearch--,
                      (t.pageIdx >= n || t.pageIdx < 0) &&
                        ((t.pageIdx = e ? n - 1 : 0), (t.wrapped = !0));
                  }
                  function oe() {
                    let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0],
                      t = h.NOT_FOUND;
                    const n = this._offset.wrapped;
                    if (((this._offset.wrapped = !1), e)) {
                      const e = this._selected.pageIdx;
                      (this._selected.pageIdx = this._offset.pageIdx),
                        (this._selected.matchIdx = this._offset.matchIdx),
                        (t = n ? h.WRAPPED : h.FOUND),
                        -1 !== e &&
                          e !== this._selected.pageIdx &&
                          c(this, D, J).call(this, e);
                    }
                    c(this, U, ce).call(this, t, this._state.findPrevious),
                      -1 !== this._selected.pageIdx &&
                        ((this._scrollMatches = !0),
                        c(this, D, J).call(this, this._selected.pageIdx));
                  }
                  function ae(e) {
                    const t = this._pdfDocument;
                    this._firstPageCapability.promise.then(() => {
                      !this._pdfDocument ||
                        (t && this._pdfDocument !== t) ||
                        (this._findTimeout &&
                          (clearTimeout(this._findTimeout),
                          (this._findTimeout = null)),
                        this._resumePageIdx &&
                          ((this._resumePageIdx = null),
                          (this._dirtyMatch = !0)),
                        c(this, U, ce).call(this, h.FOUND),
                        (this._highlightMatches = !1),
                        c(this, I, ee).call(this));
                    });
                  }
                  function se() {
                    const { pageIdx: e, matchIdx: t } = this._selected;
                    let n = 0,
                      r = this._matchesCountTotal;
                    if (-1 !== t) {
                      for (let t = 0; t < e; t++) {
                        var i;
                        n +=
                          (null === (i = this._pageMatches[t]) || void 0 === i
                            ? void 0
                            : i.length) || 0;
                      }
                      n += t + 1;
                    }
                    return (
                      (n < 1 || n > r) && (n = r = 0), { current: n, total: r }
                    );
                  }
                  function le() {
                    this._eventBus.dispatch('updatefindmatchescount', {
                      source: this,
                      matchesCount: c(this, z, se).call(this),
                    });
                  }
                  function ce(e) {
                    var t, n;
                    let r =
                      arguments.length > 1 &&
                      void 0 !== arguments[1] &&
                      arguments[1];
                    this._eventBus.dispatch('updatefindcontrolstate', {
                      source: this,
                      state: e,
                      previous: r,
                      matchesCount: c(this, z, se).call(this),
                      rawQuery:
                        null !==
                          (t =
                            null === (n = this._state) || void 0 === n
                              ? void 0
                              : n.query) && void 0 !== t
                          ? t
                          : null,
                    });
                  }
                  t.PDFFindController = class {
                    constructor(e) {
                      let { linkService: t, eventBus: n } = e;
                      var r, i, o;
                      a(this, U),
                        a(this, $),
                        a(this, z),
                        a(this, W),
                        a(this, B),
                        a(this, j),
                        a(this, N),
                        a(this, F),
                        a(this, L),
                        a(this, I),
                        a(this, D),
                        a(this, O),
                        a(this, R),
                        a(this, M),
                        a(this, k),
                        a(this, T),
                        a(this, C),
                        (o = { get: q, set: void 0 }),
                        s((r = this), (i = E)),
                        i.set(r, o),
                        a(this, P),
                        a(this, x),
                        (this._linkService = t),
                        (this._eventBus = n),
                        c(this, P, V).call(this),
                        n._on('find', c(this, x, H).bind(this)),
                        n._on('findbarclose', c(this, W, ae).bind(this));
                    }
                    get highlightMatches() {
                      return this._highlightMatches;
                    }
                    get pageMatches() {
                      return this._pageMatches;
                    }
                    get pageMatchesLength() {
                      return this._pageMatchesLength;
                    }
                    get selected() {
                      return this._selected;
                    }
                    get state() {
                      return this._state;
                    }
                    setDocument(e) {
                      this._pdfDocument && c(this, P, V).call(this),
                        e &&
                          ((this._pdfDocument = e),
                          this._firstPageCapability.resolve());
                    }
                    scrollMatchIntoView(e) {
                      let {
                        element: t = null,
                        selectedLeft: n = 0,
                        pageIndex: i = -1,
                        matchIndex: o = -1,
                      } = e;
                      if (!this._scrollMatches || !t) return;
                      if (-1 === o || o !== this._selected.matchIdx) return;
                      if (-1 === i || i !== this._selected.pageIdx) return;
                      this._scrollMatches = !1;
                      const a = { top: -50, left: n + -400 };
                      (0, r.scrollIntoView)(t, a, !0);
                    }
                  };
                },
                (e, t) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.CharacterType = void 0),
                    (t.getCharacterType = function (e) {
                      return (function (e) {
                        return e < 11904;
                      })(e)
                        ? (function (e) {
                            return !(65408 & e);
                          })(e)
                          ? (function (e) {
                              return (
                                32 === e || 9 === e || 13 === e || 10 === e
                              );
                            })(e)
                            ? n.SPACE
                            : (function (e) {
                                  return (
                                    (e >= 97 && e <= 122) ||
                                    (e >= 65 && e <= 90)
                                  );
                                })(e) ||
                                (function (e) {
                                  return e >= 48 && e <= 57;
                                })(e) ||
                                95 === e
                              ? n.ALPHA_LETTER
                              : n.PUNCT
                          : (function (e) {
                                return 3584 == (65408 & e);
                              })(e)
                            ? n.THAI_LETTER
                            : 160 === e
                              ? n.SPACE
                              : n.ALPHA_LETTER
                        : (function (e) {
                              return (
                                (e >= 13312 && e <= 40959) ||
                                (e >= 63744 && e <= 64255)
                              );
                            })(e)
                          ? n.HAN_LETTER
                          : (function (e) {
                                return e >= 12448 && e <= 12543;
                              })(e)
                            ? n.KATAKANA_LETTER
                            : (function (e) {
                                  return e >= 12352 && e <= 12447;
                                })(e)
                              ? n.HIRAGANA_LETTER
                              : (function (e) {
                                    return e >= 65376 && e <= 65439;
                                  })(e)
                                ? n.HALFWIDTH_KATAKANA_LETTER
                                : n.ALPHA_LETTER;
                    });
                  const n = {
                    SPACE: 0,
                    ALPHA_LETTER: 1,
                    PUNCT: 2,
                    HAN_LETTER: 3,
                    KATAKANA_LETTER: 4,
                    HIRAGANA_LETTER: 5,
                    HALFWIDTH_KATAKANA_LETTER: 6,
                    THAI_LETTER: 7,
                  };
                  t.CharacterType = n;
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFHistory = void 0),
                    (t.isDestArraysEqual = s),
                    (t.isDestHashesEqual = a);
                  var r = n(7),
                    i = n(19);
                  function o() {
                    return document.location.hash;
                  }
                  function a(e, t) {
                    return (
                      'string' == typeof e &&
                      'string' == typeof t &&
                      (e === t ||
                        (0, r.parseQueryString)(e).get('nameddest') === t)
                    );
                  }
                  function s(e, t) {
                    function n(e, t) {
                      if (typeof e != typeof t) return !1;
                      if (Array.isArray(e) || Array.isArray(t)) return !1;
                      if (null !== e && 'object' == typeof e && null !== t) {
                        if (Object.keys(e).length !== Object.keys(t).length)
                          return !1;
                        for (const r in e) if (!n(e[r], t[r])) return !1;
                        return !0;
                      }
                      return e === t || (Number.isNaN(e) && Number.isNaN(t));
                    }
                    if (!Array.isArray(e) || !Array.isArray(t)) return !1;
                    if (e.length !== t.length) return !1;
                    for (let r = 0, i = e.length; r < i; r++)
                      if (!n(e[r], t[r])) return !1;
                    return !0;
                  }
                  t.PDFHistory = class {
                    constructor(e) {
                      let { linkService: t, eventBus: n } = e;
                      (this.linkService = t),
                        (this.eventBus = n),
                        (this._initialized = !1),
                        (this._fingerprint = ''),
                        this.reset(),
                        (this._boundEvents = null),
                        this.eventBus._on('pagesinit', () => {
                          (this._isPagesLoaded = !1),
                            this.eventBus._on(
                              'pagesloaded',
                              (e) => {
                                this._isPagesLoaded = !!e.pagesCount;
                              },
                              { once: !0 },
                            );
                        });
                    }
                    initialize(e) {
                      let {
                        fingerprint: t,
                        resetHistory: n = !1,
                        updateUrl: r = !1,
                      } = e;
                      if (!t || 'string' != typeof t)
                        return void console.error(
                          'PDFHistory.initialize: The "fingerprint" must be a non-empty string.',
                        );
                      this._initialized && this.reset();
                      const i =
                        '' !== this._fingerprint && this._fingerprint !== t;
                      (this._fingerprint = t),
                        (this._updateUrl = !0 === r),
                        (this._initialized = !0),
                        this._bindEvents();
                      const a = window.history.state;
                      if (
                        ((this._popStateInProgress = !1),
                        (this._blockHashChange = 0),
                        (this._currentHash = o()),
                        (this._numPositionUpdates = 0),
                        (this._uid = this._maxUid = 0),
                        (this._destination = null),
                        (this._position = null),
                        !this._isValidState(a, !0) || n)
                      ) {
                        const {
                          hash: e,
                          page: t,
                          rotation: r,
                        } = this._parseCurrentHash(!0);
                        return !e || i || n
                          ? void this._pushOrReplaceState(null, !0)
                          : void this._pushOrReplaceState(
                              { hash: e, page: t, rotation: r },
                              !0,
                            );
                      }
                      const s = a.destination;
                      this._updateInternalState(s, a.uid, !0),
                        void 0 !== s.rotation &&
                          (this._initialRotation = s.rotation),
                        s.dest
                          ? ((this._initialBookmark = JSON.stringify(s.dest)),
                            (this._destination.page = null))
                          : s.hash
                            ? (this._initialBookmark = s.hash)
                            : s.page &&
                              (this._initialBookmark = `page=${s.page}`);
                    }
                    reset() {
                      this._initialized &&
                        (this._pageHide(),
                        (this._initialized = !1),
                        this._unbindEvents()),
                        this._updateViewareaTimeout &&
                          (clearTimeout(this._updateViewareaTimeout),
                          (this._updateViewareaTimeout = null)),
                        (this._initialBookmark = null),
                        (this._initialRotation = null);
                    }
                    push(e) {
                      let {
                        namedDest: t = null,
                        explicitDest: n,
                        pageNumber: r,
                      } = e;
                      if (!this._initialized) return;
                      if (t && 'string' != typeof t)
                        return void console.error(
                          `PDFHistory.push: "${t}" is not a valid namedDest parameter.`,
                        );
                      if (!Array.isArray(n))
                        return void console.error(
                          `PDFHistory.push: "${n}" is not a valid explicitDest parameter.`,
                        );
                      if (
                        !this._isValidPage(r) &&
                        (null !== r || this._destination)
                      )
                        return void console.error(
                          `PDFHistory.push: "${r}" is not a valid pageNumber parameter.`,
                        );
                      const i = t || JSON.stringify(n);
                      if (!i) return;
                      let o = !1;
                      if (
                        this._destination &&
                        (a(this._destination.hash, i) ||
                          s(this._destination.dest, n))
                      ) {
                        if (this._destination.page) return;
                        o = !0;
                      }
                      (this._popStateInProgress && !o) ||
                        (this._pushOrReplaceState(
                          {
                            dest: n,
                            hash: i,
                            page: r,
                            rotation: this.linkService.rotation,
                          },
                          o,
                        ),
                        this._popStateInProgress ||
                          ((this._popStateInProgress = !0),
                          Promise.resolve().then(() => {
                            this._popStateInProgress = !1;
                          })));
                    }
                    pushPage(e) {
                      var t;
                      this._initialized &&
                        (this._isValidPage(e)
                          ? (null === (t = this._destination) || void 0 === t
                              ? void 0
                              : t.page) !== e &&
                            (this._popStateInProgress ||
                              (this._pushOrReplaceState({
                                dest: null,
                                hash: `page=${e}`,
                                page: e,
                                rotation: this.linkService.rotation,
                              }),
                              this._popStateInProgress ||
                                ((this._popStateInProgress = !0),
                                Promise.resolve().then(() => {
                                  this._popStateInProgress = !1;
                                }))))
                          : console.error(
                              `PDFHistory.pushPage: "${e}" is not a valid page number.`,
                            ));
                    }
                    pushCurrentPosition() {
                      this._initialized &&
                        !this._popStateInProgress &&
                        this._tryPushCurrentPosition();
                    }
                    back() {
                      if (!this._initialized || this._popStateInProgress)
                        return;
                      const e = window.history.state;
                      this._isValidState(e) &&
                        e.uid > 0 &&
                        window.history.back();
                    }
                    forward() {
                      if (!this._initialized || this._popStateInProgress)
                        return;
                      const e = window.history.state;
                      this._isValidState(e) &&
                        e.uid < this._maxUid &&
                        window.history.forward();
                    }
                    get popStateInProgress() {
                      return (
                        this._initialized &&
                        (this._popStateInProgress || this._blockHashChange > 0)
                      );
                    }
                    get initialBookmark() {
                      return this._initialized ? this._initialBookmark : null;
                    }
                    get initialRotation() {
                      return this._initialized ? this._initialRotation : null;
                    }
                    _pushOrReplaceState(e) {
                      const t =
                          (arguments.length > 1 &&
                            void 0 !== arguments[1] &&
                            arguments[1]) ||
                          !this._destination,
                        n = {
                          fingerprint: this._fingerprint,
                          uid: t ? this._uid : this._uid + 1,
                          destination: e,
                        };
                      let r;
                      if (
                        (this._updateInternalState(e, n.uid),
                        this._updateUrl && null != e && e.hash)
                      ) {
                        const t = document.location.href.split('#')[0];
                        t.startsWith('file://') || (r = `${t}#${e.hash}`);
                      }
                      t
                        ? window.history.replaceState(n, '', r)
                        : window.history.pushState(n, '', r);
                    }
                    _tryPushCurrentPosition() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      if (!this._position) return;
                      let t = this._position;
                      if (
                        (e &&
                          ((t = Object.assign(
                            Object.create(null),
                            this._position,
                          )),
                          (t.temporary = !0)),
                        !this._destination)
                      )
                        return void this._pushOrReplaceState(t);
                      if (this._destination.temporary)
                        return void this._pushOrReplaceState(t, !0);
                      if (this._destination.hash === t.hash) return;
                      if (
                        !this._destination.page &&
                        this._numPositionUpdates <= 50
                      )
                        return;
                      let n = !1;
                      if (
                        this._destination.page >= t.first &&
                        this._destination.page <= t.page
                      ) {
                        if (
                          void 0 !== this._destination.dest ||
                          !this._destination.first
                        )
                          return;
                        n = !0;
                      }
                      this._pushOrReplaceState(t, n);
                    }
                    _isValidPage(e) {
                      return (
                        Number.isInteger(e) &&
                        e > 0 &&
                        e <= this.linkService.pagesCount
                      );
                    }
                    _isValidState(e) {
                      let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      if (!e) return !1;
                      if (e.fingerprint !== this._fingerprint) {
                        if (!t) return !1;
                        {
                          if (
                            'string' != typeof e.fingerprint ||
                            e.fingerprint.length !== this._fingerprint.length
                          )
                            return !1;
                          const [t] =
                            performance.getEntriesByType('navigation');
                          if ('reload' !== (null == t ? void 0 : t.type))
                            return !1;
                        }
                      }
                      return (
                        !(!Number.isInteger(e.uid) || e.uid < 0) &&
                        null !== e.destination &&
                        'object' == typeof e.destination
                      );
                    }
                    _updateInternalState(e, t) {
                      let n =
                        arguments.length > 2 &&
                        void 0 !== arguments[2] &&
                        arguments[2];
                      this._updateViewareaTimeout &&
                        (clearTimeout(this._updateViewareaTimeout),
                        (this._updateViewareaTimeout = null)),
                        n && null != e && e.temporary && delete e.temporary,
                        (this._destination = e),
                        (this._uid = t),
                        (this._maxUid = Math.max(this._maxUid, t)),
                        (this._numPositionUpdates = 0);
                    }
                    _parseCurrentHash() {
                      let e =
                        arguments.length > 0 &&
                        void 0 !== arguments[0] &&
                        arguments[0];
                      const t = unescape(o()).substring(1),
                        n = (0, r.parseQueryString)(t),
                        i = n.get('nameddest') || '';
                      let a = 0 | n.get('page');
                      return (
                        (!this._isValidPage(a) || (e && i.length > 0)) &&
                          (a = null),
                        {
                          hash: t,
                          page: a,
                          rotation: this.linkService.rotation,
                        }
                      );
                    }
                    _updateViewarea(e) {
                      let { location: t } = e;
                      this._updateViewareaTimeout &&
                        (clearTimeout(this._updateViewareaTimeout),
                        (this._updateViewareaTimeout = null)),
                        (this._position = {
                          hash: t.pdfOpenParams.substring(1),
                          page: this.linkService.page,
                          first: t.pageNumber,
                          rotation: t.rotation,
                        }),
                        this._popStateInProgress ||
                          (this._isPagesLoaded &&
                            this._destination &&
                            !this._destination.page &&
                            this._numPositionUpdates++,
                          (this._updateViewareaTimeout = setTimeout(() => {
                            this._popStateInProgress ||
                              this._tryPushCurrentPosition(!0),
                              (this._updateViewareaTimeout = null);
                          }, 1e3)));
                    }
                    _popState(e) {
                      let { state: t } = e;
                      const n = o(),
                        a = this._currentHash !== n;
                      if (((this._currentHash = n), !t)) {
                        this._uid++;
                        const {
                          hash: e,
                          page: t,
                          rotation: n,
                        } = this._parseCurrentHash();
                        return void this._pushOrReplaceState(
                          { hash: e, page: t, rotation: n },
                          !0,
                        );
                      }
                      if (!this._isValidState(t)) return;
                      (this._popStateInProgress = !0),
                        a &&
                          (this._blockHashChange++,
                          (0, i.waitOnEventOrTimeout)({
                            target: window,
                            name: 'hashchange',
                            delay: 1e3,
                          }).then(() => {
                            this._blockHashChange--;
                          }));
                      const s = t.destination;
                      this._updateInternalState(s, t.uid, !0),
                        (0, r.isValidRotation)(s.rotation) &&
                          (this.linkService.rotation = s.rotation),
                        s.dest
                          ? this.linkService.goToDestination(s.dest)
                          : s.hash
                            ? this.linkService.setHash(s.hash)
                            : s.page && (this.linkService.page = s.page),
                        Promise.resolve().then(() => {
                          this._popStateInProgress = !1;
                        });
                    }
                    _pageHide() {
                      (this._destination && !this._destination.temporary) ||
                        this._tryPushCurrentPosition();
                    }
                    _bindEvents() {
                      this._boundEvents ||
                        ((this._boundEvents = {
                          updateViewarea: this._updateViewarea.bind(this),
                          popState: this._popState.bind(this),
                          pageHide: this._pageHide.bind(this),
                        }),
                        this.eventBus._on(
                          'updateviewarea',
                          this._boundEvents.updateViewarea,
                        ),
                        window.addEventListener(
                          'popstate',
                          this._boundEvents.popState,
                        ),
                        window.addEventListener(
                          'pagehide',
                          this._boundEvents.pageHide,
                        ));
                    }
                    _unbindEvents() {
                      this._boundEvents &&
                        (this.eventBus._off(
                          'updateviewarea',
                          this._boundEvents.updateViewarea,
                        ),
                        window.removeEventListener(
                          'popstate',
                          this._boundEvents.popState,
                        ),
                        window.removeEventListener(
                          'pagehide',
                          this._boundEvents.pageHide,
                        ),
                        (this._boundEvents = null));
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.PDFScriptingManager = void 0);
                  var r = n(7),
                    i = n(3);
                  t.PDFScriptingManager = class {
                    constructor(e) {
                      let {
                        eventBus: t,
                        sandboxBundleSrc: n = null,
                        scriptingFactory: r = null,
                        docPropertiesLookup: i = null,
                      } = e;
                      (this._pdfDocument = null),
                        (this._pdfViewer = null),
                        (this._closeCapability = null),
                        (this._destroyCapability = null),
                        (this._scripting = null),
                        (this._mouseState = Object.create(null)),
                        (this._ready = !1),
                        (this._eventBus = t),
                        (this._sandboxBundleSrc = n),
                        (this._scriptingFactory = r),
                        (this._docPropertiesLookup = i),
                        this._scriptingFactory ||
                          window.addEventListener('updatefromsandbox', (e) => {
                            this._eventBus.dispatch('updatefromsandbox', {
                              source: window,
                              detail: e.detail,
                            });
                          });
                    }
                    setViewer(e) {
                      this._pdfViewer = e;
                    }
                    async setDocument(e) {
                      var t;
                      if (
                        (this._pdfDocument && (await this._destroyScripting()),
                        (this._pdfDocument = e),
                        !e)
                      )
                        return;
                      const [n, r, i] = await Promise.all([
                        e.getFieldObjects(),
                        e.getCalculationOrderIds(),
                        e.getJSActions(),
                      ]);
                      if (n || i) {
                        if (e === this._pdfDocument) {
                          try {
                            this._scripting = this._createScripting();
                          } catch (e) {
                            return (
                              console.error(
                                `PDFScriptingManager.setDocument: "${null == e ? void 0 : e.message}".`,
                              ),
                              void (await this._destroyScripting())
                            );
                          }
                          this._internalEvents.set('updatefromsandbox', (e) => {
                            (null == e ? void 0 : e.source) === window &&
                              this._updateFromSandbox(e.detail);
                          }),
                            this._internalEvents.set(
                              'dispatcheventinsandbox',
                              (e) => {
                                var t;
                                null === (t = this._scripting) ||
                                  void 0 === t ||
                                  t.dispatchEventInSandbox(e.detail);
                              },
                            ),
                            this._internalEvents.set('pagechanging', (e) => {
                              let { pageNumber: t, previous: n } = e;
                              t !== n &&
                                (this._dispatchPageClose(n),
                                this._dispatchPageOpen(t));
                            }),
                            this._internalEvents.set('pagerendered', (e) => {
                              let { pageNumber: t } = e;
                              this._pageOpenPending.has(t) &&
                                t === this._pdfViewer.currentPageNumber &&
                                this._dispatchPageOpen(t);
                            }),
                            this._internalEvents.set(
                              'pagesdestroy',
                              async (e) => {
                                var t, n;
                                await this._dispatchPageClose(
                                  this._pdfViewer.currentPageNumber,
                                ),
                                  await (null === (t = this._scripting) ||
                                  void 0 === t
                                    ? void 0
                                    : t.dispatchEventInSandbox({
                                        id: 'doc',
                                        name: 'WillClose',
                                      })),
                                  null === (n = this._closeCapability) ||
                                    void 0 === n ||
                                    n.resolve();
                              },
                            ),
                            this._domEvents.set('mousedown', (e) => {
                              this._mouseState.isDown = !0;
                            }),
                            this._domEvents.set('mouseup', (e) => {
                              this._mouseState.isDown = !1;
                            });
                          for (const [e, t] of this._internalEvents)
                            this._eventBus._on(e, t);
                          for (const [e, t] of this._domEvents)
                            window.addEventListener(e, t, !0);
                          try {
                            const t = await this._getDocProperties();
                            if (e !== this._pdfDocument) return;
                            await this._scripting.createSandbox({
                              objects: n,
                              calculationOrder: r,
                              appInfo: {
                                platform: navigator.platform,
                                language: navigator.language,
                              },
                              docInfo: { ...t, actions: i },
                            }),
                              this._eventBus.dispatch('sandboxcreated', {
                                source: this,
                              });
                          } catch (e) {
                            return (
                              console.error(
                                `PDFScriptingManager.setDocument: "${null == e ? void 0 : e.message}".`,
                              ),
                              void (await this._destroyScripting())
                            );
                          }
                          await (null === (t = this._scripting) || void 0 === t
                            ? void 0
                            : t.dispatchEventInSandbox({
                                id: 'doc',
                                name: 'Open',
                              })),
                            await this._dispatchPageOpen(
                              this._pdfViewer.currentPageNumber,
                              !0,
                            ),
                            Promise.resolve().then(() => {
                              e === this._pdfDocument && (this._ready = !0);
                            });
                        }
                      } else await this._destroyScripting();
                    }
                    async dispatchWillSave(e) {
                      var t;
                      return null === (t = this._scripting) || void 0 === t
                        ? void 0
                        : t.dispatchEventInSandbox({
                            id: 'doc',
                            name: 'WillSave',
                          });
                    }
                    async dispatchDidSave(e) {
                      var t;
                      return null === (t = this._scripting) || void 0 === t
                        ? void 0
                        : t.dispatchEventInSandbox({
                            id: 'doc',
                            name: 'DidSave',
                          });
                    }
                    async dispatchWillPrint(e) {
                      var t;
                      return null === (t = this._scripting) || void 0 === t
                        ? void 0
                        : t.dispatchEventInSandbox({
                            id: 'doc',
                            name: 'WillPrint',
                          });
                    }
                    async dispatchDidPrint(e) {
                      var t;
                      return null === (t = this._scripting) || void 0 === t
                        ? void 0
                        : t.dispatchEventInSandbox({
                            id: 'doc',
                            name: 'DidPrint',
                          });
                    }
                    get mouseState() {
                      return this._mouseState;
                    }
                    get destroyPromise() {
                      var e;
                      return (
                        (null === (e = this._destroyCapability) || void 0 === e
                          ? void 0
                          : e.promise) || null
                      );
                    }
                    get ready() {
                      return this._ready;
                    }
                    get _internalEvents() {
                      return (0, i.shadow)(this, '_internalEvents', new Map());
                    }
                    get _domEvents() {
                      return (0, i.shadow)(this, '_domEvents', new Map());
                    }
                    get _pageOpenPending() {
                      return (0, i.shadow)(this, '_pageOpenPending', new Set());
                    }
                    get _visitedPages() {
                      return (0, i.shadow)(this, '_visitedPages', new Map());
                    }
                    async _updateFromSandbox(e) {
                      const t =
                          this._pdfViewer.isInPresentationMode ||
                          this._pdfViewer.isChangingPresentationMode,
                        { id: n, siblings: i, command: o, value: a } = e;
                      if (!n) {
                        switch (o) {
                          case 'clear':
                            console.clear();
                            break;
                          case 'error':
                            console.error(a);
                            break;
                          case 'layout':
                            if (t) return;
                            const e = (0, r.apiPageLayoutToViewerModes)(a);
                            this._pdfViewer.spreadMode = e.spreadMode;
                            break;
                          case 'page-num':
                            this._pdfViewer.currentPageNumber = a + 1;
                            break;
                          case 'print':
                            await this._pdfViewer.pagesPromise,
                              this._eventBus.dispatch('print', {
                                source: this,
                              });
                            break;
                          case 'println':
                            console.log(a);
                            break;
                          case 'zoom':
                            if (t) return;
                            this._pdfViewer.currentScaleValue = a;
                            break;
                          case 'SaveAs':
                            this._eventBus.dispatch('download', {
                              source: this,
                            });
                            break;
                          case 'FirstPage':
                            this._pdfViewer.currentPageNumber = 1;
                            break;
                          case 'LastPage':
                            this._pdfViewer.currentPageNumber =
                              this._pdfViewer.pagesCount;
                            break;
                          case 'NextPage':
                            this._pdfViewer.nextPage();
                            break;
                          case 'PrevPage':
                            this._pdfViewer.previousPage();
                            break;
                          case 'ZoomViewIn':
                            if (t) return;
                            this._pdfViewer.increaseScale();
                            break;
                          case 'ZoomViewOut':
                            if (t) return;
                            this._pdfViewer.decreaseScale();
                        }
                        return;
                      }
                      if (t && e.focus) return;
                      delete e.id, delete e.siblings;
                      const s = i ? [n, ...i] : [n];
                      for (const t of s) {
                        const n = document.querySelector(
                          `[data-element-id="${t}"]`,
                        );
                        var l;
                        n
                          ? n.dispatchEvent(
                              new CustomEvent('updatefromsandbox', {
                                detail: e,
                              }),
                            )
                          : null === (l = this._pdfDocument) ||
                            void 0 === l ||
                            l.annotationStorage.setValue(t, e);
                      }
                    }
                    async _dispatchPageOpen(e) {
                      let t =
                        arguments.length > 1 &&
                        void 0 !== arguments[1] &&
                        arguments[1];
                      const n = this._pdfDocument,
                        o = this._visitedPages;
                      if (
                        (t &&
                          (this._closeCapability = (0,
                          i.createPromiseCapability)()),
                        !this._closeCapability)
                      )
                        return;
                      const a = this._pdfViewer.getPageView(e - 1);
                      if (
                        (null == a ? void 0 : a.renderingState) !==
                        r.RenderingStates.FINISHED
                      )
                        return void this._pageOpenPending.add(e);
                      this._pageOpenPending.delete(e);
                      const s = (async () => {
                        var t, r;
                        const i = await (o.has(e)
                          ? null
                          : null === (t = a.pdfPage) || void 0 === t
                            ? void 0
                            : t.getJSActions());
                        n === this._pdfDocument &&
                          (await (null === (r = this._scripting) || void 0 === r
                            ? void 0
                            : r.dispatchEventInSandbox({
                                id: 'page',
                                name: 'PageOpen',
                                pageNumber: e,
                                actions: i,
                              })));
                      })();
                      o.set(e, s);
                    }
                    async _dispatchPageClose(e) {
                      var t;
                      const n = this._pdfDocument,
                        r = this._visitedPages;
                      if (!this._closeCapability) return;
                      if (this._pageOpenPending.has(e)) return;
                      const i = r.get(e);
                      i &&
                        (r.set(e, null),
                        await i,
                        n === this._pdfDocument &&
                          (await (null === (t = this._scripting) || void 0 === t
                            ? void 0
                            : t.dispatchEventInSandbox({
                                id: 'page',
                                name: 'PageClose',
                                pageNumber: e,
                              }))));
                    }
                    async _getDocProperties() {
                      if (this._docPropertiesLookup)
                        return this._docPropertiesLookup(this._pdfDocument);
                      const { docPropertiesLookup: e } = n(26);
                      return e(this._pdfDocument);
                    }
                    _createScripting() {
                      if (
                        ((this._destroyCapability = (0,
                        i.createPromiseCapability)()),
                        this._scripting)
                      )
                        throw new Error(
                          '_createScripting: Scripting already exists.',
                        );
                      if (this._scriptingFactory)
                        return this._scriptingFactory.createScripting({
                          sandboxBundleSrc: this._sandboxBundleSrc,
                        });
                      const { GenericScripting: e } = n(26);
                      return new e(this._sandboxBundleSrc);
                    }
                    async _destroyScripting() {
                      var e, t;
                      if (!this._scripting)
                        return (
                          (this._pdfDocument = null),
                          void (
                            null === (t = this._destroyCapability) ||
                            void 0 === t ||
                            t.resolve()
                          )
                        );
                      this._closeCapability &&
                        (await Promise.race([
                          this._closeCapability.promise,
                          new Promise((e) => {
                            setTimeout(e, 1e3);
                          }),
                        ]).catch((e) => {}),
                        (this._closeCapability = null)),
                        (this._pdfDocument = null);
                      try {
                        await this._scripting.destroySandbox();
                      } catch (e) {}
                      for (const [e, t] of this._internalEvents)
                        this._eventBus._off(e, t);
                      this._internalEvents.clear();
                      for (const [e, t] of this._domEvents)
                        window.removeEventListener(e, t, !0);
                      this._domEvents.clear(),
                        this._pageOpenPending.clear(),
                        this._visitedPages.clear(),
                        (this._scripting = null),
                        delete this._mouseState.isDown,
                        (this._ready = !1),
                        null === (e = this._destroyCapability) ||
                          void 0 === e ||
                          e.resolve();
                    }
                  };
                },
                (e, t, n) => {
                  Object.defineProperty(t, '__esModule', { value: !0 }),
                    (t.GenericScripting = void 0),
                    (t.docPropertiesLookup = async function (e) {
                      const t = ''.split('#')[0];
                      let {
                        info: n,
                        metadata: i,
                        contentDispositionFilename: o,
                        contentLength: a,
                      } = await e.getMetadata();
                      if (!a) {
                        const { length: t } = await e.getDownloadInfo();
                        a = t;
                      }
                      return {
                        ...n,
                        baseURL: t,
                        filesize: a,
                        filename: o || (0, r.getPdfFilenameFromUrl)(''),
                        metadata: null == i ? void 0 : i.getRaw(),
                        authors: null == i ? void 0 : i.get('dc:creator'),
                        numPages: e.numPages,
                        URL: '',
                      };
                    });
                  var r = n(3);
                  t.GenericScripting = class {
                    constructor(e) {
                      this._ready = (0, r.loadScript)(e, !0).then(() =>
                        window.pdfjsSandbox.QuickJSSandbox(),
                      );
                    }
                    async createSandbox(e) {
                      (await this._ready).create(e);
                    }
                    async dispatchEventInSandbox(e) {
                      const t = await this._ready;
                      setTimeout(() => t.dispatchEvent(e), 0);
                    }
                    async destroySandbox() {
                      (await this._ready).nukeSandbox();
                    }
                  };
                },
              ],
              t = {};
            function r(n) {
              var i = t[n];
              if (void 0 !== i) return i.exports;
              var o = (t[n] = { exports: {} });
              return e[n](o, o.exports, r), o.exports;
            }
            var i = {};
            return (
              (() => {
                var e = i;
                Object.defineProperty(e, '__esModule', { value: !0 }),
                  Object.defineProperty(e, 'AnnotationLayerBuilder', {
                    enumerable: !0,
                    get: function () {
                      return s.AnnotationLayerBuilder;
                    },
                  }),
                  Object.defineProperty(e, 'DefaultAnnotationLayerFactory', {
                    enumerable: !0,
                    get: function () {
                      return t.DefaultAnnotationLayerFactory;
                    },
                  }),
                  Object.defineProperty(e, 'DefaultStructTreeLayerFactory', {
                    enumerable: !0,
                    get: function () {
                      return t.DefaultStructTreeLayerFactory;
                    },
                  }),
                  Object.defineProperty(e, 'DefaultTextLayerFactory', {
                    enumerable: !0,
                    get: function () {
                      return t.DefaultTextLayerFactory;
                    },
                  }),
                  Object.defineProperty(e, 'DefaultXfaLayerFactory', {
                    enumerable: !0,
                    get: function () {
                      return t.DefaultXfaLayerFactory;
                    },
                  }),
                  Object.defineProperty(e, 'DownloadManager', {
                    enumerable: !0,
                    get: function () {
                      return l.DownloadManager;
                    },
                  }),
                  Object.defineProperty(e, 'EventBus', {
                    enumerable: !0,
                    get: function () {
                      return c.EventBus;
                    },
                  }),
                  Object.defineProperty(e, 'GenericL10n', {
                    enumerable: !0,
                    get: function () {
                      return h.GenericL10n;
                    },
                  }),
                  Object.defineProperty(e, 'LinkTarget', {
                    enumerable: !0,
                    get: function () {
                      return n.LinkTarget;
                    },
                  }),
                  Object.defineProperty(e, 'NullL10n', {
                    enumerable: !0,
                    get: function () {
                      return u.NullL10n;
                    },
                  }),
                  Object.defineProperty(e, 'PDFFindController', {
                    enumerable: !0,
                    get: function () {
                      return d.PDFFindController;
                    },
                  }),
                  Object.defineProperty(e, 'PDFHistory', {
                    enumerable: !0,
                    get: function () {
                      return p.PDFHistory;
                    },
                  }),
                  Object.defineProperty(e, 'PDFLinkService', {
                    enumerable: !0,
                    get: function () {
                      return n.PDFLinkService;
                    },
                  }),
                  Object.defineProperty(e, 'PDFPageView', {
                    enumerable: !0,
                    get: function () {
                      return f.PDFPageView;
                    },
                  }),
                  Object.defineProperty(e, 'PDFScriptingManager', {
                    enumerable: !0,
                    get: function () {
                      return g.PDFScriptingManager;
                    },
                  }),
                  Object.defineProperty(e, 'PDFSinglePageViewer', {
                    enumerable: !0,
                    get: function () {
                      return a.PDFSinglePageViewer;
                    },
                  }),
                  Object.defineProperty(e, 'PDFViewer', {
                    enumerable: !0,
                    get: function () {
                      return a.PDFViewer;
                    },
                  }),
                  Object.defineProperty(e, 'ProgressBar', {
                    enumerable: !0,
                    get: function () {
                      return o.ProgressBar;
                    },
                  }),
                  Object.defineProperty(e, 'RenderingStates', {
                    enumerable: !0,
                    get: function () {
                      return o.RenderingStates;
                    },
                  }),
                  Object.defineProperty(e, 'ScrollMode', {
                    enumerable: !0,
                    get: function () {
                      return o.ScrollMode;
                    },
                  }),
                  Object.defineProperty(e, 'SimpleLinkService', {
                    enumerable: !0,
                    get: function () {
                      return n.SimpleLinkService;
                    },
                  }),
                  Object.defineProperty(e, 'SpreadMode', {
                    enumerable: !0,
                    get: function () {
                      return o.SpreadMode;
                    },
                  }),
                  Object.defineProperty(e, 'StructTreeLayerBuilder', {
                    enumerable: !0,
                    get: function () {
                      return m.StructTreeLayerBuilder;
                    },
                  }),
                  Object.defineProperty(e, 'TextLayerBuilder', {
                    enumerable: !0,
                    get: function () {
                      return v.TextLayerBuilder;
                    },
                  }),
                  Object.defineProperty(e, 'XfaLayerBuilder', {
                    enumerable: !0,
                    get: function () {
                      return b.XfaLayerBuilder;
                    },
                  }),
                  Object.defineProperty(e, 'parseQueryString', {
                    enumerable: !0,
                    get: function () {
                      return o.parseQueryString;
                    },
                  });
                var t = r(1),
                  n = r(6),
                  o = r(7),
                  a = r(11),
                  s = r(5),
                  l = r(18),
                  c = r(19),
                  h = r(20),
                  u = r(4),
                  d = r(22),
                  p = r(24),
                  f = r(13),
                  g = r(25),
                  m = r(8),
                  v = r(9),
                  b = r(10);
              })(),
              i
            );
          })()),
        (e.exports = r());
    },
    23800: function (e, t, n) {
      !(function (e) {
        'use strict';
        var t =
          'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
            ? Symbol
            : function (e) {
                return 'Symbol('.concat(e, ')');
              };
        function r(e, t) {
          var n,
            r,
            i,
            o,
            a = {
              label: 0,
              sent: function () {
                if (1 & i[0]) throw i[1];
                return i[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (o = { next: s(0), throw: s(1), return: s(2) }),
            'function' == typeof Symbol &&
              (o[Symbol.iterator] = function () {
                return this;
              }),
            o
          );
          function s(e) {
            return function (t) {
              return l([e, t]);
            };
          }
          function l(s) {
            if (n) throw new TypeError('Generator is already executing.');
            for (; o && ((o = 0), s[0] && (a = 0)), a; )
              try {
                if (
                  ((n = 1),
                  r &&
                    (i =
                      2 & s[0]
                        ? r.return
                        : s[0]
                          ? r.throw || ((i = r.return) && i.call(r), 0)
                          : r.next) &&
                    !(i = i.call(r, s[1])).done)
                )
                  return i;
                switch (((r = 0), i && (s = [2 & s[0], i.value]), s[0])) {
                  case 0:
                  case 1:
                    i = s;
                    break;
                  case 4:
                    return a.label++, { value: s[1], done: !1 };
                  case 5:
                    a.label++, (r = s[1]), (s = [0]);
                    continue;
                  case 7:
                    (s = a.ops.pop()), a.trys.pop();
                    continue;
                  default:
                    if (
                      !(
                        (i = (i = a.trys).length > 0 && i[i.length - 1]) ||
                        (6 !== s[0] && 2 !== s[0])
                      )
                    ) {
                      a = 0;
                      continue;
                    }
                    if (3 === s[0] && (!i || (s[1] > i[0] && s[1] < i[3]))) {
                      a.label = s[1];
                      break;
                    }
                    if (6 === s[0] && a.label < i[1]) {
                      (a.label = i[1]), (i = s);
                      break;
                    }
                    if (i && a.label < i[2]) {
                      (a.label = i[2]), a.ops.push(s);
                      break;
                    }
                    i[2] && a.ops.pop(), a.trys.pop();
                    continue;
                }
                s = t.call(e, a);
              } catch (e) {
                (s = [6, e]), (r = 0);
              } finally {
                n = i = 0;
              }
            if (5 & s[0]) throw s[1];
            return { value: s[0] ? s[1] : void 0, done: !0 };
          }
        }
        function i(e) {
          var t = 'function' == typeof Symbol && Symbol.iterator,
            n = t && e[t],
            r = 0;
          if (n) return n.call(e);
          if (e && 'number' == typeof e.length)
            return {
              next: function () {
                return (
                  e && r >= e.length && (e = void 0),
                  { value: e && e[r++], done: !e }
                );
              },
            };
          throw new TypeError(
            t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.',
          );
        }
        function o(e) {
          return this instanceof o ? ((this.v = e), this) : new o(e);
        }
        function a(e, t, n) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var r,
            i = n.apply(e, t || []),
            a = [];
          return (
            (r = {}),
            s('next'),
            s('throw'),
            s('return'),
            (r[Symbol.asyncIterator] = function () {
              return this;
            }),
            r
          );
          function s(e) {
            i[e] &&
              (r[e] = function (t) {
                return new Promise(function (n, r) {
                  a.push([e, t, n, r]) > 1 || l(e, t);
                });
              });
          }
          function l(e, t) {
            try {
              c(i[e](t));
            } catch (e) {
              d(a[0][3], e);
            }
          }
          function c(e) {
            e.value instanceof o
              ? Promise.resolve(e.value.v).then(h, u)
              : d(a[0][2], e);
          }
          function h(e) {
            l('next', e);
          }
          function u(e) {
            l('throw', e);
          }
          function d(e, t) {
            e(t), a.shift(), a.length && l(a[0][0], a[0][1]);
          }
        }
        function s(e) {
          var t, n;
          return (
            (t = {}),
            r('next'),
            r('throw', function (e) {
              throw e;
            }),
            r('return'),
            (t[Symbol.iterator] = function () {
              return this;
            }),
            t
          );
          function r(r, i) {
            t[r] = e[r]
              ? function (t) {
                  return (n = !n)
                    ? { value: o(e[r](t)), done: !1 }
                    : i
                      ? i(t)
                      : t;
                }
              : i;
          }
        }
        function l(e) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var t,
            n = e[Symbol.asyncIterator];
          return n
            ? n.call(e)
            : ((e = 'function' == typeof i ? i(e) : e[Symbol.iterator]()),
              (t = {}),
              r('next'),
              r('throw'),
              r('return'),
              (t[Symbol.asyncIterator] = function () {
                return this;
              }),
              t);
          function r(n) {
            t[n] =
              e[n] &&
              function (t) {
                return new Promise(function (r, i) {
                  o(r, i, (t = e[n](t)).done, t.value);
                });
              };
          }
          function o(e, t, n, r) {
            Promise.resolve(r).then(function (t) {
              e({ value: t, done: n });
            }, t);
          }
        }
        function c() {}
        function h(e) {
          return ('object' == typeof e && null !== e) || 'function' == typeof e;
        }
        'function' == typeof SuppressedError && SuppressedError;
        var u = c;
        function d(e, t) {
          try {
            Object.defineProperty(e, 'name', { value: t, configurable: !0 });
          } catch (e) {}
        }
        var p = Promise,
          f = Promise.prototype.then,
          g = Promise.reject.bind(p);
        function m(e) {
          return new p(e);
        }
        function v(e) {
          return m(function (t) {
            return t(e);
          });
        }
        function b(e) {
          return g(e);
        }
        function y(e, t, n) {
          return f.call(e, t, n);
        }
        function _(e, t, n) {
          y(y(e, t, n), void 0, u);
        }
        function w(e, t) {
          _(e, t);
        }
        function S(e, t) {
          _(e, void 0, t);
        }
        function A(e, t, n) {
          return y(e, t, n);
        }
        function x(e) {
          y(e, void 0, u);
        }
        var P = function (e) {
          if ('function' == typeof queueMicrotask) P = queueMicrotask;
          else {
            var t = v(void 0);
            P = function (e) {
              return y(t, e);
            };
          }
          return P(e);
        };
        function E(e, t, n) {
          if ('function' != typeof e)
            throw new TypeError('Argument is not a function');
          return Function.prototype.apply.call(e, t, n);
        }
        function C(e, t, n) {
          try {
            return v(E(e, t, n));
          } catch (e) {
            return b(e);
          }
        }
        var T = 16384,
          k = (function () {
            function e() {
              (this._cursor = 0),
                (this._size = 0),
                (this._front = { _elements: [], _next: void 0 }),
                (this._back = this._front),
                (this._cursor = 0),
                (this._size = 0);
            }
            return (
              Object.defineProperty(e.prototype, 'length', {
                get: function () {
                  return this._size;
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.push = function (e) {
                var t = this._back,
                  n = t;
                t._elements.length === T - 1 &&
                  (n = { _elements: [], _next: void 0 }),
                  t._elements.push(e),
                  n !== t && ((this._back = n), (t._next = n)),
                  ++this._size;
              }),
              (e.prototype.shift = function () {
                var e = this._front,
                  t = e,
                  n = this._cursor,
                  r = n + 1,
                  i = e._elements,
                  o = i[n];
                return (
                  r === T && ((t = e._next), (r = 0)),
                  --this._size,
                  (this._cursor = r),
                  e !== t && (this._front = t),
                  (i[n] = void 0),
                  o
                );
              }),
              (e.prototype.forEach = function (e) {
                for (
                  var t = this._cursor, n = this._front, r = n._elements;
                  !(
                    (t === r.length && void 0 === n._next) ||
                    (t === r.length &&
                      ((t = 0), 0 === (r = (n = n._next)._elements).length))
                  );

                )
                  e(r[t]), ++t;
              }),
              (e.prototype.peek = function () {
                var e = this._front,
                  t = this._cursor;
                return e._elements[t];
              }),
              e
            );
          })(),
          M = t('[[AbortSteps]]'),
          R = t('[[ErrorSteps]]'),
          O = t('[[CancelSteps]]'),
          D = t('[[PullSteps]]'),
          I = t('[[ReleaseSteps]]');
        function L(e, t) {
          (e._ownerReadableStream = t),
            (t._reader = e),
            'readable' === t._state
              ? B(e)
              : 'closed' === t._state
                ? z(e)
                : W(e, t._storedError);
        }
        function F(e, t) {
          return ti(e._ownerReadableStream, t);
        }
        function N(e) {
          var t = e._ownerReadableStream;
          'readable' === t._state
            ? $(
                e,
                new TypeError(
                  "Reader was released and can no longer be used to monitor the stream's closedness",
                ),
              )
            : U(
                e,
                new TypeError(
                  "Reader was released and can no longer be used to monitor the stream's closedness",
                ),
              ),
            t._readableStreamController[I](),
            (t._reader = void 0),
            (e._ownerReadableStream = void 0);
        }
        function j(e) {
          return new TypeError(
            'Cannot ' + e + ' a stream using a released reader',
          );
        }
        function B(e) {
          e._closedPromise = m(function (t, n) {
            (e._closedPromise_resolve = t), (e._closedPromise_reject = n);
          });
        }
        function W(e, t) {
          B(e), $(e, t);
        }
        function z(e) {
          B(e), H(e);
        }
        function $(e, t) {
          void 0 !== e._closedPromise_reject &&
            (x(e._closedPromise),
            e._closedPromise_reject(t),
            (e._closedPromise_resolve = void 0),
            (e._closedPromise_reject = void 0));
        }
        function U(e, t) {
          W(e, t);
        }
        function H(e) {
          void 0 !== e._closedPromise_resolve &&
            (e._closedPromise_resolve(void 0),
            (e._closedPromise_resolve = void 0),
            (e._closedPromise_reject = void 0));
        }
        var V =
            Number.isFinite ||
            function (e) {
              return 'number' == typeof e && isFinite(e);
            },
          q =
            Math.trunc ||
            function (e) {
              return e < 0 ? Math.ceil(e) : Math.floor(e);
            };
        function G(e) {
          return 'object' == typeof e || 'function' == typeof e;
        }
        function X(e, t) {
          if (void 0 !== e && !G(e))
            throw new TypeError(''.concat(t, ' is not an object.'));
        }
        function Y(e, t) {
          if ('function' != typeof e)
            throw new TypeError(''.concat(t, ' is not a function.'));
        }
        function K(e) {
          return ('object' == typeof e && null !== e) || 'function' == typeof e;
        }
        function Z(e, t) {
          if (!K(e)) throw new TypeError(''.concat(t, ' is not an object.'));
        }
        function Q(e, t, n) {
          if (void 0 === e)
            throw new TypeError(
              'Parameter '.concat(t, " is required in '").concat(n, "'."),
            );
        }
        function J(e, t, n) {
          if (void 0 === e)
            throw new TypeError(
              ''.concat(t, " is required in '").concat(n, "'."),
            );
        }
        function ee(e) {
          return Number(e);
        }
        function te(e) {
          return 0 === e ? 0 : e;
        }
        function ne(e) {
          return te(q(e));
        }
        function re(e, t) {
          var n = 0,
            r = Number.MAX_SAFE_INTEGER,
            i = Number(e);
          if (((i = te(i)), !V(i)))
            throw new TypeError(''.concat(t, ' is not a finite number'));
          if ((i = ne(i)) < n || i > r)
            throw new TypeError(
              ''
                .concat(t, ' is outside the accepted range of ')
                .concat(n, ' to ')
                .concat(r, ', inclusive'),
            );
          return V(i) && 0 !== i ? i : 0;
        }
        function ie(e, t) {
          if (!Jr(e))
            throw new TypeError(''.concat(t, ' is not a ReadableStream.'));
        }
        function oe(e) {
          return new de(e);
        }
        function ae(e, t) {
          e._reader._readRequests.push(t);
        }
        function se(e, t, n) {
          var r = e._reader._readRequests.shift();
          n ? r._closeSteps() : r._chunkSteps(t);
        }
        function le(e) {
          return e._reader._readRequests.length;
        }
        function ce(e) {
          var t = e._reader;
          return void 0 !== t && !!pe(t);
        }
        var he,
          ue,
          de = (function () {
            function e(e) {
              if (
                (Q(e, 1, 'ReadableStreamDefaultReader'),
                ie(e, 'First parameter'),
                ei(e))
              )
                throw new TypeError(
                  'This stream has already been locked for exclusive reading by another reader',
                );
              L(this, e), (this._readRequests = new k());
            }
            return (
              Object.defineProperty(e.prototype, 'closed', {
                get: function () {
                  return pe(this) ? this._closedPromise : b(ve('closed'));
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.cancel = function (e) {
                return (
                  void 0 === e && (e = void 0),
                  pe(this)
                    ? void 0 === this._ownerReadableStream
                      ? b(j('cancel'))
                      : F(this, e)
                    : b(ve('cancel'))
                );
              }),
              (e.prototype.read = function () {
                if (!pe(this)) return b(ve('read'));
                if (void 0 === this._ownerReadableStream)
                  return b(j('read from'));
                var e,
                  t,
                  n = m(function (n, r) {
                    (e = n), (t = r);
                  });
                return (
                  fe(this, {
                    _chunkSteps: function (t) {
                      return e({ value: t, done: !1 });
                    },
                    _closeSteps: function () {
                      return e({ value: void 0, done: !0 });
                    },
                    _errorSteps: function (e) {
                      return t(e);
                    },
                  }),
                  n
                );
              }),
              (e.prototype.releaseLock = function () {
                if (!pe(this)) throw ve('releaseLock');
                void 0 !== this._ownerReadableStream && ge(this);
              }),
              e
            );
          })();
        function pe(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(e, '_readRequests') &&
            e instanceof de
          );
        }
        function fe(e, t) {
          var n = e._ownerReadableStream;
          (n._disturbed = !0),
            'closed' === n._state
              ? t._closeSteps()
              : 'errored' === n._state
                ? t._errorSteps(n._storedError)
                : n._readableStreamController[D](t);
        }
        function ge(e) {
          N(e), me(e, new TypeError('Reader was released'));
        }
        function me(e, t) {
          var n = e._readRequests;
          (e._readRequests = new k()),
            n.forEach(function (e) {
              e._errorSteps(t);
            });
        }
        function ve(e) {
          return new TypeError(
            'ReadableStreamDefaultReader.prototype.'.concat(
              e,
              ' can only be used on a ReadableStreamDefaultReader',
            ),
          );
        }
        Object.defineProperties(de.prototype, {
          cancel: { enumerable: !0 },
          read: { enumerable: !0 },
          releaseLock: { enumerable: !0 },
          closed: { enumerable: !0 },
        }),
          d(de.prototype.cancel, 'cancel'),
          d(de.prototype.read, 'read'),
          d(de.prototype.releaseLock, 'releaseLock'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(de.prototype, t.toStringTag, {
              value: 'ReadableStreamDefaultReader',
              configurable: !0,
            }),
          'symbol' == typeof t.asyncIterator &&
            (((he = {})[t.asyncIterator] = function () {
              return this;
            }),
            (ue = he),
            Object.defineProperty(ue, t.asyncIterator, { enumerable: !1 }));
        var be = (function () {
            function e(e, t) {
              (this._ongoingPromise = void 0),
                (this._isFinished = !1),
                (this._reader = e),
                (this._preventCancel = t);
            }
            return (
              (e.prototype.next = function () {
                var e = this,
                  t = function () {
                    return e._nextSteps();
                  };
                return (
                  (this._ongoingPromise = this._ongoingPromise
                    ? A(this._ongoingPromise, t, t)
                    : t()),
                  this._ongoingPromise
                );
              }),
              (e.prototype.return = function (e) {
                var t = this,
                  n = function () {
                    return t._returnSteps(e);
                  };
                return this._ongoingPromise
                  ? A(this._ongoingPromise, n, n)
                  : n();
              }),
              (e.prototype._nextSteps = function () {
                var e = this;
                if (this._isFinished)
                  return Promise.resolve({ value: void 0, done: !0 });
                var t,
                  n,
                  r = this._reader,
                  i = m(function (e, r) {
                    (t = e), (n = r);
                  });
                return (
                  fe(r, {
                    _chunkSteps: function (n) {
                      (e._ongoingPromise = void 0),
                        P(function () {
                          return t({ value: n, done: !1 });
                        });
                    },
                    _closeSteps: function () {
                      (e._ongoingPromise = void 0),
                        (e._isFinished = !0),
                        N(r),
                        t({ value: void 0, done: !0 });
                    },
                    _errorSteps: function (t) {
                      (e._ongoingPromise = void 0),
                        (e._isFinished = !0),
                        N(r),
                        n(t);
                    },
                  }),
                  i
                );
              }),
              (e.prototype._returnSteps = function (e) {
                if (this._isFinished)
                  return Promise.resolve({ value: e, done: !0 });
                this._isFinished = !0;
                var t = this._reader;
                if (!this._preventCancel) {
                  var n = F(t, e);
                  return (
                    N(t),
                    A(n, function () {
                      return { value: e, done: !0 };
                    })
                  );
                }
                return N(t), v({ value: e, done: !0 });
              }),
              e
            );
          })(),
          ye = {
            next: function () {
              return we(this) ? this._asyncIteratorImpl.next() : b(Se('next'));
            },
            return: function (e) {
              return we(this)
                ? this._asyncIteratorImpl.return(e)
                : b(Se('return'));
            },
          };
        function _e(e, t) {
          var n = oe(e),
            r = new be(n, t),
            i = Object.create(ye);
          return (i._asyncIteratorImpl = r), i;
        }
        function we(e) {
          if (!h(e)) return !1;
          if (!Object.prototype.hasOwnProperty.call(e, '_asyncIteratorImpl'))
            return !1;
          try {
            return e._asyncIteratorImpl instanceof be;
          } catch (e) {
            return !1;
          }
        }
        function Se(e) {
          return new TypeError(
            'ReadableStreamAsyncIterator.'.concat(
              e,
              ' can only be used on a ReadableSteamAsyncIterator',
            ),
          );
        }
        void 0 !== ue && Object.setPrototypeOf(ye, ue);
        var Ae =
          Number.isNaN ||
          function (e) {
            return e != e;
          };
        function xe(e) {
          return e.slice();
        }
        function Pe(e, t, n, r, i) {
          new Uint8Array(e).set(new Uint8Array(n, r, i), t);
        }
        var Ee = function (e) {
            return (Ee =
              'function' == typeof e.transfer
                ? function (e) {
                    return e.transfer();
                  }
                : 'function' == typeof structuredClone
                  ? function (e) {
                      return structuredClone(e, { transfer: [e] });
                    }
                  : function (e) {
                      return e;
                    })(e);
          },
          Ce = function (e) {
            return (Ce =
              'boolean' == typeof e.detached
                ? function (e) {
                    return e.detached;
                  }
                : function (e) {
                    return 0 === e.byteLength;
                  })(e);
          };
        function Te(e, t, n) {
          if (e.slice) return e.slice(t, n);
          var r = n - t,
            i = new ArrayBuffer(r);
          return Pe(i, 0, e, t, r), i;
        }
        function ke(e, t) {
          var n = e[t];
          if (null != n) {
            if ('function' != typeof n)
              throw new TypeError(''.concat(String(t), ' is not a function'));
            return n;
          }
        }
        function Me(e) {
          var n,
            c =
              (((n = {})[t.iterator] = function () {
                return e.iterator;
              }),
              n),
            h = (function () {
              return a(this, arguments, function () {
                return r(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return [5, i(s(l(c)))];
                    case 1:
                    case 2:
                      return [4, o.apply(void 0, [e.sent()])];
                    case 3:
                      return [2, e.sent()];
                  }
                });
              });
            })();
          return { iterator: h, nextMethod: h.next, done: !1 };
        }
        function Re(e, n, r) {
          if ((void 0 === n && (n = 'sync'), void 0 === r))
            if ('async' === n) {
              if (void 0 === (r = ke(e, t.asyncIterator)))
                return Me(Re(e, 'sync', ke(e, t.iterator)));
            } else r = ke(e, t.iterator);
          if (void 0 === r) throw new TypeError('The object is not iterable');
          var i = E(r, e, []);
          if (!h(i))
            throw new TypeError('The iterator method must return an object');
          return { iterator: i, nextMethod: i.next, done: !1 };
        }
        function Oe(e) {
          var t = E(e.nextMethod, e.iterator, []);
          if (!h(t))
            throw new TypeError(
              'The iterator.next() method must return an object',
            );
          return t;
        }
        function De(e) {
          return Boolean(e.done);
        }
        function Ie(e) {
          return e.value;
        }
        function Le(e) {
          return !('number' != typeof e || Ae(e) || e < 0);
        }
        function Fe(e) {
          var t = Te(e.buffer, e.byteOffset, e.byteOffset + e.byteLength);
          return new Uint8Array(t);
        }
        function Ne(e) {
          var t = e._queue.shift();
          return (
            (e._queueTotalSize -= t.size),
            e._queueTotalSize < 0 && (e._queueTotalSize = 0),
            t.value
          );
        }
        function je(e, t, n) {
          if (!Le(n) || n === 1 / 0)
            throw new RangeError(
              'Size must be a finite, non-NaN, non-negative number.',
            );
          e._queue.push({ value: t, size: n }), (e._queueTotalSize += n);
        }
        function Be(e) {
          return e._queue.peek().value;
        }
        function We(e) {
          (e._queue = new k()), (e._queueTotalSize = 0);
        }
        function ze(e) {
          return e === DataView;
        }
        function $e(e) {
          return ze(e.constructor);
        }
        function Ue(e) {
          return ze(e) ? 1 : e.BYTES_PER_ELEMENT;
        }
        var He = (function () {
          function e() {
            throw new TypeError('Illegal constructor');
          }
          return (
            Object.defineProperty(e.prototype, 'view', {
              get: function () {
                if (!Ge(this)) throw Pt('view');
                return this._view;
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.respond = function (e) {
              if (!Ge(this)) throw Pt('respond');
              if (
                (Q(e, 1, 'respond'),
                (e = re(e, 'First parameter')),
                void 0 === this._associatedReadableByteStreamController)
              )
                throw new TypeError('This BYOB request has been invalidated');
              if (Ce(this._view.buffer))
                throw new TypeError(
                  "The BYOB request's buffer has been detached and so cannot be used as a response",
                );
              _t(this._associatedReadableByteStreamController, e);
            }),
            (e.prototype.respondWithNewView = function (e) {
              if (!Ge(this)) throw Pt('respondWithNewView');
              if ((Q(e, 1, 'respondWithNewView'), !ArrayBuffer.isView(e)))
                throw new TypeError(
                  'You can only respond with array buffer views',
                );
              if (void 0 === this._associatedReadableByteStreamController)
                throw new TypeError('This BYOB request has been invalidated');
              if (Ce(e.buffer))
                throw new TypeError(
                  "The given view's buffer has been detached and so cannot be used as a response",
                );
              wt(this._associatedReadableByteStreamController, e);
            }),
            e
          );
        })();
        Object.defineProperties(He.prototype, {
          respond: { enumerable: !0 },
          respondWithNewView: { enumerable: !0 },
          view: { enumerable: !0 },
        }),
          d(He.prototype.respond, 'respond'),
          d(He.prototype.respondWithNewView, 'respondWithNewView'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(He.prototype, t.toStringTag, {
              value: 'ReadableStreamBYOBRequest',
              configurable: !0,
            });
        var Ve = (function () {
          function e() {
            throw new TypeError('Illegal constructor');
          }
          return (
            Object.defineProperty(e.prototype, 'byobRequest', {
              get: function () {
                if (!qe(this)) throw Et('byobRequest');
                return bt(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'desiredSize', {
              get: function () {
                if (!qe(this)) throw Et('desiredSize');
                return yt(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.close = function () {
              if (!qe(this)) throw Et('close');
              if (this._closeRequested)
                throw new TypeError(
                  'The stream has already been closed; do not close it again!',
                );
              var e = this._controlledReadableByteStream._state;
              if ('readable' !== e)
                throw new TypeError(
                  'The stream (in '.concat(
                    e,
                    ' state) is not in the readable state and cannot be closed',
                  ),
                );
              ft(this);
            }),
            (e.prototype.enqueue = function (e) {
              if (!qe(this)) throw Et('enqueue');
              if ((Q(e, 1, 'enqueue'), !ArrayBuffer.isView(e)))
                throw new TypeError('chunk must be an array buffer view');
              if (0 === e.byteLength)
                throw new TypeError('chunk must have non-zero byteLength');
              if (0 === e.buffer.byteLength)
                throw new TypeError(
                  "chunk's buffer must have non-zero byteLength",
                );
              if (this._closeRequested)
                throw new TypeError('stream is closed or draining');
              var t = this._controlledReadableByteStream._state;
              if ('readable' !== t)
                throw new TypeError(
                  'The stream (in '.concat(
                    t,
                    ' state) is not in the readable state and cannot be enqueued to',
                  ),
                );
              gt(this, e);
            }),
            (e.prototype.error = function (e) {
              if ((void 0 === e && (e = void 0), !qe(this))) throw Et('error');
              mt(this, e);
            }),
            (e.prototype[O] = function (e) {
              Ye(this), We(this);
              var t = this._cancelAlgorithm(e);
              return pt(this), t;
            }),
            (e.prototype[D] = function (e) {
              var t = this._controlledReadableByteStream;
              if (this._queueTotalSize > 0) vt(this, e);
              else {
                var n = this._autoAllocateChunkSize;
                if (void 0 !== n) {
                  var r = void 0;
                  try {
                    r = new ArrayBuffer(n);
                  } catch (t) {
                    return void e._errorSteps(t);
                  }
                  var i = {
                    buffer: r,
                    bufferByteLength: n,
                    byteOffset: 0,
                    byteLength: n,
                    bytesFilled: 0,
                    minimumFill: 1,
                    elementSize: 1,
                    viewConstructor: Uint8Array,
                    readerType: 'default',
                  };
                  this._pendingPullIntos.push(i);
                }
                ae(t, e), Xe(this);
              }
            }),
            (e.prototype[I] = function () {
              if (this._pendingPullIntos.length > 0) {
                var e = this._pendingPullIntos.peek();
                (e.readerType = 'none'),
                  (this._pendingPullIntos = new k()),
                  this._pendingPullIntos.push(e);
              }
            }),
            e
          );
        })();
        function qe(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_controlledReadableByteStream',
            ) &&
            e instanceof Ve
          );
        }
        function Ge(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_associatedReadableByteStreamController',
            ) &&
            e instanceof He
          );
        }
        function Xe(e) {
          dt(e) &&
            (e._pulling
              ? (e._pullAgain = !0)
              : ((e._pulling = !0),
                _(
                  e._pullAlgorithm(),
                  function () {
                    return (
                      (e._pulling = !1),
                      e._pullAgain && ((e._pullAgain = !1), Xe(e)),
                      null
                    );
                  },
                  function (t) {
                    return mt(e, t), null;
                  },
                )));
        }
        function Ye(e) {
          it(e), (e._pendingPullIntos = new k());
        }
        function Ke(e, t) {
          var n = !1;
          'closed' === e._state && (n = !0);
          var r = Ze(t);
          'default' === t.readerType ? se(e, r, n) : Ot(e, r, n);
        }
        function Ze(e) {
          var t = e.bytesFilled,
            n = e.elementSize;
          return new e.viewConstructor(e.buffer, e.byteOffset, t / n);
        }
        function Qe(e, t, n, r) {
          e._queue.push({ buffer: t, byteOffset: n, byteLength: r }),
            (e._queueTotalSize += r);
        }
        function Je(e, t, n, r) {
          var i;
          try {
            i = Te(t, n, n + r);
          } catch (t) {
            throw (mt(e, t), t);
          }
          Qe(e, i, 0, r);
        }
        function et(e, t) {
          t.bytesFilled > 0 && Je(e, t.buffer, t.byteOffset, t.bytesFilled),
            ut(e);
        }
        function tt(e, t) {
          var n = Math.min(e._queueTotalSize, t.byteLength - t.bytesFilled),
            r = t.bytesFilled + n,
            i = n,
            o = !1,
            a = r - (r % t.elementSize);
          a >= t.minimumFill && ((i = a - t.bytesFilled), (o = !0));
          for (var s = e._queue; i > 0; ) {
            var l = s.peek(),
              c = Math.min(i, l.byteLength),
              h = t.byteOffset + t.bytesFilled;
            Pe(t.buffer, h, l.buffer, l.byteOffset, c),
              l.byteLength === c
                ? s.shift()
                : ((l.byteOffset += c), (l.byteLength -= c)),
              (e._queueTotalSize -= c),
              nt(e, c, t),
              (i -= c);
          }
          return o;
        }
        function nt(e, t, n) {
          n.bytesFilled += t;
        }
        function rt(e) {
          0 === e._queueTotalSize && e._closeRequested
            ? (pt(e), ni(e._controlledReadableByteStream))
            : Xe(e);
        }
        function it(e) {
          null !== e._byobRequest &&
            ((e._byobRequest._associatedReadableByteStreamController = void 0),
            (e._byobRequest._view = null),
            (e._byobRequest = null));
        }
        function ot(e) {
          for (; e._pendingPullIntos.length > 0; ) {
            if (0 === e._queueTotalSize) return;
            var t = e._pendingPullIntos.peek();
            tt(e, t) && (ut(e), Ke(e._controlledReadableByteStream, t));
          }
        }
        function at(e) {
          for (
            var t = e._controlledReadableByteStream._reader;
            t._readRequests.length > 0;

          ) {
            if (0 === e._queueTotalSize) return;
            vt(e, t._readRequests.shift());
          }
        }
        function st(e, t, n, r) {
          var i,
            o = e._controlledReadableByteStream,
            a = t.constructor,
            s = Ue(a),
            l = t.byteOffset,
            c = t.byteLength,
            h = n * s;
          try {
            i = Ee(t.buffer);
          } catch (p) {
            return void r._errorSteps(p);
          }
          var u = {
            buffer: i,
            bufferByteLength: i.byteLength,
            byteOffset: l,
            byteLength: c,
            bytesFilled: 0,
            minimumFill: h,
            elementSize: s,
            viewConstructor: a,
            readerType: 'byob',
          };
          if (e._pendingPullIntos.length > 0)
            return e._pendingPullIntos.push(u), void Rt(o, r);
          if ('closed' !== o._state) {
            if (e._queueTotalSize > 0) {
              if (tt(e, u)) {
                var d = Ze(u);
                return rt(e), void r._chunkSteps(d);
              }
              if (e._closeRequested) {
                var p = new TypeError(
                  'Insufficient bytes to fill elements in the given buffer',
                );
                return mt(e, p), void r._errorSteps(p);
              }
            }
            e._pendingPullIntos.push(u), Rt(o, r), Xe(e);
          } else {
            var f = new a(u.buffer, u.byteOffset, 0);
            r._closeSteps(f);
          }
        }
        function lt(e, t) {
          'none' === t.readerType && ut(e);
          var n = e._controlledReadableByteStream;
          if (It(n)) for (; Dt(n) > 0; ) Ke(n, ut(e));
        }
        function ct(e, t, n) {
          if ((nt(e, t, n), 'none' === n.readerType))
            return et(e, n), void ot(e);
          if (!(n.bytesFilled < n.minimumFill)) {
            ut(e);
            var r = n.bytesFilled % n.elementSize;
            if (r > 0) {
              var i = n.byteOffset + n.bytesFilled;
              Je(e, n.buffer, i - r, r);
            }
            (n.bytesFilled -= r), Ke(e._controlledReadableByteStream, n), ot(e);
          }
        }
        function ht(e, t) {
          var n = e._pendingPullIntos.peek();
          it(e),
            'closed' === e._controlledReadableByteStream._state
              ? lt(e, n)
              : ct(e, t, n),
            Xe(e);
        }
        function ut(e) {
          return e._pendingPullIntos.shift();
        }
        function dt(e) {
          var t = e._controlledReadableByteStream;
          return (
            'readable' === t._state &&
            !e._closeRequested &&
            !!e._started &&
            (!!(ce(t) && le(t) > 0) || !!(It(t) && Dt(t) > 0) || yt(e) > 0)
          );
        }
        function pt(e) {
          (e._pullAlgorithm = void 0), (e._cancelAlgorithm = void 0);
        }
        function ft(e) {
          var t = e._controlledReadableByteStream;
          if (!e._closeRequested && 'readable' === t._state)
            if (e._queueTotalSize > 0) e._closeRequested = !0;
            else {
              if (e._pendingPullIntos.length > 0) {
                var n = e._pendingPullIntos.peek();
                if (n.bytesFilled % n.elementSize != 0) {
                  var r = new TypeError(
                    'Insufficient bytes to fill elements in the given buffer',
                  );
                  throw (mt(e, r), r);
                }
              }
              pt(e), ni(t);
            }
        }
        function gt(e, t) {
          var n = e._controlledReadableByteStream;
          if (!e._closeRequested && 'readable' === n._state) {
            var r = t.buffer,
              i = t.byteOffset,
              o = t.byteLength;
            if (Ce(r))
              throw new TypeError(
                "chunk's buffer is detached and so cannot be enqueued",
              );
            var a = Ee(r);
            if (e._pendingPullIntos.length > 0) {
              var s = e._pendingPullIntos.peek();
              if (Ce(s.buffer))
                throw new TypeError(
                  "The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk",
                );
              it(e),
                (s.buffer = Ee(s.buffer)),
                'none' === s.readerType && et(e, s);
            }
            ce(n)
              ? (at(e),
                0 === le(n)
                  ? Qe(e, a, i, o)
                  : (e._pendingPullIntos.length > 0 && ut(e),
                    se(n, new Uint8Array(a, i, o), !1)))
              : It(n)
                ? (Qe(e, a, i, o), ot(e))
                : Qe(e, a, i, o),
              Xe(e);
          }
        }
        function mt(e, t) {
          var n = e._controlledReadableByteStream;
          'readable' === n._state && (Ye(e), We(e), pt(e), ri(n, t));
        }
        function vt(e, t) {
          var n = e._queue.shift();
          (e._queueTotalSize -= n.byteLength), rt(e);
          var r = new Uint8Array(n.buffer, n.byteOffset, n.byteLength);
          t._chunkSteps(r);
        }
        function bt(e) {
          if (null === e._byobRequest && e._pendingPullIntos.length > 0) {
            var t = e._pendingPullIntos.peek(),
              n = new Uint8Array(
                t.buffer,
                t.byteOffset + t.bytesFilled,
                t.byteLength - t.bytesFilled,
              ),
              r = Object.create(He.prototype);
            xt(r, e, n), (e._byobRequest = r);
          }
          return e._byobRequest;
        }
        function yt(e) {
          var t = e._controlledReadableByteStream._state;
          return 'errored' === t
            ? null
            : 'closed' === t
              ? 0
              : e._strategyHWM - e._queueTotalSize;
        }
        function _t(e, t) {
          var n = e._pendingPullIntos.peek();
          if ('closed' === e._controlledReadableByteStream._state) {
            if (0 !== t)
              throw new TypeError(
                'bytesWritten must be 0 when calling respond() on a closed stream',
              );
          } else {
            if (0 === t)
              throw new TypeError(
                'bytesWritten must be greater than 0 when calling respond() on a readable stream',
              );
            if (n.bytesFilled + t > n.byteLength)
              throw new RangeError('bytesWritten out of range');
          }
          (n.buffer = Ee(n.buffer)), ht(e, t);
        }
        function wt(e, t) {
          var n = e._pendingPullIntos.peek();
          if ('closed' === e._controlledReadableByteStream._state) {
            if (0 !== t.byteLength)
              throw new TypeError(
                "The view's length must be 0 when calling respondWithNewView() on a closed stream",
              );
          } else if (0 === t.byteLength)
            throw new TypeError(
              "The view's length must be greater than 0 when calling respondWithNewView() on a readable stream",
            );
          if (n.byteOffset + n.bytesFilled !== t.byteOffset)
            throw new RangeError(
              'The region specified by view does not match byobRequest',
            );
          if (n.bufferByteLength !== t.buffer.byteLength)
            throw new RangeError(
              'The buffer of view has different capacity than byobRequest',
            );
          if (n.bytesFilled + t.byteLength > n.byteLength)
            throw new RangeError(
              'The region specified by view is larger than byobRequest',
            );
          var r = t.byteLength;
          (n.buffer = Ee(t.buffer)), ht(e, r);
        }
        function St(e, t, n, r, i, o, a) {
          (t._controlledReadableByteStream = e),
            (t._pullAgain = !1),
            (t._pulling = !1),
            (t._byobRequest = null),
            (t._queue = t._queueTotalSize = void 0),
            We(t),
            (t._closeRequested = !1),
            (t._started = !1),
            (t._strategyHWM = o),
            (t._pullAlgorithm = r),
            (t._cancelAlgorithm = i),
            (t._autoAllocateChunkSize = a),
            (t._pendingPullIntos = new k()),
            (e._readableStreamController = t),
            _(
              v(n()),
              function () {
                return (t._started = !0), Xe(t), null;
              },
              function (e) {
                return mt(t, e), null;
              },
            );
        }
        function At(e, t, n) {
          var r,
            i,
            o,
            a = Object.create(Ve.prototype);
          (r =
            void 0 !== t.start
              ? function () {
                  return t.start(a);
                }
              : function () {}),
            (i =
              void 0 !== t.pull
                ? function () {
                    return t.pull(a);
                  }
                : function () {
                    return v(void 0);
                  }),
            (o =
              void 0 !== t.cancel
                ? function (e) {
                    return t.cancel(e);
                  }
                : function () {
                    return v(void 0);
                  });
          var s = t.autoAllocateChunkSize;
          if (0 === s)
            throw new TypeError('autoAllocateChunkSize must be greater than 0');
          St(e, a, r, i, o, n, s);
        }
        function xt(e, t, n) {
          (e._associatedReadableByteStreamController = t), (e._view = n);
        }
        function Pt(e) {
          return new TypeError(
            'ReadableStreamBYOBRequest.prototype.'.concat(
              e,
              ' can only be used on a ReadableStreamBYOBRequest',
            ),
          );
        }
        function Et(e) {
          return new TypeError(
            'ReadableByteStreamController.prototype.'.concat(
              e,
              ' can only be used on a ReadableByteStreamController',
            ),
          );
        }
        function Ct(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.mode;
          return {
            mode:
              void 0 === n
                ? void 0
                : Tt(n, ''.concat(t, " has member 'mode' that")),
          };
        }
        function Tt(e, t) {
          if ('byob' !== (e = ''.concat(e)))
            throw new TypeError(
              ''
                .concat(t, " '")
                .concat(
                  e,
                  "' is not a valid enumeration value for ReadableStreamReaderMode",
                ),
            );
          return e;
        }
        function kt(e, t) {
          var n;
          return (
            X(e, t),
            {
              min: re(
                null !== (n = null == e ? void 0 : e.min) && void 0 !== n
                  ? n
                  : 1,
                ''.concat(t, " has member 'min' that"),
              ),
            }
          );
        }
        function Mt(e) {
          return new Lt(e);
        }
        function Rt(e, t) {
          e._reader._readIntoRequests.push(t);
        }
        function Ot(e, t, n) {
          var r = e._reader._readIntoRequests.shift();
          n ? r._closeSteps(t) : r._chunkSteps(t);
        }
        function Dt(e) {
          return e._reader._readIntoRequests.length;
        }
        function It(e) {
          var t = e._reader;
          return void 0 !== t && !!Ft(t);
        }
        Object.defineProperties(Ve.prototype, {
          close: { enumerable: !0 },
          enqueue: { enumerable: !0 },
          error: { enumerable: !0 },
          byobRequest: { enumerable: !0 },
          desiredSize: { enumerable: !0 },
        }),
          d(Ve.prototype.close, 'close'),
          d(Ve.prototype.enqueue, 'enqueue'),
          d(Ve.prototype.error, 'error'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(Ve.prototype, t.toStringTag, {
              value: 'ReadableByteStreamController',
              configurable: !0,
            });
        var Lt = (function () {
          function e(e) {
            if (
              (Q(e, 1, 'ReadableStreamBYOBReader'),
              ie(e, 'First parameter'),
              ei(e))
            )
              throw new TypeError(
                'This stream has already been locked for exclusive reading by another reader',
              );
            if (!qe(e._readableStreamController))
              throw new TypeError(
                'Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source',
              );
            L(this, e), (this._readIntoRequests = new k());
          }
          return (
            Object.defineProperty(e.prototype, 'closed', {
              get: function () {
                return Ft(this) ? this._closedPromise : b(Wt('closed'));
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.cancel = function (e) {
              return (
                void 0 === e && (e = void 0),
                Ft(this)
                  ? void 0 === this._ownerReadableStream
                    ? b(j('cancel'))
                    : F(this, e)
                  : b(Wt('cancel'))
              );
            }),
            (e.prototype.read = function (e, t) {
              if ((void 0 === t && (t = {}), !Ft(this))) return b(Wt('read'));
              if (!ArrayBuffer.isView(e))
                return b(new TypeError('view must be an array buffer view'));
              if (0 === e.byteLength)
                return b(new TypeError('view must have non-zero byteLength'));
              if (0 === e.buffer.byteLength)
                return b(
                  new TypeError("view's buffer must have non-zero byteLength"),
                );
              if (Ce(e.buffer))
                return b(new TypeError("view's buffer has been detached"));
              var n;
              try {
                n = kt(t, 'options');
              } catch (e) {
                return b(e);
              }
              var r,
                i,
                o = n.min;
              if (0 === o)
                return b(new TypeError('options.min must be greater than 0'));
              if ($e(e)) {
                if (o > e.byteLength)
                  return b(
                    new RangeError(
                      "options.min must be less than or equal to view's byteLength",
                    ),
                  );
              } else if (o > e.length)
                return b(
                  new RangeError(
                    "options.min must be less than or equal to view's length",
                  ),
                );
              if (void 0 === this._ownerReadableStream)
                return b(j('read from'));
              var a = m(function (e, t) {
                (r = e), (i = t);
              });
              return (
                Nt(this, e, o, {
                  _chunkSteps: function (e) {
                    return r({ value: e, done: !1 });
                  },
                  _closeSteps: function (e) {
                    return r({ value: e, done: !0 });
                  },
                  _errorSteps: function (e) {
                    return i(e);
                  },
                }),
                a
              );
            }),
            (e.prototype.releaseLock = function () {
              if (!Ft(this)) throw Wt('releaseLock');
              void 0 !== this._ownerReadableStream && jt(this);
            }),
            e
          );
        })();
        function Ft(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(e, '_readIntoRequests') &&
            e instanceof Lt
          );
        }
        function Nt(e, t, n, r) {
          var i = e._ownerReadableStream;
          (i._disturbed = !0),
            'errored' === i._state
              ? r._errorSteps(i._storedError)
              : st(i._readableStreamController, t, n, r);
        }
        function jt(e) {
          N(e), Bt(e, new TypeError('Reader was released'));
        }
        function Bt(e, t) {
          var n = e._readIntoRequests;
          (e._readIntoRequests = new k()),
            n.forEach(function (e) {
              e._errorSteps(t);
            });
        }
        function Wt(e) {
          return new TypeError(
            'ReadableStreamBYOBReader.prototype.'.concat(
              e,
              ' can only be used on a ReadableStreamBYOBReader',
            ),
          );
        }
        function zt(e, t) {
          var n = e.highWaterMark;
          if (void 0 === n) return t;
          if (Ae(n) || n < 0) throw new RangeError('Invalid highWaterMark');
          return n;
        }
        function $t(e) {
          var t = e.size;
          return (
            t ||
            function () {
              return 1;
            }
          );
        }
        function Ut(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.highWaterMark,
            r = null == e ? void 0 : e.size;
          return {
            highWaterMark: void 0 === n ? void 0 : ee(n),
            size:
              void 0 === r
                ? void 0
                : Ht(r, ''.concat(t, " has member 'size' that")),
          };
        }
        function Ht(e, t) {
          return (
            Y(e, t),
            function (t) {
              return ee(e(t));
            }
          );
        }
        function Vt(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.abort,
            r = null == e ? void 0 : e.close,
            i = null == e ? void 0 : e.start,
            o = null == e ? void 0 : e.type,
            a = null == e ? void 0 : e.write;
          return {
            abort:
              void 0 === n
                ? void 0
                : qt(n, e, ''.concat(t, " has member 'abort' that")),
            close:
              void 0 === r
                ? void 0
                : Gt(r, e, ''.concat(t, " has member 'close' that")),
            start:
              void 0 === i
                ? void 0
                : Xt(i, e, ''.concat(t, " has member 'start' that")),
            write:
              void 0 === a
                ? void 0
                : Yt(a, e, ''.concat(t, " has member 'write' that")),
            type: o,
          };
        }
        function qt(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return C(e, t, [n]);
            }
          );
        }
        function Gt(e, t, n) {
          return (
            Y(e, n),
            function () {
              return C(e, t, []);
            }
          );
        }
        function Xt(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return E(e, t, [n]);
            }
          );
        }
        function Yt(e, t, n) {
          return (
            Y(e, n),
            function (n, r) {
              return C(e, t, [n, r]);
            }
          );
        }
        function Kt(e, t) {
          if (!on(e))
            throw new TypeError(''.concat(t, ' is not a WritableStream.'));
        }
        function Zt(e) {
          if ('object' != typeof e || null === e) return !1;
          try {
            return 'boolean' == typeof e.aborted;
          } catch (e) {
            return !1;
          }
        }
        Object.defineProperties(Lt.prototype, {
          cancel: { enumerable: !0 },
          read: { enumerable: !0 },
          releaseLock: { enumerable: !0 },
          closed: { enumerable: !0 },
        }),
          d(Lt.prototype.cancel, 'cancel'),
          d(Lt.prototype.read, 'read'),
          d(Lt.prototype.releaseLock, 'releaseLock'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(Lt.prototype, t.toStringTag, {
              value: 'ReadableStreamBYOBReader',
              configurable: !0,
            });
        var Qt = 'function' == typeof AbortController;
        function Jt() {
          if (Qt) return new AbortController();
        }
        var en = (function () {
          function e(e, t) {
            void 0 === e && (e = {}),
              void 0 === t && (t = {}),
              void 0 === e ? (e = null) : Z(e, 'First parameter');
            var n = Ut(t, 'Second parameter'),
              r = Vt(e, 'First parameter');
            if ((rn(this), void 0 !== r.type))
              throw new RangeError('Invalid type is specified');
            var i = $t(n);
            Nn(this, r, zt(n, 1), i);
          }
          return (
            Object.defineProperty(e.prototype, 'locked', {
              get: function () {
                if (!on(this)) throw Yn('locked');
                return an(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.abort = function (e) {
              return (
                void 0 === e && (e = void 0),
                on(this)
                  ? an(this)
                    ? b(
                        new TypeError(
                          'Cannot abort a stream that already has a writer',
                        ),
                      )
                    : sn(this, e)
                  : b(Yn('abort'))
              );
            }),
            (e.prototype.close = function () {
              return on(this)
                ? an(this)
                  ? b(
                      new TypeError(
                        'Cannot close a stream that already has a writer',
                      ),
                    )
                  : vn(this)
                    ? b(new TypeError('Cannot close an already-closing stream'))
                    : ln(this)
                : b(Yn('close'));
            }),
            (e.prototype.getWriter = function () {
              if (!on(this)) throw Yn('getWriter');
              return tn(this);
            }),
            e
          );
        })();
        function tn(e) {
          return new An(e);
        }
        function nn(e, t, n, r, i, o) {
          void 0 === i && (i = 1),
            void 0 === o &&
              (o = function () {
                return 1;
              });
          var a = Object.create(en.prototype);
          return rn(a), Fn(a, Object.create(In.prototype), e, t, n, r, i, o), a;
        }
        function rn(e) {
          (e._state = 'writable'),
            (e._storedError = void 0),
            (e._writer = void 0),
            (e._writableStreamController = void 0),
            (e._writeRequests = new k()),
            (e._inFlightWriteRequest = void 0),
            (e._closeRequest = void 0),
            (e._inFlightCloseRequest = void 0),
            (e._pendingAbortRequest = void 0),
            (e._backpressure = !1);
        }
        function on(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_writableStreamController',
            ) &&
            e instanceof en
          );
        }
        function an(e) {
          return void 0 !== e._writer;
        }
        function sn(e, t) {
          var n;
          if ('closed' === e._state || 'errored' === e._state) return v(void 0);
          (e._writableStreamController._abortReason = t),
            null === (n = e._writableStreamController._abortController) ||
              void 0 === n ||
              n.abort(t);
          var r = e._state;
          if ('closed' === r || 'errored' === r) return v(void 0);
          if (void 0 !== e._pendingAbortRequest)
            return e._pendingAbortRequest._promise;
          var i = !1;
          'erroring' === r && ((i = !0), (t = void 0));
          var o = m(function (n, r) {
            e._pendingAbortRequest = {
              _promise: void 0,
              _resolve: n,
              _reject: r,
              _reason: t,
              _wasAlreadyErroring: i,
            };
          });
          return (e._pendingAbortRequest._promise = o), i || un(e, t), o;
        }
        function ln(e) {
          var t = e._state;
          if ('closed' === t || 'errored' === t)
            return b(
              new TypeError(
                'The stream (in '.concat(
                  t,
                  ' state) is not in the writable state and cannot be closed',
                ),
              ),
            );
          var n = m(function (t, n) {
              var r = { _resolve: t, _reject: n };
              e._closeRequest = r;
            }),
            r = e._writer;
          return (
            void 0 !== r && e._backpressure && 'writable' === t && ur(r),
            Bn(e._writableStreamController),
            n
          );
        }
        function cn(e) {
          return m(function (t, n) {
            var r = { _resolve: t, _reject: n };
            e._writeRequests.push(r);
          });
        }
        function hn(e, t) {
          'writable' !== e._state ? dn(e) : un(e, t);
        }
        function un(e, t) {
          var n = e._writableStreamController;
          (e._state = 'erroring'), (e._storedError = t);
          var r = e._writer;
          void 0 !== r && kn(r, t), !bn(e) && n._started && dn(e);
        }
        function dn(e) {
          (e._state = 'errored'), e._writableStreamController[R]();
          var t = e._storedError;
          if (
            (e._writeRequests.forEach(function (e) {
              e._reject(t);
            }),
            (e._writeRequests = new k()),
            void 0 !== e._pendingAbortRequest)
          ) {
            var n = e._pendingAbortRequest;
            if (((e._pendingAbortRequest = void 0), n._wasAlreadyErroring))
              return n._reject(t), void wn(e);
            _(
              e._writableStreamController[M](n._reason),
              function () {
                return n._resolve(), wn(e), null;
              },
              function (t) {
                return n._reject(t), wn(e), null;
              },
            );
          } else wn(e);
        }
        function pn(e) {
          e._inFlightWriteRequest._resolve(void 0),
            (e._inFlightWriteRequest = void 0);
        }
        function fn(e, t) {
          e._inFlightWriteRequest._reject(t),
            (e._inFlightWriteRequest = void 0),
            hn(e, t);
        }
        function gn(e) {
          e._inFlightCloseRequest._resolve(void 0),
            (e._inFlightCloseRequest = void 0),
            'erroring' === e._state &&
              ((e._storedError = void 0),
              void 0 !== e._pendingAbortRequest &&
                (e._pendingAbortRequest._resolve(),
                (e._pendingAbortRequest = void 0))),
            (e._state = 'closed');
          var t = e._writer;
          void 0 !== t && ir(t);
        }
        function mn(e, t) {
          e._inFlightCloseRequest._reject(t),
            (e._inFlightCloseRequest = void 0),
            void 0 !== e._pendingAbortRequest &&
              (e._pendingAbortRequest._reject(t),
              (e._pendingAbortRequest = void 0)),
            hn(e, t);
        }
        function vn(e) {
          return (
            void 0 !== e._closeRequest || void 0 !== e._inFlightCloseRequest
          );
        }
        function bn(e) {
          return (
            void 0 !== e._inFlightWriteRequest ||
            void 0 !== e._inFlightCloseRequest
          );
        }
        function yn(e) {
          (e._inFlightCloseRequest = e._closeRequest),
            (e._closeRequest = void 0);
        }
        function _n(e) {
          e._inFlightWriteRequest = e._writeRequests.shift();
        }
        function wn(e) {
          void 0 !== e._closeRequest &&
            (e._closeRequest._reject(e._storedError),
            (e._closeRequest = void 0));
          var t = e._writer;
          void 0 !== t && nr(t, e._storedError);
        }
        function Sn(e, t) {
          var n = e._writer;
          void 0 !== n && t !== e._backpressure && (t ? cr(n) : ur(n)),
            (e._backpressure = t);
        }
        Object.defineProperties(en.prototype, {
          abort: { enumerable: !0 },
          close: { enumerable: !0 },
          getWriter: { enumerable: !0 },
          locked: { enumerable: !0 },
        }),
          d(en.prototype.abort, 'abort'),
          d(en.prototype.close, 'close'),
          d(en.prototype.getWriter, 'getWriter'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(en.prototype, t.toStringTag, {
              value: 'WritableStream',
              configurable: !0,
            });
        var An = (function () {
          function e(e) {
            if (
              (Q(e, 1, 'WritableStreamDefaultWriter'),
              Kt(e, 'First parameter'),
              an(e))
            )
              throw new TypeError(
                'This stream has already been locked for exclusive writing by another writer',
              );
            (this._ownerWritableStream = e), (e._writer = this);
            var t = e._state;
            if ('writable' === t)
              !vn(e) && e._backpressure ? or(this) : sr(this), Jn(this);
            else if ('erroring' === t) ar(this, e._storedError), Jn(this);
            else if ('closed' === t) sr(this), tr(this);
            else {
              var n = e._storedError;
              ar(this, n), er(this, n);
            }
          }
          return (
            Object.defineProperty(e.prototype, 'closed', {
              get: function () {
                return xn(this) ? this._closedPromise : b(Zn('closed'));
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'desiredSize', {
              get: function () {
                if (!xn(this)) throw Zn('desiredSize');
                if (void 0 === this._ownerWritableStream)
                  throw Qn('desiredSize');
                return Mn(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'ready', {
              get: function () {
                return xn(this) ? this._readyPromise : b(Zn('ready'));
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.abort = function (e) {
              return (
                void 0 === e && (e = void 0),
                xn(this)
                  ? void 0 === this._ownerWritableStream
                    ? b(Qn('abort'))
                    : Pn(this, e)
                  : b(Zn('abort'))
              );
            }),
            (e.prototype.close = function () {
              if (!xn(this)) return b(Zn('close'));
              var e = this._ownerWritableStream;
              return void 0 === e
                ? b(Qn('close'))
                : vn(e)
                  ? b(new TypeError('Cannot close an already-closing stream'))
                  : En(this);
            }),
            (e.prototype.releaseLock = function () {
              if (!xn(this)) throw Zn('releaseLock');
              void 0 !== this._ownerWritableStream && Rn(this);
            }),
            (e.prototype.write = function (e) {
              return (
                void 0 === e && (e = void 0),
                xn(this)
                  ? void 0 === this._ownerWritableStream
                    ? b(Qn('write to'))
                    : On(this, e)
                  : b(Zn('write'))
              );
            }),
            e
          );
        })();
        function xn(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(e, '_ownerWritableStream') &&
            e instanceof An
          );
        }
        function Pn(e, t) {
          return sn(e._ownerWritableStream, t);
        }
        function En(e) {
          return ln(e._ownerWritableStream);
        }
        function Cn(e) {
          var t = e._ownerWritableStream,
            n = t._state;
          return vn(t) || 'closed' === n
            ? v(void 0)
            : 'errored' === n
              ? b(t._storedError)
              : En(e);
        }
        function Tn(e, t) {
          'pending' === e._closedPromiseState ? nr(e, t) : rr(e, t);
        }
        function kn(e, t) {
          'pending' === e._readyPromiseState ? lr(e, t) : hr(e, t);
        }
        function Mn(e) {
          var t = e._ownerWritableStream,
            n = t._state;
          return 'errored' === n || 'erroring' === n
            ? null
            : 'closed' === n
              ? 0
              : zn(t._writableStreamController);
        }
        function Rn(e) {
          var t = e._ownerWritableStream,
            n = new TypeError(
              "Writer was released and can no longer be used to monitor the stream's closedness",
            );
          kn(e, n),
            Tn(e, n),
            (t._writer = void 0),
            (e._ownerWritableStream = void 0);
        }
        function On(e, t) {
          var n = e._ownerWritableStream,
            r = n._writableStreamController,
            i = Wn(r, t);
          if (n !== e._ownerWritableStream) return b(Qn('write to'));
          var o = n._state;
          if ('errored' === o) return b(n._storedError);
          if (vn(n) || 'closed' === o)
            return b(
              new TypeError(
                'The stream is closing or closed and cannot be written to',
              ),
            );
          if ('erroring' === o) return b(n._storedError);
          var a = cn(n);
          return $n(r, t, i), a;
        }
        Object.defineProperties(An.prototype, {
          abort: { enumerable: !0 },
          close: { enumerable: !0 },
          releaseLock: { enumerable: !0 },
          write: { enumerable: !0 },
          closed: { enumerable: !0 },
          desiredSize: { enumerable: !0 },
          ready: { enumerable: !0 },
        }),
          d(An.prototype.abort, 'abort'),
          d(An.prototype.close, 'close'),
          d(An.prototype.releaseLock, 'releaseLock'),
          d(An.prototype.write, 'write'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(An.prototype, t.toStringTag, {
              value: 'WritableStreamDefaultWriter',
              configurable: !0,
            });
        var Dn = {},
          In = (function () {
            function e() {
              throw new TypeError('Illegal constructor');
            }
            return (
              Object.defineProperty(e.prototype, 'abortReason', {
                get: function () {
                  if (!Ln(this)) throw Kn('abortReason');
                  return this._abortReason;
                },
                enumerable: !1,
                configurable: !0,
              }),
              Object.defineProperty(e.prototype, 'signal', {
                get: function () {
                  if (!Ln(this)) throw Kn('signal');
                  if (void 0 === this._abortController)
                    throw new TypeError(
                      'WritableStreamDefaultController.prototype.signal is not supported',
                    );
                  return this._abortController.signal;
                },
                enumerable: !1,
                configurable: !0,
              }),
              (e.prototype.error = function (e) {
                if ((void 0 === e && (e = void 0), !Ln(this)))
                  throw Kn('error');
                'writable' === this._controlledWritableStream._state &&
                  Xn(this, e);
              }),
              (e.prototype[M] = function (e) {
                var t = this._abortAlgorithm(e);
                return jn(this), t;
              }),
              (e.prototype[R] = function () {
                We(this);
              }),
              e
            );
          })();
        function Ln(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_controlledWritableStream',
            ) &&
            e instanceof In
          );
        }
        function Fn(e, t, n, r, i, o, a, s) {
          (t._controlledWritableStream = e),
            (e._writableStreamController = t),
            (t._queue = void 0),
            (t._queueTotalSize = void 0),
            We(t),
            (t._abortReason = void 0),
            (t._abortController = Jt()),
            (t._started = !1),
            (t._strategySizeAlgorithm = s),
            (t._strategyHWM = a),
            (t._writeAlgorithm = r),
            (t._closeAlgorithm = i),
            (t._abortAlgorithm = o);
          var l = Gn(t);
          Sn(e, l),
            _(
              v(n()),
              function () {
                return (t._started = !0), Un(t), null;
              },
              function (n) {
                return (t._started = !0), hn(e, n), null;
              },
            );
        }
        function Nn(e, t, n, r) {
          var i,
            o,
            a,
            s,
            l = Object.create(In.prototype);
          (i =
            void 0 !== t.start
              ? function () {
                  return t.start(l);
                }
              : function () {}),
            (o =
              void 0 !== t.write
                ? function (e) {
                    return t.write(e, l);
                  }
                : function () {
                    return v(void 0);
                  }),
            (a =
              void 0 !== t.close
                ? function () {
                    return t.close();
                  }
                : function () {
                    return v(void 0);
                  }),
            (s =
              void 0 !== t.abort
                ? function (e) {
                    return t.abort(e);
                  }
                : function () {
                    return v(void 0);
                  }),
            Fn(e, l, i, o, a, s, n, r);
        }
        function jn(e) {
          (e._writeAlgorithm = void 0),
            (e._closeAlgorithm = void 0),
            (e._abortAlgorithm = void 0),
            (e._strategySizeAlgorithm = void 0);
        }
        function Bn(e) {
          je(e, Dn, 0), Un(e);
        }
        function Wn(e, t) {
          try {
            return e._strategySizeAlgorithm(t);
          } catch (t) {
            return Hn(e, t), 1;
          }
        }
        function zn(e) {
          return e._strategyHWM - e._queueTotalSize;
        }
        function $n(e, t, n) {
          try {
            je(e, t, n);
          } catch (t) {
            return void Hn(e, t);
          }
          var r = e._controlledWritableStream;
          vn(r) || 'writable' !== r._state || Sn(r, Gn(e)), Un(e);
        }
        function Un(e) {
          var t = e._controlledWritableStream;
          if (e._started && void 0 === t._inFlightWriteRequest)
            if ('erroring' !== t._state) {
              if (0 !== e._queue.length) {
                var n = Be(e);
                n === Dn ? Vn(e) : qn(e, n);
              }
            } else dn(t);
        }
        function Hn(e, t) {
          'writable' === e._controlledWritableStream._state && Xn(e, t);
        }
        function Vn(e) {
          var t = e._controlledWritableStream;
          yn(t), Ne(e);
          var n = e._closeAlgorithm();
          jn(e),
            _(
              n,
              function () {
                return gn(t), null;
              },
              function (e) {
                return mn(t, e), null;
              },
            );
        }
        function qn(e, t) {
          var n = e._controlledWritableStream;
          _n(n),
            _(
              e._writeAlgorithm(t),
              function () {
                pn(n);
                var t = n._state;
                if ((Ne(e), !vn(n) && 'writable' === t)) {
                  var r = Gn(e);
                  Sn(n, r);
                }
                return Un(e), null;
              },
              function (t) {
                return 'writable' === n._state && jn(e), fn(n, t), null;
              },
            );
        }
        function Gn(e) {
          return zn(e) <= 0;
        }
        function Xn(e, t) {
          var n = e._controlledWritableStream;
          jn(e), un(n, t);
        }
        function Yn(e) {
          return new TypeError(
            'WritableStream.prototype.'.concat(
              e,
              ' can only be used on a WritableStream',
            ),
          );
        }
        function Kn(e) {
          return new TypeError(
            'WritableStreamDefaultController.prototype.'.concat(
              e,
              ' can only be used on a WritableStreamDefaultController',
            ),
          );
        }
        function Zn(e) {
          return new TypeError(
            'WritableStreamDefaultWriter.prototype.'.concat(
              e,
              ' can only be used on a WritableStreamDefaultWriter',
            ),
          );
        }
        function Qn(e) {
          return new TypeError(
            'Cannot ' + e + ' a stream using a released writer',
          );
        }
        function Jn(e) {
          e._closedPromise = m(function (t, n) {
            (e._closedPromise_resolve = t),
              (e._closedPromise_reject = n),
              (e._closedPromiseState = 'pending');
          });
        }
        function er(e, t) {
          Jn(e), nr(e, t);
        }
        function tr(e) {
          Jn(e), ir(e);
        }
        function nr(e, t) {
          void 0 !== e._closedPromise_reject &&
            (x(e._closedPromise),
            e._closedPromise_reject(t),
            (e._closedPromise_resolve = void 0),
            (e._closedPromise_reject = void 0),
            (e._closedPromiseState = 'rejected'));
        }
        function rr(e, t) {
          er(e, t);
        }
        function ir(e) {
          void 0 !== e._closedPromise_resolve &&
            (e._closedPromise_resolve(void 0),
            (e._closedPromise_resolve = void 0),
            (e._closedPromise_reject = void 0),
            (e._closedPromiseState = 'resolved'));
        }
        function or(e) {
          (e._readyPromise = m(function (t, n) {
            (e._readyPromise_resolve = t), (e._readyPromise_reject = n);
          })),
            (e._readyPromiseState = 'pending');
        }
        function ar(e, t) {
          or(e), lr(e, t);
        }
        function sr(e) {
          or(e), ur(e);
        }
        function lr(e, t) {
          void 0 !== e._readyPromise_reject &&
            (x(e._readyPromise),
            e._readyPromise_reject(t),
            (e._readyPromise_resolve = void 0),
            (e._readyPromise_reject = void 0),
            (e._readyPromiseState = 'rejected'));
        }
        function cr(e) {
          or(e);
        }
        function hr(e, t) {
          ar(e, t);
        }
        function ur(e) {
          void 0 !== e._readyPromise_resolve &&
            (e._readyPromise_resolve(void 0),
            (e._readyPromise_resolve = void 0),
            (e._readyPromise_reject = void 0),
            (e._readyPromiseState = 'fulfilled'));
        }
        function dr() {
          return 'undefined' != typeof globalThis
            ? globalThis
            : 'undefined' != typeof self
              ? self
              : void 0 !== n.g
                ? n.g
                : void 0;
        }
        Object.defineProperties(In.prototype, {
          abortReason: { enumerable: !0 },
          signal: { enumerable: !0 },
          error: { enumerable: !0 },
        }),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(In.prototype, t.toStringTag, {
              value: 'WritableStreamDefaultController',
              configurable: !0,
            });
        var pr = dr();
        function fr(e) {
          if ('function' != typeof e && 'object' != typeof e) return !1;
          if ('DOMException' !== e.name) return !1;
          try {
            return new e(), !0;
          } catch (e) {
            return !1;
          }
        }
        function gr() {
          var e = null == pr ? void 0 : pr.DOMException;
          return fr(e) ? e : void 0;
        }
        function mr() {
          var e = function (e, t) {
            (this.message = e || ''),
              (this.name = t || 'Error'),
              Error.captureStackTrace &&
                Error.captureStackTrace(this, this.constructor);
          };
          return (
            d(e, 'DOMException'),
            (e.prototype = Object.create(Error.prototype)),
            Object.defineProperty(e.prototype, 'constructor', {
              value: e,
              writable: !0,
              configurable: !0,
            }),
            e
          );
        }
        var vr = gr() || mr();
        function br(e, t, n, r, i, o) {
          var a = oe(e),
            s = tn(t);
          e._disturbed = !0;
          var l = !1,
            h = v(void 0);
          return m(function (u, d) {
            var p;
            if (void 0 !== o) {
              if (
                ((p = function () {
                  var n =
                      void 0 !== o.reason
                        ? o.reason
                        : new vr('Aborted', 'AbortError'),
                    a = [];
                  r ||
                    a.push(function () {
                      return 'writable' === t._state ? sn(t, n) : v(void 0);
                    }),
                    i ||
                      a.push(function () {
                        return 'readable' === e._state ? ti(e, n) : v(void 0);
                      }),
                    C(
                      function () {
                        return Promise.all(
                          a.map(function (e) {
                            return e();
                          }),
                        );
                      },
                      !0,
                      n,
                    );
                }),
                o.aborted)
              )
                return void p();
              o.addEventListener('abort', p);
            }
            function f() {
              return m(function (e, t) {
                function n(r) {
                  r ? e() : y(g(), n, t);
                }
                n(!1);
              });
            }
            function g() {
              return l
                ? v(!0)
                : y(s._readyPromise, function () {
                    return m(function (e, t) {
                      fe(a, {
                        _chunkSteps: function (t) {
                          (h = y(On(s, t), void 0, c)), e(!1);
                        },
                        _closeSteps: function () {
                          return e(!0);
                        },
                        _errorSteps: t,
                      });
                    });
                  });
            }
            if (
              (P(e, a._closedPromise, function (e) {
                return (
                  r
                    ? T(!0, e)
                    : C(
                        function () {
                          return sn(t, e);
                        },
                        !0,
                        e,
                      ),
                  null
                );
              }),
              P(t, s._closedPromise, function (t) {
                return (
                  i
                    ? T(!0, t)
                    : C(
                        function () {
                          return ti(e, t);
                        },
                        !0,
                        t,
                      ),
                  null
                );
              }),
              E(e, a._closedPromise, function () {
                return (
                  n
                    ? T()
                    : C(function () {
                        return Cn(s);
                      }),
                  null
                );
              }),
              vn(t) || 'closed' === t._state)
            ) {
              var b = new TypeError(
                'the destination writable stream closed before all data could be piped to it',
              );
              i
                ? T(!0, b)
                : C(
                    function () {
                      return ti(e, b);
                    },
                    !0,
                    b,
                  );
            }
            function A() {
              var e = h;
              return y(h, function () {
                return e !== h ? A() : void 0;
              });
            }
            function P(e, t, n) {
              'errored' === e._state ? n(e._storedError) : S(t, n);
            }
            function E(e, t, n) {
              'closed' === e._state ? n() : w(t, n);
            }
            function C(e, n, r) {
              function i() {
                return (
                  _(
                    e(),
                    function () {
                      return k(n, r);
                    },
                    function (e) {
                      return k(!0, e);
                    },
                  ),
                  null
                );
              }
              l ||
                ((l = !0), 'writable' !== t._state || vn(t) ? i() : w(A(), i));
            }
            function T(e, n) {
              l ||
                ((l = !0),
                'writable' !== t._state || vn(t)
                  ? k(e, n)
                  : w(A(), function () {
                      return k(e, n);
                    }));
            }
            function k(e, t) {
              return (
                Rn(s),
                N(a),
                void 0 !== o && o.removeEventListener('abort', p),
                e ? d(t) : u(void 0),
                null
              );
            }
            x(f());
          });
        }
        var yr = (function () {
          function e() {
            throw new TypeError('Illegal constructor');
          }
          return (
            Object.defineProperty(e.prototype, 'desiredSize', {
              get: function () {
                if (!_r(this)) throw Or('desiredSize');
                return Cr(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.close = function () {
              if (!_r(this)) throw Or('close');
              if (!kr(this))
                throw new TypeError(
                  'The stream is not in a state that permits close',
                );
              xr(this);
            }),
            (e.prototype.enqueue = function (e) {
              if ((void 0 === e && (e = void 0), !_r(this)))
                throw Or('enqueue');
              if (!kr(this))
                throw new TypeError(
                  'The stream is not in a state that permits enqueue',
                );
              return Pr(this, e);
            }),
            (e.prototype.error = function (e) {
              if ((void 0 === e && (e = void 0), !_r(this))) throw Or('error');
              Er(this, e);
            }),
            (e.prototype[O] = function (e) {
              We(this);
              var t = this._cancelAlgorithm(e);
              return Ar(this), t;
            }),
            (e.prototype[D] = function (e) {
              var t = this._controlledReadableStream;
              if (this._queue.length > 0) {
                var n = Ne(this);
                this._closeRequested && 0 === this._queue.length
                  ? (Ar(this), ni(t))
                  : wr(this),
                  e._chunkSteps(n);
              } else ae(t, e), wr(this);
            }),
            (e.prototype[I] = function () {}),
            e
          );
        })();
        function _r(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_controlledReadableStream',
            ) &&
            e instanceof yr
          );
        }
        function wr(e) {
          Sr(e) &&
            (e._pulling
              ? (e._pullAgain = !0)
              : ((e._pulling = !0),
                _(
                  e._pullAlgorithm(),
                  function () {
                    return (
                      (e._pulling = !1),
                      e._pullAgain && ((e._pullAgain = !1), wr(e)),
                      null
                    );
                  },
                  function (t) {
                    return Er(e, t), null;
                  },
                )));
        }
        function Sr(e) {
          var t = e._controlledReadableStream;
          return (
            !!kr(e) && !!e._started && (!!(ei(t) && le(t) > 0) || Cr(e) > 0)
          );
        }
        function Ar(e) {
          (e._pullAlgorithm = void 0),
            (e._cancelAlgorithm = void 0),
            (e._strategySizeAlgorithm = void 0);
        }
        function xr(e) {
          if (kr(e)) {
            var t = e._controlledReadableStream;
            (e._closeRequested = !0), 0 === e._queue.length && (Ar(e), ni(t));
          }
        }
        function Pr(e, t) {
          if (kr(e)) {
            var n = e._controlledReadableStream;
            if (ei(n) && le(n) > 0) se(n, t, !1);
            else {
              var r = void 0;
              try {
                r = e._strategySizeAlgorithm(t);
              } catch (t) {
                throw (Er(e, t), t);
              }
              try {
                je(e, t, r);
              } catch (t) {
                throw (Er(e, t), t);
              }
            }
            wr(e);
          }
        }
        function Er(e, t) {
          var n = e._controlledReadableStream;
          'readable' === n._state && (We(e), Ar(e), ri(n, t));
        }
        function Cr(e) {
          var t = e._controlledReadableStream._state;
          return 'errored' === t
            ? null
            : 'closed' === t
              ? 0
              : e._strategyHWM - e._queueTotalSize;
        }
        function Tr(e) {
          return !Sr(e);
        }
        function kr(e) {
          var t = e._controlledReadableStream._state;
          return !e._closeRequested && 'readable' === t;
        }
        function Mr(e, t, n, r, i, o, a) {
          (t._controlledReadableStream = e),
            (t._queue = void 0),
            (t._queueTotalSize = void 0),
            We(t),
            (t._started = !1),
            (t._closeRequested = !1),
            (t._pullAgain = !1),
            (t._pulling = !1),
            (t._strategySizeAlgorithm = a),
            (t._strategyHWM = o),
            (t._pullAlgorithm = r),
            (t._cancelAlgorithm = i),
            (e._readableStreamController = t),
            _(
              v(n()),
              function () {
                return (t._started = !0), wr(t), null;
              },
              function (e) {
                return Er(t, e), null;
              },
            );
        }
        function Rr(e, t, n, r) {
          var i,
            o,
            a,
            s = Object.create(yr.prototype);
          (i =
            void 0 !== t.start
              ? function () {
                  return t.start(s);
                }
              : function () {}),
            (o =
              void 0 !== t.pull
                ? function () {
                    return t.pull(s);
                  }
                : function () {
                    return v(void 0);
                  }),
            (a =
              void 0 !== t.cancel
                ? function (e) {
                    return t.cancel(e);
                  }
                : function () {
                    return v(void 0);
                  }),
            Mr(e, s, i, o, a, n, r);
        }
        function Or(e) {
          return new TypeError(
            'ReadableStreamDefaultController.prototype.'.concat(
              e,
              ' can only be used on a ReadableStreamDefaultController',
            ),
          );
        }
        function Dr(e, t) {
          return qe(e._readableStreamController) ? Lr(e) : Ir(e);
        }
        function Ir(e, t) {
          var n,
            r,
            i,
            o,
            a,
            s = oe(e),
            l = !1,
            c = !1,
            h = !1,
            u = !1,
            d = m(function (e) {
              a = e;
            });
          function p() {
            return l
              ? ((c = !0), v(void 0))
              : ((l = !0),
                fe(s, {
                  _chunkSteps: function (e) {
                    P(function () {
                      c = !1;
                      var t = e,
                        n = e;
                      h || Pr(i._readableStreamController, t),
                        u || Pr(o._readableStreamController, n),
                        (l = !1),
                        c && p();
                    });
                  },
                  _closeSteps: function () {
                    (l = !1),
                      h || xr(i._readableStreamController),
                      u || xr(o._readableStreamController),
                      (h && u) || a(void 0);
                  },
                  _errorSteps: function () {
                    l = !1;
                  },
                }),
                v(void 0));
          }
          function f(t) {
            if (((h = !0), (n = t), u)) {
              var i = xe([n, r]),
                o = ti(e, i);
              a(o);
            }
            return d;
          }
          function g(t) {
            if (((u = !0), (r = t), h)) {
              var i = xe([n, r]),
                o = ti(e, i);
              a(o);
            }
            return d;
          }
          function b() {}
          return (
            (i = Kr(b, p, f)),
            (o = Kr(b, p, g)),
            S(s._closedPromise, function (e) {
              return (
                Er(i._readableStreamController, e),
                Er(o._readableStreamController, e),
                (h && u) || a(void 0),
                null
              );
            }),
            [i, o]
          );
        }
        function Lr(e) {
          var t,
            n,
            r,
            i,
            o,
            a = oe(e),
            s = !1,
            l = !1,
            c = !1,
            h = !1,
            u = !1,
            d = m(function (e) {
              o = e;
            });
          function p(e) {
            S(e._closedPromise, function (t) {
              return (
                e !== a ||
                  (mt(r._readableStreamController, t),
                  mt(i._readableStreamController, t),
                  (h && u) || o(void 0)),
                null
              );
            });
          }
          function f() {
            Ft(a) && (N(a), p((a = oe(e)))),
              fe(a, {
                _chunkSteps: function (t) {
                  P(function () {
                    (l = !1), (c = !1);
                    var n = t,
                      a = t;
                    if (!h && !u)
                      try {
                        a = Fe(t);
                      } catch (t) {
                        return (
                          mt(r._readableStreamController, t),
                          mt(i._readableStreamController, t),
                          void o(ti(e, t))
                        );
                      }
                    h || gt(r._readableStreamController, n),
                      u || gt(i._readableStreamController, a),
                      (s = !1),
                      l ? b() : c && y();
                  });
                },
                _closeSteps: function () {
                  (s = !1),
                    h || ft(r._readableStreamController),
                    u || ft(i._readableStreamController),
                    r._readableStreamController._pendingPullIntos.length > 0 &&
                      _t(r._readableStreamController, 0),
                    i._readableStreamController._pendingPullIntos.length > 0 &&
                      _t(i._readableStreamController, 0),
                    (h && u) || o(void 0);
                },
                _errorSteps: function () {
                  s = !1;
                },
              });
          }
          function g(t, n) {
            pe(a) && (N(a), p((a = Mt(e))));
            var d = n ? i : r,
              f = n ? r : i;
            Nt(a, t, 1, {
              _chunkSteps: function (t) {
                P(function () {
                  (l = !1), (c = !1);
                  var r = n ? u : h;
                  if (n ? h : u) r || wt(d._readableStreamController, t);
                  else {
                    var i = void 0;
                    try {
                      i = Fe(t);
                    } catch (t) {
                      return (
                        mt(d._readableStreamController, t),
                        mt(f._readableStreamController, t),
                        void o(ti(e, t))
                      );
                    }
                    r || wt(d._readableStreamController, t),
                      gt(f._readableStreamController, i);
                  }
                  (s = !1), l ? b() : c && y();
                });
              },
              _closeSteps: function (e) {
                s = !1;
                var t = n ? u : h,
                  r = n ? h : u;
                t || ft(d._readableStreamController),
                  r || ft(f._readableStreamController),
                  void 0 !== e &&
                    (t || wt(d._readableStreamController, e),
                    !r &&
                      f._readableStreamController._pendingPullIntos.length >
                        0 &&
                      _t(f._readableStreamController, 0)),
                  (t && r) || o(void 0);
              },
              _errorSteps: function () {
                s = !1;
              },
            });
          }
          function b() {
            if (s) return (l = !0), v(void 0);
            s = !0;
            var e = bt(r._readableStreamController);
            return null === e ? f() : g(e._view, !1), v(void 0);
          }
          function y() {
            if (s) return (c = !0), v(void 0);
            s = !0;
            var e = bt(i._readableStreamController);
            return null === e ? f() : g(e._view, !0), v(void 0);
          }
          function _(r) {
            if (((h = !0), (t = r), u)) {
              var i = xe([t, n]),
                a = ti(e, i);
              o(a);
            }
            return d;
          }
          function w(r) {
            if (((u = !0), (n = r), h)) {
              var i = xe([t, n]),
                a = ti(e, i);
              o(a);
            }
            return d;
          }
          function A() {}
          return (r = Zr(A, b, _)), (i = Zr(A, y, w)), p(a), [r, i];
        }
        function Fr(e) {
          return h(e) && void 0 !== e.getReader;
        }
        function Nr(e) {
          return Fr(e) ? Br(e.getReader()) : jr(e);
        }
        function jr(e) {
          var t,
            n = Re(e, 'async');
          function r() {
            var e;
            try {
              e = Oe(n);
            } catch (e) {
              return b(e);
            }
            return A(v(e), function (e) {
              if (!h(e))
                throw new TypeError(
                  'The promise returned by the iterator.next() method must fulfill with an object',
                );
              if (De(e)) xr(t._readableStreamController);
              else {
                var n = Ie(e);
                Pr(t._readableStreamController, n);
              }
            });
          }
          function i(e) {
            var t,
              r,
              i = n.iterator;
            try {
              t = ke(i, 'return');
            } catch (e) {
              return b(e);
            }
            if (void 0 === t) return v(void 0);
            try {
              r = E(t, i, [e]);
            } catch (e) {
              return b(e);
            }
            return A(v(r), function (e) {
              if (!h(e))
                throw new TypeError(
                  'The promise returned by the iterator.return() method must fulfill with an object',
                );
            });
          }
          return (t = Kr(c, r, i, 0));
        }
        function Br(e) {
          var t;
          function n() {
            var n;
            try {
              n = e.read();
            } catch (e) {
              return b(e);
            }
            return A(n, function (e) {
              if (!h(e))
                throw new TypeError(
                  'The promise returned by the reader.read() method must fulfill with an object',
                );
              if (e.done) xr(t._readableStreamController);
              else {
                var n = e.value;
                Pr(t._readableStreamController, n);
              }
            });
          }
          function r(t) {
            try {
              return v(e.cancel(t));
            } catch (e) {
              return b(e);
            }
          }
          return (t = Kr(c, n, r, 0));
        }
        function Wr(e, t) {
          X(e, t);
          var n = e,
            r = null == n ? void 0 : n.autoAllocateChunkSize,
            i = null == n ? void 0 : n.cancel,
            o = null == n ? void 0 : n.pull,
            a = null == n ? void 0 : n.start,
            s = null == n ? void 0 : n.type;
          return {
            autoAllocateChunkSize:
              void 0 === r
                ? void 0
                : re(
                    r,
                    ''.concat(t, " has member 'autoAllocateChunkSize' that"),
                  ),
            cancel:
              void 0 === i
                ? void 0
                : zr(i, n, ''.concat(t, " has member 'cancel' that")),
            pull:
              void 0 === o
                ? void 0
                : $r(o, n, ''.concat(t, " has member 'pull' that")),
            start:
              void 0 === a
                ? void 0
                : Ur(a, n, ''.concat(t, " has member 'start' that")),
            type:
              void 0 === s
                ? void 0
                : Hr(s, ''.concat(t, " has member 'type' that")),
          };
        }
        function zr(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return C(e, t, [n]);
            }
          );
        }
        function $r(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return C(e, t, [n]);
            }
          );
        }
        function Ur(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return E(e, t, [n]);
            }
          );
        }
        function Hr(e, t) {
          if ('bytes' !== (e = ''.concat(e)))
            throw new TypeError(
              ''
                .concat(t, " '")
                .concat(
                  e,
                  "' is not a valid enumeration value for ReadableStreamType",
                ),
            );
          return e;
        }
        function Vr(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.preventCancel;
          return { preventCancel: Boolean(n) };
        }
        function qr(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.preventAbort,
            r = null == e ? void 0 : e.preventCancel,
            i = null == e ? void 0 : e.preventClose,
            o = null == e ? void 0 : e.signal;
          return (
            void 0 !== o && Gr(o, ''.concat(t, " has member 'signal' that")),
            {
              preventAbort: Boolean(n),
              preventCancel: Boolean(r),
              preventClose: Boolean(i),
              signal: o,
            }
          );
        }
        function Gr(e, t) {
          if (!Zt(e))
            throw new TypeError(''.concat(t, ' is not an AbortSignal.'));
        }
        function Xr(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.readable;
          J(n, 'readable', 'ReadableWritablePair'),
            ie(n, ''.concat(t, " has member 'readable' that"));
          var r = null == e ? void 0 : e.writable;
          return (
            J(r, 'writable', 'ReadableWritablePair'),
            Kt(r, ''.concat(t, " has member 'writable' that")),
            { readable: n, writable: r }
          );
        }
        Object.defineProperties(yr.prototype, {
          close: { enumerable: !0 },
          enqueue: { enumerable: !0 },
          error: { enumerable: !0 },
          desiredSize: { enumerable: !0 },
        }),
          d(yr.prototype.close, 'close'),
          d(yr.prototype.enqueue, 'enqueue'),
          d(yr.prototype.error, 'error'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(yr.prototype, t.toStringTag, {
              value: 'ReadableStreamDefaultController',
              configurable: !0,
            });
        var Yr = (function () {
          function e(e, t) {
            void 0 === e && (e = {}),
              void 0 === t && (t = {}),
              void 0 === e ? (e = null) : Z(e, 'First parameter');
            var n = Ut(t, 'Second parameter'),
              r = Wr(e, 'First parameter');
            if ((Qr(this), 'bytes' === r.type)) {
              if (void 0 !== n.size)
                throw new RangeError(
                  'The strategy for a byte stream cannot have a size function',
                );
              At(this, r, zt(n, 0));
            } else {
              var i = $t(n);
              Rr(this, r, zt(n, 1), i);
            }
          }
          return (
            Object.defineProperty(e.prototype, 'locked', {
              get: function () {
                if (!Jr(this)) throw ii('locked');
                return ei(this);
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.cancel = function (e) {
              return (
                void 0 === e && (e = void 0),
                Jr(this)
                  ? ei(this)
                    ? b(
                        new TypeError(
                          'Cannot cancel a stream that already has a reader',
                        ),
                      )
                    : ti(this, e)
                  : b(ii('cancel'))
              );
            }),
            (e.prototype.getReader = function (e) {
              if ((void 0 === e && (e = void 0), !Jr(this)))
                throw ii('getReader');
              return void 0 === Ct(e, 'First parameter').mode
                ? oe(this)
                : Mt(this);
            }),
            (e.prototype.pipeThrough = function (e, t) {
              if ((void 0 === t && (t = {}), !Jr(this)))
                throw ii('pipeThrough');
              Q(e, 1, 'pipeThrough');
              var n = Xr(e, 'First parameter'),
                r = qr(t, 'Second parameter');
              if (ei(this))
                throw new TypeError(
                  'ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream',
                );
              if (an(n.writable))
                throw new TypeError(
                  'ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream',
                );
              return (
                x(
                  br(
                    this,
                    n.writable,
                    r.preventClose,
                    r.preventAbort,
                    r.preventCancel,
                    r.signal,
                  ),
                ),
                n.readable
              );
            }),
            (e.prototype.pipeTo = function (e, t) {
              if ((void 0 === t && (t = {}), !Jr(this))) return b(ii('pipeTo'));
              if (void 0 === e)
                return b("Parameter 1 is required in 'pipeTo'.");
              if (!on(e))
                return b(
                  new TypeError(
                    "ReadableStream.prototype.pipeTo's first argument must be a WritableStream",
                  ),
                );
              var n;
              try {
                n = qr(t, 'Second parameter');
              } catch (e) {
                return b(e);
              }
              return ei(this)
                ? b(
                    new TypeError(
                      'ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream',
                    ),
                  )
                : an(e)
                  ? b(
                      new TypeError(
                        'ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream',
                      ),
                    )
                  : br(
                      this,
                      e,
                      n.preventClose,
                      n.preventAbort,
                      n.preventCancel,
                      n.signal,
                    );
            }),
            (e.prototype.tee = function () {
              if (!Jr(this)) throw ii('tee');
              return xe(Dr(this));
            }),
            (e.prototype.values = function (e) {
              if ((void 0 === e && (e = void 0), !Jr(this))) throw ii('values');
              return _e(this, Vr(e, 'First parameter').preventCancel);
            }),
            (e.from = function (e) {
              return Nr(e);
            }),
            e
          );
        })();
        function Kr(e, t, n, r, i) {
          void 0 === r && (r = 1),
            void 0 === i &&
              (i = function () {
                return 1;
              });
          var o = Object.create(Yr.prototype);
          return Qr(o), Mr(o, Object.create(yr.prototype), e, t, n, r, i), o;
        }
        function Zr(e, t, n) {
          var r = Object.create(Yr.prototype);
          return (
            Qr(r), St(r, Object.create(Ve.prototype), e, t, n, 0, void 0), r
          );
        }
        function Qr(e) {
          (e._state = 'readable'),
            (e._reader = void 0),
            (e._storedError = void 0),
            (e._disturbed = !1);
        }
        function Jr(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_readableStreamController',
            ) &&
            e instanceof Yr
          );
        }
        function ei(e) {
          return void 0 !== e._reader;
        }
        function ti(e, t) {
          if (((e._disturbed = !0), 'closed' === e._state)) return v(void 0);
          if ('errored' === e._state) return b(e._storedError);
          ni(e);
          var n = e._reader;
          if (void 0 !== n && Ft(n)) {
            var r = n._readIntoRequests;
            (n._readIntoRequests = new k()),
              r.forEach(function (e) {
                e._closeSteps(void 0);
              });
          }
          return A(e._readableStreamController[O](t), c);
        }
        function ni(e) {
          e._state = 'closed';
          var t = e._reader;
          if (void 0 !== t && (H(t), pe(t))) {
            var n = t._readRequests;
            (t._readRequests = new k()),
              n.forEach(function (e) {
                e._closeSteps();
              });
          }
        }
        function ri(e, t) {
          (e._state = 'errored'), (e._storedError = t);
          var n = e._reader;
          void 0 !== n && ($(n, t), pe(n) ? me(n, t) : Bt(n, t));
        }
        function ii(e) {
          return new TypeError(
            'ReadableStream.prototype.'.concat(
              e,
              ' can only be used on a ReadableStream',
            ),
          );
        }
        function oi(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.highWaterMark;
          return (
            J(n, 'highWaterMark', 'QueuingStrategyInit'),
            { highWaterMark: ee(n) }
          );
        }
        Object.defineProperties(Yr, { from: { enumerable: !0 } }),
          Object.defineProperties(Yr.prototype, {
            cancel: { enumerable: !0 },
            getReader: { enumerable: !0 },
            pipeThrough: { enumerable: !0 },
            pipeTo: { enumerable: !0 },
            tee: { enumerable: !0 },
            values: { enumerable: !0 },
            locked: { enumerable: !0 },
          }),
          d(Yr.from, 'from'),
          d(Yr.prototype.cancel, 'cancel'),
          d(Yr.prototype.getReader, 'getReader'),
          d(Yr.prototype.pipeThrough, 'pipeThrough'),
          d(Yr.prototype.pipeTo, 'pipeTo'),
          d(Yr.prototype.tee, 'tee'),
          d(Yr.prototype.values, 'values'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(Yr.prototype, t.toStringTag, {
              value: 'ReadableStream',
              configurable: !0,
            }),
          'symbol' == typeof t.asyncIterator &&
            Object.defineProperty(Yr.prototype, t.asyncIterator, {
              value: Yr.prototype.values,
              writable: !0,
              configurable: !0,
            });
        var ai = function (e) {
          return e.byteLength;
        };
        d(ai, 'size');
        var si = (function () {
          function e(e) {
            Q(e, 1, 'ByteLengthQueuingStrategy'),
              (e = oi(e, 'First parameter')),
              (this._byteLengthQueuingStrategyHighWaterMark = e.highWaterMark);
          }
          return (
            Object.defineProperty(e.prototype, 'highWaterMark', {
              get: function () {
                if (!ci(this)) throw li('highWaterMark');
                return this._byteLengthQueuingStrategyHighWaterMark;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'size', {
              get: function () {
                if (!ci(this)) throw li('size');
                return ai;
              },
              enumerable: !1,
              configurable: !0,
            }),
            e
          );
        })();
        function li(e) {
          return new TypeError(
            'ByteLengthQueuingStrategy.prototype.'.concat(
              e,
              ' can only be used on a ByteLengthQueuingStrategy',
            ),
          );
        }
        function ci(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_byteLengthQueuingStrategyHighWaterMark',
            ) &&
            e instanceof si
          );
        }
        Object.defineProperties(si.prototype, {
          highWaterMark: { enumerable: !0 },
          size: { enumerable: !0 },
        }),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(si.prototype, t.toStringTag, {
              value: 'ByteLengthQueuingStrategy',
              configurable: !0,
            });
        var hi = function () {
          return 1;
        };
        d(hi, 'size');
        var ui = (function () {
          function e(e) {
            Q(e, 1, 'CountQueuingStrategy'),
              (e = oi(e, 'First parameter')),
              (this._countQueuingStrategyHighWaterMark = e.highWaterMark);
          }
          return (
            Object.defineProperty(e.prototype, 'highWaterMark', {
              get: function () {
                if (!pi(this)) throw di('highWaterMark');
                return this._countQueuingStrategyHighWaterMark;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'size', {
              get: function () {
                if (!pi(this)) throw di('size');
                return hi;
              },
              enumerable: !1,
              configurable: !0,
            }),
            e
          );
        })();
        function di(e) {
          return new TypeError(
            'CountQueuingStrategy.prototype.'.concat(
              e,
              ' can only be used on a CountQueuingStrategy',
            ),
          );
        }
        function pi(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_countQueuingStrategyHighWaterMark',
            ) &&
            e instanceof ui
          );
        }
        function fi(e, t) {
          X(e, t);
          var n = null == e ? void 0 : e.cancel,
            r = null == e ? void 0 : e.flush,
            i = null == e ? void 0 : e.readableType,
            o = null == e ? void 0 : e.start,
            a = null == e ? void 0 : e.transform,
            s = null == e ? void 0 : e.writableType;
          return {
            cancel:
              void 0 === n
                ? void 0
                : bi(n, e, ''.concat(t, " has member 'cancel' that")),
            flush:
              void 0 === r
                ? void 0
                : gi(r, e, ''.concat(t, " has member 'flush' that")),
            readableType: i,
            start:
              void 0 === o
                ? void 0
                : mi(o, e, ''.concat(t, " has member 'start' that")),
            transform:
              void 0 === a
                ? void 0
                : vi(a, e, ''.concat(t, " has member 'transform' that")),
            writableType: s,
          };
        }
        function gi(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return C(e, t, [n]);
            }
          );
        }
        function mi(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return E(e, t, [n]);
            }
          );
        }
        function vi(e, t, n) {
          return (
            Y(e, n),
            function (n, r) {
              return C(e, t, [n, r]);
            }
          );
        }
        function bi(e, t, n) {
          return (
            Y(e, n),
            function (n) {
              return C(e, t, [n]);
            }
          );
        }
        Object.defineProperties(ui.prototype, {
          highWaterMark: { enumerable: !0 },
          size: { enumerable: !0 },
        }),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(ui.prototype, t.toStringTag, {
              value: 'CountQueuingStrategy',
              configurable: !0,
            });
        var yi = (function () {
          function e(e, t, n) {
            void 0 === e && (e = {}),
              void 0 === t && (t = {}),
              void 0 === n && (n = {}),
              void 0 === e && (e = null);
            var r = Ut(t, 'Second parameter'),
              i = Ut(n, 'Third parameter'),
              o = fi(e, 'First parameter');
            if (void 0 !== o.readableType)
              throw new RangeError('Invalid readableType specified');
            if (void 0 !== o.writableType)
              throw new RangeError('Invalid writableType specified');
            var a,
              s = zt(i, 0),
              l = $t(i),
              c = zt(r, 1),
              h = $t(r);
            _i(
              this,
              m(function (e) {
                a = e;
              }),
              c,
              h,
              s,
              l,
            ),
              ki(this, o),
              void 0 !== o.start
                ? a(o.start(this._transformStreamController))
                : a(void 0);
          }
          return (
            Object.defineProperty(e.prototype, 'readable', {
              get: function () {
                if (!wi(this)) throw Ui('readable');
                return this._readable;
              },
              enumerable: !1,
              configurable: !0,
            }),
            Object.defineProperty(e.prototype, 'writable', {
              get: function () {
                if (!wi(this)) throw Ui('writable');
                return this._writable;
              },
              enumerable: !1,
              configurable: !0,
            }),
            e
          );
        })();
        function _i(e, t, n, r, i, o) {
          function a() {
            return t;
          }
          function s(t) {
            return Li(e, t);
          }
          function l(t) {
            return Fi(e, t);
          }
          function c() {
            return Ni(e);
          }
          function h() {
            return ji(e);
          }
          function u(t) {
            return Bi(e, t);
          }
          (e._writable = nn(a, s, c, l, n, r)),
            (e._readable = Kr(a, h, u, i, o)),
            (e._backpressure = void 0),
            (e._backpressureChangePromise = void 0),
            (e._backpressureChangePromise_resolve = void 0),
            Pi(e, !0),
            (e._transformStreamController = void 0);
        }
        function wi(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_transformStreamController',
            ) &&
            e instanceof yi
          );
        }
        function Si(e, t) {
          Er(e._readable._readableStreamController, t), Ai(e, t);
        }
        function Ai(e, t) {
          Mi(e._transformStreamController),
            Hn(e._writable._writableStreamController, t),
            xi(e);
        }
        function xi(e) {
          e._backpressure && Pi(e, !1);
        }
        function Pi(e, t) {
          void 0 !== e._backpressureChangePromise &&
            e._backpressureChangePromise_resolve(),
            (e._backpressureChangePromise = m(function (t) {
              e._backpressureChangePromise_resolve = t;
            })),
            (e._backpressure = t);
        }
        Object.defineProperties(yi.prototype, {
          readable: { enumerable: !0 },
          writable: { enumerable: !0 },
        }),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(yi.prototype, t.toStringTag, {
              value: 'TransformStream',
              configurable: !0,
            });
        var Ei = (function () {
          function e() {
            throw new TypeError('Illegal constructor');
          }
          return (
            Object.defineProperty(e.prototype, 'desiredSize', {
              get: function () {
                if (!Ci(this)) throw Wi('desiredSize');
                return Cr(
                  this._controlledTransformStream._readable
                    ._readableStreamController,
                );
              },
              enumerable: !1,
              configurable: !0,
            }),
            (e.prototype.enqueue = function (e) {
              if ((void 0 === e && (e = void 0), !Ci(this)))
                throw Wi('enqueue');
              Ri(this, e);
            }),
            (e.prototype.error = function (e) {
              if ((void 0 === e && (e = void 0), !Ci(this))) throw Wi('error');
              Oi(this, e);
            }),
            (e.prototype.terminate = function () {
              if (!Ci(this)) throw Wi('terminate');
              Ii(this);
            }),
            e
          );
        })();
        function Ci(e) {
          return (
            !!h(e) &&
            !!Object.prototype.hasOwnProperty.call(
              e,
              '_controlledTransformStream',
            ) &&
            e instanceof Ei
          );
        }
        function Ti(e, t, n, r, i) {
          (t._controlledTransformStream = e),
            (e._transformStreamController = t),
            (t._transformAlgorithm = n),
            (t._flushAlgorithm = r),
            (t._cancelAlgorithm = i),
            (t._finishPromise = void 0),
            (t._finishPromise_resolve = void 0),
            (t._finishPromise_reject = void 0);
        }
        function ki(e, t) {
          var n,
            r,
            i,
            o = Object.create(Ei.prototype);
          (n =
            void 0 !== t.transform
              ? function (e) {
                  return t.transform(e, o);
                }
              : function (e) {
                  try {
                    return Ri(o, e), v(void 0);
                  } catch (e) {
                    return b(e);
                  }
                }),
            (r =
              void 0 !== t.flush
                ? function () {
                    return t.flush(o);
                  }
                : function () {
                    return v(void 0);
                  }),
            (i =
              void 0 !== t.cancel
                ? function (e) {
                    return t.cancel(e);
                  }
                : function () {
                    return v(void 0);
                  }),
            Ti(e, o, n, r, i);
        }
        function Mi(e) {
          (e._transformAlgorithm = void 0),
            (e._flushAlgorithm = void 0),
            (e._cancelAlgorithm = void 0);
        }
        function Ri(e, t) {
          var n = e._controlledTransformStream,
            r = n._readable._readableStreamController;
          if (!kr(r))
            throw new TypeError(
              'Readable side is not in a state that permits enqueue',
            );
          try {
            Pr(r, t);
          } catch (e) {
            throw (Ai(n, e), n._readable._storedError);
          }
          Tr(r) !== n._backpressure && Pi(n, !0);
        }
        function Oi(e, t) {
          Si(e._controlledTransformStream, t);
        }
        function Di(e, t) {
          return A(e._transformAlgorithm(t), void 0, function (t) {
            throw (Si(e._controlledTransformStream, t), t);
          });
        }
        function Ii(e) {
          var t = e._controlledTransformStream;
          xr(t._readable._readableStreamController),
            Ai(t, new TypeError('TransformStream terminated'));
        }
        function Li(e, t) {
          var n = e._transformStreamController;
          return e._backpressure
            ? A(e._backpressureChangePromise, function () {
                var r = e._writable;
                if ('erroring' === r._state) throw r._storedError;
                return Di(n, t);
              })
            : Di(n, t);
        }
        function Fi(e, t) {
          var n = e._transformStreamController;
          if (void 0 !== n._finishPromise) return n._finishPromise;
          var r = e._readable;
          n._finishPromise = m(function (e, t) {
            (n._finishPromise_resolve = e), (n._finishPromise_reject = t);
          });
          var i = n._cancelAlgorithm(t);
          return (
            Mi(n),
            _(
              i,
              function () {
                return (
                  'errored' === r._state
                    ? $i(n, r._storedError)
                    : (Er(r._readableStreamController, t), zi(n)),
                  null
                );
              },
              function (e) {
                return Er(r._readableStreamController, e), $i(n, e), null;
              },
            ),
            n._finishPromise
          );
        }
        function Ni(e) {
          var t = e._transformStreamController;
          if (void 0 !== t._finishPromise) return t._finishPromise;
          var n = e._readable;
          t._finishPromise = m(function (e, n) {
            (t._finishPromise_resolve = e), (t._finishPromise_reject = n);
          });
          var r = t._flushAlgorithm();
          return (
            Mi(t),
            _(
              r,
              function () {
                return (
                  'errored' === n._state
                    ? $i(t, n._storedError)
                    : (xr(n._readableStreamController), zi(t)),
                  null
                );
              },
              function (e) {
                return Er(n._readableStreamController, e), $i(t, e), null;
              },
            ),
            t._finishPromise
          );
        }
        function ji(e) {
          return Pi(e, !1), e._backpressureChangePromise;
        }
        function Bi(e, t) {
          var n = e._transformStreamController;
          if (void 0 !== n._finishPromise) return n._finishPromise;
          var r = e._writable;
          n._finishPromise = m(function (e, t) {
            (n._finishPromise_resolve = e), (n._finishPromise_reject = t);
          });
          var i = n._cancelAlgorithm(t);
          return (
            Mi(n),
            _(
              i,
              function () {
                return (
                  'errored' === r._state
                    ? $i(n, r._storedError)
                    : (Hn(r._writableStreamController, t), xi(e), zi(n)),
                  null
                );
              },
              function (t) {
                return (
                  Hn(r._writableStreamController, t), xi(e), $i(n, t), null
                );
              },
            ),
            n._finishPromise
          );
        }
        function Wi(e) {
          return new TypeError(
            'TransformStreamDefaultController.prototype.'.concat(
              e,
              ' can only be used on a TransformStreamDefaultController',
            ),
          );
        }
        function zi(e) {
          void 0 !== e._finishPromise_resolve &&
            (e._finishPromise_resolve(),
            (e._finishPromise_resolve = void 0),
            (e._finishPromise_reject = void 0));
        }
        function $i(e, t) {
          void 0 !== e._finishPromise_reject &&
            (x(e._finishPromise),
            e._finishPromise_reject(t),
            (e._finishPromise_resolve = void 0),
            (e._finishPromise_reject = void 0));
        }
        function Ui(e) {
          return new TypeError(
            'TransformStream.prototype.'.concat(
              e,
              ' can only be used on a TransformStream',
            ),
          );
        }
        Object.defineProperties(Ei.prototype, {
          enqueue: { enumerable: !0 },
          error: { enumerable: !0 },
          terminate: { enumerable: !0 },
          desiredSize: { enumerable: !0 },
        }),
          d(Ei.prototype.enqueue, 'enqueue'),
          d(Ei.prototype.error, 'error'),
          d(Ei.prototype.terminate, 'terminate'),
          'symbol' == typeof t.toStringTag &&
            Object.defineProperty(Ei.prototype, t.toStringTag, {
              value: 'TransformStreamDefaultController',
              configurable: !0,
            }),
          (e.ByteLengthQueuingStrategy = si),
          (e.CountQueuingStrategy = ui),
          (e.ReadableByteStreamController = Ve),
          (e.ReadableStream = Yr),
          (e.ReadableStreamBYOBReader = Lt),
          (e.ReadableStreamBYOBRequest = He),
          (e.ReadableStreamDefaultController = yr),
          (e.ReadableStreamDefaultReader = de),
          (e.TransformStream = yi),
          (e.TransformStreamDefaultController = Ei),
          (e.WritableStream = en),
          (e.WritableStreamDefaultController = In),
          (e.WritableStreamDefaultWriter = An);
      })(t);
    },
    99346: function (e, t, n) {
      'use strict';
      n.d(t, {
        B: function () {
          return s;
        },
        S: function () {
          return c;
        },
      });
      var r = n(62435),
        i = n(44493),
        o = n(67112),
        a = n(30202);
      function s(e, t) {
        return c({ filters: { ...e, status: 'pending' } }, (0, a.NL)(t)).length;
      }
      function l(e, t) {
        return e
          .findAll(t.filters)
          .map((e) => (t.select ? t.select(e) : e.state));
      }
      function c(e = {}, t) {
        const n = (0, a.NL)(t).getMutationCache(),
          s = r.useRef(e),
          c = r.useRef(null);
        return (
          c.current || (c.current = l(n, e)),
          r.useEffect(() => {
            s.current = e;
          }),
          r.useSyncExternalStore(
            r.useCallback(
              (e) =>
                n.subscribe(() => {
                  const t = (0, i.Q$)(c.current, l(n, s.current));
                  c.current !== t && ((c.current = t), o.V.schedule(e));
                }),
              [n],
            ),
            () => c.current,
            () => c.current,
          )
        );
      }
    },
  },
]);
//# sourceMappingURL=5785.af7dc713.async.js.map
