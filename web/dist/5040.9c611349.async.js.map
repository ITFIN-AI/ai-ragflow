{"version":3,"file":"5040.9c611349.async.js","mappings":"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","sources":["webpack:///./src/hooks/chat-hooks.ts","webpack:///./src/pages/chat/hooks.ts","webpack:///./src/pages/chat/shared-hooks.ts","webpack:///./src/services/chat-service.ts","webpack:///./src/utils/index.ts"],"sourcesContent":["import { ChatSearchParams } from '@/constants/chat';\nimport {\n  IConversation,\n  IDialog,\n  IStats,\n  IToken,\n} from '@/interfaces/database/chat';\nimport {\n  IAskRequestBody,\n  IFeedbackRequestBody,\n} from '@/interfaces/request/chat';\nimport i18n from '@/locales/config';\nimport { IClientConversation } from '@/pages/chat/interface';\nimport { useGetSharedChatSearchParams } from '@/pages/chat/shared-hooks';\nimport chatService from '@/services/chat-service';\nimport {\n  buildMessageListWithUuid,\n  getConversationId,\n  isConversationIdExist,\n} from '@/utils/chat';\nimport { useMutation, useQuery, useQueryClient } from '@tanstack/react-query';\nimport { message } from 'antd';\nimport dayjs, { Dayjs } from 'dayjs';\nimport { has, set } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport { history, useSearchParams } from 'umi';\n\n//#region logic\n\nexport const useClickDialogCard = () => {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, setSearchParams] = useSearchParams();\n\n  const newQueryParameters: URLSearchParams = useMemo(() => {\n    return new URLSearchParams();\n  }, []);\n\n  const handleClickDialog = useCallback(\n    (dialogId: string) => {\n      newQueryParameters.set(ChatSearchParams.DialogId, dialogId);\n      // newQueryParameters.set(\n      //   ChatSearchParams.ConversationId,\n      //   EmptyConversationId,\n      // );\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { handleClickDialog };\n};\n\nexport const useClickConversationCard = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const handleClickConversation = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [setSearchParams, newQueryParameters],\n  );\n\n  return { handleClickConversation };\n};\n\nexport const useGetChatSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    dialogId: currentQueryParameters.get(ChatSearchParams.DialogId) || '',\n    conversationId:\n      currentQueryParameters.get(ChatSearchParams.ConversationId) || '',\n    isNew: currentQueryParameters.get(ChatSearchParams.isNew) || '',\n  };\n};\n\n//#endregion\n\n//#region dialog\n\nexport const useFetchNextDialogList = (pureFetch = false) => {\n  const { handleClickDialog } = useClickDialogCard();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog[]>({\n    queryKey: ['fetchDialogList'],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async (...params) => {\n      console.log('🚀 ~ queryFn: ~ params:', params);\n      const { data } = await chatService.listDialog();\n\n      if (data.code === 0) {\n        const list: IDialog[] = data.data;\n        if (!pureFetch) {\n          if (list.length > 0) {\n            if (list.every((x) => x.id !== dialogId)) {\n              handleClickDialog(data.data[0].id);\n            }\n          } else {\n            history.push('/chat');\n          }\n        }\n      }\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchChatAppList = () => {\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog[]>({\n    queryKey: ['fetchChatAppList'],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      const { data } = await chatService.listDialog();\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useSetNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['setDialog'],\n    mutationFn: async (params: IDialog) => {\n      const { data } = await chatService.setDialog(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({\n          exact: false,\n          queryKey: ['fetchDialogList'],\n        });\n\n        queryClient.invalidateQueries({\n          queryKey: ['fetchDialog'],\n        });\n        message.success(\n          i18n.t(`message.${params.dialog_id ? 'modified' : 'created'}`),\n        );\n      }\n      return data?.code;\n    },\n  });\n\n  return { data, loading, setDialog: mutateAsync };\n};\n\nexport const useFetchNextDialog = () => {\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IDialog>({\n    queryKey: ['fetchDialog', dialogId],\n    gcTime: 0,\n    initialData: {} as IDialog,\n    enabled: !!dialogId,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data?.data ?? ({} as IDialog);\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualDialog = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualDialog'],\n    gcTime: 0,\n    mutationFn: async (dialogId: string) => {\n      const { data } = await chatService.getDialog({ dialogId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchDialog: mutateAsync };\n};\n\nexport const useRemoveNextDialog = () => {\n  const queryClient = useQueryClient();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeDialog'],\n    mutationFn: async (dialogIds: string[]) => {\n      const { data } = await chatService.removeDialog({ dialogIds });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchDialogList'] });\n\n        message.success(i18n.t('message.deleted'));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeDialog: mutateAsync };\n};\n\n//#endregion\n\n//#region conversation\n\nexport const useFetchNextConversationList = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { handleClickConversation } = useClickConversationCard();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IConversation[]>({\n    queryKey: ['fetchConversationList', dialogId],\n    initialData: [],\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    enabled: !!dialogId,\n    queryFn: async () => {\n      const { data } = await chatService.listConversation({ dialogId });\n      if (data.code === 0) {\n        if (data.data.length > 0) {\n          handleClickConversation(data.data[0].id, '');\n        } else {\n          handleClickConversation('', '');\n        }\n      }\n      return data?.data;\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversation = () => {\n  const { isNew, conversationId } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversation', conversationId],\n    initialData: {} as IClientConversation,\n    // enabled: isConversationIdExist(conversationId),\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (\n        isNew !== 'true' &&\n        isConversationIdExist(sharedId || conversationId)\n      ) {\n        const { data } = await chatService.getConversation({\n          conversationId: conversationId || sharedId,\n        });\n\n        const conversation = data?.data ?? {};\n\n        const messageList = buildMessageListWithUuid(conversation?.message);\n\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchNextConversationSSE = () => {\n  const { isNew } = useGetChatSearchParams();\n  const { sharedId } = useGetSharedChatSearchParams();\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IClientConversation>({\n    queryKey: ['fetchConversationSSE', sharedId],\n    initialData: {} as IClientConversation,\n    gcTime: 0,\n    refetchOnWindowFocus: false,\n    queryFn: async () => {\n      if (isNew !== 'true' && isConversationIdExist(sharedId || '')) {\n        if (!sharedId) return {};\n        const { data } = await chatService.getConversationSSE({}, sharedId);\n        const conversation = data?.data ?? {};\n        const messageList = buildMessageListWithUuid(conversation?.message);\n        return { ...conversation, message: messageList };\n      }\n      return { message: [] };\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useFetchManualConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchManualConversation'],\n    gcTime: 0,\n    mutationFn: async (conversationId: string) => {\n      const { data } = await chatService.getConversation({ conversationId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, fetchConversation: mutateAsync };\n};\n\nexport const useUpdateNextConversation = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['updateConversation'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.setConversation({\n        ...params,\n        conversation_id: params.conversation_id\n          ? params.conversation_id\n          : getConversationId(),\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n        message.success(i18n.t(`message.modified`));\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, updateConversation: mutateAsync };\n};\n\nexport const useRemoveNextConversation = () => {\n  const queryClient = useQueryClient();\n  const { dialogId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeConversation'],\n    mutationFn: async (conversationIds: string[]) => {\n      const { data } = await chatService.removeConversation({\n        conversationIds,\n        dialogId,\n      });\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchConversationList'] });\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, removeConversation: mutateAsync };\n};\n\nexport const useDeleteMessage = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteMessage'],\n    mutationFn: async (messageId: string) => {\n      const { data } = await chatService.deleteMessage({\n        messageId,\n        conversationId,\n      });\n\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n      }\n\n      return data.code;\n    },\n  });\n\n  return { data, loading, deleteMessage: mutateAsync };\n};\n\nexport const useFeedback = () => {\n  const { conversationId } = useGetChatSearchParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['feedback'],\n    mutationFn: async (params: IFeedbackRequestBody) => {\n      const { data } = await chatService.thumbup({\n        ...params,\n        conversationId,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.operated`));\n      }\n      return data.code;\n    },\n  });\n\n  return { data, loading, feedback: mutateAsync };\n};\n\n//#endregion\n\n// #region API provided for external calls\n\nexport const useCreateNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createToken'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data } = await chatService.createToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, createToken: mutateAsync };\n};\n\nexport const useFetchTokenList = (params: Record<string, any>) => {\n  const {\n    data,\n    isFetching: loading,\n    refetch,\n  } = useQuery<IToken[]>({\n    queryKey: ['fetchTokenList', params],\n    initialData: [],\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await chatService.listToken(params);\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, refetch };\n};\n\nexport const useRemoveNextToken = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeToken'],\n    mutationFn: async (params: {\n      tenantId: string;\n      dialogId?: string;\n      tokens: string[];\n    }) => {\n      const { data } = await chatService.removeToken(params);\n      if (data.code === 0) {\n        queryClient.invalidateQueries({ queryKey: ['fetchTokenList'] });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, removeToken: mutateAsync };\n};\n\ntype RangeValue = [Dayjs | null, Dayjs | null] | null;\n\nconst getDay = (date?: Dayjs) => date?.format('YYYY-MM-DD');\n\nexport const useFetchNextStats = () => {\n  const [pickerValue, setPickerValue] = useState<RangeValue>([\n    dayjs().subtract(7, 'day'),\n    dayjs(),\n  ]);\n  const { data, isFetching: loading } = useQuery<IStats>({\n    queryKey: ['fetchStats', pickerValue],\n    initialData: {} as IStats,\n    gcTime: 0,\n    queryFn: async () => {\n      if (Array.isArray(pickerValue) && pickerValue[0]) {\n        const { data } = await chatService.getStats({\n          fromDate: getDay(pickerValue[0]),\n          toDate: getDay(pickerValue[1] ?? dayjs()),\n        });\n        return data?.data ?? {};\n      }\n      return {};\n    },\n  });\n\n  return { data, loading, pickerValue, setPickerValue };\n};\n\n//#endregion\n\n//#region shared chat\n\nexport const useCreateNextSharedConversation = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['createSharedConversation'],\n    mutationFn: async (userId?: string) => {\n      const { data } = await chatService.createExternalConversation({ userId });\n\n      return data;\n    },\n  });\n\n  return { data, loading, createSharedConversation: mutateAsync };\n};\n\n// deprecated\nexport const useFetchNextSharedConversation = (\n  conversationId?: string | null,\n) => {\n  const { data, isPending: loading } = useQuery({\n    queryKey: ['fetchSharedConversation'],\n    enabled: !!conversationId,\n    queryFn: async () => {\n      if (!conversationId) {\n        return {};\n      }\n      const { data } = await chatService.getExternalConversation(\n        null,\n        conversationId,\n      );\n\n      const messageList = buildMessageListWithUuid(data?.data?.message);\n\n      set(data, 'data.message', messageList);\n\n      return data;\n    },\n  });\n\n  return { data, loading };\n};\n\n//#endregion\n\n//#region search page\n\nexport const useFetchMindMap = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchMindMap'],\n    gcTime: 0,\n    mutationFn: async (params: IAskRequestBody) => {\n      try {\n        const ret = await chatService.getMindMap(params);\n        return ret?.data?.data ?? {};\n      } catch (error: any) {\n        if (has(error, 'message')) {\n          message.error(error.message);\n        }\n\n        return [];\n      }\n    },\n  });\n\n  return { data, loading, fetchMindMap: mutateAsync };\n};\n\nexport const useFetchRelatedQuestions = () => {\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['fetchRelatedQuestions'],\n    gcTime: 0,\n    mutationFn: async (question: string): Promise<string[]> => {\n      const { data } = await chatService.getRelatedQuestions({ question });\n\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, fetchRelatedQuestions: mutateAsync };\n};\n//#endregion\n","import { ChatSearchParams, MessageType } from '@/constants/chat';\nimport { fileIconMap } from '@/constants/common';\nimport {\n  useFetchManualConversation,\n  useFetchManualDialog,\n  useFetchNextConversation,\n  useFetchNextConversationList,\n  useFetchNextDialog,\n  useFetchNextDialogList,\n  useGetChatSearchParams,\n  useRemoveNextConversation,\n  useRemoveNextDialog,\n  useSetNextDialog,\n  useUpdateNextConversation,\n} from '@/hooks/chat-hooks';\nimport {\n  useSetModalState,\n  useShowDeleteConfirm,\n  useTranslate,\n} from '@/hooks/common-hooks';\nimport {\n  useRegenerateMessage,\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { IConversation, IDialog, Message } from '@/interfaces/database/chat';\nimport { getFileExtension } from '@/utils';\nimport api from '@/utils/api';\nimport { getConversationId } from '@/utils/chat';\nimport { useMutationState } from '@tanstack/react-query';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport {\n  IClientConversation,\n  IMessage,\n  VariableTableDataType,\n} from './interface';\n\nexport const useSetChatRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setConversationIsNew = useCallback(\n    (value: string) => {\n      newQueryParameters.set(ChatSearchParams.isNew, value);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  const getConversationIsNew = useCallback(() => {\n    return newQueryParameters.get(ChatSearchParams.isNew);\n  }, [newQueryParameters]);\n\n  return { setConversationIsNew, getConversationIsNew };\n};\n\nexport const useSetNewConversationRouteParams = () => {\n  const [currentQueryParameters, setSearchParams] = useSearchParams();\n  const newQueryParameters: URLSearchParams = useMemo(\n    () => new URLSearchParams(currentQueryParameters.toString()),\n    [currentQueryParameters],\n  );\n\n  const setNewConversationRouteParams = useCallback(\n    (conversationId: string, isNew: string) => {\n      newQueryParameters.set(ChatSearchParams.ConversationId, conversationId);\n      newQueryParameters.set(ChatSearchParams.isNew, isNew);\n      setSearchParams(newQueryParameters);\n    },\n    [newQueryParameters, setSearchParams],\n  );\n\n  return { setNewConversationRouteParams };\n};\n\nexport const useSelectCurrentDialog = () => {\n  const data = useMutationState({\n    filters: { mutationKey: ['fetchDialog'] },\n    select: (mutation) => {\n      return get(mutation, 'state.data.data', {});\n    },\n  });\n\n  return (data.at(-1) ?? {}) as IDialog;\n};\n\nexport const useSelectPromptConfigParameters = (): VariableTableDataType[] => {\n  const { data: currentDialog } = useFetchNextDialog();\n\n  const finalParameters: VariableTableDataType[] = useMemo(() => {\n    const parameters = currentDialog?.prompt_config?.parameters ?? [];\n    if (!currentDialog.id) {\n      // The newly created chat has a default parameter\n      return [{ key: uuid(), variable: 'knowledge', optional: false }];\n    }\n    return parameters.map((x) => ({\n      key: uuid(),\n      variable: x.key,\n      optional: x.optional,\n    }));\n  }, [currentDialog]);\n\n  return finalParameters;\n};\n\nexport const useDeleteDialog = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n\n  const { removeDialog } = useRemoveNextDialog();\n\n  const onRemoveDialog = (dialogIds: Array<string>) => {\n    showDeleteConfirm({ onOk: () => removeDialog(dialogIds) });\n  };\n\n  return { onRemoveDialog };\n};\n\nexport const useHandleItemHover = () => {\n  const [activated, setActivated] = useState<string>('');\n\n  const handleItemEnter = (id: string) => {\n    setActivated(id);\n  };\n\n  const handleItemLeave = () => {\n    setActivated('');\n  };\n\n  return {\n    activated,\n    handleItemEnter,\n    handleItemLeave,\n  };\n};\n\nexport const useEditDialog = () => {\n  const [dialog, setDialog] = useState<IDialog>({} as IDialog);\n  const { fetchDialog } = useFetchManualDialog();\n  const { setDialog: submitDialog, loading } = useSetNextDialog();\n\n  const {\n    visible: dialogEditVisible,\n    hideModal: hideDialogEditModal,\n    showModal: showDialogEditModal,\n  } = useSetModalState();\n\n  const hideModal = useCallback(() => {\n    setDialog({} as IDialog);\n    hideDialogEditModal();\n  }, [hideDialogEditModal]);\n\n  const onDialogEditOk = useCallback(\n    async (dialog: IDialog) => {\n      const ret = await submitDialog(dialog);\n\n      if (ret === 0) {\n        hideModal();\n      }\n    },\n    [submitDialog, hideModal],\n  );\n\n  const handleShowDialogEditModal = useCallback(\n    async (dialogId?: string) => {\n      if (dialogId) {\n        const ret = await fetchDialog(dialogId);\n        if (ret.code === 0) {\n          setDialog(ret.data);\n        }\n      }\n      showDialogEditModal();\n    },\n    [showDialogEditModal, fetchDialog],\n  );\n\n  const clearDialog = useCallback(() => {\n    setDialog({} as IDialog);\n  }, []);\n\n  return {\n    dialogSettingLoading: loading,\n    initialDialog: dialog,\n    onDialogEditOk,\n    dialogEditVisible,\n    hideDialogEditModal: hideModal,\n    showDialogEditModal: handleShowDialogEditModal,\n    clearDialog,\n  };\n};\n\n//#region conversation\n\nconst useFindPrologueFromDialogList = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { data: dialogList } = useFetchNextDialogList(true);\n  const prologue = useMemo(() => {\n    return dialogList.find((x) => x.id === dialogId)?.prompt_config.prologue;\n  }, [dialogId, dialogList]);\n\n  return prologue;\n};\n\nexport const useSelectDerivedConversationList = () => {\n  const { t } = useTranslate('chat');\n\n  const [list, setList] = useState<Array<IConversation>>([]);\n  const { data: conversationList, loading } = useFetchNextConversationList();\n  const { dialogId } = useGetChatSearchParams();\n  const { setNewConversationRouteParams } = useSetNewConversationRouteParams();\n  const prologue = useFindPrologueFromDialogList();\n\n  const addTemporaryConversation = useCallback(() => {\n    const conversationId = getConversationId();\n    setList((pre) => {\n      if (dialogId) {\n        setNewConversationRouteParams(conversationId, 'true');\n        const nextList = [\n          {\n            id: conversationId,\n            name: t('newConversation'),\n            dialog_id: dialogId,\n            is_new: true,\n            message: [\n              {\n                content: prologue,\n                role: MessageType.Assistant,\n              },\n            ],\n          } as any,\n          ...conversationList,\n        ];\n        return nextList;\n      }\n\n      return pre;\n    });\n  }, [conversationList, dialogId, prologue, t, setNewConversationRouteParams]);\n\n  // When you first enter the page, select the top conversation card\n\n  useEffect(() => {\n    setList([...conversationList]);\n  }, [conversationList]);\n\n  return { list, addTemporaryConversation, loading };\n};\n\nexport const useSetConversation = () => {\n  const { dialogId } = useGetChatSearchParams();\n  const { updateConversation } = useUpdateNextConversation();\n\n  const setConversation = useCallback(\n    async (\n      message: string,\n      isNew: boolean = false,\n      conversationId?: string,\n    ) => {\n      const data = await updateConversation({\n        dialog_id: dialogId,\n        name: message,\n        is_new: isNew,\n        conversation_id: conversationId,\n        message: [\n          {\n            role: MessageType.Assistant,\n            content: message,\n          },\n        ],\n      });\n\n      return data;\n    },\n    [updateConversation, dialogId],\n  );\n\n  return { setConversation };\n};\n\nexport const useSelectNextMessages = () => {\n  const {\n    ref,\n    setDerivedMessages,\n    derivedMessages,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectDerivedMessages();\n  const { data: conversation, loading } = useFetchNextConversation();\n  const { conversationId, dialogId, isNew } = useGetChatSearchParams();\n  const prologue = useFindPrologueFromDialogList();\n\n  const addPrologue = useCallback(() => {\n    if (dialogId !== '' && isNew === 'true') {\n      const nextMessage = {\n        role: MessageType.Assistant,\n        content: prologue,\n        id: uuid(),\n      } as IMessage;\n\n      setDerivedMessages([nextMessage]);\n    }\n  }, [dialogId, isNew, prologue, setDerivedMessages]);\n\n  useEffect(() => {\n    addPrologue();\n  }, [addPrologue]);\n\n  useEffect(() => {\n    if (\n      conversationId &&\n      isNew !== 'true' &&\n      conversation.message?.length > 0\n    ) {\n      setDerivedMessages(conversation.message);\n    }\n\n    if (!conversationId) {\n      setDerivedMessages([]);\n    }\n  }, [conversation.message, conversationId, setDerivedMessages, isNew]);\n\n  return {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n    const value = e.target.value;\n    // const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(value);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSendNextMessage = (controller: AbortController) => {\n  const { setConversation } = useSetConversation();\n  const { conversationId, isNew } = useGetChatSearchParams();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n\n  const { send, answer, done } = useSendMessageWithSse(\n    api.completeConversation,\n  );\n  const {\n    ref,\n    derivedMessages,\n    loading,\n    addNewestAnswer,\n    addNewestQuestion,\n    removeLatestMessage,\n    removeMessageById,\n    removeMessagesAfterCurrentMessage,\n  } = useSelectNextMessages();\n  const { setConversationIsNew, getConversationIsNew } =\n    useSetChatRouteParams();\n\n  const stopOutputMessage = useCallback(() => {\n    controller.abort();\n  }, [controller]);\n\n  const sendMessage = useCallback(\n    async ({\n      message,\n      currentConversationId,\n      messages,\n    }: {\n      message: Message;\n      currentConversationId?: string;\n      messages?: Message[];\n    }) => {\n      const res = await send(\n        {\n          conversation_id: currentConversationId ?? conversationId,\n          messages: [...(messages ?? derivedMessages ?? []), message],\n        },\n        controller,\n      );\n\n      if (res && (res?.response.status !== 200 || res?.data?.code !== 0)) {\n        // cancel loading\n        setValue(message.content);\n        console.info('removeLatestMessage111');\n        removeLatestMessage();\n      }\n    },\n    [\n      derivedMessages,\n      conversationId,\n      removeLatestMessage,\n      setValue,\n      send,\n      controller,\n    ],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      const isNew = getConversationIsNew();\n      if (isNew !== 'true') {\n        sendMessage({ message });\n      } else {\n        const data = await setConversation(\n          message.content,\n          true,\n          conversationId,\n        );\n        if (data.code === 0) {\n          setConversationIsNew('');\n          const id = data.data.id;\n          // currentConversationIdRef.current = id;\n          sendMessage({\n            message,\n            currentConversationId: id,\n            messages: data.data.message,\n          });\n        }\n      }\n    },\n    [\n      setConversation,\n      sendMessage,\n      setConversationIsNew,\n      getConversationIsNew,\n      conversationId,\n    ],\n  );\n\n  const { regenerateMessage } = useRegenerateMessage({\n    removeMessagesAfterCurrentMessage,\n    sendMessage,\n    messages: derivedMessages,\n  });\n\n  useEffect(() => {\n    //  #1289\n    if (answer.answer && conversationId && isNew !== 'true') {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer, conversationId, isNew]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n\n      addNewestQuestion({\n        content: value,\n        doc_ids: documentIds,\n        id,\n        role: MessageType.User,\n      });\n      if (done) {\n        setValue('');\n        handleSendMessage({\n          id,\n          content: value.trim(),\n          role: MessageType.User,\n          doc_ids: documentIds,\n        });\n      }\n    },\n    [addNewestQuestion, handleSendMessage, done, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    setValue,\n    regenerateMessage,\n    sendLoading: !done,\n    loading,\n    ref,\n    derivedMessages,\n    removeMessageById,\n    stopOutputMessage,\n  };\n};\n\nexport const useGetFileIcon = () => {\n  const getFileIcon = (filename: string) => {\n    const ext: string = getFileExtension(filename);\n    const iconPath = fileIconMap[ext as keyof typeof fileIconMap];\n    return `@/assets/svg/file-icon/${iconPath}`;\n  };\n\n  return getFileIcon;\n};\n\nexport const useDeleteConversation = () => {\n  const showDeleteConfirm = useShowDeleteConfirm();\n  const { removeConversation } = useRemoveNextConversation();\n\n  const deleteConversation = (conversationIds: Array<string>) => async () => {\n    const ret = await removeConversation(conversationIds);\n\n    return ret;\n  };\n\n  const onRemoveConversation = (conversationIds: Array<string>) => {\n    showDeleteConfirm({ onOk: deleteConversation(conversationIds) });\n  };\n\n  return { onRemoveConversation };\n};\n\nexport const useRenameConversation = () => {\n  const [conversation, setConversation] = useState<IClientConversation>(\n    {} as IClientConversation,\n  );\n  const { fetchConversation } = useFetchManualConversation();\n  const {\n    visible: conversationRenameVisible,\n    hideModal: hideConversationRenameModal,\n    showModal: showConversationRenameModal,\n  } = useSetModalState();\n  const { updateConversation, loading } = useUpdateNextConversation();\n\n  const onConversationRenameOk = useCallback(\n    async (name: string) => {\n      const ret = await updateConversation({\n        conversation_id: conversation.id,\n        name,\n        is_new: false,\n      });\n\n      if (ret.code === 0) {\n        hideConversationRenameModal();\n      }\n    },\n    [updateConversation, conversation, hideConversationRenameModal],\n  );\n\n  const handleShowConversationRenameModal = useCallback(\n    async (conversationId: string) => {\n      const ret = await fetchConversation(conversationId);\n      if (ret.code === 0) {\n        setConversation(ret.data);\n      }\n      showConversationRenameModal();\n    },\n    [showConversationRenameModal, fetchConversation],\n  );\n\n  return {\n    conversationRenameLoading: loading,\n    initialConversationName: conversation.name,\n    onConversationRenameOk,\n    conversationRenameVisible,\n    hideConversationRenameModal,\n    showConversationRenameModal: handleShowConversationRenameModal,\n  };\n};\n\nexport const useGetSendButtonDisabled = () => {\n  const { dialogId, conversationId } = useGetChatSearchParams();\n\n  return dialogId === '' || conversationId === '';\n};\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useCreateConversationBeforeUploadDocument = () => {\n  const { setConversation } = useSetConversation();\n  const { dialogId } = useGetChatSearchParams();\n  const { getConversationIsNew } = useSetChatRouteParams();\n\n  const createConversationBeforeUploadDocument = useCallback(\n    async (message: string) => {\n      const isNew = getConversationIsNew();\n      if (isNew === 'true') {\n        const data = await setConversation(message, true);\n\n        return data;\n      }\n    },\n    [setConversation, getConversationIsNew],\n  );\n\n  return {\n    createConversationBeforeUploadDocument,\n    dialogId,\n  };\n};\n//#endregion\n","import { MessageType, SharedFrom } from '@/constants/chat';\nimport { useCreateNextSharedConversation } from '@/hooks/chat-hooks';\nimport {\n  useSelectDerivedMessages,\n  useSendMessageWithSse,\n} from '@/hooks/logic-hooks';\nimport { Message } from '@/interfaces/database/chat';\nimport { message } from 'antd';\nimport { get } from 'lodash';\nimport trim from 'lodash/trim';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { v4 as uuid } from 'uuid';\nimport { useHandleMessageInputChange } from './hooks';\n\nconst isCompletionError = (res: any) =>\n  res && (res?.response.status !== 200 || res?.data?.code !== 0);\n\nexport const useSendButtonDisabled = (value: string) => {\n  return trim(value) === '';\n};\n\nexport const useGetSharedChatSearchParams = () => {\n  const [searchParams] = useSearchParams();\n  const data_prefix = 'data_';\n  const data = Object.fromEntries(\n    searchParams\n      .entries()\n      .filter(([key, value]) => key.startsWith(data_prefix))\n      .map(([key, value]) => [key.replace(data_prefix, ''), value]),\n  );\n  return {\n    from: searchParams.get('from') as SharedFrom,\n    sharedId: searchParams.get('shared_id'),\n    locale: searchParams.get('locale'),\n    data: data,\n    visibleAvatar: searchParams.get('visible_avatar')\n      ? searchParams.get('visible_avatar') !== '1'\n      : true,\n  };\n};\n\nexport const useSendSharedMessage = () => {\n  const {\n    from,\n    sharedId: conversationId,\n    data: data,\n  } = useGetSharedChatSearchParams();\n  const { createSharedConversation: setConversation } =\n    useCreateNextSharedConversation();\n  const { handleInputChange, value, setValue } = useHandleMessageInputChange();\n  const { send, answer, done, stopOutputMessage } = useSendMessageWithSse(\n    `/api/v1/${from === SharedFrom.Agent ? 'agentbots' : 'chatbots'}/${conversationId}/completions`,\n  );\n  const {\n    derivedMessages,\n    ref,\n    removeLatestMessage,\n    addNewestAnswer,\n    addNewestQuestion,\n  } = useSelectDerivedMessages();\n  const [hasError, setHasError] = useState(false);\n\n  const sendMessage = useCallback(\n    async (message: Message, id?: string) => {\n      const res = await send({\n        conversation_id: id ?? conversationId,\n        quote: true,\n        question: message.content,\n        session_id: get(derivedMessages, '0.session_id'),\n      });\n\n      if (isCompletionError(res)) {\n        // cancel loading\n        setValue(message.content);\n        removeLatestMessage();\n      }\n    },\n    [send, conversationId, derivedMessages, setValue, removeLatestMessage],\n  );\n\n  const handleSendMessage = useCallback(\n    async (message: Message) => {\n      if (conversationId !== '') {\n        sendMessage(message);\n      } else {\n        const data = await setConversation('user id');\n        if (data.code === 0) {\n          const id = data.data.id;\n          sendMessage(message, id);\n        }\n      }\n    },\n    [conversationId, setConversation, sendMessage],\n  );\n\n  const fetchSessionId = useCallback(async () => {\n    const payload = { question: '' };\n    const ret = await send({ ...payload, ...data });\n    if (isCompletionError(ret)) {\n      message.error(ret?.data.message);\n      setHasError(true);\n    }\n  }, [send]);\n\n  useEffect(() => {\n    fetchSessionId();\n  }, [fetchSessionId, send]);\n\n  useEffect(() => {\n    if (answer.answer) {\n      addNewestAnswer(answer);\n    }\n  }, [answer, addNewestAnswer]);\n\n  const handlePressEnter = useCallback(\n    (documentIds: string[]) => {\n      if (trim(value) === '') return;\n      const id = uuid();\n      if (done) {\n        setValue('');\n        addNewestQuestion({\n          content: value,\n          doc_ids: documentIds,\n          id,\n          role: MessageType.User,\n        });\n        handleSendMessage({\n          content: value.trim(),\n          id,\n          role: MessageType.User,\n        });\n      }\n    },\n    [addNewestQuestion, done, handleSendMessage, setValue, value],\n  );\n\n  return {\n    handlePressEnter,\n    handleInputChange,\n    value,\n    sendLoading: !done,\n    ref,\n    loading: false,\n    derivedMessages,\n    hasError,\n    stopOutputMessage,\n  };\n};\n","import api from '@/utils/api';\nimport registerServer from '@/utils/register-server';\nimport request from '@/utils/request';\n\nconst {\n  getDialog,\n  setDialog,\n  listDialog,\n  removeDialog,\n  getConversation,\n  getConversationSSE,\n  setConversation,\n  completeConversation,\n  listConversation,\n  removeConversation,\n  createToken,\n  listToken,\n  removeToken,\n  getStats,\n  createExternalConversation,\n  getExternalConversation,\n  completeExternalConversation,\n  uploadAndParseExternal,\n  deleteMessage,\n  thumbup,\n  tts,\n  ask,\n  mindmap,\n  getRelatedQuestions,\n} = api;\n\nconst methods = {\n  getDialog: {\n    url: getDialog,\n    method: 'get',\n  },\n  setDialog: {\n    url: setDialog,\n    method: 'post',\n  },\n  removeDialog: {\n    url: removeDialog,\n    method: 'post',\n  },\n  listDialog: {\n    url: listDialog,\n    method: 'get',\n  },\n  listConversation: {\n    url: listConversation,\n    method: 'get',\n  },\n  getConversation: {\n    url: getConversation,\n    method: 'get',\n  },\n  getConversationSSE: {\n    url: getConversationSSE,\n    method: 'get',\n  },\n  setConversation: {\n    url: setConversation,\n    method: 'post',\n  },\n  completeConversation: {\n    url: completeConversation,\n    method: 'post',\n  },\n  removeConversation: {\n    url: removeConversation,\n    method: 'post',\n  },\n  createToken: {\n    url: createToken,\n    method: 'post',\n  },\n  listToken: {\n    url: listToken,\n    method: 'get',\n  },\n  removeToken: {\n    url: removeToken,\n    method: 'post',\n  },\n  getStats: {\n    url: getStats,\n    method: 'get',\n  },\n  createExternalConversation: {\n    url: createExternalConversation,\n    method: 'get',\n  },\n  getExternalConversation: {\n    url: getExternalConversation,\n    method: 'get',\n  },\n  completeExternalConversation: {\n    url: completeExternalConversation,\n    method: 'post',\n  },\n  uploadAndParseExternal: {\n    url: uploadAndParseExternal,\n    method: 'post',\n  },\n  deleteMessage: {\n    url: deleteMessage,\n    method: 'post',\n  },\n  thumbup: {\n    url: thumbup,\n    method: 'post',\n  },\n  tts: {\n    url: tts,\n    method: 'post',\n  },\n  ask: {\n    url: ask,\n    method: 'post',\n  },\n  getMindMap: {\n    url: mindmap,\n    method: 'post',\n  },\n  getRelatedQuestions: {\n    url: getRelatedQuestions,\n    method: 'post',\n  },\n} as const;\n\nconst chatService = registerServer<keyof typeof methods>(methods, request);\n\nexport default chatService;\n","/**\n * @param  {String}  url\n * @param  {Boolean} isNoCaseSensitive 是否区分大小写\n * @return {Object}\n */\n// import numeral from 'numeral';\n\nimport { Base64 } from 'js-base64';\nimport JSEncrypt from 'jsencrypt';\n\nexport const getWidth = () => {\n  return { width: window.innerWidth };\n};\nexport const rsaPsw = (password: string) => {\n  const pub =\n    '-----BEGIN PUBLIC KEY-----MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArq9XTUSeYr2+N1h3Afl/z8Dse/2yD0ZGrKwx+EEEcdsBLca9Ynmx3nIB5obmLlSfmskLpBo0UACBmB5rEjBp2Q2f3AG3Hjd4B+gNCG6BDaawuDlgANIhGnaTLrIqWrrcm4EMzJOnAOI1fgzJRsOOUEfaS318Eq9OVO3apEyCCt0lOQK6PuksduOjVxtltDav+guVAA068NrPYmRNabVKRNLJpL8w4D44sfth5RvZ3q9t+6RTArpEtc5sh5ChzvqPOzKGMXW83C95TxmXqpbK6olN4RevSfVjEAgCydH6HN6OhtOQEcnrU97r9H0iZOWwbw3pVrZiUkuRD1R56Wzs2wIDAQAB-----END PUBLIC KEY-----';\n  const encryptor = new JSEncrypt();\n\n  encryptor.setPublicKey(pub);\n\n  return encryptor.encrypt(Base64.encode(password));\n};\n\nexport default {\n  getWidth,\n  rsaPsw,\n};\n\nexport const getFileExtension = (filename: string) =>\n  filename.slice(filename.lastIndexOf('.') + 1).toLowerCase();\n"],"names":["useClickDialogCard","_useSearchParams","useSearchParams","_useSearchParams2","_slicedToArray","setSearchParams","newQueryParameters","useMemo","URLSearchParams","handleClickDialog","useCallback","dialogId","set","ChatSearchParams","DialogId","useClickConversationCard","_useSearchParams3","_useSearchParams4","currentQueryParameters","toString","handleClickConversation","conversationId","isNew","ConversationId","useGetChatSearchParams","_useSearchParams5","get","useFetchNextDialogList","_queryFn","pureFetch","arguments","length","undefined","_useQuery","useQuery","queryKey","initialData","gcTime","refetchOnWindowFocus","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_len","params","_key","_yield$chatService$li","data","list","_args","wrap","_context","prev","next","Array","console","log","chatService","listDialog","sent","code","every","x","id","history","push","abrupt","stop","apply","loading","isFetching","refetch","useFetchChatAppList","_queryFn2","_useQuery2","_callee2","_data$data2","_yield$chatService$li2","_context2","useSetNextDialog","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee3","_yield$chatService$se","_context3","setDialog","invalidateQueries","exact","message","success","i18n","t","concat","dialog_id","_x","isPending","mutateAsync","useFetchNextDialog","_queryFn3","_useQuery3","enabled","_callee4","_data$data3","_yield$chatService$ge","_context4","getDialog","useFetchManualDialog","_mutationFn2","_useMutation2","_callee5","_yield$chatService$ge2","_context5","_x2","fetchDialog","useRemoveNextDialog","_mutationFn3","_useMutation3","_callee6","dialogIds","_yield$chatService$re","_context6","removeDialog","_x3","useFetchNextConversationList","_queryFn4","_useQuery4","_callee7","_yield$chatService$li3","_context7","listConversation","useFetchNextConversation","_queryFn5","_useGetChatSearchPara4","sharedId","useGetSharedChatSearchParams","_useQuery5","_callee8","_data$data4","_yield$chatService$ge3","_data","conversation","messageList","_context8","isConversationIdExist","getConversation","buildMessageListWithUuid","_objectSpread","useFetchNextConversationSSE","_queryFn6","_useQuery6","_callee9","_data2$data","_yield$chatService$ge4","_data2","_context9","getConversationSSE","useFetchManualConversation","_mutationFn4","_useMutation4","_callee10","_yield$chatService$ge5","_context10","_x4","fetchConversation","useUpdateNextConversation","_mutationFn5","_useMutation5","_callee11","_yield$chatService$se2","_context11","setConversation","conversation_id","getConversationId","_x5","updateConversation","useRemoveNextConversation","_mutationFn6","_useMutation6","_callee12","conversationIds","_yield$chatService$re2","_context12","removeConversation","_x6","useDeleteMessage","_mutationFn7","_useMutation7","_callee13","messageId","_yield$chatService$de","_context13","deleteMessage","_x7","useFeedback","_mutationFn8","_useMutation8","_callee14","_yield$chatService$th","_context14","thumbup","_x8","feedback","useCreateNextSharedConversation","_mutationFn11","_useMutation11","_callee19","userId","_yield$chatService$cr2","_context19","createExternalConversation","_x11","createSharedConversation","useFetchMindMap","_mutationFn12","_useMutation12","_callee21","_ret$data$data","_ret$data","ret","_context21","getMindMap","t0","has","error","_x12","fetchMindMap","useFetchRelatedQuestions","_mutationFn13","_useMutation13","_callee22","question","_data$data9","_yield$chatService$ge8","_context22","getRelatedQuestions","_x13","fetchRelatedQuestions","useSetChatRouteParams","setConversationIsNew","value","getConversationIsNew","useSelectPromptConfigParameters","currentDialog","_currentDialog$prompt","_currentDialog$prompt2","parameters","prompt_config","map","key","uuid","variable","optional","useDeleteDialog","showDeleteConfirm","useShowDeleteConfirm","onRemoveDialog","onOk","useHandleItemHover","_useState","useState","_useState2","activated","setActivated","handleItemEnter","handleItemLeave","useEditDialog","_useState3","_useState4","dialog","_useSetNextDialog","submitDialog","_useSetModalState","useSetModalState","dialogEditVisible","visible","hideDialogEditModal","hideModal","showDialogEditModal","showModal","onDialogEditOk","_ref","handleShowDialogEditModal","_ref2","clearDialog","dialogSettingLoading","initialDialog","useFindPrologueFromDialogList","dialogList","_dialogList$find","find","prologue","useSelectDerivedConversationList","useTranslate","_useState5","_useState6","setList","_useFetchNextConversa","conversationList","setNewConversationRouteParams","addTemporaryConversation","pre","name","is_new","content","role","MessageType","Assistant","_toConsumableArray","useEffect","useSetConversation","_ref3","_args3","useHandleMessageInputChange","_useState7","_useState8","setValue","handleInputChange","e","target","useSendNextMessage","controller","_useGetChatSearchPara5","_useHandleMessageInpu","_useSendMessageWithSs","useSendMessageWithSse","api","completeConversation","send","answer","done","_useSelectNextMessage","_useSelectDerivedMess","useSelectDerivedMessages","ref","setDerivedMessages","derivedMessages","addNewestAnswer","addNewestQuestion","removeLatestMessage","removeMessageById","removeMessagesAfterCurrentMessage","_useFetchNextConversa2","addPrologue","nextMessage","_conversation$message","useSelectNextMessages","_useSetChatRouteParam","stopOutputMessage","abort","sendMessage","_ref5","_ref4","_ref6","_res$data","currentConversationId","messages","res","response","status","info","handleSendMessage","_ref7","regenerateMessage","useRegenerateMessage","handlePressEnter","documentIds","trim","doc_ids","User","sendLoading","useGetFileIcon","filename","ext","getFileExtension","iconPath","fileIconMap","useDeleteConversation","deleteConversation","onRemoveConversation","useRenameConversation","_useState9","_useState10","_useSetModalState2","conversationRenameVisible","hideConversationRenameModal","showConversationRenameModal","_useUpdateNextConvers2","onConversationRenameOk","_ref9","handleShowConversationRenameModal","_ref10","conversationRenameLoading","initialConversationName","useGetSendButtonDisabled","_useGetChatSearchPara6","useSendButtonDisabled","useCreateConversationBeforeUploadDocument","createConversationBeforeUploadDocument","_ref11","isCompletionError","searchParams","data_prefix","Object","fromEntries","entries","filter","startsWith","replace","from","locale","visibleAvatar","useSendSharedMessage","_useGetSharedChatSear","SharedFrom","Agent","hasError","setHasError","quote","session_id","fetchSessionId","payload","methods","url","method","createToken","listToken","removeToken","getStats","getExternalConversation","completeExternalConversation","uploadAndParseExternal","tts","ask","mindmap","registerServer","request","getWidth","width","window","innerWidth","rsaPsw","password","encryptor","JSEncrypt","setPublicKey","encrypt","Base64","encode","slice","lastIndexOf","toLowerCase"],"sourceRoot":""}