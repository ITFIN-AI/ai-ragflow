{"version":3,"file":"8041.1f937de0.async.js","mappings":"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","sources":["webpack:///./src/components/ui/scroll-area.tsx","webpack:///./src/hooks/use-callback-ref.ts","webpack:///./src/hooks/use-controllable-state.ts","webpack:///./src/components/file-uploader.tsx","webpack:///./src/components/llm-setting-items/slider.tsx","webpack:///./src/components/llm-setting-items/next.tsx","webpack:///./src/components/llm-setting-items/use-watch-change.ts","webpack:///./src/components/page-header.tsx","webpack:///./src/components/ui/progress.tsx","webpack:///./src/components/ui/textarea.tsx","webpack:///./src/pages/agent/context.ts","webpack:///./src/pages/agent/store.ts","webpack:///./src/pages/agent/utils.ts","webpack:///./src/pages/agent/utils/filter-downstream-nodes.ts","webpack:///./src/pages/agent/utils/delete-node.ts"],"sourcesContent":["'use client';\n\nimport * as ScrollAreaPrimitive from '@radix-ui/react-scroll-area';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = 'vertical', ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      'flex touch-none select-none transition-colors',\n      orientation === 'vertical' &&\n        'h-full w-2.5 border-l border-l-transparent p-[1px]',\n      orientation === 'horizontal' &&\n        'h-2.5 flex-col border-t border-t-transparent p-[1px]',\n      className,\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n));\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn('relative overflow-hidden', className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n));\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;\n\nexport { ScrollArea, ScrollBar };\n","import * as React from 'react';\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-callback-ref/src/useCallbackRef.tsx\n */\n\n/**\n * A custom hook that converts a callback to a ref to avoid triggering re-renders when passed as a\n * prop or avoid re-executing effects when passed as a dependency\n */\nfunction useCallbackRef<T extends (...args: never[]) => unknown>(\n  callback: T | undefined,\n): T {\n  const callbackRef = React.useRef(callback);\n\n  React.useEffect(() => {\n    callbackRef.current = callback;\n  });\n\n  // https://github.com/facebook/react/issues/19240\n  return React.useMemo(\n    () => ((...args) => callbackRef.current?.(...args)) as T,\n    [],\n  );\n}\n\nexport { useCallbackRef };\n","import * as React from 'react';\n\nimport { useCallbackRef } from '@/hooks/use-callback-ref';\n\n/**\n * @see https://github.com/radix-ui/primitives/blob/main/packages/react/use-controllable-state/src/useControllableState.tsx\n */\n\ntype UseControllableStateParams<T> = {\n  prop?: T | undefined;\n  defaultProp?: T | undefined;\n  onChange?: (state: T) => void;\n};\n\ntype SetStateFn<T> = (prevState?: T) => T;\n\nfunction useUncontrolledState<T>({\n  defaultProp,\n  onChange,\n}: Omit<UseControllableStateParams<T>, 'prop'>) {\n  const uncontrolledState = React.useState<T | undefined>(defaultProp);\n  const [value] = uncontrolledState;\n  const prevValueRef = React.useRef(value);\n  const handleChange = useCallbackRef(onChange);\n\n  React.useEffect(() => {\n    if (prevValueRef.current !== value) {\n      handleChange(value as T);\n      prevValueRef.current = value;\n    }\n  }, [value, prevValueRef, handleChange]);\n\n  return uncontrolledState;\n}\n\nfunction useControllableState<T>({\n  prop,\n  defaultProp,\n  onChange = () => {},\n}: UseControllableStateParams<T>) {\n  const [uncontrolledProp, setUncontrolledProp] = useUncontrolledState({\n    defaultProp,\n    onChange,\n  });\n  const isControlled = prop !== undefined;\n  const value = isControlled ? prop : uncontrolledProp;\n  const handleChange = useCallbackRef(onChange);\n\n  const setValue: React.Dispatch<React.SetStateAction<T | undefined>> =\n    React.useCallback(\n      (nextValue) => {\n        if (isControlled) {\n          const setter = nextValue as SetStateFn<T>;\n          const value =\n            typeof nextValue === 'function' ? setter(prop) : nextValue;\n          if (value !== prop) handleChange(value as T);\n        } else {\n          setUncontrolledProp(nextValue);\n        }\n      },\n      [isControlled, prop, setUncontrolledProp, handleChange],\n    );\n\n  return [value, setValue] as const;\n}\n\nexport { useControllableState };\n","// https://github.com/sadmann7/file-uploader\n\n'use client';\n\nimport { FileText, Upload, X } from 'lucide-react';\nimport * as React from 'react';\nimport Dropzone, {\n  type DropzoneProps,\n  type FileRejection,\n} from 'react-dropzone';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport { Progress } from '@/components/ui/progress';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { useControllableState } from '@/hooks/use-controllable-state';\nimport { cn, formatBytes } from '@/lib/utils';\n\nfunction isFileWithPreview(file: File): file is File & { preview: string } {\n  return 'preview' in file && typeof file.preview === 'string';\n}\n\ninterface FileCardProps {\n  file: File;\n  onRemove: () => void;\n  progress?: number;\n}\n\ninterface FilePreviewProps {\n  file: File & { preview: string };\n}\n\nfunction FilePreview({ file }: FilePreviewProps) {\n  if (file.type.startsWith('image/')) {\n    return (\n      <img\n        src={file.preview}\n        alt={file.name}\n        width={48}\n        height={48}\n        loading=\"lazy\"\n        className=\"aspect-square shrink-0 rounded-md object-cover\"\n      />\n    );\n  }\n\n  return (\n    <FileText className=\"size-10 text-muted-foreground\" aria-hidden=\"true\" />\n  );\n}\n\nfunction FileCard({ file, progress, onRemove }: FileCardProps) {\n  return (\n    <div className=\"relative flex items-center gap-2.5\">\n      <div className=\"flex flex-1 gap-2.5\">\n        {isFileWithPreview(file) ? <FilePreview file={file} /> : null}\n        <div className=\"flex w-full flex-col gap-2\">\n          <div className=\"flex flex-col gap-px\">\n            <p className=\"line-clamp-1 text-sm font-medium text-foreground/80\">\n              {file.name}\n            </p>\n            <p className=\"text-xs text-muted-foreground\">\n              {formatBytes(file.size)}\n            </p>\n          </div>\n          {progress ? <Progress value={progress} /> : null}\n        </div>\n      </div>\n      <div className=\"flex items-center gap-2\">\n        <Button\n          type=\"button\"\n          variant=\"outline\"\n          size=\"icon\"\n          className=\"size-7\"\n          onClick={onRemove}\n        >\n          <X className=\"size-4\" aria-hidden=\"true\" />\n          <span className=\"sr-only\">Remove file</span>\n        </Button>\n      </div>\n    </div>\n  );\n}\n\ninterface FileUploaderProps extends React.HTMLAttributes<HTMLDivElement> {\n  /**\n   * Value of the uploader.\n   * @type File[]\n   * @default undefined\n   * @example value={files}\n   */\n  value?: File[];\n\n  /**\n   * Function to be called when the value changes.\n   * @type (files: File[]) => void\n   * @default undefined\n   * @example onValueChange={(files) => setFiles(files)}\n   */\n  onValueChange?: (files: File[]) => void;\n\n  /**\n   * Function to be called when files are uploaded.\n   * @type (files: File[]) => Promise<void>\n   * @default undefined\n   * @example onUpload={(files) => uploadFiles(files)}\n   */\n  onUpload?: (files: File[]) => Promise<void>;\n\n  /**\n   * Progress of the uploaded files.\n   * @type Record<string, number> | undefined\n   * @default undefined\n   * @example progresses={{ \"file1.png\": 50 }}\n   */\n  progresses?: Record<string, number>;\n\n  /**\n   * Accepted file types for the uploader.\n   * @type { [key: string]: string[]}\n   * @default\n   * ```ts\n   * { \"image/*\": [] }\n   * ```\n   * @example accept={[\"image/png\", \"image/jpeg\"]}\n   */\n  accept?: DropzoneProps['accept'];\n\n  /**\n   * Maximum file size for the uploader.\n   * @type number | undefined\n   * @default 1024 * 1024 * 2 // 2MB\n   * @example maxSize={1024 * 1024 * 2} // 2MB\n   */\n  maxSize?: DropzoneProps['maxSize'];\n\n  /**\n   * Maximum number of files for the uploader.\n   * @type number | undefined\n   * @default 1\n   * @example maxFileCount={4}\n   */\n  maxFileCount?: DropzoneProps['maxFiles'];\n\n  /**\n   * Whether the uploader should accept multiple files.\n   * @type boolean\n   * @default false\n   * @example multiple\n   */\n  multiple?: boolean;\n\n  /**\n   * Whether the uploader is disabled.\n   * @type boolean\n   * @default false\n   * @example disabled\n   */\n  disabled?: boolean;\n}\n\nexport function FileUploader(props: FileUploaderProps) {\n  const {\n    value: valueProp,\n    onValueChange,\n    onUpload,\n    progresses,\n    accept = {\n      'image/*': [],\n    },\n    maxSize = 1024 * 1024 * 2,\n    maxFileCount = 1,\n    multiple = false,\n    disabled = false,\n    className,\n    ...dropzoneProps\n  } = props;\n\n  const [files, setFiles] = useControllableState({\n    prop: valueProp,\n    onChange: onValueChange,\n  });\n\n  const onDrop = React.useCallback(\n    (acceptedFiles: File[], rejectedFiles: FileRejection[]) => {\n      if (!multiple && maxFileCount === 1 && acceptedFiles.length > 1) {\n        toast.error('Cannot upload more than 1 file at a time');\n        return;\n      }\n\n      if ((files?.length ?? 0) + acceptedFiles.length > maxFileCount) {\n        toast.error(`Cannot upload more than ${maxFileCount} files`);\n        return;\n      }\n\n      const newFiles = acceptedFiles.map((file) =>\n        Object.assign(file, {\n          preview: URL.createObjectURL(file),\n        }),\n      );\n\n      const updatedFiles = files ? [...files, ...newFiles] : newFiles;\n\n      setFiles(updatedFiles);\n\n      if (rejectedFiles.length > 0) {\n        rejectedFiles.forEach(({ file }) => {\n          toast.error(`File ${file.name} was rejected`);\n        });\n      }\n\n      if (\n        onUpload &&\n        updatedFiles.length > 0 &&\n        updatedFiles.length <= maxFileCount\n      ) {\n        const target =\n          updatedFiles.length > 0 ? `${updatedFiles.length} files` : `file`;\n\n        toast.promise(onUpload(updatedFiles), {\n          loading: `Uploading ${target}...`,\n          success: () => {\n            setFiles([]);\n            return `${target} uploaded`;\n          },\n          error: `Failed to upload ${target}`,\n        });\n      }\n    },\n\n    [files, maxFileCount, multiple, onUpload, setFiles],\n  );\n\n  function onRemove(index: number) {\n    if (!files) return;\n    const newFiles = files.filter((_, i) => i !== index);\n    setFiles(newFiles);\n    onValueChange?.(newFiles);\n  }\n\n  // Revoke preview url when component unmounts\n  React.useEffect(() => {\n    return () => {\n      if (!files) return;\n      files.forEach((file) => {\n        if (isFileWithPreview(file)) {\n          URL.revokeObjectURL(file.preview);\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const isDisabled = disabled || (files?.length ?? 0) >= maxFileCount;\n\n  return (\n    <div className=\"relative flex flex-col gap-6 overflow-hidden\">\n      <Dropzone\n        onDrop={onDrop}\n        accept={accept}\n        maxSize={maxSize}\n        maxFiles={maxFileCount}\n        multiple={maxFileCount > 1 || multiple}\n        disabled={isDisabled}\n      >\n        {({ getRootProps, getInputProps, isDragActive }) => (\n          <div\n            {...getRootProps()}\n            className={cn(\n              'group relative grid h-52 w-full cursor-pointer place-items-center rounded-lg border-2 border-dashed border-muted-foreground/25 px-5 py-2.5 text-center transition hover:bg-muted/25',\n              'ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2',\n              isDragActive && 'border-muted-foreground/50',\n              isDisabled && 'pointer-events-none opacity-60',\n              className,\n            )}\n            {...dropzoneProps}\n          >\n            <input {...getInputProps()} />\n            {isDragActive ? (\n              <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                <div className=\"rounded-full border border-dashed p-3\">\n                  <Upload\n                    className=\"size-7 text-muted-foreground\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <p className=\"font-medium text-muted-foreground\">\n                  Drop the files here\n                </p>\n              </div>\n            ) : (\n              <div className=\"flex flex-col items-center justify-center gap-4 sm:px-5\">\n                <div className=\"rounded-full border border-dashed p-3\">\n                  <Upload\n                    className=\"size-7 text-muted-foreground\"\n                    aria-hidden=\"true\"\n                  />\n                </div>\n                <div className=\"flex flex-col gap-px\">\n                  <p className=\"font-medium text-muted-foreground\">\n                    Drag {`'n'`} drop files here, or click to select files\n                  </p>\n                  <p className=\"text-sm text-muted-foreground/70\">\n                    You can upload\n                    {maxFileCount > 1\n                      ? ` ${maxFileCount === Infinity ? 'multiple' : maxFileCount}\n                      files (up to ${formatBytes(maxSize)} each)`\n                      : ` a file with ${formatBytes(maxSize)}`}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </Dropzone>\n      {files?.length ? (\n        <ScrollArea className=\"h-fit w-full px-3\">\n          <div className=\"flex max-h-48 flex-col gap-4\">\n            {files?.map((file, index) => (\n              <FileCard\n                key={index}\n                file={file}\n                onRemove={() => onRemove(index)}\n                progress={progresses?.[file.name]}\n              />\n            ))}\n          </div>\n        </ScrollArea>\n      ) : null}\n    </div>\n  );\n}\n","import { useTranslate } from '@/hooks/common-hooks';\nimport { cn } from '@/lib/utils';\nimport { useFormContext } from 'react-hook-form';\nimport { SingleFormSlider } from '../ui/dual-range-slider';\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '../ui/form';\nimport { Input } from '../ui/input';\nimport { Switch } from '../ui/switch';\n\ntype SliderInputSwitchFormFieldProps = {\n  max?: number;\n  min?: number;\n  step?: number;\n  name: string;\n  label: string;\n  defaultValue?: number;\n  className?: string;\n  checkName: string;\n};\n\nexport function SliderInputSwitchFormField({\n  max,\n  min,\n  step,\n  label,\n  name,\n  defaultValue,\n  className,\n  checkName,\n}: SliderInputSwitchFormFieldProps) {\n  const form = useFormContext();\n  const disabled = !form.watch(checkName);\n  const { t } = useTranslate('chat');\n\n  return (\n    <FormField\n      control={form.control}\n      name={name}\n      defaultValue={defaultValue}\n      render={({ field }) => (\n        <FormItem>\n          <FormLabel tooltip={t(`${label}Tip`)}>{t(label)}</FormLabel>\n          <div\n            className={cn('flex items-center gap-4 justify-between', className)}\n          >\n            <FormField\n              control={form.control}\n              name={checkName}\n              render={({ field }) => (\n                <FormItem>\n                  <FormControl>\n                    <Switch\n                      checked={field.value}\n                      onCheckedChange={field.onChange}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <FormControl>\n              <SingleFormSlider\n                {...field}\n                max={max}\n                min={min}\n                step={step}\n                disabled={disabled}\n              ></SingleFormSlider>\n            </FormControl>\n            <FormControl>\n              <Input\n                disabled={disabled}\n                type={'number'}\n                className=\"h-7 w-20\"\n                max={max}\n                min={min}\n                step={step}\n                {...field}\n              ></Input>\n            </FormControl>\n          </div>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n}\n","import { LlmModelType, ModelVariableType } from '@/constants/knowledge';\nimport { useTranslate } from '@/hooks/common-hooks';\nimport { useComposeLlmOptionsByModelTypes } from '@/hooks/llm-hooks';\nimport { camelCase } from 'lodash';\nimport { useCallback } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { z } from 'zod';\nimport {\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '../ui/form';\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from '../ui/select';\nimport { SliderInputSwitchFormField } from './slider';\nimport { useHandleFreedomChange } from './use-watch-change';\n\ninterface LlmSettingFieldItemsProps {\n  prefix?: string;\n}\n\nexport const LlmSettingSchema = {\n  llm_id: z.string(),\n  temperature: z.coerce.number(),\n  top_p: z.string(),\n  presence_penalty: z.coerce.number(),\n  frequency_penalty: z.coerce.number(),\n  temperatureEnabled: z.boolean(),\n  topPEnabled: z.boolean(),\n  presencePenaltyEnabled: z.boolean(),\n  frequencyPenaltyEnabled: z.boolean(),\n  maxTokensEnabled: z.boolean(),\n};\n\nexport function LlmSettingFieldItems({ prefix }: LlmSettingFieldItemsProps) {\n  const form = useFormContext();\n  const { t } = useTranslate('chat');\n  const modelOptions = useComposeLlmOptionsByModelTypes([\n    LlmModelType.Chat,\n    LlmModelType.Image2text,\n  ]);\n\n  // useWatchFreedomChange();\n\n  const handleChange = useHandleFreedomChange();\n\n  const parameterOptions = Object.values(ModelVariableType).map((x) => ({\n    label: t(camelCase(x)),\n    value: x,\n  }));\n\n  const getFieldWithPrefix = useCallback(\n    (name: string) => {\n      return prefix ? `${prefix}.${name}` : name;\n    },\n    [prefix],\n  );\n\n  return (\n    <div className=\"space-y-5\">\n      <FormField\n        control={form.control}\n        name={'llm_id'}\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>{t('model')}</FormLabel>\n            <FormControl>\n              <Select onValueChange={field.onChange} {...field}>\n                <SelectTrigger value={field.value}>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {modelOptions.map((x) => (\n                    <SelectGroup key={x.value}>\n                      <SelectLabel>{x.label}</SelectLabel>\n                      {x.options.map((y) => (\n                        <SelectItem\n                          value={y.value}\n                          key={y.value}\n                          disabled={y.disabled}\n                        >\n                          {y.label}\n                        </SelectItem>\n                      ))}\n                    </SelectGroup>\n                  ))}\n                </SelectContent>\n              </Select>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <FormField\n        control={form.control}\n        name={'parameter'}\n        render={({ field }) => (\n          <FormItem>\n            <FormLabel>{t('freedom')}</FormLabel>\n            <FormControl>\n              <Select\n                {...field}\n                onValueChange={(val) => {\n                  handleChange(val);\n                  field.onChange(val);\n                }}\n              >\n                <SelectTrigger>\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  {parameterOptions.map((x) => (\n                    <SelectItem value={x.value} key={x.value}>\n                      {x.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </FormControl>\n            <FormMessage />\n          </FormItem>\n        )}\n      />\n      <SliderInputSwitchFormField\n        name={getFieldWithPrefix('temperature')}\n        checkName=\"temperatureEnabled\"\n        label=\"temperature\"\n        max={1}\n        step={0.01}\n      ></SliderInputSwitchFormField>\n      <SliderInputSwitchFormField\n        name={getFieldWithPrefix('top_p')}\n        checkName=\"topPEnabled\"\n        label=\"topP\"\n        max={1}\n        step={0.01}\n      ></SliderInputSwitchFormField>\n      <SliderInputSwitchFormField\n        name={getFieldWithPrefix('presence_penalty')}\n        checkName=\"presencePenaltyEnabled\"\n        label=\"presencePenalty\"\n        max={1}\n        step={0.01}\n      ></SliderInputSwitchFormField>\n      <SliderInputSwitchFormField\n        name={getFieldWithPrefix('frequency_penalty')}\n        checkName=\"frequencyPenaltyEnabled\"\n        label=\"frequencyPenalty\"\n        max={1}\n        step={0.01}\n      ></SliderInputSwitchFormField>\n      <SliderInputSwitchFormField\n        name={getFieldWithPrefix('max_tokens')}\n        checkName=\"maxTokensEnabled\"\n        label=\"maxTokens\"\n        max={128000}\n      ></SliderInputSwitchFormField>\n    </div>\n  );\n}\n","import { settledModelVariableMap } from '@/constants/knowledge';\nimport { AgentFormContext } from '@/pages/agent/context';\nimport useGraphStore from '@/pages/agent/store';\nimport { useCallback, useContext } from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nexport function useHandleFreedomChange() {\n  const form = useFormContext();\n  const node = useContext(AgentFormContext);\n  const updateNodeForm = useGraphStore((state) => state.updateNodeForm);\n\n  const handleChange = useCallback(\n    (parameter: string) => {\n      const currentValues = { ...form.getValues() };\n      const values =\n        settledModelVariableMap[\n          parameter as keyof typeof settledModelVariableMap\n        ];\n\n      const nextValues = { ...currentValues, ...values };\n\n      if (node?.id) {\n        updateNodeForm(node?.id, nextValues);\n      }\n\n      for (const key in values) {\n        if (Object.prototype.hasOwnProperty.call(values, key)) {\n          const element = values[key];\n\n          form.setValue(key, element);\n        }\n      }\n    },\n    [form, node, updateNodeForm],\n  );\n\n  return handleChange;\n}\n","import { ArrowLeft } from 'lucide-react';\nimport { PropsWithChildren, ReactNode } from 'react';\nimport { Button } from './ui/button';\n\ninterface IPageHeaderProps extends PropsWithChildren {\n  back(): void;\n  title: ReactNode;\n}\n\nexport function PageHeader({ back, title, children }: IPageHeaderProps) {\n  return (\n    <header className=\"flex justify-between items-center border-b pr-9\">\n      <div className=\"flex items-center \">\n        <div className=\"flex items-center border-r p-1.5\">\n          <Button variant=\"ghost\" size=\"icon\" onClick={back}>\n            <ArrowLeft className=\"w-5 h-5\" />\n          </Button>\n        </div>\n        <div className=\"p-4\">\n          <h1 className=\"text-2xl font-semibold tracking-tight\">{title}</h1>\n        </div>\n      </div>\n      {children}\n    </header>\n  );\n}\n","'use client';\n\nimport * as ProgressPrimitive from '@radix-ui/react-progress';\nimport * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      'relative h-4 w-full overflow-hidden rounded-full bg-secondary',\n      className,\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n));\nProgress.displayName = ProgressPrimitive.Root.displayName;\n\nexport { Progress };\n","import * as React from 'react';\n\nimport { cn } from '@/lib/utils';\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<'textarea'>\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        'flex min-h-[80px] w-full rounded-md border border-input bg-colors-background-inverse-weak px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm overflow-hidden',\n        className,\n      )}\n      ref={ref}\n      {...props}\n    />\n  );\n});\nTextarea.displayName = 'Textarea';\n\nexport { Textarea };\n\ntype Value = string | readonly string[] | number | undefined;\n\nexport const BlurTextarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<'textarea'> & {\n    value: Value;\n    onChange(value: Value): void;\n  }\n>(({ value, onChange, ...props }, ref) => {\n  const [val, setVal] = React.useState<Value>();\n\n  const handleChange: React.ChangeEventHandler<HTMLTextAreaElement> =\n    React.useCallback((e) => {\n      setVal(e.target.value);\n    }, []);\n\n  const handleBlur: React.FocusEventHandler<HTMLTextAreaElement> =\n    React.useCallback(\n      (e) => {\n        onChange?.(e.target.value);\n      },\n      [onChange],\n    );\n\n  React.useEffect(() => {\n    setVal(value);\n  }, [value]);\n\n  return (\n    <Textarea\n      {...props}\n      value={val}\n      onBlur={handleBlur}\n      onChange={handleChange}\n      ref={ref}\n    ></Textarea>\n  );\n});\n","import { RAGFlowNodeType } from '@/interfaces/database/flow';\nimport { HandleType, Position } from '@xyflow/react';\nimport { createContext } from 'react';\nimport { useAddNode } from './hooks/use-add-node';\nimport { useCacheChatLog } from './hooks/use-cache-chat-log';\nimport { useShowLogSheet } from './hooks/use-show-drawer';\n\nexport const AgentFormContext = createContext<RAGFlowNodeType | undefined>(\n  undefined,\n);\n\ntype AgentInstanceContextType = Pick<\n  ReturnType<typeof useAddNode>,\n  'addCanvasNode'\n>;\n\nexport const AgentInstanceContext = createContext<AgentInstanceContextType>(\n  {} as AgentInstanceContextType,\n);\n\ntype AgentChatContextType = Pick<\n  ReturnType<typeof useShowLogSheet>,\n  'showLogSheet'\n>;\n\nexport const AgentChatContext = createContext<AgentChatContextType>(\n  {} as AgentChatContextType,\n);\n\ntype AgentChatLogContextType = Pick<\n  ReturnType<typeof useCacheChatLog>,\n  'addEventList' | 'setCurrentMessageId'\n>;\n\nexport const AgentChatLogContext = createContext<AgentChatLogContextType>(\n  {} as AgentChatLogContextType,\n);\n\nexport type HandleContextType = {\n  nodeId?: string;\n  id?: string;\n  type: HandleType;\n  position: Position;\n};\n\nexport const HandleContext = createContext<HandleContextType>(\n  {} as HandleContextType,\n);\n","import { RAGFlowNodeType } from '@/interfaces/database/flow';\nimport type {} from '@redux-devtools/extension';\nimport {\n  Connection,\n  Edge,\n  EdgeChange,\n  EdgeMouseHandler,\n  OnConnect,\n  OnEdgesChange,\n  OnNodesChange,\n  OnSelectionChangeFunc,\n  OnSelectionChangeParams,\n  addEdge,\n  applyEdgeChanges,\n  applyNodeChanges,\n} from '@xyflow/react';\nimport { omit } from 'lodash';\nimport differenceWith from 'lodash/differenceWith';\nimport intersectionWith from 'lodash/intersectionWith';\nimport lodashSet from 'lodash/set';\nimport { create } from 'zustand';\nimport { devtools } from 'zustand/middleware';\nimport { immer } from 'zustand/middleware/immer';\nimport { NodeHandleId, Operator, SwitchElseTo } from './constant';\nimport {\n  duplicateNodeForm,\n  generateDuplicateNode,\n  generateNodeNamesWithIncreasingIndex,\n  getOperatorIndex,\n  isEdgeEqual,\n  mapEdgeMouseEvent,\n} from './utils';\nimport { deleteAllDownstreamAgentsAndTool } from './utils/delete-node';\n\nexport type RFState = {\n  nodes: RAGFlowNodeType[];\n  edges: Edge[];\n  selectedNodeIds: string[];\n  selectedEdgeIds: string[];\n  clickedNodeId: string; // currently selected node\n  clickedToolId: string; // currently selected tool id\n  onNodesChange: OnNodesChange<RAGFlowNodeType>;\n  onEdgesChange: OnEdgesChange;\n  onEdgeMouseEnter?: EdgeMouseHandler<Edge>;\n  /** This event handler is called when mouse of a user leaves an edge */\n  onEdgeMouseLeave?: EdgeMouseHandler<Edge>;\n  onConnect: OnConnect;\n  setNodes: (nodes: RAGFlowNodeType[]) => void;\n  setEdges: (edges: Edge[]) => void;\n  setEdgesByNodeId: (nodeId: string, edges: Edge[]) => void;\n  updateNodeForm: (\n    nodeId: string,\n    values: any,\n    path?: (string | number)[],\n  ) => RAGFlowNodeType[];\n  onSelectionChange: OnSelectionChangeFunc;\n  addNode: (nodes: RAGFlowNodeType) => void;\n  getNode: (id?: string | null) => RAGFlowNodeType | undefined;\n  addEdge: (connection: Connection) => void;\n  getEdge: (id: string) => Edge | undefined;\n  updateFormDataOnConnect: (connection: Connection) => void;\n  updateSwitchFormData: (\n    source: string,\n    sourceHandle?: string | null,\n    target?: string | null,\n    isConnecting?: boolean,\n  ) => void;\n  deletePreviousEdgeOfClassificationNode: (connection: Connection) => void;\n  duplicateNode: (id: string, name: string) => void;\n  duplicateIterationNode: (id: string, name: string) => void;\n  deleteEdge: () => void;\n  deleteEdgeById: (id: string) => void;\n  deleteNodeById: (id: string) => void;\n  deleteAgentDownstreamNodesById: (id: string) => void;\n  deleteAgentToolNodeById: (id: string) => void;\n  deleteIterationNodeById: (id: string) => void;\n  deleteEdgeBySourceAndSourceHandle: (connection: Partial<Connection>) => void;\n  findNodeByName: (operatorName: Operator) => RAGFlowNodeType | undefined;\n  updateMutableNodeFormItem: (id: string, field: string, value: any) => void;\n  getOperatorTypeFromId: (id?: string | null) => string | undefined;\n  getParentIdById: (id?: string | null) => string | undefined;\n  updateNodeName: (id: string, name: string) => void;\n  generateNodeName: (name: string) => string;\n  setClickedNodeId: (id?: string) => void;\n  setClickedToolId: (id?: string) => void;\n  findUpstreamNodeById: (id?: string | null) => RAGFlowNodeType | undefined;\n};\n\n// this is our useStore hook that we can use in our components to get parts of the store and call actions\nconst useGraphStore = create<RFState>()(\n  devtools(\n    immer((set, get) => ({\n      nodes: [] as RAGFlowNodeType[],\n      edges: [] as Edge[],\n      selectedNodeIds: [] as string[],\n      selectedEdgeIds: [] as string[],\n      clickedNodeId: '',\n      clickedToolId: '',\n      onNodesChange: (changes) => {\n        set({\n          nodes: applyNodeChanges(changes, get().nodes),\n        });\n      },\n      onEdgesChange: (changes: EdgeChange[]) => {\n        set({\n          edges: applyEdgeChanges(changes, get().edges),\n        });\n      },\n      onEdgeMouseEnter: (event, edge) => {\n        const { edges, setEdges } = get();\n        const edgeId = edge.id;\n\n        // Updates edge\n        setEdges(mapEdgeMouseEvent(edges, edgeId, true));\n      },\n      onEdgeMouseLeave: (event, edge) => {\n        const { edges, setEdges } = get();\n        const edgeId = edge.id;\n\n        // Updates edge\n        setEdges(mapEdgeMouseEvent(edges, edgeId, false));\n      },\n      onConnect: (connection: Connection) => {\n        const {\n          deletePreviousEdgeOfClassificationNode,\n          updateFormDataOnConnect,\n        } = get();\n        set({\n          edges: addEdge(connection, get().edges),\n        });\n        deletePreviousEdgeOfClassificationNode(connection);\n        updateFormDataOnConnect(connection);\n      },\n      onSelectionChange: ({ nodes, edges }: OnSelectionChangeParams) => {\n        set({\n          selectedEdgeIds: edges.map((x) => x.id),\n          selectedNodeIds: nodes.map((x) => x.id),\n        });\n      },\n      setNodes: (nodes: RAGFlowNodeType[]) => {\n        set({ nodes });\n      },\n      setEdges: (edges: Edge[]) => {\n        set({ edges });\n      },\n      setEdgesByNodeId: (nodeId: string, currentDownstreamEdges: Edge[]) => {\n        const { edges, setEdges } = get();\n        // the previous downstream edge of this node\n        const previousDownstreamEdges = edges.filter(\n          (x) => x.source === nodeId,\n        );\n        const isDifferent =\n          previousDownstreamEdges.length !== currentDownstreamEdges.length ||\n          !previousDownstreamEdges.every((x) =>\n            currentDownstreamEdges.some(\n              (y) =>\n                y.source === x.source &&\n                y.target === x.target &&\n                y.sourceHandle === x.sourceHandle,\n            ),\n          ) ||\n          !currentDownstreamEdges.every((x) =>\n            previousDownstreamEdges.some(\n              (y) =>\n                y.source === x.source &&\n                y.target === x.target &&\n                y.sourceHandle === x.sourceHandle,\n            ),\n          );\n\n        const intersectionDownstreamEdges = intersectionWith(\n          previousDownstreamEdges,\n          currentDownstreamEdges,\n          isEdgeEqual,\n        );\n        if (isDifferent) {\n          // other operator's edges\n          const irrelevantEdges = edges.filter((x) => x.source !== nodeId);\n          // the added downstream edges\n          const selfAddedDownstreamEdges = differenceWith(\n            currentDownstreamEdges,\n            intersectionDownstreamEdges,\n            isEdgeEqual,\n          );\n          setEdges([\n            ...irrelevantEdges,\n            ...intersectionDownstreamEdges,\n            ...selfAddedDownstreamEdges,\n          ]);\n        }\n      },\n      addNode: (node: RAGFlowNodeType) => {\n        set({ nodes: get().nodes.concat(node) });\n      },\n      getNode: (id?: string | null) => {\n        return get().nodes.find((x) => x.id === id);\n      },\n      getOperatorTypeFromId: (id?: string | null) => {\n        return get().getNode(id)?.data?.label;\n      },\n      getParentIdById: (id?: string | null) => {\n        return get().getNode(id)?.parentId;\n      },\n      addEdge: (connection: Connection) => {\n        set({\n          edges: addEdge(connection, get().edges),\n        });\n        get().deletePreviousEdgeOfClassificationNode(connection);\n        //  TODO: This may not be reasonable. You need to choose between listening to changes in the form.\n        get().updateFormDataOnConnect(connection);\n      },\n      getEdge: (id: string) => {\n        return get().edges.find((x) => x.id === id);\n      },\n      updateFormDataOnConnect: (connection: Connection) => {\n        const { getOperatorTypeFromId, updateNodeForm, updateSwitchFormData } =\n          get();\n        const { source, target, sourceHandle } = connection;\n        const operatorType = getOperatorTypeFromId(source);\n        if (source) {\n          switch (operatorType) {\n            case Operator.Relevant:\n              updateNodeForm(source, { [sourceHandle as string]: target });\n              break;\n            case Operator.Categorize:\n              if (sourceHandle)\n                updateNodeForm(source, target, [\n                  'category_description',\n                  sourceHandle,\n                  'to',\n                ]);\n              break;\n            case Operator.Switch: {\n              updateSwitchFormData(source, sourceHandle, target, true);\n              break;\n            }\n            default:\n              break;\n          }\n        }\n      },\n      deletePreviousEdgeOfClassificationNode: (connection: Connection) => {\n        // Delete the edge on the classification node or relevant node anchor when the anchor is connected to other nodes\n        const { edges, getOperatorTypeFromId, deleteEdgeById } = get();\n        // the node containing the anchor\n        const anchoredNodes = [\n          Operator.Categorize,\n          Operator.Relevant,\n          // Operator.Switch,\n        ];\n        if (\n          anchoredNodes.some(\n            (x) => x === getOperatorTypeFromId(connection.source),\n          )\n        ) {\n          const previousEdge = edges.find(\n            (x) =>\n              x.source === connection.source &&\n              x.sourceHandle === connection.sourceHandle &&\n              x.target !== connection.target,\n          );\n          if (previousEdge) {\n            deleteEdgeById(previousEdge.id);\n          }\n        }\n      },\n      duplicateNode: (id: string, name: string) => {\n        const { getNode, addNode, generateNodeName, duplicateIterationNode } =\n          get();\n        const node = getNode(id);\n\n        if (node?.data.label === Operator.Iteration) {\n          duplicateIterationNode(id, name);\n          return;\n        }\n\n        addNode({\n          ...(node || {}),\n          data: {\n            ...duplicateNodeForm(node?.data),\n            name: generateNodeName(name),\n          },\n          ...generateDuplicateNode(node?.position, node?.data?.label),\n        });\n      },\n      duplicateIterationNode: (id: string, name: string) => {\n        const { getNode, generateNodeName, nodes } = get();\n        const node = getNode(id);\n\n        const iterationNode: RAGFlowNodeType = {\n          ...(node || {}),\n          data: {\n            ...(node?.data || { label: Operator.Iteration, form: {} }),\n            name: generateNodeName(name),\n          },\n          ...generateDuplicateNode(node?.position, node?.data?.label),\n        };\n\n        const children = nodes\n          .filter((x) => x.parentId === node?.id)\n          .map((x) => ({\n            ...(x || {}),\n            data: {\n              ...duplicateNodeForm(x?.data),\n              name: generateNodeName(x.data.name),\n            },\n            ...omit(generateDuplicateNode(x?.position, x?.data?.label), [\n              'position',\n            ]),\n            parentId: iterationNode.id,\n          }));\n\n        set({ nodes: nodes.concat(iterationNode, ...children) });\n      },\n      deleteEdge: () => {\n        const { edges, selectedEdgeIds } = get();\n        set({\n          edges: edges.filter((edge) =>\n            selectedEdgeIds.every((x) => x !== edge.id),\n          ),\n        });\n      },\n      deleteEdgeById: (id: string) => {\n        const {\n          edges,\n          updateNodeForm,\n          getOperatorTypeFromId,\n          updateSwitchFormData,\n        } = get();\n        const currentEdge = edges.find((x) => x.id === id);\n\n        if (currentEdge) {\n          const { source, sourceHandle, target } = currentEdge;\n          const operatorType = getOperatorTypeFromId(source);\n          // After deleting the edge, set the corresponding field in the node's form field to undefined\n          switch (operatorType) {\n            case Operator.Relevant:\n              updateNodeForm(source, {\n                [sourceHandle as string]: undefined,\n              });\n              break;\n            case Operator.Categorize:\n              if (sourceHandle)\n                updateNodeForm(source, undefined, [\n                  'category_description',\n                  sourceHandle,\n                  'to',\n                ]);\n              break;\n            case Operator.Switch: {\n              updateSwitchFormData(source, sourceHandle, target, false);\n              break;\n            }\n            default:\n              break;\n          }\n        }\n        set({\n          edges: edges.filter((edge) => edge.id !== id),\n        });\n      },\n      deleteEdgeBySourceAndSourceHandle: ({\n        source,\n        sourceHandle,\n      }: Partial<Connection>) => {\n        const { edges } = get();\n        const nextEdges = edges.filter(\n          (edge) =>\n            edge.source !== source || edge.sourceHandle !== sourceHandle,\n        );\n        set({\n          edges: nextEdges,\n        });\n      },\n      deleteNodeById: (id: string) => {\n        const {\n          nodes,\n          edges,\n          getOperatorTypeFromId,\n          deleteAgentDownstreamNodesById,\n        } = get();\n        if (getOperatorTypeFromId(id) === Operator.Agent) {\n          deleteAgentDownstreamNodesById(id);\n          return;\n        }\n        set({\n          nodes: nodes.filter((node) => node.id !== id),\n          edges: edges\n            .filter((edge) => edge.source !== id)\n            .filter((edge) => edge.target !== id),\n        });\n      },\n      deleteAgentDownstreamNodesById: (id) => {\n        const { edges, nodes } = get();\n\n        const { downstreamAgentAndToolNodeIds, downstreamAgentAndToolEdges } =\n          deleteAllDownstreamAgentsAndTool(id, edges);\n\n        set({\n          nodes: nodes.filter(\n            (node) =>\n              !downstreamAgentAndToolNodeIds.some((x) => x === node.id) &&\n              node.id !== id,\n          ),\n          edges: edges.filter(\n            (edge) =>\n              edge.source !== id &&\n              edge.target !== id &&\n              !downstreamAgentAndToolEdges.some((x) => x.id === edge.id),\n          ),\n        });\n      },\n      deleteAgentToolNodeById: (id) => {\n        const { edges, deleteEdgeById, deleteNodeById } = get();\n\n        const edge = edges.find(\n          (x) => x.source === id && x.sourceHandle === NodeHandleId.Tool,\n        );\n\n        if (edge) {\n          deleteEdgeById(edge.id);\n          deleteNodeById(edge.target);\n        }\n      },\n      deleteIterationNodeById: (id: string) => {\n        const { nodes, edges } = get();\n        const children = nodes.filter((node) => node.parentId === id);\n        set({\n          nodes: nodes.filter((node) => node.id !== id && node.parentId !== id),\n          edges: edges.filter(\n            (edge) =>\n              edge.source !== id &&\n              edge.target !== id &&\n              !children.some(\n                (child) => edge.source === child.id && edge.target === child.id,\n              ),\n          ),\n        });\n      },\n      findNodeByName: (name: Operator) => {\n        return get().nodes.find((x) => x.data.label === name);\n      },\n      updateNodeForm: (\n        nodeId: string,\n        values: any,\n        path: (string | number)[] = [],\n      ) => {\n        const nextNodes = get().nodes.map((node) => {\n          if (node.id === nodeId) {\n            let nextForm: Record<string, unknown> = { ...node.data.form };\n            if (path.length === 0) {\n              nextForm = Object.assign(nextForm, values);\n            } else {\n              lodashSet(nextForm, path, values);\n            }\n            return {\n              ...node,\n              data: {\n                ...node.data,\n                form: nextForm,\n              },\n            } as any;\n          }\n\n          return node;\n        });\n        set({\n          nodes: nextNodes,\n        });\n\n        return nextNodes;\n      },\n      updateSwitchFormData: (source, sourceHandle, target, isConnecting) => {\n        const { updateNodeForm, edges } = get();\n        if (sourceHandle) {\n          // A handle will connect to multiple downstream nodes\n          let currentHandleTargets = edges\n            .filter(\n              (x) =>\n                x.source === source &&\n                x.sourceHandle === sourceHandle &&\n                typeof x.target === 'string',\n            )\n            .map((x) => x.target);\n\n          let targets: string[] = currentHandleTargets;\n          if (target) {\n            if (!isConnecting) {\n              targets = currentHandleTargets.filter((x) => x !== target);\n            }\n          }\n\n          if (sourceHandle === SwitchElseTo) {\n            updateNodeForm(source, targets, [SwitchElseTo]);\n          } else {\n            const operatorIndex = getOperatorIndex(sourceHandle);\n            if (operatorIndex) {\n              updateNodeForm(source, targets, [\n                'conditions',\n                Number(operatorIndex) - 1, // The index is the conditions form index\n                'to',\n              ]);\n            }\n          }\n        }\n      },\n      updateMutableNodeFormItem: (id: string, field: string, value: any) => {\n        const { nodes } = get();\n        const idx = nodes.findIndex((x) => x.id === id);\n        if (idx) {\n          lodashSet(nodes, [idx, 'data', 'form', field], value);\n        }\n      },\n      updateNodeName: (id, name) => {\n        if (id) {\n          set({\n            nodes: get().nodes.map((node) => {\n              if (node.id === id) {\n                node.data.name = name;\n              }\n\n              return node;\n            }),\n          });\n        }\n      },\n      setClickedNodeId: (id?: string) => {\n        set({ clickedNodeId: id });\n      },\n      generateNodeName: (name: string) => {\n        const { nodes } = get();\n\n        return generateNodeNamesWithIncreasingIndex(name, nodes);\n      },\n      setClickedToolId: (id?: string) => {\n        set({ clickedToolId: id });\n      },\n      findUpstreamNodeById: (id) => {\n        const { edges, getNode } = get();\n        const edge = edges.find((x) => x.target === id);\n        return getNode(edge?.source);\n      },\n    })),\n    { name: 'graph', trace: true },\n  ),\n);\n\nexport default useGraphStore;\n","import {\n  IAgentForm,\n  ICategorizeItem,\n  ICategorizeItemResult,\n} from '@/interfaces/database/agent';\nimport { DSLComponents, RAGFlowNodeType } from '@/interfaces/database/flow';\nimport { removeUselessFieldsFromValues } from '@/utils/form';\nimport { Edge, Node, Position, XYPosition } from '@xyflow/react';\nimport { FormInstance, FormListFieldData } from 'antd';\nimport { humanId } from 'human-id';\nimport { curry, get, intersectionWith, isEqual, omit, sample } from 'lodash';\nimport pipe from 'lodash/fp/pipe';\nimport isObject from 'lodash/isObject';\nimport { v4 as uuidv4 } from 'uuid';\nimport {\n  CategorizeAnchorPointPositions,\n  NoDebugOperatorsList,\n  NodeMap,\n  Operator,\n} from './constant';\nimport { IPosition } from './interface';\n\nconst buildEdges = (\n  operatorIds: string[],\n  currentId: string,\n  allEdges: Edge[],\n  isUpstream = false,\n  componentName: string,\n  nodeParams: Record<string, unknown>,\n) => {\n  operatorIds.forEach((cur) => {\n    const source = isUpstream ? cur : currentId;\n    const target = isUpstream ? currentId : cur;\n    if (!allEdges.some((e) => e.source === source && e.target === target)) {\n      const edge: Edge = {\n        id: uuidv4(),\n        label: '',\n        // type: 'step',\n        source: source,\n        target: target,\n        // markerEnd: {\n        //   type: MarkerType.ArrowClosed,\n        //   color: 'rgb(157 149 225)',\n        //   width: 20,\n        //   height: 20,\n        // },\n      };\n      if (componentName === Operator.Categorize && !isUpstream) {\n        const categoryDescription =\n          nodeParams.category_description as ICategorizeItemResult;\n\n        const name = Object.keys(categoryDescription).find(\n          (x) => categoryDescription[x].to === target,\n        );\n\n        if (name) {\n          edge.sourceHandle = name;\n        }\n      }\n      allEdges.push(edge);\n    }\n  });\n};\n\nexport const buildNodesAndEdgesFromDSLComponents = (data: DSLComponents) => {\n  const nodes: Node[] = [];\n  let edges: Edge[] = [];\n\n  Object.entries(data).forEach(([key, value]) => {\n    const downstream = [...value.downstream];\n    const upstream = [...value.upstream];\n    const { component_name: componentName, params } = value.obj;\n    nodes.push({\n      id: key,\n      type: NodeMap[value.obj.component_name as Operator] || 'ragNode',\n      position: { x: 0, y: 0 },\n      data: {\n        label: componentName,\n        name: humanId(),\n        form: params,\n      },\n      sourcePosition: Position.Left,\n      targetPosition: Position.Right,\n    });\n\n    buildEdges(upstream, key, edges, true, componentName, params);\n    buildEdges(downstream, key, edges, false, componentName, params);\n  });\n\n  return { nodes, edges };\n};\n\nconst buildComponentDownstreamOrUpstream = (\n  edges: Edge[],\n  nodeId: string,\n  isBuildDownstream = true,\n  nodes: Node[],\n) => {\n  return edges\n    .filter((y) => {\n      const node = nodes.find((x) => x.id === nodeId);\n      let isNotUpstreamTool = true;\n      if (isBuildDownstream && node?.data.label === Operator.Agent) {\n        isNotUpstreamTool = !y.target.startsWith(Operator.Tool); // Exclude the tool operator downstream of the agent operator\n      }\n      return (\n        y[isBuildDownstream ? 'source' : 'target'] === nodeId &&\n        isNotUpstreamTool\n      );\n    })\n    .map((y) => y[isBuildDownstream ? 'target' : 'source']);\n};\n\nconst removeUselessDataInTheOperator = curry(\n  (operatorName: string, params: Record<string, unknown>) => {\n    if (\n      operatorName === Operator.Generate ||\n      operatorName === Operator.Categorize\n    ) {\n      return removeUselessFieldsFromValues(params, '');\n    }\n    return params;\n  },\n);\n// initialize data for operators without parameters\n// const initializeOperatorParams = curry((operatorName: string, values: any) => {\n//   if (isEmpty(values)) {\n//     return initialFormValuesMap[operatorName as Operator];\n//   }\n//   return values;\n// });\n\nconst buildOperatorParams = (operatorName: string) =>\n  pipe(\n    removeUselessDataInTheOperator(operatorName),\n    // initializeOperatorParams(operatorName), // Final processing, for guarantee\n  );\n\nconst ExcludeOperators = [Operator.Note, Operator.Tool];\n\n// construct a dsl based on the node information of the graph\nexport const buildDslComponentsByGraph = (\n  nodes: RAGFlowNodeType[],\n  edges: Edge[],\n  oldDslComponents: DSLComponents,\n): DSLComponents => {\n  const components: DSLComponents = {};\n\n  nodes\n    ?.filter((x) => !ExcludeOperators.some((y) => y === x.data.label))\n    .forEach((x) => {\n      const id = x.id;\n      const operatorName = x.data.label;\n      components[id] = {\n        obj: {\n          ...(oldDslComponents[id]?.obj ?? {}),\n          component_name: operatorName,\n          params:\n            buildOperatorParams(operatorName)(\n              x.data.form as Record<string, unknown>,\n            ) ?? {},\n        },\n        downstream: buildComponentDownstreamOrUpstream(edges, id, true, nodes),\n        upstream: buildComponentDownstreamOrUpstream(edges, id, false, nodes),\n        parent_id: x?.parentId,\n      };\n    });\n\n  return components;\n};\n\nexport const receiveMessageError = (res: any) =>\n  res && (res?.response.status !== 200 || res?.data?.code !== 0);\n\n// Replace the id in the object with text\nexport const replaceIdWithText = (\n  obj: Record<string, unknown> | unknown[] | unknown,\n  getNameById: (id?: string) => string | undefined,\n) => {\n  if (isObject(obj)) {\n    const ret: Record<string, unknown> | unknown[] = Array.isArray(obj)\n      ? []\n      : {};\n    Object.keys(obj).forEach((key) => {\n      const val = (obj as Record<string, unknown>)[key];\n      const text = typeof val === 'string' ? getNameById(val) : undefined;\n      (ret as Record<string, unknown>)[key] = text\n        ? text\n        : replaceIdWithText(val, getNameById);\n    });\n\n    return ret;\n  }\n\n  return obj;\n};\n\nexport const isEdgeEqual = (previous: Edge, current: Edge) =>\n  previous.source === current.source &&\n  previous.target === current.target &&\n  previous.sourceHandle === current.sourceHandle;\n\nexport const buildNewPositionMap = (\n  currentKeys: string[],\n  previousPositionMap: Record<string, IPosition>,\n) => {\n  // index in use\n  const indexesInUse = Object.values(previousPositionMap).map((x) => x.idx);\n  const previousKeys = Object.keys(previousPositionMap);\n  const intersectionKeys = intersectionWith(\n    previousKeys,\n    currentKeys,\n    (categoryDataKey: string, positionMapKey: string) =>\n      categoryDataKey === positionMapKey,\n  );\n  // difference set\n  const currentDifferenceKeys = currentKeys.filter(\n    (x) => !intersectionKeys.some((y: string) => y === x),\n  );\n  const newPositionMap = currentDifferenceKeys.reduce<\n    Record<string, IPosition>\n  >((pre, cur) => {\n    // take a coordinate\n    const effectiveIdxes = CategorizeAnchorPointPositions.map(\n      (x, idx) => idx,\n    ).filter((x) => !indexesInUse.some((y) => y === x));\n    const idx = sample(effectiveIdxes);\n    if (idx !== undefined) {\n      indexesInUse.push(idx);\n      pre[cur] = { ...CategorizeAnchorPointPositions[idx], idx };\n    }\n\n    return pre;\n  }, {});\n\n  return { intersectionKeys, newPositionMap };\n};\n\nexport const isKeysEqual = (currentKeys: string[], previousKeys: string[]) => {\n  return isEqual(currentKeys.sort(), previousKeys.sort());\n};\n\nexport const getOperatorIndex = (handleTitle: string) => {\n  return handleTitle.split(' ').at(-1);\n};\n\n// Get the value of other forms except itself\nexport const getOtherFieldValues = (\n  form: FormInstance,\n  formListName: string = 'items',\n  field: FormListFieldData,\n  latestField: string,\n) =>\n  (form.getFieldValue([formListName]) ?? [])\n    .map((x: any) => {\n      return get(x, latestField);\n    })\n    .filter(\n      (x: string) =>\n        x !== form.getFieldValue([formListName, field.name, latestField]),\n    );\n\nexport const generateSwitchHandleText = (idx: number) => {\n  return `Case ${idx + 1}`;\n};\n\nexport const getNodeDragHandle = (nodeType?: string) => {\n  return nodeType === Operator.Note ? '.note-drag-handle' : undefined;\n};\n\nconst splitName = (name: string) => {\n  const names = name.split('_');\n  const type = names.at(0);\n  const index = Number(names.at(-1));\n\n  return { type, index };\n};\n\nexport const generateNodeNamesWithIncreasingIndex = (\n  name: string,\n  nodes: RAGFlowNodeType[],\n) => {\n  const templateNameList = nodes\n    .filter((x) => {\n      const temporaryName = x.data.name;\n\n      const { type, index } = splitName(temporaryName);\n\n      return (\n        temporaryName.match(/_/g)?.length === 1 &&\n        type === name &&\n        !isNaN(index)\n      );\n    })\n    .map((x) => {\n      const temporaryName = x.data.name;\n      const { index } = splitName(temporaryName);\n\n      return {\n        idx: index,\n        name: temporaryName,\n      };\n    })\n    .sort((a, b) => a.idx - b.idx);\n\n  let index: number = 0;\n  for (let i = 0; i < templateNameList.length; i++) {\n    const idx = templateNameList[i]?.idx;\n    const nextIdx = templateNameList[i + 1]?.idx;\n    if (idx + 1 !== nextIdx) {\n      index = idx + 1;\n      break;\n    }\n  }\n\n  return `${name}_${index}`;\n};\n\nexport const duplicateNodeForm = (nodeData?: RAGFlowNodeType['data']) => {\n  const form: Record<string, any> = { ...(nodeData?.form ?? {}) };\n\n  // Delete the downstream node corresponding to the to field of the Categorize operator\n  if (nodeData?.label === Operator.Categorize) {\n    form.category_description = Object.keys(form.category_description).reduce<\n      Record<string, Record<string, any>>\n    >((pre, cur) => {\n      pre[cur] = {\n        ...form.category_description[cur],\n        to: undefined,\n      };\n      return pre;\n    }, {});\n  }\n\n  // Delete the downstream nodes corresponding to the yes and no fields of the Relevant operator\n  if (nodeData?.label === Operator.Relevant) {\n    form.yes = undefined;\n    form.no = undefined;\n  }\n\n  return {\n    ...(nodeData ?? { label: '' }),\n    form,\n  };\n};\n\nexport const getDrawerWidth = () => {\n  return window.innerWidth > 1278 ? '40%' : 470;\n};\n\nexport const needsSingleStepDebugging = (label: string) => {\n  return !NoDebugOperatorsList.some((x) => (label as Operator) === x);\n};\n\n// Get the coordinates of the node relative to the Iteration node\nexport function getRelativePositionToIterationNode(\n  nodes: RAGFlowNodeType[],\n  position?: XYPosition, // relative position\n) {\n  if (!position) {\n    return;\n  }\n\n  const iterationNodes = nodes.filter(\n    (node) => node.data.label === Operator.Iteration,\n  );\n\n  for (const iterationNode of iterationNodes) {\n    const {\n      position: { x, y },\n      width,\n      height,\n    } = iterationNode;\n    const halfWidth = (width || 0) / 2;\n    if (\n      position.x >= x - halfWidth &&\n      position.x <= x + halfWidth &&\n      position.y >= y &&\n      position.y <= y + (height || 0)\n    ) {\n      return {\n        parentId: iterationNode.id,\n        position: { x: position.x - x + halfWidth, y: position.y - y },\n      };\n    }\n  }\n}\n\nexport const generateDuplicateNode = (\n  position?: XYPosition,\n  label?: string,\n) => {\n  const nextPosition = {\n    x: (position?.x || 0) + 50,\n    y: (position?.y || 0) + 50,\n  };\n\n  return {\n    selected: false,\n    dragging: false,\n    id: `${label}:${humanId()}`,\n    position: nextPosition,\n    dragHandle: getNodeDragHandle(label),\n  };\n};\n\nexport function convertToStringArray(\n  list?: Array<{ value: string | number | boolean }>,\n) {\n  if (!Array.isArray(list)) {\n    return [];\n  }\n  return list.map((x) => x.value);\n}\n\nexport function convertToObjectArray(list: Array<string | number | boolean>) {\n  if (!Array.isArray(list)) {\n    return [];\n  }\n  return list.map((x) => ({ value: x }));\n}\n\n/**\n   * convert the following object into a list\n   * \n   * {\n      \"product_related\": {\n      \"description\": \"The question is about product usage, appearance and how it works.\",\n      \"examples\": \"Why it always beaming?\\nHow to install it onto the wall?\\nIt leaks, what to do?\",\n      \"to\": \"generate:0\"\n      }\n      }\n*/\nexport const buildCategorizeListFromObject = (\n  categorizeItem: ICategorizeItemResult,\n) => {\n  // Categorize's to field has two data sources, with edges as the data source.\n  // Changes in the edge or to field need to be synchronized to the form field.\n  return Object.keys(categorizeItem)\n    .reduce<Array<ICategorizeItem>>((pre, cur) => {\n      // synchronize edge data to the to field\n\n      pre.push({\n        name: cur,\n        ...categorizeItem[cur],\n        examples: convertToObjectArray(categorizeItem[cur].examples),\n      });\n      return pre;\n    }, [])\n    .sort((a, b) => a.index - b.index);\n};\n\n/**\n   * Convert the list in the following form into an object\n   * {\n    \"items\": [\n      {\n        \"name\": \"Categorize 1\",\n        \"description\": \"111\",\n        \"examples\": [\"ddd\"],\n        \"to\": \"Retrieval:LazyEelsStick\"\n      }\n     ]\n    }\n*/\nexport const buildCategorizeObjectFromList = (list: Array<ICategorizeItem>) => {\n  return list.reduce<ICategorizeItemResult>((pre, cur) => {\n    if (cur?.name) {\n      pre[cur.name] = {\n        ...omit(cur, 'name', 'examples'),\n        examples: convertToStringArray(cur.examples),\n      };\n    }\n    return pre;\n  }, {});\n};\n\nexport function getAgentNodeTools(agentNode?: RAGFlowNodeType) {\n  const tools: IAgentForm['tools'] = get(agentNode, 'data.form.tools', []);\n  return tools;\n}\n\nexport function mapEdgeMouseEvent(\n  edges: Edge[],\n  edgeId: string,\n  isHovered: boolean,\n) {\n  const nextEdges = edges.map((element) =>\n    element.id === edgeId\n      ? {\n          ...element,\n          data: {\n            ...element.data,\n            isHovered,\n          },\n        }\n      : element,\n  );\n\n  return nextEdges;\n}\n","import { Edge } from '@xyflow/react';\nimport { NodeHandleId } from '../constant';\n\n// Get all downstream agent operators of the current agent operator\nexport function filterAllDownstreamAgentAndToolNodeIds(\n  edges: Edge[],\n  nodeIds: string[],\n) {\n  return nodeIds.reduce<string[]>((pre, nodeId) => {\n    const currentEdges = edges.filter(\n      (x) =>\n        x.source === nodeId &&\n        (x.sourceHandle === NodeHandleId.AgentBottom ||\n          x.sourceHandle === NodeHandleId.Tool),\n    );\n\n    const downstreamNodeIds: string[] = currentEdges.map((x) => x.target);\n\n    const ids = downstreamNodeIds.concat(\n      filterAllDownstreamAgentAndToolNodeIds(edges, downstreamNodeIds),\n    );\n\n    ids.forEach((x) => {\n      if (pre.every((y) => y !== x)) {\n        pre.push(x);\n      }\n    });\n\n    return pre;\n  }, []);\n}\n","import { Edge } from '@xyflow/react';\nimport { filterAllDownstreamAgentAndToolNodeIds } from './filter-downstream-nodes';\n\n// Delete all downstream agent and tool operators of the current agent operator\nexport function deleteAllDownstreamAgentsAndTool(\n  nodeId: string,\n  edges: Edge[],\n) {\n  const downstreamAgentAndToolNodeIds = filterAllDownstreamAgentAndToolNodeIds(\n    edges,\n    [nodeId],\n  );\n\n  const downstreamAgentAndToolEdges = downstreamAgentAndToolNodeIds.reduce<\n    Edge[]\n  >((pre, cur) => {\n    const relatedEdges = edges.filter(\n      (x) => x.source === cur || x.target === cur,\n    );\n\n    relatedEdges.forEach((x) => {\n      if (!pre.some((y) => y.id !== x.id)) {\n        pre.push(x);\n      }\n    });\n\n    return pre;\n  }, []);\n\n  return {\n    downstreamAgentAndToolNodeIds,\n    downstreamAgentAndToolEdges,\n  };\n}\n"],"names":["_excluded","_excluded2","ScrollBar","React","_ref","ref","className","_ref$orientation","orientation","props","_objectWithoutProperties","_jsx","ScrollAreaPrimitive","_objectSpread","cn","children","displayName","ScrollArea","_ref2","_jsxs","useCallbackRef","callback","callbackRef","current","_callbackRef$current","_len","arguments","length","args","Array","_key","call","apply","concat","useControllableState","prop","defaultProp","_ref2$onChange","onChange","_useUncontrolledState","uncontrolledState","value","_slicedToArray","prevValueRef","handleChange","useUncontrolledState","_useUncontrolledState2","uncontrolledProp","setUncontrolledProp","isControlled","undefined","nextValue","isFileWithPreview","file","preview","FilePreview","type","startsWith","src","alt","name","width","height","loading","FileText","FileCard","progress","onRemove","formatBytes","size","Progress","Button","variant","onClick","X","FileUploader","_files$length2","valueProp","onValueChange","onUpload","progresses","_props$accept","accept","_props$maxSize","maxSize","_props$maxFileCount","maxFileCount","_props$multiple","multiple","_props$disabled","disabled","dropzoneProps","_useControllableState","_useControllableState2","files","setFiles","onDrop","acceptedFiles","rejectedFiles","_files$length","toast","error","newFiles","map","Object","assign","URL","createObjectURL","updatedFiles","_toConsumableArray","forEach","_ref3","target","promise","success","revokeObjectURL","isDisabled","Dropzone","maxFiles","_ref4","getRootProps","getInputProps","isDragActive","Upload","Infinity","index","filter","_","i","SliderInputSwitchFormField","max","min","step","label","defaultValue","checkName","form","useFormContext","watch","t","useTranslate","FormField","control","render","field","FormItem","FormLabel","tooltip","FormControl","Switch","checked","onCheckedChange","FormMessage","SingleFormSlider","Input","LlmSettingSchema","llm_id","z","string","temperature","coerce","number","top_p","presence_penalty","frequency_penalty","temperatureEnabled","topPEnabled","presencePenaltyEnabled","frequencyPenaltyEnabled","maxTokensEnabled","LlmSettingFieldItems","prefix","modelOptions","useComposeLlmOptionsByModelTypes","LlmModelType","Chat","Image2text","node","useContext","AgentFormContext","updateNodeForm","useGraphStore","state","useCallback","parameter","currentValues","getValues","values","settledModelVariableMap","nextValues","key","id","prototype","hasOwnProperty","element","setValue","useHandleFreedomChange","parameterOptions","ModelVariableType","x","camelCase","getFieldWithPrefix","Select","SelectTrigger","SelectValue","SelectContent","SelectGroup","SelectLabel","options","y","SelectItem","val","PageHeader","back","title","ArrowLeft","ProgressPrimitive","style","transform","Textarea","BlurTextarea","_React$useState","_React$useState2","setVal","e","handleBlur","onBlur","createContext","AgentInstanceContext","AgentChatContext","AgentChatLogContext","HandleContext","create","devtools","immer","set","get","nodes","edges","selectedNodeIds","selectedEdgeIds","clickedNodeId","clickedToolId","onNodesChange","changes","applyNodeChanges","onEdgesChange","applyEdgeChanges","onEdgeMouseEnter","event","edge","_get","setEdges","edgeId","mapEdgeMouseEvent","onEdgeMouseLeave","_get2","onConnect","connection","_get3","deletePreviousEdgeOfClassificationNode","updateFormDataOnConnect","addEdge","onSelectionChange","setNodes","setEdgesByNodeId","nodeId","currentDownstreamEdges","_get4","previousDownstreamEdges","source","isDifferent","every","some","sourceHandle","intersectionDownstreamEdges","intersectionWith","isEdgeEqual","irrelevantEdges","selfAddedDownstreamEdges","differenceWith","addNode","getNode","find","getOperatorTypeFromId","_get$getNode","data","getParentIdById","_get$getNode2","parentId","getEdge","_get5","updateSwitchFormData","operatorType","Operator","Relevant","_defineProperty","Categorize","_get6","deleteEdgeById","previousEdge","duplicateNode","_node$data","_get7","generateNodeName","duplicateIterationNode","Iteration","duplicateNodeForm","generateDuplicateNode","position","_node$data2","_get8","iterationNode","_x$data","omit","deleteEdge","_get9","_get10","currentEdge","deleteEdgeBySourceAndSourceHandle","nextEdges","deleteNodeById","_get12","deleteAgentDownstreamNodesById","Agent","_get13","_deleteAllDownstreamA","deleteAllDownstreamAgentsAndTool","downstreamAgentAndToolNodeIds","downstreamAgentAndToolEdges","deleteAgentToolNodeById","_get14","NodeHandleId","Tool","deleteIterationNodeById","_get15","child","findNodeByName","path","nextNodes","nextForm","lodashSet","isConnecting","_get16","currentHandleTargets","targets","SwitchElseTo","operatorIndex","getOperatorIndex","Number","updateMutableNodeFormItem","idx","findIndex","updateNodeName","setClickedNodeId","generateNodeNamesWithIncreasingIndex","setClickedToolId","findUpstreamNodeById","_get19","trace","buildComponentDownstreamOrUpstream","isBuildDownstream","isNotUpstreamTool","removeUselessDataInTheOperator","curry","operatorName","params","Generate","removeUselessFieldsFromValues","buildOperatorParams","pipe","ExcludeOperators","Note","buildDslComponentsByGraph","oldDslComponents","components","_oldDslComponents$id$","_oldDslComponents$id","_buildOperatorParams","obj","component_name","downstream","upstream","parent_id","receiveMessageError","res","_res$data","response","status","code","previous","handleTitle","split","at","generateSwitchHandleText","getNodeDragHandle","nodeType","splitName","names","templateNameList","_temporaryName$match","temporaryName","_splitName","match","isNaN","sort","a","b","_templateNameList$i","_templateNameList","nodeData","_nodeData$form","category_description","keys","reduce","pre","cur","to","yes","no","getDrawerWidth","window","innerWidth","needsSingleStepDebugging","NoDebugOperatorsList","getRelativePositionToIterationNode","_step","iterationNodes","_iterator","_createForOfIteratorHelper","s","n","done","_iterationNode$positi","halfWidth","err","f","nextPosition","selected","dragging","humanId","dragHandle","convertToStringArray","list","isArray","convertToObjectArray","buildCategorizeListFromObject","categorizeItem","push","examples","buildCategorizeObjectFromList","getAgentNodeTools","agentNode","isHovered","filterAllDownstreamAgentAndToolNodeIds","nodeIds","downstreamNodeIds","AgentBottom"],"sourceRoot":""}