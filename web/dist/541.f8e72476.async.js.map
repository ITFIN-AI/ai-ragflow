{"version":3,"file":"541.f8e72476.async.js","mappings":"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","sources":["webpack:///./src/hooks/knowledge-hooks.ts","webpack:///./src/services/knowledge-service.ts"],"sourcesContent":["import { ResponsePostType } from '@/interfaces/database/base';\nimport {\n  IKnowledge,\n  IKnowledgeGraph,\n  IRenameTag,\n  ITestingResult,\n} from '@/interfaces/database/knowledge';\nimport i18n from '@/locales/config';\nimport kbService, {\n  deleteKnowledgeGraph,\n  getKnowledgeGraph,\n  listDataset,\n  listTag,\n  removeTag,\n  renameTag,\n} from '@/services/knowledge-service';\nimport {\n  useInfiniteQuery,\n  useIsMutating,\n  useMutation,\n  useMutationState,\n  useQuery,\n  useQueryClient,\n} from '@tanstack/react-query';\nimport { useDebounce } from 'ahooks';\nimport { message } from 'antd';\nimport { useState } from 'react';\nimport { useSearchParams } from 'umi';\nimport { useHandleSearchChange } from './logic-hooks';\nimport { useSetPaginationParams } from './route-hook';\n\nexport const useKnowledgeBaseId = (): string => {\n  const [searchParams] = useSearchParams();\n  const knowledgeBaseId = searchParams.get('id');\n\n  return knowledgeBaseId || '';\n};\n\nexport const useFetchKnowledgeBaseConfiguration = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledge>({\n    queryKey: ['fetchKnowledgeDetail'],\n    initialData: {} as IKnowledge,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await kbService.get_kb_detail({\n        kb_id: knowledgeBaseId,\n      });\n      return data?.data ?? {};\n    },\n  });\n\n  return { data, loading };\n};\n\nexport const useFetchKnowledgeList = (\n  shouldFilterListWithoutDocument: boolean = false,\n): {\n  list: IKnowledge[];\n  loading: boolean;\n} => {\n  const { data, isFetching: loading } = useQuery({\n    queryKey: ['fetchKnowledgeList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await listDataset();\n      const list = data?.data?.kbs ?? [];\n      return shouldFilterListWithoutDocument\n        ? list.filter((x: IKnowledge) => x.chunk_num > 0)\n        : list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useSelectKnowledgeOptions = () => {\n  const { list } = useFetchKnowledgeList();\n\n  const options = list?.map((item) => ({\n    label: item.name,\n    value: item.id,\n  }));\n\n  return options;\n};\n\nexport const useInfiniteFetchKnowledgeList = () => {\n  const { searchString, handleInputChange } = useHandleSearchChange();\n  const debouncedSearchString = useDebounce(searchString, { wait: 500 });\n\n  const PageSize = 30;\n\n  const {\n    data,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n  } = useInfiniteQuery({\n    queryKey: ['infiniteFetchKnowledgeList', debouncedSearchString],\n    queryFn: async ({ pageParam }) => {\n      const { data } = await listDataset({\n        page: pageParam,\n        page_size: PageSize,\n        keywords: debouncedSearchString,\n      });\n      const list = data?.data ?? [];\n      return list;\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, pages, lastPageParam) => {\n      if (lastPageParam * PageSize <= lastPage.total) {\n        return lastPageParam + 1;\n      }\n      return undefined;\n    },\n  });\n  return {\n    data,\n    loading: isFetching,\n    error,\n    fetchNextPage,\n    hasNextPage,\n    isFetching,\n    isFetchingNextPage,\n    status,\n    handleInputChange,\n    searchString,\n  };\n};\n\nexport const useCreateKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['infiniteFetchKnowledgeList'],\n    mutationFn: async (params: { id?: string; name: string }) => {\n      const { data = {} } = await kbService.createKb(params);\n      if (data.code === 0) {\n        message.success(\n          i18n.t(`message.${params?.id ? 'modified' : 'created'}`),\n        );\n        queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeList'] });\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, createKnowledge: mutateAsync };\n};\n\nexport const useDeleteKnowledge = () => {\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteKnowledge'],\n    mutationFn: async (id: string) => {\n      const { data } = await kbService.rmKb({ kb_id: id });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['infiniteFetchKnowledgeList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteKnowledge: mutateAsync };\n};\n\n//#region knowledge configuration\n\nexport const useUpdateKnowledge = (shouldFetchList = false) => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['saveKnowledge'],\n    mutationFn: async (params: Record<string, any>) => {\n      const { data = {} } = await kbService.updateKb({\n        kb_id: params?.kb_id ? params?.kb_id : knowledgeBaseId,\n        ...params,\n      });\n      if (data.code === 0) {\n        message.success(i18n.t(`message.updated`));\n        if (shouldFetchList) {\n          queryClient.invalidateQueries({\n            queryKey: ['fetchKnowledgeListByPage'],\n          });\n        } else {\n          queryClient.invalidateQueries({ queryKey: ['fetchKnowledgeDetail'] });\n        }\n      }\n      return data;\n    },\n  });\n\n  return { data, loading, saveKnowledgeConfiguration: mutateAsync };\n};\n\n//#endregion\n\n//#region Retrieval testing\n\nexport const useTestChunkRetrieval = (): ResponsePostType<ITestingResult> & {\n  testChunk: (...params: any[]) => void;\n} => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const { page, size: pageSize } = useSetPaginationParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['testChunk'], // This method is invalid\n    gcTime: 0,\n    mutationFn: async (values: any) => {\n      const { data } = await kbService.retrieval_test({\n        ...values,\n        kb_id: values.kb_id ?? knowledgeBaseId,\n        page,\n        size: pageSize,\n      });\n      if (data.code === 0) {\n        const res = data.data;\n        return {\n          ...res,\n          documents: res.doc_aggs,\n        };\n      }\n      return (\n        data?.data ?? {\n          chunks: [],\n          documents: [],\n          total: 0,\n        }\n      );\n    },\n  });\n\n  return {\n    data: data ?? { chunks: [], documents: [], total: 0 },\n    loading,\n    testChunk: mutateAsync,\n  };\n};\n\nexport const useTestChunkAllRetrieval = (): ResponsePostType<ITestingResult> & {\n  testChunkAll: (...params: any[]) => void;\n} => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n  const { page, size: pageSize } = useSetPaginationParams();\n\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['testChunkAll'], // This method is invalid\n    gcTime: 0,\n    mutationFn: async (values: any) => {\n      const { data } = await kbService.retrieval_test({\n        ...values,\n        kb_id: values.kb_id ?? knowledgeBaseId,\n        doc_ids: [],\n        page,\n        size: pageSize,\n      });\n      if (data.code === 0) {\n        const res = data.data;\n        return {\n          ...res,\n          documents: res.doc_aggs,\n        };\n      }\n      return (\n        data?.data ?? {\n          chunks: [],\n          documents: [],\n          total: 0,\n        }\n      );\n    },\n  });\n\n  return {\n    data: data ?? { chunks: [], documents: [], total: 0 },\n    loading,\n    testChunkAll: mutateAsync,\n  };\n};\n\nexport const useChunkIsTesting = () => {\n  return useIsMutating({ mutationKey: ['testChunk'] }) > 0;\n};\n\nexport const useSelectTestingResult = (): ITestingResult => {\n  const data = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.data;\n    },\n  });\n  return (data.at(-1) ?? {\n    chunks: [],\n    documents: [],\n    total: 0,\n  }) as ITestingResult;\n};\n\nexport const useSelectIsTestingSuccess = () => {\n  const status = useMutationState({\n    filters: { mutationKey: ['testChunk'] },\n    select: (mutation) => {\n      return mutation.state.status;\n    },\n  });\n  return status.at(-1) === 'success';\n};\n\nexport const useAllTestingSuccess = () => {\n  const status = useMutationState({\n    filters: { mutationKey: ['testChunkAll'] },\n    select: (mutation) => {\n      return mutation.state.status;\n    },\n  });\n  return status.at(-1) === 'success';\n};\n\nexport const useAllTestingResult = (): ITestingResult => {\n  const data = useMutationState({\n    filters: { mutationKey: ['testChunkAll'] },\n    select: (mutation) => {\n      return mutation.state.data;\n    },\n  });\n  return (data.at(-1) ?? {\n    chunks: [],\n    documents: [],\n    total: 0,\n  }) as ITestingResult;\n};\n//#endregion\n\n//#region tags\n\nexport const useFetchTagList = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagList'],\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await listTag(knowledgeBaseId);\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading };\n};\n\nexport const useDeleteTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['deleteTag'],\n    mutationFn: async (tags: string[]) => {\n      const { data } = await removeTag(knowledgeBaseId, tags);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, deleteTag: mutateAsync };\n};\n\nexport const useRenameTag = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['renameTag'],\n    mutationFn: async (params: IRenameTag) => {\n      const { data } = await renameTag(knowledgeBaseId, params);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.modified`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchTagList'],\n        });\n      }\n      return data?.data ?? [];\n    },\n  });\n\n  return { data, loading, renameTag: mutateAsync };\n};\n\nexport const useTagIsRenaming = () => {\n  return useIsMutating({ mutationKey: ['renameTag'] }) > 0;\n};\n\nexport const useFetchTagListByKnowledgeIds = () => {\n  const [knowledgeIds, setKnowledgeIds] = useState<string[]>([]);\n\n  const { data, isFetching: loading } = useQuery<Array<[string, number]>>({\n    queryKey: ['fetchTagListByKnowledgeIds'],\n    enabled: knowledgeIds.length > 0,\n    initialData: [],\n    gcTime: 0, // https://tanstack.com/query/latest/docs/framework/react/guides/caching?from=reactQueryV3\n    queryFn: async () => {\n      const { data } = await kbService.listTagByKnowledgeIds({\n        kb_ids: knowledgeIds.join(','),\n      });\n      const list = data?.data || [];\n      return list;\n    },\n  });\n\n  return { list: data, loading, setKnowledgeIds };\n};\n\n//#endregion\n\nexport function useFetchKnowledgeGraph() {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const { data, isFetching: loading } = useQuery<IKnowledgeGraph>({\n    queryKey: ['fetchKnowledgeGraph', knowledgeBaseId],\n    initialData: { graph: {}, mind_map: {} } as IKnowledgeGraph,\n    enabled: !!knowledgeBaseId,\n    gcTime: 0,\n    queryFn: async () => {\n      const { data } = await getKnowledgeGraph(knowledgeBaseId);\n      return data?.data;\n    },\n  });\n\n  return { data, loading };\n}\n\nexport const useRemoveKnowledgeGraph = () => {\n  const knowledgeBaseId = useKnowledgeBaseId();\n\n  const queryClient = useQueryClient();\n  const {\n    data,\n    isPending: loading,\n    mutateAsync,\n  } = useMutation({\n    mutationKey: ['removeKnowledgeGraph'],\n    mutationFn: async () => {\n      const { data } = await deleteKnowledgeGraph(knowledgeBaseId);\n      if (data.code === 0) {\n        message.success(i18n.t(`message.deleted`));\n        queryClient.invalidateQueries({\n          queryKey: ['fetchKnowledgeGraph'],\n        });\n      }\n      return data?.code;\n    },\n  });\n\n  return { data, loading, removeKnowledgeGraph: mutateAsync };\n};\n","import { IRenameTag } from '@/interfaces/database/knowledge';\nimport {\n  IFetchDocumentListRequestBody,\n  IFetchKnowledgeListRequestBody,\n  IFetchKnowledgeListRequestParams,\n} from '@/interfaces/request/knowledge';\nimport api from '@/utils/api';\nimport registerServer from '@/utils/register-server';\nimport request, { post } from '@/utils/request';\n\nconst {\n  create_kb,\n  update_kb,\n  rm_kb,\n  get_kb_detail,\n  kb_list,\n  get_document_list,\n  document_change_status,\n  document_rm,\n  document_delete,\n  document_create,\n  document_change_parser,\n  document_thumbnails,\n  chunk_list,\n  create_chunk,\n  set_chunk,\n  get_chunk,\n  switch_chunk,\n  rm_chunk,\n  retrieval_test,\n  document_rename,\n  document_run,\n  document_upload,\n  web_crawl,\n  knowledge_graph,\n  document_infos,\n  upload_and_parse,\n  listTagByKnowledgeIds,\n  setMeta,\n} = api;\n\nconst methods = {\n  // 知识库管理\n  createKb: {\n    url: create_kb,\n    method: 'post',\n  },\n  updateKb: {\n    url: update_kb,\n    method: 'post',\n  },\n  rmKb: {\n    url: rm_kb,\n    method: 'post',\n  },\n  get_kb_detail: {\n    url: get_kb_detail,\n    method: 'get',\n  },\n  getList: {\n    url: kb_list,\n    method: 'post',\n  },\n  // document manager\n  get_document_list: {\n    url: get_document_list,\n    method: 'get',\n  },\n  document_change_status: {\n    url: document_change_status,\n    method: 'post',\n  },\n  document_rm: {\n    url: document_rm,\n    method: 'post',\n  },\n  document_rename: {\n    url: document_rename,\n    method: 'post',\n  },\n  document_create: {\n    url: document_create,\n    method: 'post',\n  },\n  document_run: {\n    url: document_run,\n    method: 'post',\n  },\n  document_change_parser: {\n    url: document_change_parser,\n    method: 'post',\n  },\n  document_thumbnails: {\n    url: document_thumbnails,\n    method: 'get',\n  },\n  document_upload: {\n    url: document_upload,\n    method: 'post',\n  },\n  web_crawl: {\n    url: web_crawl,\n    method: 'post',\n  },\n  document_infos: {\n    url: document_infos,\n    method: 'post',\n  },\n  setMeta: {\n    url: setMeta,\n    method: 'post',\n  },\n  // chunk管理\n  chunk_list: {\n    url: chunk_list,\n    method: 'post',\n  },\n  create_chunk: {\n    url: create_chunk,\n    method: 'post',\n  },\n  set_chunk: {\n    url: set_chunk,\n    method: 'post',\n  },\n  get_chunk: {\n    url: get_chunk,\n    method: 'get',\n  },\n  switch_chunk: {\n    url: switch_chunk,\n    method: 'post',\n  },\n  rm_chunk: {\n    url: rm_chunk,\n    method: 'post',\n  },\n  retrieval_test: {\n    url: retrieval_test,\n    method: 'post',\n  },\n  knowledge_graph: {\n    url: knowledge_graph,\n    method: 'get',\n  },\n  document_delete: {\n    url: document_delete,\n    method: 'delete',\n  },\n  upload_and_parse: {\n    url: upload_and_parse,\n    method: 'post',\n  },\n  listTagByKnowledgeIds: {\n    url: listTagByKnowledgeIds,\n    method: 'get',\n  },\n};\n\nconst kbService = registerServer<keyof typeof methods>(methods, request);\n\nexport const listTag = (knowledgeId: string) =>\n  request.get(api.listTag(knowledgeId));\n\nexport const removeTag = (knowledgeId: string, tags: string[]) =>\n  post(api.removeTag(knowledgeId), { tags });\n\nexport const renameTag = (\n  knowledgeId: string,\n  { fromTag, toTag }: IRenameTag,\n) => post(api.renameTag(knowledgeId), { fromTag, toTag });\n\nexport function getKnowledgeGraph(knowledgeId: string) {\n  return request.get(api.getKnowledgeGraph(knowledgeId));\n}\n\nexport function deleteKnowledgeGraph(knowledgeId: string) {\n  return request.delete(api.getKnowledgeGraph(knowledgeId));\n}\n\nexport const listDataset = (\n  params?: IFetchKnowledgeListRequestParams,\n  body?: IFetchKnowledgeListRequestBody,\n) => request.post(api.kb_list, { data: body || {}, params });\n\nexport const listDocument = (\n  params?: IFetchKnowledgeListRequestParams,\n  body?: IFetchDocumentListRequestBody,\n) => request.post(api.get_document_list, { data: body || {}, params });\n\nexport default kbService;\n"],"names":["useKnowledgeBaseId","_useSearchParams","useSearchParams","_slicedToArray","get","useFetchKnowledgeBaseConfiguration","_queryFn","knowledgeBaseId","_useQuery","useQuery","queryKey","initialData","gcTime","queryFn","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_data$data","_yield$kbService$get_","data","wrap","_context","prev","next","kbService","get_kb_detail","kb_id","sent","abrupt","stop","apply","arguments","loading","isFetching","useFetchKnowledgeList","_queryFn2","shouldFilterListWithoutDocument","length","undefined","_useQuery2","_callee2","_data$data$kbs","_data$data2","_yield$listDataset","list","_context2","listDataset","kbs","filter","x","chunk_num","useSelectKnowledgeOptions","map","item","label","name","value","id","useInfiniteFetchKnowledgeList","_queryFn3","_useHandleSearchChang","useHandleSearchChange","searchString","handleInputChange","debouncedSearchString","useDebounce","wait","_useInfiniteQuery","useInfiniteQuery","_callee3","_ref","_data$data3","pageParam","_yield$listDataset2","_context3","page","page_size","keywords","_x","initialPageParam","getNextPageParam","lastPage","pages","lastPageParam","total","error","fetchNextPage","hasNextPage","isFetchingNextPage","status","useCreateKnowledge","_mutationFn","queryClient","useQueryClient","_useMutation","useMutation","mutationKey","mutationFn","_callee4","params","_yield$kbService$crea","_yield$kbService$crea2","_context4","createKb","code","message","success","i18n","t","concat","invalidateQueries","_x2","isPending","createKnowledge","mutateAsync","useDeleteKnowledge","_mutationFn2","_useMutation2","_callee5","_data$data4","_yield$kbService$rmKb","_context5","rmKb","_x3","deleteKnowledge","useUpdateKnowledge","_mutationFn3","shouldFetchList","_useMutation3","_callee6","_yield$kbService$upda","_yield$kbService$upda2","_context6","updateKb","_objectSpread","_x4","saveKnowledgeConfiguration","useTestChunkRetrieval","_mutationFn4","_useSetPaginationPara","useSetPaginationParams","pageSize","size","_useMutation4","_callee7","values","_values$kb_id","_data$data5","_yield$kbService$retr","res","_context7","retrieval_test","documents","doc_aggs","chunks","_x5","testChunk","useTestChunkAllRetrieval","_mutationFn5","_useSetPaginationPara2","_useMutation5","_callee8","_values$kb_id2","_data$data6","_yield$kbService$retr2","_context8","doc_ids","_x6","testChunkAll","useChunkIsTesting","useIsMutating","useSelectTestingResult","_data$at","useMutationState","filters","select","mutation","state","at","useSelectIsTestingSuccess","useAllTestingSuccess","useAllTestingResult","_data$at2","useFetchTagList","_queryFn4","_useQuery3","_callee9","_yield$listTag","_context9","listTag","useDeleteTag","_mutationFn6","_useMutation6","_callee10","tags","_data$data7","_yield$removeTag","_context10","removeTag","_x7","deleteTag","useRenameTag","_mutationFn7","_useMutation7","_callee11","_data$data8","_yield$renameTag","_context11","renameTag","_x8","useTagIsRenaming","useFetchTagListByKnowledgeIds","_queryFn5","_useState","useState","_useState2","knowledgeIds","setKnowledgeIds","_useQuery4","enabled","_callee12","_yield$kbService$list","_context12","listTagByKnowledgeIds","kb_ids","join","useFetchKnowledgeGraph","_queryFn6","_useQuery5","graph","mind_map","_callee13","_yield$getKnowledgeGr","_context13","getKnowledgeGraph","useRemoveKnowledgeGraph","_mutationFn8","_useMutation8","_callee14","_yield$deleteKnowledg","_context14","deleteKnowledgeGraph","removeKnowledgeGraph","create_kb","api","update_kb","rm_kb","kb_list","get_document_list","document_change_status","document_rm","document_delete","document_create","document_change_parser","document_thumbnails","chunk_list","create_chunk","set_chunk","get_chunk","switch_chunk","rm_chunk","document_rename","document_run","document_upload","web_crawl","knowledge_graph","document_infos","upload_and_parse","methods","url","method","getList","setMeta","registerServer","request","knowledgeId","post","fromTag","toTag","body","listDocument"],"sourceRoot":""}