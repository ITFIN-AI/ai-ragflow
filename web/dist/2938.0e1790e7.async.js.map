{"version":3,"file":"2938.0e1790e7.async.js","mappings":"2TAAYA,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,kBAAjBA,EAAiB,kBAAjBA,EAAiB,8BAAjBA,EAAiB,gCAAjBA,CAAiB,MASjBC,EAAa,SAAbA,GAAa,OAAbA,EAAa,YAAbA,EAAa,YAAbA,EAAa,WAAbA,EAAa,SAAbA,EAAa,SAAbA,CAAa,MAQbC,EAAiB,SAAjBA,GAAiB,OAAjBA,EAAiB,sBAAjBA,EAAiB,kBAAjBA,EAAiB,kBAAjBA,CAAiB,MAMhBC,EAAuBC,IAAAA,IAAAA,IAAA,GACjCF,EAAkBG,UAAY,CAC7BC,YAAa,GACbC,MAAO,GACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,OAEbR,EAAkBS,QAAU,CAC3BL,YAAa,GACbC,MAAO,IACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,OAEbR,EAAkBU,QAAU,CAC3BN,YAAa,GACbC,MAAO,IACPC,kBAAmB,GACnBC,iBAAkB,GAClBC,WAAY,OAIJG,EAAY,SAAZA,GAAY,OAAZA,EAAY,sBAAZA,EAAY,YAAZA,EAAY,wBAAZA,EAAY,0BAAZA,EAAY,gBAAZA,EAAY,UAAZA,CAAY,MASZC,EAAqB,SAArBA,GAAqB,OAArBA,EAAqB,oBAArBA,EAAqB,iBAArBA,CAAqB,MAKrBC,EAAY,SAAZA,GAAY,OAAZA,EAAY,kBAAZA,EAAY,gBAAZA,CAAY,MAKZC,EAAkB,SAAlBA,GAAkB,OAAlBA,EAAkB,cAAlBA,EAAkB,QAAlBA,EAAkB,gBAAlBA,EAAkB,gBAAlBA,EAAkB,cAAlBA,EAAkB,cAAlBA,EAAkB,YAAlBA,EAAkB,YAAlBA,EAAkB,4BAAlBA,EAAkB,kBAAlBA,EAAkB,UAAlBA,EAAkB,cAAlBA,EAAkB,cAAlBA,EAAkB,UAAlBA,EAAkB,iCAAlBA,CAAkB,K,ypBCrCjBC,EAAuB,WAClC,IAAAC,GAA0CC,EAAAA,EAAAA,UAAY,CAAC,GAAOC,EAAAC,IAAAH,EAAA,GAAvDI,EAAaF,EAAA,GAAEG,EAAgBH,EAAA,GAMtC,MAAO,CAAEE,cAAAA,EAAeE,UAJN,SAACC,GACjBF,EAAiBE,EACnB,EAGF,EAEaC,EAAwB,WACnC,IAAAC,GAAwCR,EAAAA,EAAAA,UAAS,IAAGS,EAAAP,IAAAM,EAAA,GAA7CE,EAAYD,EAAA,GAAEE,EAAeF,EAAA,GAUpC,MAAO,CAAEG,mBARiBC,EAAAA,EAAAA,cACxB,SAACC,GACC,IAAMC,EAAQD,EAAEE,OAAOD,MACvBJ,EAAgBI,EAClB,GACA,IAG0BL,aAAAA,EAC9B,EAEaO,EAAoB,WAC/B,IAAQC,GAASC,EAAAA,EAAAA,MAATD,KACAE,GAAgBC,EAAAA,EAAAA,MAAhBD,YASR,OAPuB,SAACE,GACtBJ,EAAKK,eACHC,EAAAA,GAAuBF,IAEzBF,EAAY,CAAEK,SAAUH,GAC1B,CAGF,EAEaI,EAA6B,WACxC,IAAQC,GAAMC,EAAAA,EAAAA,IAAa,UAAnBD,EACRE,GAIIC,EAAAA,EAAAA,MAHFC,EAAmBF,EAAnBE,oBACAC,EAAIH,EAAJG,KACMC,EAAQJ,EAAdK,KAGIC,GAA4CtB,EAAAA,EAAAA,cAChD,SAACuB,EAAoBH,GACnBF,EAAoBK,EAAYH,EAClC,GACA,CAACF,IAGGM,GAAuBxB,EAAAA,EAAAA,cAC3B,SAACyB,GACCP,EAAoBO,EAAWN,KAAMM,EAAWL,SAClD,GACA,CAACF,IAgBH,MAAO,CACLO,YAdkCC,EAAAA,EAAAA,UAAQ,WAC1C,MAAO,CACLC,iBAAiB,EACjBC,MAAO,EACPC,iBAAiB,EACjBC,QAASX,EACTC,SAAUA,EACVW,gBAAiB,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,KACpCC,SAAUV,EACVW,UAAW,SAACL,GAAK,SAAAM,OAAQpB,EAAE,SAAQ,KAAAoB,OAAIN,EAAK,EAEhD,GAAG,CAACd,EAAGQ,EAAcH,EAAMC,IAIzBe,cAAeX,EAEnB,EAmCaY,EAAkB,WAC7B,IAAAC,GAA8BlD,EAAAA,EAAAA,UAAkB,CAAC,GAAamD,EAAAjD,IAAAgD,EAAA,GAAvDE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GACpBG,GAAezC,EAAAA,EAAAA,aAAW0C,IAAAC,MAAAC,MAAC,SAAAC,IAAA,IAAAC,EAAA,OAAAH,MAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACbC,EAAAA,EAAMC,IAAI,cAAa,OAAnCN,EAAGE,EAAAK,KAETb,EAAWM,EAAIQ,MAAM,wBAAAN,EAAAO,OAAA,GAAAV,EAAA,KACpB,IAMH,OAJAW,EAAAA,EAAAA,YAAU,WACRf,GACF,GAAG,CAACA,IAEGF,CACT,EAEakB,EAAwB,WAEhC,IADHC,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,EAAAA,EAAIC,qBAElBC,GAA4B7E,EAAAA,EAAAA,UAAkB,CAAC,GAAa8E,EAAA5E,IAAA2E,EAAA,GAArDE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAwBjF,EAAAA,EAAAA,WAAS,GAAKkF,EAAAhF,IAAA+E,EAAA,GAA/BE,EAAID,EAAA,GAAEE,EAAOF,EAAA,GACdG,GAAQC,EAAAA,EAAAA,UACRC,GAASD,EAAAA,EAAAA,UAETE,GAAmB3E,EAAAA,EAAAA,cAAY,WACnC0E,EAAO5C,QAAU,IAAI8C,eACvB,GAAG,IAEGC,GAAc7E,EAAAA,EAAAA,cAAY,WAC1BwE,EAAM1C,SACRgD,aAAaN,EAAM1C,SAErB0C,EAAM1C,QAAUiD,YAAW,WACzBZ,EAAU,CAAC,GACXW,aAAaN,EAAM1C,QACrB,GAAG,IACL,GAAG,IAEGkD,GAAOhF,EAAAA,EAAAA,aAAW,eAAAiF,EAAAvC,IAAAC,MAAAC,MACtB,SAAAsC,EACEC,EACAC,GAA4B,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAzF,EAAA0F,EAAAC,EAAA,OAAAlD,MAAAI,MAAA,SAAA+C,GAAA,cAAAA,EAAA7C,KAAA6C,EAAA5C,MAAA,OAIX,OAFjByB,IAAmBmB,EAAA7C,KAAA,EAEjBsB,GAAQ,GAAOuB,EAAA5C,KAAA,EACQ6C,MAAMrC,EAAK,CAChCsC,OAAQ,OACRC,QAAO7H,IAAAA,IAAA,GACJ8H,EAAAA,IAAgBC,EAAAA,EAAAA,OACjB,eAAgB,oBAElBhB,KAAMiB,KAAKC,UAAUlB,GACrBmB,QAAQlB,aAAU,EAAVA,EAAYkB,UAAwB,QAAlBjB,EAAIX,EAAO5C,eAAO,IAAAuD,OAAA,EAAdA,EAAgBiB,UAC9C,OARIf,EAAQO,EAAAzC,KAURmC,EAAMD,EAASgB,QAAQC,OAEvBf,EAASF,SAAc,QAAND,EAARC,EAAUJ,YAAI,IAAAG,OAAA,EAAdA,EACXmB,YAAY,IAAIC,mBACjBD,YAAY,IAAIE,EAAAA,GAChBC,YAAW,OAEH,OAAAd,EAAA5C,KAAA,GACOuC,aAAM,EAANA,EAAQoB,OAAM,QAAvB,KAADnB,EAACI,EAAAzC,MACA,CAAFyC,EAAA5C,KAAA,SACgB,GAAXoB,EAAgBoB,EAAhBpB,KAAMpE,EAAUwF,EAAVxF,OACVoE,EAAM,CAAFwB,EAAA5C,KAAA,SAEQ,OADd4D,QAAQC,KAAK,QACblC,IAAciB,EAAAkB,OAAA,oBAGhB,IACQpB,EAAMQ,KAAKa,OAAM/G,aAAK,EAALA,EAAOoD,OAAQ,IAErB,kBADXuC,EAAID,aAAG,EAAHA,EAAKtC,QAEbwD,QAAQC,KAAK,QAASlB,GACtB1B,EAAS+C,IAAAA,IAAC,CAAC,EACNrB,GAAC,IACJsB,eAAgBhC,aAAI,EAAJA,EAAMiC,mBAG5B,CAAE,MAAOnH,GACP6G,QAAQO,KAAKpH,EACf,CAAC,QAAA6F,EAAA5C,KAAA,gBAKS,OAFd4D,QAAQC,KAAK,SACbxC,GAAQ,GACRM,IAAciB,EAAA5C,KAAA,GACOsC,EAAG,QAAU,OAAVM,EAAAwB,GAAAxB,EAAAzC,KAAAyC,EAAAyB,GAAEhC,EAAQO,EAAAkB,OAAA,UAAzB1D,KAAIwC,EAAAwB,GAAa/B,SAAQO,EAAAyB,KAAA,QAAAzB,EAAA7C,KAAA,GAAA6C,EAAA0B,GAAA1B,EAAA,SAElCvB,GAAQ,GACRM,IAEAiC,QAAQO,KAAIvB,EAAA0B,IAAI,yBAAA1B,EAAAvC,OAAA,GAAA2B,EAAA,mBAEnB,gBAAAuC,EAAAC,GAAA,OAAAzC,EAAA0C,MAAA,KAAAhE,UAAA,EA3DqB,GA4DtB,CAACgB,EAAkBjB,EAAKmB,IAGpB+C,GAAoB5H,EAAAA,EAAAA,cAAY,WAAM,IAAA6H,EAC5B,QAAdA,EAAAnD,EAAO5C,eAAO,IAAA+F,GAAdA,EAAgBC,OAClB,GAAG,IAEH,MAAO,CAAE9C,KAAAA,EAAMd,OAAAA,EAAQI,KAAAA,EAAMC,QAAAA,EAASM,YAAAA,EAAa+C,kBAAAA,EACrD,EAEaG,EAAmB,WAA2B,IAA1BrE,EAAWC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAGG,EAAAA,EAAIkE,IAC3CnB,GAAO7G,EAAAA,EAAAA,aAAW,eAAAiI,EAAAvF,IAAAC,MAAAC,MACtB,SAAAsF,EAAO/C,GAAS,IAAAI,EAAAC,EAAA,OAAA7C,MAAAI,MAAA,SAAAoF,GAAA,cAAAA,EAAAlF,KAAAkF,EAAAjF,MAAA,cAAAiF,EAAAjF,KAAA,EACS6C,MAAMrC,EAAK,CAChCsC,OAAQ,OACRC,QAAO7H,IAAAA,IAAA,GACJ8H,EAAAA,IAAgBC,EAAAA,EAAAA,OACjB,eAAgB,oBAElBhB,KAAMiB,KAAKC,UAAUlB,KACrB,OAPY,OAARI,EAAQ4C,EAAA9E,KAAA8E,EAAAlF,KAAG,EAAHkF,EAAAjF,KAAG,EASGqC,EAASgB,QAAQC,OAAM,OACvB,KAAdhB,OADEA,EAAG2C,EAAA9E,WACF,EAAHmC,EAAK4C,OACPC,EAAAA,GAAQC,MAAM9C,aAAG,EAAHA,EAAK6C,SACpBF,EAAAjF,KAAA,iBAAAiF,EAAAlF,KAAA,GAAAkF,EAAAb,GAAAa,EAAA,SAEDrB,QAAQO,KAAK,cAAac,EAAAb,IAAS,eAAAa,EAAAnB,OAAA,SAE9BzB,GAAQ,yBAAA4C,EAAA5E,OAAA,GAAA2E,EAAA,mBAChB,gBAAAK,GAAA,OAAAN,EAAAN,MAAA,KAAAhE,UAAA,EAnBqB,GAoBtB,CAACD,IAGH,MAAO,CAAEmD,KAAAA,EACX,EAoBa2B,EAA8B,WACzC,IAAAC,GAA0BtJ,EAAAA,EAAAA,UAAS,IAAGuJ,EAAArJ,IAAAoJ,EAAA,GAA/BvI,EAAKwI,EAAA,GAAEC,EAAQD,EAAA,GAQtB,MAAO,CACL3I,kBAPiE,SAACE,GAClE,IACM2I,EADQ3I,EAAEE,OAAOD,MACC2I,WAAW,MAAO,MAAMA,WAAW,MAAO,MAClEF,EAASC,EACX,EAIE1I,MAAAA,EACAyI,SAAAA,EAEJ,EAEaG,EAA2B,WACtC,IAAAC,GAA8C5J,EAAAA,EAAAA,UAAqB,IAAG6J,EAAA3J,IAAA0J,EAAA,GAA/DE,EAAeD,EAAA,GAAEE,EAAkBF,EAAA,GAEpCG,EAnCyB,SAACC,GAChC,IAAMD,GAAM1E,EAAAA,EAAAA,QAAuB,MAE7B4E,GAAiBrJ,EAAAA,EAAAA,cAAY,WACnB,IAAAsJ,EAAVF,IACS,QAAXE,EAAAH,EAAIrH,eAAO,IAAAwH,GAAXA,EAAaC,eAAe,CAAEC,SAAU,YAE5C,GAAG,CAACJ,IAMJ,OAJA5F,EAAAA,EAAAA,YAAU,WACR6F,GACF,GAAG,CAACA,IAEGF,CACT,CAqBcM,CAAkBR,GAExBS,GAAoB1J,EAAAA,EAAAA,cACxB,SAACqI,GAA0C,IAAxBnE,EAAcP,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAClCuF,GAAmB,SAACS,GAClB,MAAO,GAAPzH,OAAA0H,IACKD,GAAG,CAAAzC,IAAAA,IAAA,GAEDmB,GAAO,IACVwB,IAAIC,EAAAA,EAAAA,IAAiBzB,KAIvB,CACE0B,KAAMC,EAAAA,GAAYC,UAClBC,QAAShG,EACT2F,IAAIC,EAAAA,EAAAA,IAAgB5C,IAAAA,IAAC,CAAC,EAAImB,GAAO,IAAE0B,KAAMC,EAAAA,GAAYC,eAG3D,GACF,GACA,IAGIE,GAAuBnK,EAAAA,EAAAA,cAAY,SAACqI,GACxCa,GAAmB,SAACS,GAClB,MAAO,GAAPzH,OAAA0H,IACKD,GAAG,CAAAzC,IAAAA,IAAA,GAEDmB,GAAO,IACVwB,IAAIC,EAAAA,EAAAA,IAAiBzB,MAK3B,GACF,GAAG,IAGG+B,GAAkBpK,EAAAA,EAAAA,cAAY,SAACkE,GACnCgF,GAAmB,SAACS,GAAQ,IAAAU,EAC1B,MAAO,GAAPnI,OAAA0H,IACuB,QADvBS,EACMV,aAAG,EAAHA,EAAKW,MAAM,GAAI,UAAE,IAAAD,EAAAA,EAAI,IAAE,CAAAnD,IAAA,CAEzB6C,KAAMC,EAAAA,GAAYC,UAClBC,QAAShG,EAAOA,OAChBqG,UAAWrG,EAAOqG,UAClBV,IAAIC,EAAAA,EAAAA,IAAiB,CACnBD,GAAI3F,EAAO2F,GACXE,KAAMC,EAAAA,GAAYC,YAEpBO,OAAQtG,EAAOsG,OACfC,aAAcvG,EAAOuG,eAClBC,EAAAA,EAAAA,MAAKxG,EAAQ,eAGtB,GACF,GAAG,IAGGyG,GAAqB3K,EAAAA,EAAAA,cAAY,SAACkE,GACtCgF,GAAmB,SAACS,GAGlB,OAAa,IAFDA,EAAIiB,WAAU,SAAClF,GAAC,OAAKA,EAAEmE,KAAO3F,EAAO2F,EAAE,IAG1CF,EAAIkB,KAAI,SAACnF,GACd,OAAIA,EAAEmE,KAAO3F,EAAO2F,GAClB3C,IAAAA,IAAA,GAAYxB,GAAC,IAAEwE,QAAShG,EAAOA,SAE1BwB,CACT,IAGK,GAAPxD,OAAA0H,IACMD,QAAAA,EAAO,IAAE,CAAAzC,IAAA,CAEX6C,KAAMC,EAAAA,GAAYC,UAClBC,QAAShG,EAAOA,OAChBqG,UAAWrG,EAAOqG,UAClBV,IAAIC,EAAAA,EAAAA,IAAiB,CACnBD,GAAI3F,EAAO2F,GACXE,KAAMC,EAAAA,GAAYC,YAEpBO,OAAQtG,EAAOsG,OACfC,aAAcvG,EAAOuG,eAClBC,EAAAA,EAAAA,MAAKxG,EAAQ,eAGtB,GACF,GAAG,IAEG4G,GAAsB9K,EAAAA,EAAAA,cAAY,WACtCkJ,GAAmB,SAACS,GAAQ,IAAAoB,EAE1B,OADsC,QAApBA,EAAGpB,aAAG,EAAHA,EAAKW,MAAM,GAAI,UAAE,IAAAS,EAAAA,EAAI,EAE5C,GACF,GAAG,IAEGC,GAAoBhL,EAAAA,EAAAA,cACxB,SAACiL,GACC/B,GAAmB,SAACS,GAAQ,IAAAuB,EAE1B,OAD2D,QAAzCA,EAAGvB,aAAG,EAAHA,EAAKwB,QAAO,SAACzF,GAAC,OAAKA,EAAEmE,KAAOoB,CAAS,WAAC,IAAAC,EAAAA,EAAI,EAEjE,GACF,GACA,CAAChC,IAGGkC,GAAoCpL,EAAAA,EAAAA,cACxC,SAACiL,GACC/B,GAAmB,SAACS,GAClB,IAAM0B,EAAQ1B,EAAIiB,WAAU,SAAClF,GAAC,OAAKA,EAAEmE,KAAOoB,CAAS,IACrD,IAAe,IAAXI,EAAc,KAAAC,EACZC,EAAsC,QAA1BD,EAAG3B,EAAIW,MAAM,EAAGe,EAAQ,UAAE,IAAAC,EAAAA,EAAI,GACxCE,EAAgBD,EAAaE,IAAI,GAYvC,OAXAF,EAAeC,EAAa,GAAAtJ,OAAA0H,IAEnB2B,EAAajB,MAAM,GAAI,IAAE,CAAApD,IAAAA,IAAA,GAEvBsE,GAAa,IAChBtB,QAAS,GACTK,eAAW1G,EACX2G,YAAQ3G,MAGZ0H,CAEN,CACA,OAAO5B,CACT,GACF,GACA,CAACT,IAGH,MAAO,CACLC,IAAAA,EACAF,gBAAAA,EACAC,mBAAAA,EACAQ,kBAAAA,EACAU,gBAAAA,EACAU,oBAAAA,EACAE,kBAAAA,EACAb,qBAAAA,EACAQ,mBAAAA,EACAS,kCAAAA,EAEJ,EA+CaM,EAAuB,SAAHC,GAa3B,IAZJP,EAAiCO,EAAjCP,kCACAQ,EAAWD,EAAXC,YACAxC,EAAQuC,EAARvC,SAWMyC,GAAoB7L,EAAAA,EAAAA,aAAW,eAAA8L,EAAApJ,IAAAC,MAAAC,MACnC,SAAAmJ,EAAO1D,GAAgB,IAAAgD,EAAAE,EAAA,OAAA5I,MAAAI,MAAA,SAAAiJ,GAAA,cAAAA,EAAA/I,KAAA+I,EAAA9I,MAAA,OACjBmF,EAAQwB,KACVuB,EAAkC/C,EAAQwB,KAG3B,KAFTwB,EAAQjC,EAASwB,WAAU,SAAClF,GAAC,OAAKA,EAAEmE,KAAOxB,EAAQwB,EAAE,OAGzD0B,EAAenC,EAASkB,MAAM,EAAGe,IAEnCO,EAAY,CACVvD,QAAOnB,IAAAA,IAAA,GAAOmB,GAAO,IAAEwB,IAAIoC,EAAAA,EAAAA,OAC3B7C,SAAUmC,KAEb,wBAAAS,EAAAzI,OAAA,GAAAwI,EAAA,KACF,gBAAAG,GAAA,OAAAJ,EAAAnE,MAAA,KAAAhE,UAAA,EAdkC,GAenC,CAACyH,EAAmCQ,EAAaxC,IAGnD,MAAO,CAAEyC,kBAAAA,EACX,EAUaM,EAAgB,SAACC,GAC5B,IAAAC,GAAoClN,EAAAA,EAAAA,UAAS,IAAGmN,EAAAjN,IAAAgN,EAAA,GAAzCE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAE1BG,GAAkBzM,EAAAA,EAAAA,cACtB,SAAC6J,GAAU,OAAK,WACd2C,EAAc3C,EAChB,CAAC,GACD,IASF,OANArG,EAAAA,EAAAA,YAAU,WACJ4I,GACFI,EAAcJ,EAElB,GAAG,CAACA,IAEG,CAAEG,WAAAA,EAAYE,gBAAAA,EACvB,EAEaC,EAAkB,WAAM,IAAAC,EACrBC,GAAeC,EAAAA,EAAAA,KAAmB,GAAxCvJ,KAER,OAAyB,QAAzBqJ,EAAOC,aAAU,EAAVA,EAAYE,cAAM,IAAAH,EAAAA,EAAI,EAC/B,EAEMI,EAAmB,CACvBC,MAAO,IACPC,gBAAiB,MAGNC,EAAmC,SAACC,GAc/C,OAZqBnN,EAAAA,EAAAA,cACnB,SAACE,GACKA,KAAS6M,GACXI,EAAKC,cACH,CAAC,gBAAiB,mBAClBL,EAAiB7M,GAGvB,GACA,CAACiN,GAIL,EAGaE,EAA2B,SAAHC,GAM/B,IALJH,EAAIG,EAAJH,KACAI,EAAOD,EAAPC,QAKMC,GAAc/I,EAAAA,EAAAA,WACpBjB,EAAAA,EAAAA,YAAU,WACRgK,EAAY1L,QAAUyL,CACxB,GAAG,CAACA,IACJ,IAAME,EAAWD,EAAY1L,SAE7B0B,EAAAA,EAAAA,YAAU,YACH+J,GAAWE,GACdN,EAAKO,aAET,GAAG,CAACP,EAAMM,EAAUF,GACtB,C,yOC/lBYI,EAAY,SAAZA,GAAY,OAAZA,EAAY,WAAZA,EAAY,UAAZA,CAAY,MAKXC,EAAuB,SAACvC,GAInC,OAHqBwC,EAAAA,EAAAA,MAAbC,SAEmBC,MAAM,KAChB1C,IAAU,EAC7B,EAEa2C,EAAoB,WAC/B,OAAOJ,EAAqBD,EAAaM,OAC3C,EAEaC,EAAmB,WAC9B,OAAON,EAAqBD,EAAaQ,MAC3C,EAEaC,EAA8B,WACzC,IAAAC,GAAiCC,EAAAA,EAAAA,MAA1BC,EAA2ClP,IAAAgP,EAAA,GAArB,GAE7B,MAAO,CACLG,WACED,EAAuBnL,IAAItE,EAAAA,GAAsB2P,aAAe,GAClEC,YACEH,EAAuBnL,IAAItE,EAAAA,GAAsB6P,cAAgB,GAEvE,EAEaC,EAA2B,WACtC,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,OAAO9O,EAAAA,EAAAA,cACL,SAAC+O,GACCF,EAASE,EAAM,CAAEC,MAAO,CAAEC,KAAMF,IAClC,GACA,CAACF,GAEL,EAEaK,EAAuB,WAClC,IAAML,GAAWC,EAAAA,EAAAA,MACTJ,EAAgBN,IAAhBM,YAER,OAAO1O,EAAAA,EAAAA,cAAY,WACjB6O,EAAS,cAAD3M,OAAelE,EAAAA,GAAkBmR,QAAO,QAAAjN,OAAOwM,GACzD,GAAG,CAACA,EAAaG,GACnB,EAWa5N,EAAyB,WACpC,IAAAmO,GAA2Cd,EAAAA,EAAAA,MAAiBe,EAAAhQ,IAAA+P,EAAA,GAArDE,EAAeD,EAAA,GAAEE,EAAeF,EAAA,GAMjCnO,GAAsBlB,EAAAA,EAAAA,cAC1B,WAAyC,IAAxCmB,EAAYwC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAGvC,EAAiBuC,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClCyL,EAAgBE,IAAI,OAAQrO,EAAKsO,YAC7BrO,GACFkO,EAAgBE,IAAI,OAAQpO,EAASqO,YAEvCF,EAAgBD,EAClB,GACA,CAACC,EAAiBD,IAGpB,MAAO,CACLpO,oBAAAA,EACAC,KAAMuO,OAAOJ,EAAgBlM,IAAI,UAAY,EAC7C/B,KAAMqO,OAAOJ,EAAgBlM,IAAI,UAAY,GAEjD,C,yUChFauM,EAAwB,SAACxI,GACpC,OAAOA,IAAmByI,EAAAA,IAA0C,KAAnBzI,CACnD,EAEa2C,EAAmB,SAACzB,GAC/B,MAAI,OAAQA,GAAWA,EAAQwB,GACtBxB,EAAQwB,IAEVoC,EAAAA,EAAAA,IACT,EAEa4D,EAA2B,SAACzG,GAAyB,IAAA0G,EAChE,OAIK,QAJLA,EACE1G,aAAQ,EAARA,EAAUyB,KAAI,SAACnF,GAAqB,OAAAwB,IAAAA,IAAA,IAC/BwD,EAAAA,EAAAA,MAAKhF,EAAG,cAAY,IACvBmE,GAAIC,EAAiBpE,IAAE,WACtB,IAAAoK,EAAAA,EAAI,EAEX,EAEaC,EAAoB,WAC/B,OAAO9D,EAAAA,EAAAA,KAAO+D,QAAQ,KAAM,GAC9B,EAGaC,EAA2B,SACtC5H,GAEA,MAAO,GAAPnG,OAAUmG,EAAQ0B,KAAI,KAAA7H,OAAImG,EAAQwB,GACpC,EAKaqG,EAAkB,SAAChG,GAS9B,OAR8BA,EAAQ8F,QACpC,uBACA,SAACG,EAAGC,GAAQ,WAAAlO,OAAUkO,EAAQ,SAEqBJ,QACnD,uBACA,SAACG,EAAGC,GAAQ,UAAAlO,OAASkO,EAAQ,OAGjC,EAEO,SAASC,IAKd,OALgD1M,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,IAG/BqM,QAFJ,8BAEqB,sCAGvC,CAEO,SAASM,EACdC,GAEA,OAAO,CAET,CAEA,IAAMC,EAAkB,CAAC,QAAS,SAE3B,SAASC,EAAUC,GACxB,OAAOF,EAAgBG,MAAK,SAACjL,GAAC,OAAKA,IAAMgL,CAAK,GAChD,CAEO,SAASE,IAQd,OAPiCC,OAAOC,OACtCC,EAAAA,IACAC,QAAgC,SAACrH,EAAKsH,GAEtC,OADAtH,EAAIsH,GAAOA,IAAQF,EAAAA,GAAyBG,iBACrCvH,CACT,GAAG,CAAC,EAGN,C","sources":["webpack:///./src/constants/knowledge.ts","webpack:///./src/hooks/logic-hooks.ts","webpack:///./src/hooks/route-hook.ts","webpack:///./src/utils/chat.ts"],"sourcesContent":["export enum KnowledgeRouteKey {\n  Dataset = 'dataset',\n  Testing = 'testing',\n  Configuration = 'configuration',\n  KnowledgeGraph = 'knowledgeGraph',\n}\n\nexport const DatasetBaseKey = 'dataset';\n\nexport enum RunningStatus {\n  UNSTART = '0', // need to run\n  RUNNING = '1', // need to cancel\n  CANCEL = '2', // need to refresh\n  DONE = '3', // need to refresh\n  FAIL = '4', // need to refresh\n}\n\nexport enum ModelVariableType {\n  Improvise = 'Improvise',\n  Precise = 'Precise',\n  Balance = 'Balance',\n}\n\nexport const settledModelVariableMap = {\n  [ModelVariableType.Improvise]: {\n    temperature: 0.8,\n    top_p: 0.9,\n    frequency_penalty: 0.1,\n    presence_penalty: 0.1,\n    max_tokens: 4096,\n  },\n  [ModelVariableType.Precise]: {\n    temperature: 0.2,\n    top_p: 0.75,\n    frequency_penalty: 0.5,\n    presence_penalty: 0.5,\n    max_tokens: 4096,\n  },\n  [ModelVariableType.Balance]: {\n    temperature: 0.5,\n    top_p: 0.85,\n    frequency_penalty: 0.3,\n    presence_penalty: 0.2,\n    max_tokens: 4096,\n  },\n};\n\nexport enum LlmModelType {\n  Embedding = 'embedding',\n  Chat = 'chat',\n  Image2text = 'image2text',\n  Speech2text = 'speech2text',\n  Rerank = 'rerank',\n  TTS = 'tts',\n}\n\nexport enum KnowledgeSearchParams {\n  DocumentId = 'doc_id',\n  KnowledgeId = 'id',\n}\n\nexport enum DocumentType {\n  Virtual = 'virtual',\n  Visual = 'visual',\n}\n\nexport enum DocumentParserType {\n  Naive = 'naive',\n  Qa = 'qa',\n  Resume = 'resume',\n  Manual = 'manual',\n  Table = 'table',\n  Paper = 'paper',\n  Book = 'book',\n  Laws = 'laws',\n  Presentation = 'presentation',\n  Picture = 'picture',\n  One = 'one',\n  Audio = 'audio',\n  Email = 'email',\n  Tag = 'tag',\n  KnowledgeGraph = 'knowledge_graph',\n}\n","import { Authorization } from '@/constants/authorization';\nimport { MessageType } from '@/constants/chat';\nimport { LanguageTranslationMap } from '@/constants/common';\nimport { ResponseType } from '@/interfaces/database/base';\nimport { IAnswer, Message } from '@/interfaces/database/chat';\nimport { IKnowledgeFile } from '@/interfaces/database/knowledge';\nimport { IClientConversation, IMessage } from '@/pages/chat/interface';\nimport api from '@/utils/api';\nimport { getAuthorization } from '@/utils/authorization-util';\nimport { buildMessageUuid } from '@/utils/chat';\nimport { PaginationProps, message } from 'antd';\nimport { FormInstance } from 'antd/lib';\nimport axios from 'axios';\nimport { EventSourceParserStream } from 'eventsource-parser/stream';\nimport { omit } from 'lodash';\nimport {\n  ChangeEventHandler,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { v4 as uuid } from 'uuid';\nimport { useTranslate } from './common-hooks';\nimport { useSetPaginationParams } from './route-hook';\nimport { useFetchTenantInfo, useSaveSetting } from './user-setting-hooks';\n\nexport const useSetSelectedRecord = <T = IKnowledgeFile>() => {\n  const [currentRecord, setCurrentRecord] = useState<T>({} as T);\n\n  const setRecord = (record: T) => {\n    setCurrentRecord(record);\n  };\n\n  return { currentRecord, setRecord };\n};\n\nexport const useHandleSearchChange = () => {\n  const [searchString, setSearchString] = useState('');\n\n  const handleInputChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = e.target.value;\n      setSearchString(value);\n    },\n    [],\n  );\n\n  return { handleInputChange, searchString };\n};\n\nexport const useChangeLanguage = () => {\n  const { i18n } = useTranslation();\n  const { saveSetting } = useSaveSetting();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(\n      LanguageTranslationMap[lng as keyof typeof LanguageTranslationMap],\n    );\n    saveSetting({ language: lng });\n  };\n\n  return changeLanguage;\n};\n\nexport const useGetPaginationWithRouter = () => {\n  const { t } = useTranslate('common');\n  const {\n    setPaginationParams,\n    page,\n    size: pageSize,\n  } = useSetPaginationParams();\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPaginationParams(pageNumber, pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const setCurrentPagination = useCallback(\n    (pagination: { page: number; pageSize?: number }) => {\n      setPaginationParams(pagination.page, pagination.pageSize);\n    },\n    [setPaginationParams],\n  );\n\n  const pagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: page,\n      pageSize: pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, page, pageSize]);\n\n  return {\n    pagination,\n    setPagination: setCurrentPagination,\n  };\n};\n\nexport const useGetPagination = () => {\n  const [pagination, setPagination] = useState({ page: 1, pageSize: 10 });\n  const { t } = useTranslate('common');\n\n  const onPageChange: PaginationProps['onChange'] = useCallback(\n    (pageNumber: number, pageSize: number) => {\n      setPagination({ page: pageNumber, pageSize });\n    },\n    [],\n  );\n\n  const currentPagination: PaginationProps = useMemo(() => {\n    return {\n      showQuickJumper: true,\n      total: 0,\n      showSizeChanger: true,\n      current: pagination.page,\n      pageSize: pagination.pageSize,\n      pageSizeOptions: [1, 2, 10, 20, 50, 100],\n      onChange: onPageChange,\n      showTotal: (total) => `${t('total')} ${total}`,\n    };\n  }, [t, onPageChange, pagination]);\n\n  return {\n    pagination: currentPagination,\n  };\n};\n\nexport interface AppConf {\n  appName: string;\n}\n\nexport const useFetchAppConf = () => {\n  const [appConf, setAppConf] = useState<AppConf>({} as AppConf);\n  const fetchAppConf = useCallback(async () => {\n    const ret = await axios.get('/conf.json');\n\n    setAppConf(ret.data);\n  }, []);\n\n  useEffect(() => {\n    fetchAppConf();\n  }, [fetchAppConf]);\n\n  return appConf;\n};\n\nexport const useSendMessageWithSse = (\n  url: string = api.completeConversation,\n) => {\n  const [answer, setAnswer] = useState<IAnswer>({} as IAnswer);\n  const [done, setDone] = useState(true);\n  const timer = useRef<any>();\n  const sseRef = useRef<AbortController>();\n\n  const initializeSseRef = useCallback(() => {\n    sseRef.current = new AbortController();\n  }, []);\n\n  const resetAnswer = useCallback(() => {\n    if (timer.current) {\n      clearTimeout(timer.current);\n    }\n    timer.current = setTimeout(() => {\n      setAnswer({} as IAnswer);\n      clearTimeout(timer.current);\n    }, 1000);\n  }, []);\n\n  const send = useCallback(\n    async (\n      body: any,\n      controller?: AbortController,\n    ): Promise<{ response: Response; data: ResponseType } | undefined> => {\n      initializeSseRef();\n      try {\n        setDone(false);\n        const response = await fetch(url, {\n          method: 'POST',\n          headers: {\n            [Authorization]: getAuthorization(),\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify(body),\n          signal: controller?.signal || sseRef.current?.signal,\n        });\n\n        const res = response.clone().json();\n\n        const reader = response?.body\n          ?.pipeThrough(new TextDecoderStream())\n          .pipeThrough(new EventSourceParserStream())\n          .getReader();\n\n        while (true) {\n          const x = await reader?.read();\n          if (x) {\n            const { done, value } = x;\n            if (done) {\n              console.info('done');\n              resetAnswer();\n              break;\n            }\n            try {\n              const val = JSON.parse(value?.data || '');\n              const d = val?.data;\n              if (typeof d !== 'boolean') {\n                console.info('data:', d);\n                setAnswer({\n                  ...d,\n                  conversationId: body?.conversation_id,\n                });\n              }\n            } catch (e) {\n              console.warn(e);\n            }\n          }\n        }\n        console.info('done?');\n        setDone(true);\n        resetAnswer();\n        return { data: await res, response };\n      } catch (e) {\n        setDone(true);\n        resetAnswer();\n\n        console.warn(e);\n      }\n    },\n    [initializeSseRef, url, resetAnswer],\n  );\n\n  const stopOutputMessage = useCallback(() => {\n    sseRef.current?.abort();\n  }, []);\n\n  return { send, answer, done, setDone, resetAnswer, stopOutputMessage };\n};\n\nexport const useSpeechWithSse = (url: string = api.tts) => {\n  const read = useCallback(\n    async (body: any) => {\n      const response = await fetch(url, {\n        method: 'POST',\n        headers: {\n          [Authorization]: getAuthorization(),\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(body),\n      });\n      try {\n        const res = await response.clone().json();\n        if (res?.code !== 0) {\n          message.error(res?.message);\n        }\n      } catch (error) {\n        console.warn('🚀 ~ error:', error);\n      }\n      return response;\n    },\n    [url],\n  );\n\n  return { read };\n};\n\n//#region chat hooks\n\nexport const useScrollToBottom = (messages?: unknown) => {\n  const ref = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = useCallback(() => {\n    if (messages) {\n      ref.current?.scrollIntoView({ behavior: 'instant' });\n    }\n  }, [messages]); // If the message changes, scroll to the bottom\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [scrollToBottom]);\n\n  return ref;\n};\n\nexport const useHandleMessageInputChange = () => {\n  const [value, setValue] = useState('');\n\n  const handleInputChange: ChangeEventHandler<HTMLTextAreaElement> = (e) => {\n    const value = e.target.value;\n    const nextValue = value.replaceAll('\\\\n', '\\n').replaceAll('\\\\t', '\\t');\n    setValue(nextValue);\n  };\n\n  return {\n    handleInputChange,\n    value,\n    setValue,\n  };\n};\n\nexport const useSelectDerivedMessages = () => {\n  const [derivedMessages, setDerivedMessages] = useState<IMessage[]>([]);\n\n  const ref = useScrollToBottom(derivedMessages);\n\n  const addNewestQuestion = useCallback(\n    (message: Message, answer: string = '') => {\n      setDerivedMessages((pre) => {\n        return [\n          ...pre,\n          {\n            ...message,\n            id: buildMessageUuid(message), // The message id is generated on the front end,\n            // and the message id returned by the back end is the same as the question id,\n            //  so that the pair of messages can be deleted together when deleting the message\n          },\n          {\n            role: MessageType.Assistant,\n            content: answer,\n            id: buildMessageUuid({ ...message, role: MessageType.Assistant }),\n          },\n        ];\n      });\n    },\n    [],\n  );\n\n  const addNewestOneQuestion = useCallback((message: Message) => {\n    setDerivedMessages((pre) => {\n      return [\n        ...pre,\n        {\n          ...message,\n          id: buildMessageUuid(message), // The message id is generated on the front end,\n          // and the message id returned by the back end is the same as the question id,\n          //  so that the pair of messages can be deleted together when deleting the message\n        },\n      ];\n    });\n  }, []);\n\n  // Add the streaming message to the last item in the message list\n  const addNewestAnswer = useCallback((answer: IAnswer) => {\n    setDerivedMessages((pre) => {\n      return [\n        ...(pre?.slice(0, -1) ?? []),\n        {\n          role: MessageType.Assistant,\n          content: answer.answer,\n          reference: answer.reference,\n          id: buildMessageUuid({\n            id: answer.id,\n            role: MessageType.Assistant,\n          }),\n          prompt: answer.prompt,\n          audio_binary: answer.audio_binary,\n          ...omit(answer, 'reference'),\n        },\n      ];\n    });\n  }, []);\n\n  // Add the streaming message to the last item in the message list\n  const addNewestOneAnswer = useCallback((answer: IAnswer) => {\n    setDerivedMessages((pre) => {\n      const idx = pre.findIndex((x) => x.id === answer.id);\n\n      if (idx !== -1) {\n        return pre.map((x) => {\n          if (x.id === answer.id) {\n            return { ...x, content: answer.answer };\n          }\n          return x;\n        });\n      }\n\n      return [\n        ...(pre ?? []),\n        {\n          role: MessageType.Assistant,\n          content: answer.answer,\n          reference: answer.reference,\n          id: buildMessageUuid({\n            id: answer.id,\n            role: MessageType.Assistant,\n          }),\n          prompt: answer.prompt,\n          audio_binary: answer.audio_binary,\n          ...omit(answer, 'reference'),\n        },\n      ];\n    });\n  }, []);\n\n  const removeLatestMessage = useCallback(() => {\n    setDerivedMessages((pre) => {\n      const nextMessages = pre?.slice(0, -2) ?? [];\n      return nextMessages;\n    });\n  }, []);\n\n  const removeMessageById = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const nextMessages = pre?.filter((x) => x.id !== messageId) ?? [];\n        return nextMessages;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setDerivedMessages((pre) => {\n        const index = pre.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return nextMessages;\n        }\n        return pre;\n      });\n    },\n    [setDerivedMessages],\n  );\n\n  return {\n    ref,\n    derivedMessages,\n    setDerivedMessages,\n    addNewestQuestion,\n    addNewestAnswer,\n    removeLatestMessage,\n    removeMessageById,\n    addNewestOneQuestion,\n    addNewestOneAnswer,\n    removeMessagesAfterCurrentMessage,\n  };\n};\n\nexport interface IRemoveMessageById {\n  removeMessageById(messageId: string): void;\n}\n\nexport const useRemoveMessagesAfterCurrentMessage = (\n  setCurrentConversation: (\n    callback: (state: IClientConversation) => IClientConversation,\n  ) => void,\n) => {\n  const removeMessagesAfterCurrentMessage = useCallback(\n    (messageId: string) => {\n      setCurrentConversation((pre) => {\n        const index = pre.message?.findIndex((x) => x.id === messageId);\n        if (index !== -1) {\n          let nextMessages = pre.message?.slice(0, index + 2) ?? [];\n          const latestMessage = nextMessages.at(-1);\n          nextMessages = latestMessage\n            ? [\n                ...nextMessages.slice(0, -1),\n                {\n                  ...latestMessage,\n                  content: '',\n                  reference: undefined,\n                  prompt: undefined,\n                },\n              ]\n            : nextMessages;\n          return {\n            ...pre,\n            message: nextMessages,\n          };\n        }\n        return pre;\n      });\n    },\n    [setCurrentConversation],\n  );\n\n  return { removeMessagesAfterCurrentMessage };\n};\n\nexport interface IRegenerateMessage {\n  regenerateMessage?: (message: Message) => void;\n}\n\nexport const useRegenerateMessage = ({\n  removeMessagesAfterCurrentMessage,\n  sendMessage,\n  messages,\n}: {\n  removeMessagesAfterCurrentMessage(messageId: string): void;\n  sendMessage({\n    message,\n  }: {\n    message: Message;\n    messages?: Message[];\n  }): void | Promise<any>;\n  messages: Message[];\n}) => {\n  const regenerateMessage = useCallback(\n    async (message: Message) => {\n      if (message.id) {\n        removeMessagesAfterCurrentMessage(message.id);\n        const index = messages.findIndex((x) => x.id === message.id);\n        let nextMessages;\n        if (index !== -1) {\n          nextMessages = messages.slice(0, index);\n        }\n        sendMessage({\n          message: { ...message, id: uuid() },\n          messages: nextMessages,\n        });\n      }\n    },\n    [removeMessagesAfterCurrentMessage, sendMessage, messages],\n  );\n\n  return { regenerateMessage };\n};\n\n// #endregion\n\n/**\n *\n * @param defaultId\n * used to switch between different items, similar to radio\n * @returns\n */\nexport const useSelectItem = (defaultId?: string) => {\n  const [selectedId, setSelectedId] = useState('');\n\n  const handleItemClick = useCallback(\n    (id: string) => () => {\n      setSelectedId(id);\n    },\n    [],\n  );\n\n  useEffect(() => {\n    if (defaultId) {\n      setSelectedId(defaultId);\n    }\n  }, [defaultId]);\n\n  return { selectedId, handleItemClick };\n};\n\nexport const useFetchModelId = () => {\n  const { data: tenantInfo } = useFetchTenantInfo(true);\n\n  return tenantInfo?.llm_id ?? '';\n};\n\nconst ChunkTokenNumMap = {\n  naive: 128,\n  knowledge_graph: 8192,\n};\n\nexport const useHandleChunkMethodSelectChange = (form: FormInstance) => {\n  // const form = Form.useFormInstance();\n  const handleChange = useCallback(\n    (value: string) => {\n      if (value in ChunkTokenNumMap) {\n        form.setFieldValue(\n          ['parser_config', 'chunk_token_num'],\n          ChunkTokenNumMap[value as keyof typeof ChunkTokenNumMap],\n        );\n      }\n    },\n    [form],\n  );\n\n  return handleChange;\n};\n\n// reset form fields when modal is form, closed\nexport const useResetFormOnCloseModal = ({\n  form,\n  visible,\n}: {\n  form: FormInstance;\n  visible?: boolean;\n}) => {\n  const prevOpenRef = useRef<boolean>();\n  useEffect(() => {\n    prevOpenRef.current = visible;\n  }, [visible]);\n  const prevOpen = prevOpenRef.current;\n\n  useEffect(() => {\n    if (!visible && prevOpen) {\n      form.resetFields();\n    }\n  }, [form, prevOpen, visible]);\n};\n","import {\n  KnowledgeRouteKey,\n  KnowledgeSearchParams,\n} from '@/constants/knowledge';\nimport { useCallback } from 'react';\nimport { useLocation, useNavigate, useSearchParams } from 'umi';\n\nexport enum SegmentIndex {\n  Second = '2',\n  Third = '3',\n}\n\nexport const useSegmentedPathName = (index: SegmentIndex) => {\n  const { pathname } = useLocation();\n\n  const pathArray = pathname.split('/');\n  return pathArray[index] || '';\n};\n\nexport const useSecondPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Second);\n};\n\nexport const useThirdPathName = () => {\n  return useSegmentedPathName(SegmentIndex.Third);\n};\n\nexport const useGetKnowledgeSearchParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    documentId:\n      currentQueryParameters.get(KnowledgeSearchParams.DocumentId) || '',\n    knowledgeId:\n      currentQueryParameters.get(KnowledgeSearchParams.KnowledgeId) || '',\n  };\n};\n\nexport const useNavigateWithFromState = () => {\n  const navigate = useNavigate();\n  return useCallback(\n    (path: string) => {\n      navigate(path, { state: { from: path } });\n    },\n    [navigate],\n  );\n};\n\nexport const useNavigateToDataset = () => {\n  const navigate = useNavigate();\n  const { knowledgeId } = useGetKnowledgeSearchParams();\n\n  return useCallback(() => {\n    navigate(`/knowledge/${KnowledgeRouteKey.Dataset}?id=${knowledgeId}`);\n  }, [knowledgeId, navigate]);\n};\n\nexport const useGetPaginationParams = () => {\n  const [currentQueryParameters] = useSearchParams();\n\n  return {\n    page: currentQueryParameters.get('page') || 1,\n    size: currentQueryParameters.get('size') || 10,\n  };\n};\n\nexport const useSetPaginationParams = () => {\n  const [queryParameters, setSearchParams] = useSearchParams();\n  // const newQueryParameters: URLSearchParams = useMemo(\n  //   () => new URLSearchParams(queryParameters.toString()),\n  //   [queryParameters],\n  // );\n\n  const setPaginationParams = useCallback(\n    (page: number = 1, pageSize?: number) => {\n      queryParameters.set('page', page.toString());\n      if (pageSize) {\n        queryParameters.set('size', pageSize.toString());\n      }\n      setSearchParams(queryParameters);\n    },\n    [setSearchParams, queryParameters],\n  );\n\n  return {\n    setPaginationParams,\n    page: Number(queryParameters.get('page')) || 1,\n    size: Number(queryParameters.get('size')) || 10,\n  };\n};\n","import {\n  ChatVariableEnabledField,\n  EmptyConversationId,\n} from '@/constants/chat';\nimport { Message } from '@/interfaces/database/chat';\nimport { IMessage } from '@/pages/chat/interface';\nimport { omit } from 'lodash';\nimport { v4 as uuid } from 'uuid';\n\nexport const isConversationIdExist = (conversationId: string) => {\n  return conversationId !== EmptyConversationId && conversationId !== '';\n};\n\nexport const buildMessageUuid = (message: Partial<Message | IMessage>) => {\n  if ('id' in message && message.id) {\n    return message.id;\n  }\n  return uuid();\n};\n\nexport const buildMessageListWithUuid = (messages?: Message[]) => {\n  return (\n    messages?.map((x: Message | IMessage) => ({\n      ...omit(x, 'reference'),\n      id: buildMessageUuid(x),\n    })) ?? []\n  );\n};\n\nexport const getConversationId = () => {\n  return uuid().replace(/-/g, '');\n};\n\n// When rendering each message, add a prefix to the id to ensure uniqueness.\nexport const buildMessageUuidWithRole = (\n  message: Partial<Message | IMessage>,\n) => {\n  return `${message.role}_${message.id}`;\n};\n\n// Preprocess LaTeX equations to be rendered by KaTeX\n// ref: https://github.com/remarkjs/react-markdown/issues/785\n\nexport const preprocessLaTeX = (content: string) => {\n  const blockProcessedContent = content.replace(\n    /\\\\\\[([\\s\\S]*?)\\\\\\]/g,\n    (_, equation) => `$$${equation}$$`,\n  );\n  const inlineProcessedContent = blockProcessedContent.replace(\n    /\\\\\\(([\\s\\S]*?)\\\\\\)/g,\n    (_, equation) => `$${equation}$`,\n  );\n  return inlineProcessedContent;\n};\n\nexport function replaceThinkToSection(text: string = '') {\n  const pattern = /<think>([\\s\\S]*?)<\\/think>/g;\n\n  const result = text.replace(pattern, '<section class=\"think\">$1</section>');\n\n  return result;\n}\n\nexport function setInitialChatVariableEnabledFieldValue(\n  field: ChatVariableEnabledField,\n) {\n  return false;\n  return field !== ChatVariableEnabledField.MaxTokensEnabled;\n}\n\nconst ShowImageFields = ['image', 'table'];\n\nexport function showImage(filed?: string) {\n  return ShowImageFields.some((x) => x === filed);\n}\n\nexport function setChatVariableEnabledFieldValuePage() {\n  const variableCheckBoxFieldMap = Object.values(\n    ChatVariableEnabledField,\n  ).reduce<Record<string, boolean>>((pre, cur) => {\n    pre[cur] = cur !== ChatVariableEnabledField.MaxTokensEnabled;\n    return pre;\n  }, {});\n\n  return variableCheckBoxFieldMap;\n}\n"],"names":["KnowledgeRouteKey","RunningStatus","ModelVariableType","settledModelVariableMap","_defineProperty","Improvise","temperature","top_p","frequency_penalty","presence_penalty","max_tokens","Precise","Balance","LlmModelType","KnowledgeSearchParams","DocumentType","DocumentParserType","useSetSelectedRecord","_useState","useState","_useState2","_slicedToArray","currentRecord","setCurrentRecord","setRecord","record","useHandleSearchChange","_useState3","_useState4","searchString","setSearchString","handleInputChange","useCallback","e","value","target","useChangeLanguage","i18n","useTranslation","saveSetting","useSaveSetting","lng","changeLanguage","LanguageTranslationMap","language","useGetPaginationWithRouter","t","useTranslate","_useSetPaginationPara","useSetPaginationParams","setPaginationParams","page","pageSize","size","onPageChange","pageNumber","setCurrentPagination","pagination","useMemo","showQuickJumper","total","showSizeChanger","current","pageSizeOptions","onChange","showTotal","concat","setPagination","useFetchAppConf","_useState7","_useState8","appConf","setAppConf","fetchAppConf","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ret","wrap","_context","prev","next","axios","get","sent","data","stop","useEffect","useSendMessageWithSse","url","arguments","length","undefined","api","completeConversation","_useState9","_useState10","answer","setAnswer","_useState11","_useState12","done","setDone","timer","useRef","sseRef","initializeSseRef","AbortController","resetAnswer","clearTimeout","setTimeout","send","_ref2","_callee2","body","controller","_sseRef$current","_response$body","response","res","reader","x","_done","val","d","_context2","fetch","method","headers","Authorization","getAuthorization","JSON","stringify","signal","clone","json","pipeThrough","TextDecoderStream","EventSourceParserStream","getReader","read","console","info","abrupt","parse","_objectSpread","conversationId","conversation_id","warn","t0","t1","t2","_x","_x2","apply","stopOutputMessage","_sseRef$current2","abort","useSpeechWithSse","tts","_ref3","_callee3","_context3","code","message","error","_x3","useHandleMessageInputChange","_useState13","_useState14","setValue","nextValue","replaceAll","useSelectDerivedMessages","_useState15","_useState16","derivedMessages","setDerivedMessages","ref","messages","scrollToBottom","_ref$current","scrollIntoView","behavior","useScrollToBottom","addNewestQuestion","pre","_toConsumableArray","id","buildMessageUuid","role","MessageType","Assistant","content","addNewestOneQuestion","addNewestAnswer","_pre$slice","slice","reference","prompt","audio_binary","omit","addNewestOneAnswer","findIndex","map","removeLatestMessage","_pre$slice2","removeMessageById","messageId","_pre$filter","filter","removeMessagesAfterCurrentMessage","index","_pre$slice3","nextMessages","latestMessage","at","useRegenerateMessage","_ref4","sendMessage","regenerateMessage","_ref5","_callee4","_context4","uuid","_x4","useSelectItem","defaultId","_useState17","_useState18","selectedId","setSelectedId","handleItemClick","useFetchModelId","_tenantInfo$llm_id","tenantInfo","useFetchTenantInfo","llm_id","ChunkTokenNumMap","naive","knowledge_graph","useHandleChunkMethodSelectChange","form","setFieldValue","useResetFormOnCloseModal","_ref6","visible","prevOpenRef","prevOpen","resetFields","SegmentIndex","useSegmentedPathName","useLocation","pathname","split","useSecondPathName","Second","useThirdPathName","Third","useGetKnowledgeSearchParams","_useSearchParams","useSearchParams","currentQueryParameters","documentId","DocumentId","knowledgeId","KnowledgeId","useNavigateWithFromState","navigate","useNavigate","path","state","from","useNavigateToDataset","Dataset","_useSearchParams5","_useSearchParams6","queryParameters","setSearchParams","set","toString","Number","isConversationIdExist","EmptyConversationId","buildMessageListWithUuid","_messages$map","getConversationId","replace","buildMessageUuidWithRole","preprocessLaTeX","_","equation","replaceThinkToSection","setInitialChatVariableEnabledFieldValue","field","ShowImageFields","showImage","filed","some","setChatVariableEnabledFieldValuePage","Object","values","ChatVariableEnabledField","reduce","cur","MaxTokensEnabled"],"sourceRoot":""}